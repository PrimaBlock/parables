var searchIndex = {};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"generics":["dense"],"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dense"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sparse"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"Prefix","ansi_term","Like `ANSIString`, but only displays the style prefix.",null,null],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",null,null],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",null,null],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",null,null],[12,"foreground","","The style's foreground colour, if it has one.",0,null],[12,"background","","The style's background colour, if it has one.",0,null],[12,"is_bold","","Whether this style is bold.",0,null],[12,"is_dimmed","","Whether this style is dimmed.",0,null],[12,"is_italic","","Whether this style is italic.",0,null],[12,"is_underline","","Whether this style is underlined.",0,null],[12,"is_blink","","Whether this style is blinking.",0,null],[12,"is_reverse","","Whether this style has reverse colours.",0,null],[12,"is_hidden","","Whether this style is hidden.",0,null],[12,"is_strikethrough","","Whether this style is struckthrough.",0,null],[3,"ANSIGenericString","","An ANSIGenericString includes a generic string type and a Style to display that string.  ANSIString and ANSIByteString are aliases for this type on str and [u8], respectively.",null,null],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",null,null],[12,"0","","",1,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,null],[4,"Color","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,null],[5,"ANSIStrings","","A function to construct an ANSIStrings instance.",null,null],[5,"ANSIByteStrings","","A function to construct an ANSIByteStrings instance.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"infix"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"prefix","","The prefix for this style.",0,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"infix","","The infix between this style and another.",0,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"infix"}}],[11,"suffix","","The suffix for this style.",0,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"prefix","","The prefix for this colour.",2,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"infix","","The infix between this colour and another.",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"infix"}}],[11,"suffix","","The suffix for this colour.",2,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Creates a new Style with no differences.",0,{"inputs":[],"output":{"name":"style"}}],[11,"bold","","Returns a Style with the bold property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a Style with the hidden property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fg","","Returns a Style with the foreground colour property set.",0,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",0,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"is_plain","","Return true if this `Style` has no actual styles, and can be written without any control characters.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","Returns a style with no properties set. Formatting text using this style returns the exact same text.",0,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"colour"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"normal","","Return a Style with the foreground colour set to this colour.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"bold","","Returns a Style with the bold property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a Style with the strikethrough property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"from","","You can turn a `Colour` into a `Style` with the foreground colour set with the `From` trait.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ansigenericstring"}}],[11,"from","","",6,{"inputs":[{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don’t have to use `Blue.normal()` just to get blue text.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"ANSIString","","An ANSI String is a string coupled with the Style to display it in a terminal.",null,null],[6,"ANSIByteString","","An ANSIByteString represents a formatted series of bytes.  Use ANSIByteString when styling text with an unknown encoding.",null,null],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",null,null],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write an ANSIByteString to an io::Write.  This writes the escape sequences for the associated Style around the bytes.",8,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write ANSIByteStrings to an io::Write.  This writes the minimal escape sequences for the associated Styles around each set of bytes.",10,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[3,"Style"],[3,"ANSIGenericStrings"],[4,"Colour"],[3,"Prefix"],[3,"Infix"],[3,"Suffix"],[3,"ANSIGenericString"],[6,"ANSIString"],[6,"ANSIByteString"],[6,"ANSIStrings"],[6,"ANSIByteStrings"]]};
searchIndex["app_dirs"] = {"doc":"Put your app's data in the right place on every platform # Usage ``` extern crate app_dirs; use app_dirs::*;","items":[[3,"AppInfo","app_dirs","Struct that holds information about your app.",null,null],[12,"name","","Name of your app (e.g. \"Hearthstone\").",0,null],[12,"author","","Author of your app (e.g. \"Blizzard\").",0,null],[4,"AppDataType","","Enum specifying the type of app data you want to store.",null,null],[13,"UserConfig","","User-specific app configuration data.",1,null],[13,"UserData","","User-specific arbitrary app data.",1,null],[13,"UserCache","","User-specific app cache data.",1,null],[13,"SharedData","","System-wide arbitrary app data.",1,null],[13,"SharedConfig","","System-wide app configuration data.",1,null],[4,"AppDirsError","","Error type for any `app_dirs` operation.",null,null],[13,"Io","","An I/O error occurred during the operation.",2,null],[13,"NotSupported","","App-specific directories are not properly supported by the system (e.g. required environment variables don't exist).",2,null],[13,"InvalidAppInfo","","App info given to this library was invalid (e.g. app name or author were empty).",2,null],[5,"app_dir","","Creates (if necessary) and returns path to app-specific data subdirectory for provided data type and subdirectory path.",null,{"inputs":[{"name":"appdatatype"},{"name":"appinfo"},{"name":"str"}],"output":{"generics":["pathbuf","appdirserror"],"name":"result"}}],[5,"get_app_dir","","Returns (but does not create) path to app-specific data subdirectory for provided data type and subdirectory path.",null,{"inputs":[{"name":"appdatatype"},{"name":"appinfo"},{"name":"str"}],"output":{"generics":["pathbuf","appdirserror"],"name":"result"}}],[5,"app_root","","Creates (if necessary) and returns path to app-specific data directory for provided data type.",null,{"inputs":[{"name":"appdatatype"},{"name":"appinfo"}],"output":{"generics":["pathbuf","appdirserror"],"name":"result"}}],[5,"get_app_root","","Returns (but does not create) path to app-specific data directory for provided data type.",null,{"inputs":[{"name":"appdatatype"},{"name":"appinfo"}],"output":{"generics":["pathbuf","appdirserror"],"name":"result"}}],[5,"data_root","","Creates (if necessary) and returns path to top-level data directory for provided data type.",null,{"inputs":[{"name":"appdatatype"}],"output":{"generics":["pathbuf","appdirserror"],"name":"result"}}],[5,"get_data_root","","Returns (but does not create) path to top-level data directory for provided data type.",null,{"inputs":[{"name":"appdatatype"}],"output":{"generics":["pathbuf","appdirserror"],"name":"result"}}],[5,"sanitized","","Returns a cross-platform-filename-safe version of any string.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"appinfo"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"appinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"appinfo"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"appdatatype"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"appdatatype"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_shared","","Returns `true` for non-user-specific data types.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}]],"paths":[[3,"AppInfo"],[4,"AppDataType"],[4,"AppDirsError"]]};
searchIndex["arrayvec"] = {"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[11,"default","","Return an empty `ArrayString`",0,{"inputs":[],"output":{"name":"arraystring"}}],[11,"new","","Create a new empty `ArrayString`.",0,{"inputs":[],"output":{"name":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",0,{"inputs":[{"name":"str"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,{"inputs":[{"name":"a"}],"output":{"generics":["utf8error"],"name":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Adds the given char to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"try_push","","Adds the given char to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"pop","","Removes the last character from the string and returns it.",0,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"clear","","Make the string empty.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","Set the strings’s length.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_char","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_str","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"arraystring"}}],[11,"clone_from","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"new","","Create a new `CapacityError` from `element`.",1,{"inputs":[{"name":"t"}],"output":{"name":"capacityerror"}}],[11,"element","","Extract the overflowing element",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array’s element type",2,null],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"end","","End index (exclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new empty `ArrayVec`.",4,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push `element` to the end of the vector.",4,null],[11,"try_push","","Push `element` to the end of the vector.",4,null],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,null],[11,"insert","","Insert `element` at position `index`.",4,null],[11,"try_insert","","Insert `element` at position `index`.",4,null],[11,"pop","","Remove the last element in the vector and return it.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,null],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,null],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Remove all elements in the vector.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"as_slice","","Return a slice containing all elements of the vector.",4,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"from","","",4,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Return an empty array",4,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"ordering"}}],[11,"write","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start","","Start index (inclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"end","","End index (exclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["atty"] = {"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[13,"Stdin","","",0,null],[5,"is","","returns true if this is a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[5,"isnt","","returns true if this is not a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Stream"]]};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",null,null],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",null,null],[11,"ip","","Returns the current instruction pointer of this frame.",0,null],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Returns the name of this function.",1,{"inputs":[{"name":"self"}],"output":{"generics":["symbolname"],"name":"option"}}],[11,"addr","","Returns the starting address of this function.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Returns the file name where this function was defined.",1,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,null],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"backtraceframe"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"backtracesymbol"}}],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",3,null],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",3,{"inputs":[{"generics":["backtraceframe"],"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["backtraceframe"],"name":"vec"}}],[11,"ip","","Same as `Frame::ip`",4,null],[11,"symbol_address","","Same as `Frame::symbol_address`",4,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,null],[11,"name","","Same as `Symbol::name`",5,{"inputs":[{"name":"self"}],"output":{"generics":["symbolname"],"name":"option"}}],[11,"addr","","Same as `Symbol::addr`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Same as `Symbol::filename`",5,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"lineno","","Same as `Symbol::lineno`",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"backtrace"}}]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["bit_set"] = {"doc":"An implementation of a set using a bit vector as an underlying representation for holding unsigned numerical elements.","items":[[3,"BitSet","bit_set","",null,null],[3,"Iter","","An iterator for `BitSet`.",null,null],[3,"Union","","",null,null],[3,"Intersection","","",null,null],[3,"Difference","","",null,null],[3,"SymmetricDifference","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty `BitSet`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to hold `nbits` elements without resizing.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",0,{"inputs":[{"name":"bitvec"}],"output":{"name":"self"}}],[11,"from_bytes","","",0,null],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any element less than this amount will not trigger a resizing.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case of `BitSet` this means reallocations will not occur as long as all inserted elements are less than `len`.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements. In the case of `BitSet` this means reallocations will not occur as long as all inserted elements are less than `len`.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",0,{"inputs":[{"name":"self"}],"output":{"name":"bitvec"}}],[11,"get_ref","","Returns a reference to the underlying bit vector.",0,{"inputs":[{"name":"self"}],"output":{"name":"bitvec"}}],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Iterator over each usize stored in the `BitSet`.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"union","","Iterator over each usize stored in `self` union `other`. See union_with for an efficient in-place version.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"union"}}],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`. See intersect_with for an efficient in-place version.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"intersection"}}],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`. See difference_with for an efficient in-place version.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric difference of `self` and `other`. See symmetric_difference_with for an efficient in-place version.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"union_with","","Unions in-place with the specified other bit vector.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector in-place.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other bit vector in-place.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"len","","Returns the number of set bits in this set.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether there are no bits set in this set",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this set",0,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if this set contains the specified integer.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`. This is equivalent to checking for an empty intersection.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already present in the set.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",2,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",5,null]],"paths":[[3,"BitSet"],[3,"Iter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"]]};
searchIndex["bit_vec"] = {"doc":"Collections implemented with bit vectors.","items":[[3,"BitVec","bit_vec","The bitvector type.",null,null],[3,"Iter","","An iterator for `BitVec`.",null,null],[3,"IntoIter","","",null,null],[3,"Blocks","","An iterator over the blocks of a `BitVec`.",null,null],[8,"BitBlock","","Abstracts over a pile of bits (basically unsigned primitives)",null,null],[10,"bits","","How many bits it has",0,{"inputs":[],"output":{"name":"usize"}}],[11,"bytes","","How many bytes it has",0,{"inputs":[],"output":{"name":"usize"}}],[10,"from_byte","","Convert a byte into this type (lowest-order bits set)",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[10,"count_ones","","Count the number of 1's in the bitwise repr",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"zero","","Get `0`",0,{"inputs":[],"output":{"name":"self"}}],[10,"one","","Get `1`",0,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BitVec`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element to `bit`.",1,{"inputs":[{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits, with the most significant bits of each byte coming first. Each bit becomes `true` if equal to 1 or `false` if equal to 0.",1,null],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index is `f(index)`.",1,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"blocks","","Iterator over the underlying blocks of data",1,{"inputs":[{"name":"self"}],"output":{"name":"blocks"}}],[11,"storage","","Exposes the raw block storage of this BitVec",1,null],[11,"storage_mut","","Exposes the raw block storage of this BitVec",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bool"],"name":"option"}}],[11,"set","","Sets the value of a bit at an index `i`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"set_all","","Sets all bits to 1.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Flips all bits.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or` function.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the bitwise `and` function.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"difference","","Calculates the difference between two bitvectors.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"all","","Returns `true` if all bits are 1.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the elements of the vector in order.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"none","","Returns `true` if all bits are 0.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any","","Returns `true` if any bit is 1.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the `BitVec` becomes the high-order bit of the first byte. If the size of the `BitVec` is not a multiple of eight then trailing bits will be filled-in with `false`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s. Both the `BitVec` and slice must have the same length.",1,null],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given `BitVec`. The collection may reserve more space to avoid frequent reallocations.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the given `BitVec`. Does nothing if the capacity is already sufficient.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any element less than this amount will not trigger a resizing.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"push","","Pushes a `bool` onto the end.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"len","","Returns the total number of bits in this vector",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_len","","Sets the number of bits that this BitVec considers initialized.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"is_empty","","Returns true if there are no bits in this vector",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this vector.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the underlying storage as much as possible.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"into_iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"blocks"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"BitBlock"],[3,"BitVec"],[3,"Iter"],[3,"IntoIter"],[3,"Blocks"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[]};
searchIndex["blooms_db"] = {"doc":"Ethereum blooms database","items":[[3,"Database","blooms_db","Threadsafe API for blooms database.",null,null],[11,"open","","Creates new database handle.",0,{"inputs":[{"name":"p"}],"output":{"generics":["database"],"name":"result"}}],[11,"reopen","","Reopens database at the same location.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"insert_blooms","","Inserts one or more blooms into database.",0,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"i"}],"output":{"name":"result"}}],[11,"filter","","Returns indexes of all headers matching given bloom in a specified range.",0,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"},{"name":"ii"}],"output":{"generics":["vec"],"name":"result"}}]],"paths":[[3,"Database"]]};
searchIndex["bn"] = {"doc":"","items":[[3,"Fr","bn","",null,null],[3,"Fq","","",null,null],[3,"Fq2","","",null,null],[3,"G1","","",null,null],[3,"AffineG1","","",null,null],[3,"G2","","",null,null],[3,"Gt","","",null,null],[3,"AffineG2","","",null,null],[4,"FieldError","","",null,null],[13,"InvalidSliceLength","","",0,null],[13,"NotMember","","",0,null],[4,"GroupError","","",null,null],[13,"NotOnCurve","","",1,null],[13,"NotInSubgroup","","",1,null],[5,"pairing","","",null,{"inputs":[{"name":"g1"},{"name":"g2"}],"output":{"name":"gt"}}],[0,"arith","","",null,null],[3,"U256","bn::arith","256-bit, stack allocated biginteger for use in prime field arithmetic.",null,null],[12,"0","","",2,null],[3,"U512","","512-bit, stack allocated biginteger for use in extension field serialization and scalar interpretation.",null,null],[12,"0","","",3,null],[3,"BitIterator","","",null,null],[4,"Error","","U256/U512 errors",null,null],[13,"InvalidLength","","",4,null],[12,"expected","bn::arith::Error","",4,null],[12,"actual","","",4,null],[11,"clone","bn::arith","",2,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u512"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"bool"}}],[11,"from","","Multiplies c1 by modulo, adds c0.",3,{"inputs":[{"name":"u256"},{"name":"u256"},{"name":"u256"}],"output":{"name":"u512"}}],[11,"random","","Get a random U512",3,{"inputs":[{"name":"r"}],"output":{"name":"u512"}}],[11,"get_bit","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bool"],"name":"option"}}],[11,"divrem","","Divides self by modulo, returning remainder and, if possible, a quotient smaller than the modulus.",3,null],[11,"interpret","","",3,null],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","Initialize U256 from slice of bytes (big endian)",2,null],[11,"to_big_endian","","",2,null],[11,"zero","","",2,{"inputs":[],"output":{"name":"u256"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"u256"}}],[11,"random","","Produce a random number (mod `modulo`)",2,{"inputs":[{"name":"r"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_bit","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"get_bit","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bool"],"name":"option"}}],[11,"add","","Add `other` to `self` (mod `modulo`)",2,{"inputs":[{"name":"self"},{"name":"u256"},{"name":"u256"}],"output":null}],[11,"sub","","Subtract `other` from `self` (mod `modulo`)",2,{"inputs":[{"name":"self"},{"name":"u256"},{"name":"u256"}],"output":null}],[11,"mul","","Multiply `self` by `other` (mod `modulo`) via the Montgomery multiplication method.",2,{"inputs":[{"name":"self"},{"name":"u256"},{"name":"u256"},{"name":"u64"}],"output":null}],[11,"neg","","Turn `self` into its additive inverse (mod `modulo`)",2,{"inputs":[{"name":"self"},{"name":"u256"}],"output":null}],[11,"is_even","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"invert","","Turn `self` into its multiplicative inverse (mod `modulo`)",2,{"inputs":[{"name":"self"},{"name":"u256"}],"output":null}],[11,"bits","","Return an Iterator<Item=bool> over all bits from MSB to LSB.",2,{"inputs":[{"name":"self"}],"output":{"name":"bititerator"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"fmt","bn","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Group","","",null,null],[10,"zero","","",6,{"inputs":[],"output":{"name":"self"}}],[10,"one","","",6,{"inputs":[],"output":{"name":"self"}}],[10,"random","","",6,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[10,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"normalize","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fr"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"fr"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"fr"}],"output":{"name":"bool"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"one","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"random","","",7,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"pow","","",7,{"inputs":[{"name":"self"},{"name":"fr"}],"output":{"name":"self"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"inverse","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_zero","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"interpret","","",7,null],[11,"from_slice","","",7,null],[11,"to_big_endian","","",7,null],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"fr"}],"output":{"name":"fr"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"fr"}],"output":{"name":"fr"}}],[11,"neg","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fr"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"fr"}],"output":{"name":"fr"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"fq"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"fq"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"fq"}],"output":{"name":"bool"}}],[11,"zero","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"one","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"random","","",8,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"pow","","",8,{"inputs":[{"name":"self"},{"name":"fq"}],"output":{"name":"self"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"inverse","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_zero","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"interpret","","",8,null],[11,"from_slice","","",8,null],[11,"to_big_endian","","",8,null],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"fq"}],"output":{"name":"fq"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"fq"}],"output":{"name":"fq"}}],[11,"neg","","",8,{"inputs":[{"name":"self"}],"output":{"name":"fq"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"fq"}],"output":{"name":"fq"}}],[11,"one","","",9,{"inputs":[],"output":{"name":"fq2"}}],[11,"zero","","",9,{"inputs":[],"output":{"name":"fq2"}}],[11,"new","","Initalizes new F_q2(a + bi, a is real coeff, b is imaginary)",9,{"inputs":[{"name":"fq"},{"name":"fq"}],"output":{"name":"fq2"}}],[11,"is_zero","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"g1"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"g1"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"g1"}],"output":{"name":"bool"}}],[11,"new","","",10,{"inputs":[{"name":"fq"},{"name":"fq"},{"name":"fq"}],"output":{"name":"self"}}],[11,"x","","",10,{"inputs":[{"name":"self"}],"output":{"name":"fq"}}],[11,"set_x","","",10,{"inputs":[{"name":"self"},{"name":"fq"}],"output":null}],[11,"y","","",10,{"inputs":[{"name":"self"}],"output":{"name":"fq"}}],[11,"set_y","","",10,{"inputs":[{"name":"self"},{"name":"fq"}],"output":null}],[11,"z","","",10,{"inputs":[{"name":"self"}],"output":{"name":"fq"}}],[11,"set_z","","",10,{"inputs":[{"name":"self"},{"name":"fq"}],"output":null}],[11,"zero","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"one","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"random","","",10,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"is_zero","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"normalize","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"add","","",10,{"inputs":[{"name":"self"},{"name":"g1"}],"output":{"name":"g1"}}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"g1"}],"output":{"name":"g1"}}],[11,"neg","","",10,{"inputs":[{"name":"self"}],"output":{"name":"g1"}}],[11,"mul","","",10,{"inputs":[{"name":"self"},{"name":"fr"}],"output":{"name":"g1"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"affineg1"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"affineg1"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"affineg1"}],"output":{"name":"bool"}}],[11,"new","","",11,{"inputs":[{"name":"fq"},{"name":"fq"}],"output":{"generics":["grouperror"],"name":"result"}}],[11,"x","","",11,{"inputs":[{"name":"self"}],"output":{"name":"fq"}}],[11,"set_x","","",11,{"inputs":[{"name":"self"},{"name":"fq"}],"output":null}],[11,"y","","",11,{"inputs":[{"name":"self"}],"output":{"name":"fq"}}],[11,"set_y","","",11,{"inputs":[{"name":"self"},{"name":"fq"}],"output":null}],[11,"from_jacobian","","",11,{"inputs":[{"name":"g1"}],"output":{"name":"option"}}],[11,"from","","",10,{"inputs":[{"name":"affineg1"}],"output":{"name":"self"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"g2"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"g2"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"g2"}],"output":{"name":"bool"}}],[11,"new","","",12,{"inputs":[{"name":"fq2"},{"name":"fq2"},{"name":"fq2"}],"output":{"name":"self"}}],[11,"x","","",12,{"inputs":[{"name":"self"}],"output":{"name":"fq2"}}],[11,"set_x","","",12,{"inputs":[{"name":"self"},{"name":"fq2"}],"output":null}],[11,"y","","",12,{"inputs":[{"name":"self"}],"output":{"name":"fq2"}}],[11,"set_y","","",12,{"inputs":[{"name":"self"},{"name":"fq2"}],"output":null}],[11,"z","","",12,{"inputs":[{"name":"self"}],"output":{"name":"fq2"}}],[11,"set_z","","",12,{"inputs":[{"name":"self"},{"name":"fq2"}],"output":null}],[11,"zero","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"one","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"random","","",12,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"is_zero","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"normalize","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"add","","",12,{"inputs":[{"name":"self"},{"name":"g2"}],"output":{"name":"g2"}}],[11,"sub","","",12,{"inputs":[{"name":"self"},{"name":"g2"}],"output":{"name":"g2"}}],[11,"neg","","",12,{"inputs":[{"name":"self"}],"output":{"name":"g2"}}],[11,"mul","","",12,{"inputs":[{"name":"self"},{"name":"fr"}],"output":{"name":"g2"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"gt"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"gt"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"gt"}],"output":{"name":"bool"}}],[11,"one","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"pow","","",13,{"inputs":[{"name":"self"},{"name":"fr"}],"output":{"name":"self"}}],[11,"inverse","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",13,{"inputs":[{"name":"self"},{"name":"gt"}],"output":{"name":"gt"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"affineg2"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"affineg2"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"affineg2"}],"output":{"name":"bool"}}],[11,"new","","",14,{"inputs":[{"name":"fq2"},{"name":"fq2"}],"output":{"generics":["grouperror"],"name":"result"}}],[11,"x","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fq2"}}],[11,"set_x","","",14,{"inputs":[{"name":"self"},{"name":"fq2"}],"output":null}],[11,"y","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fq2"}}],[11,"set_y","","",14,{"inputs":[{"name":"self"},{"name":"fq2"}],"output":null}],[11,"from_jacobian","","",14,{"inputs":[{"name":"g2"}],"output":{"name":"option"}}],[11,"from","","",12,{"inputs":[{"name":"affineg2"}],"output":{"name":"self"}}]],"paths":[[4,"FieldError"],[4,"GroupError"],[3,"U256"],[3,"U512"],[4,"Error"],[3,"BitIterator"],[8,"Group"],[3,"Fr"],[3,"Fq"],[3,"Fq2"],[3,"G1"],[3,"AffineG1"],[3,"G2"],[3,"Gt"],[3,"AffineG2"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for [`BigEndian`].",null,null],[6,"LE","","A type alias for [`LittleEndian`].",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["chrono"] = {"doc":"Chrono 0.4.0","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"Date","","ISO 8601 calendar date with time zone.",null,null],[3,"DateTime","","ISO 8601 combined date and time with time zone.",null,null],[3,"ParseWeekdayError","","An error resulting from reading `Weekday` value with `FromStr`.",null,null],[4,"SecondsFormat","","Specific formatting options for seconds. This may be extended in the future, so exhaustive matching in external code is not recommended.",null,null],[13,"Secs","","Format whole seconds only, with no decimal point nor subseconds.",0,null],[13,"Millis","","Use fixed 3 subsecond digits. This corresponds to Fixed::Nanosecond3.",0,null],[13,"Micros","","Use fixed 6 subsecond digits. This corresponds to Fixed::Nanosecond6.",0,null],[13,"Nanos","","Use fixed 9 subsecond digits. This corresponds to Fixed::Nanosecond9.",0,null],[13,"AutoSi","","Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to display all available non-zero sub-second digits.  This corresponds to Fixed::Nanosecond.",0,null],[4,"Weekday","","The day of week.",null,null],[13,"Mon","","Monday.",1,null],[13,"Tue","","Tuesday.",1,null],[13,"Wed","","Wednesday.",1,null],[13,"Thu","","Thursday.",1,null],[13,"Fri","","Friday.",1,null],[13,"Sat","","Saturday.",1,null],[13,"Sun","","Sunday.",1,null],[0,"prelude","","A convenience module appropriate for glob imports (`use chrono::prelude::*;`).",null,null],[0,"offset","","The time zone, which calculates offsets from the local time to UTC.",null,null],[3,"Utc","chrono::offset","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[3,"FixedOffset","","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[3,"Local","","The local timescale. This is implemented via the standard `time` crate.",null,null],[4,"LocalResult","","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",2,null],[13,"Single","","Given local time representation has a single unique result.",2,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"utc"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",3,{"inputs":[],"output":{"generics":["utc"],"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",3,{"inputs":[],"output":{"generics":["utc"],"name":"datetime"}}],[11,"from_offset","","",3,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",3,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["utc"],"name":"localresult"}}],[11,"offset_from_local_datetime","","",3,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["utc"],"name":"localresult"}}],[11,"offset_from_utc_date","","",3,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",3,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"fix","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",4,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",4,{"inputs":[{"name":"i32"}],"output":{"generics":["fixedoffset"],"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",4,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",4,{"inputs":[{"name":"i32"}],"output":{"generics":["fixedoffset"],"name":"option"}}],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC to the local time.",4,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the local time to UTC.",4,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_offset","","",4,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["fixedoffset"],"name":"localresult"}}],[11,"offset_from_local_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["fixedoffset"],"name":"localresult"}}],[11,"offset_from_utc_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"fix","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","chrono","",5,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"clone","chrono::offset","",6,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",6,{"inputs":[],"output":{"generics":["local"],"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",6,{"inputs":[],"output":{"generics":["local"],"name":"datetime"}}],[11,"from_offset","","",6,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["fixedoffset"],"name":"localresult"}}],[11,"offset_from_local_datetime","","",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["fixedoffset"],"name":"localresult"}}],[11,"offset_from_utc_date","","",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"from_local_date","","",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["date"],"name":"localresult"}}],[11,"from_local_datetime","","",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"from_utc_date","","",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["local"],"name":"date"}}],[11,"from_utc_datetime","","",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["local"],"name":"datetime"}}],[8,"Offset","","The offset from the local time to UTC.",null,null],[10,"fix","","Returns the fixed offset from UTC to the local time stored.",7,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",8,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["date"],"name":"localresult"}}],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"generics":["date"],"name":"localresult"}}],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",8,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"date"}}],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",8,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"generics":["date"],"name":"localresult"}}],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",8,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",8,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[10,"from_offset","","Reconstructs the time zone from the offset.",8,null],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",8,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["date"],"name":"localresult"}}],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",8,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["datetime"],"name":"localresult"}}],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",8,null],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",8,null],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",8,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",8,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"localresult"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"localresult"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",2,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",2,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",2,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",2,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",2,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"localresult"}}],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[3,"NaiveDate","chrono::naive","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",null,null],[3,"IsoWeek","","ISO 8601 week.",null,null],[3,"NaiveTime","","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",null,null],[3,"NaiveDateTime","","ISO 8601 combined date and time without timezone.",null,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",9,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",9,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",9,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",9,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",9,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",9,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",9,{"inputs":[{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",9,{"inputs":[{"name":"i32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",9,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["naivedate"],"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",9,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",9,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",9,{"inputs":[{"name":"self"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",9,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",9,{"inputs":[{"name":"self"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"checked_add_signed","","Adds the `days` part of given `Duration` to the current date.",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"checked_sub_signed","","Subtracts the `days` part of given `Duration` from the current date.",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDate` from the current date. Returns a `Duration` of integral numbers.",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",9,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",9,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",9,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",9,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedate"],"name":"option"}}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedate"}}],[11,"add_assign","","",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedate"}}],[11,"sub_assign","","",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"oldduration"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["naivedate"],"name":"parseresult"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"isoweek"}],"output":{"name":"ordering"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"year","","Returns the year number for this ISO week.",10,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"week","","Returns the ISO week number starting from 1.",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"week0","","Returns the ISO week number starting from 0.",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"ordering"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",11,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",11,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",11,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",11,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",11,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",11,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",11,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",11,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",11,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",11,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["naivetime"],"name":"parseresult"}}],[11,"overflowing_add_signed","","Adds given `Duration` to the current time, and also returns the number of seconds in the integral number of days ignored from the addition. (We cannot return `Duration` because it is subject to overflow or underflow.)",11,null],[11,"overflowing_sub_signed","","Subtracts given `Duration` from the current time, and also returns the number of seconds in the integral number of days ignored from the subtraction. (We cannot return `Duration` because it is subject to overflow or underflow.)",11,null],[11,"signed_duration_since","","Subtracts another `NaiveTime` from the current time. Returns a `Duration` within +/- 1 day. This does not overflow or underflow at all.",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",11,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"hour","","Returns the hour number from 0 to 23.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivetime"],"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivetime"}}],[11,"add_assign","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivetime"}}],[11,"sub_assign","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"oldduration"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"generics":["naivetime"],"name":"parseresult"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"ordering"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",12,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",12,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",12,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",12,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["naivedatetime"],"name":"parseresult"}}],[11,"date","","Retrieves a date component.",12,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"time","","Retrieves a time component.",12,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",12,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_millis","","Returns the number of non-leap milliseconds since midnight on January 1, 1970.",12,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_nanos","","Returns the number of non-leap nanoseconds since midnight on January 1, 1970.",12,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",12,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",12,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDateTime` from the current date and time. This does not overflow or underflow at all.",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",12,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",12,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",12,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"hour","","Returns the hour number from 0 to 23.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["naivedatetime"],"name":"option"}}],[11,"hash","","",12,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",12,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedatetime"}}],[11,"add_assign","","",12,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",12,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedatetime"}}],[11,"sub_assign","","",12,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":null}],[11,"sub","","",12,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"oldduration"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"generics":["naivedatetime"],"name":"parseresult"}}],[17,"MIN_DATE","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",null,null],[17,"MAX_DATE","","The maximum possible `NaiveDate` (December 31, 262143 CE).",null,null],[11,"clone","chrono","",13,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"from_utc","","Makes a new `Date` with given UTC date and offset. The local date should be constructed via the `TimeZone` trait.",13,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"succ","","Makes a new `Date` for the next date.",13,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"succ_opt","","Makes a new `Date` for the next date.",13,{"inputs":[{"name":"self"}],"output":{"generics":["date"],"name":"option"}}],[11,"pred","","Makes a new `Date` for the prior date.",13,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"pred_opt","","Makes a new `Date` for the prior date.",13,{"inputs":[{"name":"self"}],"output":{"generics":["date"],"name":"option"}}],[11,"offset","","Retrieves an associated offset from UTC.",13,null],[11,"timezone","","Retrieves an associated time zone.",13,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",13,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"date"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date.",13,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["date"],"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date.",13,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["date"],"name":"option"}}],[11,"signed_duration_since","","Subtracts another `Date` from the current date. Returns a `Duration` of integral numbers.",13,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC date.",13,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"naive_local","","Returns a view to the naive local date.",13,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"format_with_items","","Formats the date with the specified formatting items.",13,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"year","","",13,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",13,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",13,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_month","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_month0","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_day","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_day0","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_ordinal","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"with_ordinal0","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["date"],"name":"option"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"ordering"}}],[11,"hash","","",13,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",13,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"date"}}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"date"}}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"oldduration"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"secondsformat"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"secondsformat"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",5,null],[11,"date","","Retrieves a date component.",5,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",5,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",5,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January 1, 1970 UTC",5,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_nanos","","Returns the number of non-leap-nanoseconds since January 1, 1970 UTC",5,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"offset","","Retrieves an associated offset from UTC.",5,null],[11,"timezone","","Retrieves an associated time zone.",5,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",5,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",5,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",5,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",5,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",5,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",5,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",5,{"inputs":[{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",5,{"inputs":[{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",5,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with subseconds formatted as per a `SecondsFormat`. If passed `use_z` true and the timezone is UTC (offset 0), use 'Z', as per Fixed::TimezoneOffsetColonZ. If passed `use_z` false, use Fixed::TimezoneOffsetColon.",5,{"inputs":[{"name":"self"},{"name":"secondsformat"},{"name":"bool"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["strftimeitems"],"name":"delayedformat"}}],[11,"year","","",5,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",5,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"iso_week","","",5,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[11,"with_year","","",5,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_month","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_month0","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_day","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_day0","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_ordinal","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_ordinal0","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"hour","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_minute","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_second","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"with_nanosecond","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["datetime"],"name":"option"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",5,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"datetime"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"datetime"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"oldduration"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"from","","",5,{"inputs":[{"name":"systemtime"}],"output":{"generics":["utc"],"name":"datetime"}}],[11,"from","","",5,{"inputs":[{"name":"systemtime"}],"output":{"generics":["local"],"name":"datetime"}}],[0,"format","","Formatting (and parsing) utilities for date and time.",null,null],[3,"Parsed","chrono::format","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year.",14,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"isoyear","","Year in the ISO week date.",14,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",14,null],[12,"month","","Month (1--12).",14,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",14,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",14,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",14,null],[12,"weekday","","Day of the week.",14,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",14,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",14,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",14,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",14,null],[12,"minute","","Minute number (0--59).",14,null],[12,"second","","Second number (0--60, accounting for leap seconds).",14,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",14,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",14,null],[12,"offset","","Offset from the local time to UTC, in seconds.",14,null],[3,"InternalNumeric","","An opaque type representing numeric item types for internal uses only.",null,null],[3,"InternalFixed","","An opaque type representing fixed-format item types for internal uses only.",null,null],[3,"ParseError","","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A temporary object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",15,null],[13,"Zero","","Zero (`0`) padding.",15,null],[13,"Space","","Space padding.",15,null],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",16,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",16,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",16,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",16,null],[13,"Month","","Month (FW=PW=2).",16,null],[13,"Day","","Day of the month (FW=PW=2).",16,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",16,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",16,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",16,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",16,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",16,null],[13,"Ordinal","","Day of the year (FW=PW=3).",16,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",16,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",16,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",16,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",16,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is not left-aligned; see also `Fixed::Nanosecond`.",16,null],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",16,null],[13,"Internal","","Internal uses only.",16,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",17,null],[13,"LongMonthName","","Full month names.",17,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",17,null],[13,"LongWeekdayName","","Full day of the week names.",17,null],[13,"LowerAmPm","","AM/PM.",17,null],[13,"UpperAmPm","","AM/PM.",17,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",17,null],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",17,null],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",17,null],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",17,null],[13,"TimezoneName","","Timezone name.",17,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",17,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",17,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",17,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",17,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",17,null],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",17,null],[13,"Internal","","Internal uses only.",17,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",18,null],[13,"OwnedLiteral","","Same to `Literal` but with the string owned by the item.",18,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",18,null],[13,"OwnedSpace","","Same to `Space` but with the string owned by the item.",18,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",18,null],[13,"Fixed","","Fixed-format item.",18,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",18,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"generics":["naivedate"],"name":"option"},{"generics":["naivetime"],"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"parsed"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"parsed"}}],[11,"new","","Returns the initial value of parsed parts.",14,{"inputs":[],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_month","","Tries to set the `month` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_weekday","","Tries to set the `weekday` field from given value.",14,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"parseresult"}}],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_day","","Tries to set the `day` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",14,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_minute","","Tries to set the `minute` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_second","","Tries to set the `second` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_offset","","Tries to set the `offset` field from given value.",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",14,{"inputs":[{"name":"self"}],"output":{"generics":["naivedate"],"name":"parseresult"}}],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",14,{"inputs":[{"name":"self"}],"output":{"generics":["naivetime"],"name":"parseresult"}}],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["naivedatetime"],"name":"parseresult"}}],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",14,{"inputs":[{"name":"self"}],"output":{"generics":["fixedoffset"],"name":"parseresult"}}],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",14,{"inputs":[{"name":"self"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",14,{"inputs":[{"name":"self"},{"name":"tz"}],"output":{"generics":["datetime"],"name":"parseresult"}}],[0,"strftime","","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"strftimeitems"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",19,{"inputs":[{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["item"],"name":"option"}}],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",null,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"pad"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"pad"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"numeric"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"internalnumeric"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"fixed"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"internalfixed"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"internalfixed"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"internalfixed"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",23,{"inputs":[{"generics":["naivedate"],"name":"option"},{"generics":["naivetime"],"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",23,{"inputs":[{"generics":["naivedate"],"name":"option"},{"generics":["naivetime"],"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","chrono","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[17,"MIN_DATE","","The minimum possible `Date`.",null,null],[17,"MAX_DATE","","The maximum possible `Date`.",null,null],[8,"SubsecRound","","Extension trait for subsecond rounding or truncation to a maximum number of digits. Rounding can be used to decrease the error variance when serializing/persisting to lower precision. Truncation is the default behavior in Chrono display formatting.  Either can be used to guarantee equality (e.g. for testing) when round-tripping through a lower precision format.",null,null],[10,"round_subsecs","","Return a copy rounded to the specified number of subsecond digits. With 9 or more digits, self is returned unmodified. Halfway values are rounded up (away from zero).",24,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[10,"trunc_subsecs","","Return a copy truncated to the specified number of subsecond digits. With 9 or more digits, self is returned unmodified.",24,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"self"}}],[8,"Datelike","","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",25,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",25,null],[10,"month","","Returns the month number starting from 1.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",25,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[10,"iso_week","","Returns the ISO week.",25,{"inputs":[{"name":"self"}],"output":{"name":"isoweek"}}],[10,"with_year","","Makes a new value with the year number changed.",25,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",25,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",26,null],[10,"minute","","Returns the minute number from 0 to 59.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"succ","","The next day in the week.",1,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"pred","","The previous day in the week.",1,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_i64","","",1,{"inputs":[{"name":"i64"}],"output":{"generics":["weekday"],"name":"option"}}],[11,"from_u64","","",1,{"inputs":[{"name":"u64"}],"output":{"generics":["weekday"],"name":"option"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"parseweekdayerror"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"parseweekdayerror"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"parseweekdayerror"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",28,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",28,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",28,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",28,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",28,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",28,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",28,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",28,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",28,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",28,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",28,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",28,{"inputs":[{"name":"duration"}],"output":{"generics":["duration","outofrangeerror"],"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",28,{"inputs":[{"name":"self"}],"output":{"generics":["duration","outofrangeerror"],"name":"result"}}],[11,"mul","","",28,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"cmp","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"div","","",28,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"neg","","",28,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"sub","","",28,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","chrono::naive","",11,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivetime"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivetime"}}],[11,"add","","",12,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivedatetime"}}],[11,"sub","","",12,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivedatetime"}}]],"paths":[[4,"SecondsFormat"],[4,"Weekday"],[4,"LocalResult"],[3,"Utc"],[3,"FixedOffset"],[3,"DateTime"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"IsoWeek"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"Parsed"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"StrftimeItems"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"DelayedFormat"],[8,"SubsecRound"],[8,"Datelike"],[8,"Timelike"],[3,"ParseWeekdayError"],[3,"Duration"]]};
searchIndex["common_types"] = {"doc":"Types used in the public API","items":[[0,"account_diff","common_types","Diff between two accounts.",null,null],[3,"AccountDiff","common_types::account_diff","Account diff.",null,null],[12,"balance","","Change in balance, allowed to be `Diff::Same`.",0,null],[12,"nonce","","Change in nonce, allowed to be `Diff::Same`.",0,null],[12,"code","","Change in code, allowed to be `Diff::Same`.",0,null],[12,"storage","","Change in storage, values are not allowed to be `Diff::Same`.",0,null],[4,"Diff","","Diff type for specifying a change (or not).",null,null],[13,"Same","","Both sides are the same.",1,null],[13,"Born","","Left (pre, source) side doesn't include value, right side (post, destination) does.",1,null],[13,"Changed","","Both sides include data; it chaged value between them.",1,null],[13,"Died","","Left (pre, source) side does include value, right side (post, destination) does not.",1,null],[4,"Existance","","Change in existance type.",null,null],[13,"Born","","Item came into existance.",2,null],[13,"Alive","","Item stayed in existance.",2,null],[13,"Died","","Item went out of existance.",2,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"diff"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"diff"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"diff"}}],[11,"new","","Construct new object with given `pre` and `post`.",1,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"pre","","Get the before value, if there is one.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"post","","Get the after value, if there is one.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_same","","Determine whether there was a change or not.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"accountdiff"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"accountdiff"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"accountdiff"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"existance"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"existance"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"existance","","Get `Existance` projection.",0,{"inputs":[{"name":"self"}],"output":{"name":"existance"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"basic_account","common_types","Basic account type -- the decoded RLP from the state trie.",null,null],[3,"BasicAccount","common_types::basic_account","Basic account type.",null,null],[12,"nonce","","Nonce of the account.",3,null],[12,"balance","","Balance of the account.",3,null],[12,"storage_root","","Storage root of the account.",3,null],[12,"code_hash","","Code hash of the account.",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"basicaccount"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"basicaccount"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"basicaccount"}],"output":{"name":"bool"}}],[0,"block_status","common_types","",null,null],[4,"BlockStatus","common_types::block_status","General block status",null,null],[13,"InChain","","Part of the blockchain.",4,null],[13,"Queued","","Queued for import.",4,null],[13,"Bad","","Known as bad.",4,null],[13,"Pending","","Pending block.",4,null],[13,"Unknown","","Unknown.",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"blockstatus"}],"output":{"name":"bool"}}],[0,"blockchain_info","common_types","Blockhain info type definition",null,null],[3,"BlockChainInfo","common_types::blockchain_info","Information about the blockchain gathered together.",null,null],[12,"total_difficulty","","Blockchain difficulty.",5,null],[12,"pending_total_difficulty","","Block queue difficulty.",5,null],[12,"genesis_hash","","Genesis block hash.",5,null],[12,"best_block_hash","","Best blockchain block hash.",5,null],[12,"best_block_number","","Best blockchain block number.",5,null],[12,"best_block_timestamp","","Best blockchain block timestamp.",5,null],[12,"ancient_block_hash","","Best ancient block hash.",5,null],[12,"ancient_block_number","","Best ancient block number.",5,null],[12,"first_block_hash","","First block on the best sequence.",5,null],[12,"first_block_number","","Number of the first block on the best sequence.",5,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"blockchaininfo"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"security_level","","Determine the security model for the current state.",5,{"inputs":[{"name":"self"}],"output":{"name":"securitylevel"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"call_analytics","common_types","Call analytics related types",null,null],[3,"CallAnalytics","common_types::call_analytics","Options concerning what analytics we run on the call.",null,null],[12,"transaction_tracing","","Make a transaction trace.",6,null],[12,"vm_tracing","","Make a VM trace.",6,null],[12,"state_diffing","","Make a diff.",6,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"callanalytics"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"callanalytics"}],"output":{"name":"bool"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"callanalytics"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"callanalytics"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"filter","common_types","Blockchain filter",null,null],[3,"Filter","common_types::filter","Blockchain Filter.",null,null],[12,"from_block","","Blockchain will be searched from this block.",7,null],[12,"to_block","","Till this block.",7,null],[12,"address","","Search addresses.",7,null],[12,"topics","","Search topics.",7,null],[12,"limit","","Logs limit",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bloom_possibilities","","Returns combinations of each address and topic.",7,{"inputs":[{"name":"self"}],"output":{"generics":["bloom"],"name":"vec"}}],[11,"matches","","Returns true if given log entry matches filter.",7,{"inputs":[{"name":"self"},{"name":"logentry"}],"output":{"name":"bool"}}],[0,"ids","common_types","Unique identifiers.",null,null],[3,"TraceId","common_types::ids","Uniquely identifies Trace.",null,null],[12,"transaction","","Transaction",8,null],[12,"address","","Trace address within transaction.",8,null],[3,"UncleId","","Uniquely identifies Uncle.",null,null],[12,"block","","Block id.",9,null],[12,"position","","Position in block.",9,null],[4,"BlockId","","Uniquely identifies block.",null,null],[13,"Hash","","Block's sha3. Querying by hash is always faster.",10,null],[13,"Number","","Block number within canon blockchain.",10,null],[13,"Earliest","","Earliest block (genesis).",10,null],[13,"Latest","","Latest mined block.",10,null],[4,"TransactionId","","Uniquely identifies transaction.",null,null],[13,"Hash","","Transaction's sha3.",11,null],[13,"Location","","Block id and transaction index within this block. Querying by block position is always faster.",11,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"blockid"}}],[11,"hash","","",10,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"transactionid"}}],[11,"hash","","",11,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"uncleid"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"uncleid"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"uncleid"}}],[0,"log_entry","common_types","Log entry type definition.",null,null],[3,"LogEntry","common_types::log_entry","A record of execution for a `LOG` operation.",null,null],[12,"address","","The address of the contract executing at the point of the `LOG` operation.",12,null],[12,"topics","","The topics associated with the `LOG` operation.",12,null],[12,"data","","The data associated with the `LOG` operation.",12,null],[3,"LocalizedLogEntry","","Log localized in a blockchain.",null,null],[12,"entry","","Plain log entry.",13,null],[12,"block_hash","","Block in which this log was created.",13,null],[12,"block_number","","Block number.",13,null],[12,"transaction_hash","","Hash of transaction in which this log was created.",13,null],[12,"transaction_index","","Index of transaction within block.",13,null],[12,"log_index","","Log position in the block.",13,null],[12,"transaction_log_index","","Log position in the transaction.",13,null],[11,"default","","",12,{"inputs":[],"output":{"name":"logentry"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"logentry"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"logentry"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"logentry"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bloom","","Calculates the bloom of this log entry.",12,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"from","","",12,{"inputs":[{"name":"log"}],"output":{"name":"self"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"localizedlogentry"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"localizedlogentry"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"localizedlogentry"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"localizedlogentry"}}],[11,"deref","","",13,null],[0,"pruning_info","common_types","Information about portions of the state and chain which the client may serve.",null,null],[3,"PruningInfo","common_types::pruning_info","Client pruning info. See module-level docs for more details.",null,null],[12,"earliest_chain","","The first block which everything can be served after.",14,null],[12,"earliest_state","","The first block where state requests may be served.",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"pruninginfo"}}],[0,"receipt","common_types","Receipt",null,null],[3,"Receipt","common_types::receipt","Information describing execution of a transaction.",null,null],[12,"gas_used","","The total gas used in the block following execution of the transaction.",15,null],[12,"log_bloom","","The OR-wide combination of all logs' blooms for this transaction.",15,null],[12,"logs","","The logs stemming from this transaction.",15,null],[12,"outcome","","Transaction outcome.",15,null],[3,"RichReceipt","","Receipt with additional info.",null,null],[12,"transaction_hash","","Transaction hash.",16,null],[12,"transaction_index","","Transaction index.",16,null],[12,"cumulative_gas_used","","The total gas used in the block following execution of the transaction.",16,null],[12,"gas_used","","The gas used in the execution of the transaction. Note the difference of meaning to `Receipt::gas_used`.",16,null],[12,"contract_address","","Contract address.",16,null],[12,"logs","","Logs",16,null],[12,"log_bloom","","Logs bloom",16,null],[12,"outcome","","Transaction outcome.",16,null],[3,"LocalizedReceipt","","Receipt with additional info.",null,null],[12,"transaction_hash","","Transaction hash.",17,null],[12,"transaction_index","","Transaction index.",17,null],[12,"block_hash","","Block hash.",17,null],[12,"block_number","","Block number.",17,null],[12,"cumulative_gas_used","","The total gas used in the block following execution of the transaction.",17,null],[12,"gas_used","","The gas used in the execution of the transaction. Note the difference of meaning to `Receipt::gas_used`.",17,null],[12,"contract_address","","Contract address.",17,null],[12,"logs","","Logs",17,null],[12,"log_bloom","","Logs bloom",17,null],[12,"outcome","","Transaction outcome.",17,null],[12,"to","","Receiver address",17,null],[12,"from","","Sender",17,null],[4,"TransactionOutcome","","Transaction outcome store in the receipt.",null,null],[13,"Unknown","","Status and state root are unknown under EIP-98 rules.",18,null],[13,"StateRoot","","State root is known. Pre EIP-98 and EIP-658 rules.",18,null],[13,"StatusCode","","Status code is known. EIP-658 rules.",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"transactionoutcome"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"transactionoutcome"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"transactionoutcome"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"receipt"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"receipt"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"receipt"}],"output":{"name":"bool"}}],[11,"new","","Create a new receipt.",15,{"inputs":[{"name":"transactionoutcome"},{"name":"u256"},{"generics":["logentry"],"name":"vec"}],"output":{"name":"self"}}],[11,"rlp_append","","",15,{"inputs":[{"name":"self"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",15,{"inputs":[{"name":"rlp"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"heap_size_of_children","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"richreceipt"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"richreceipt"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"richreceipt"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"localizedreceipt"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"localizedreceipt"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"localizedreceipt"}],"output":{"name":"bool"}}],[0,"restoration_status","common_types","Restoration status type definition",null,null],[4,"RestorationStatus","common_types::restoration_status","Statuses for restorations.",null,null],[13,"Inactive","","No restoration.",19,null],[13,"Initializing","","Restoration is initalizing",19,null],[12,"chunks_done","common_types::restoration_status::RestorationStatus","Number of chunks done/imported",19,null],[13,"Ongoing","common_types::restoration_status","Ongoing restoration.",19,null],[12,"state_chunks","common_types::restoration_status::RestorationStatus","Total number of state chunks.",19,null],[12,"block_chunks","","Total number of block chunks.",19,null],[12,"state_chunks_done","","Number of state chunks completed.",19,null],[12,"block_chunks_done","","Number of block chunks completed.",19,null],[13,"Failed","common_types::restoration_status","Failed restoration.",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"restorationstatus"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"restorationstatus"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"restorationstatus"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"security_level","common_types","Indication of how secure the chain is.",null,null],[4,"SecurityLevel","common_types::security_level","Indication of how secure the chain is.",null,null],[13,"FullState","","All blocks from genesis to chain head are known to have valid state transitions and PoW.",20,null],[13,"FullProofOfWork","","All blocks from genesis to chain head are known to have a valid PoW.",20,null],[13,"PartialProofOfWork","","Some recent headers (the argument) are known to have a valid PoW.",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"securitylevel"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"securitylevel"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"securitylevel"}}],[11,"hash","","",20,null],[11,"is_full","","`true` for `FullPoW`/`FullState`.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"snapshot_manifest","common_types","Snapshot manifest type definition",null,null],[3,"ManifestData","common_types::snapshot_manifest","Manifest data.",null,null],[12,"version","","Snapshot format version.",21,null],[12,"state_hashes","","List of state chunk hashes.",21,null],[12,"block_hashes","","List of block chunk hashes.",21,null],[12,"state_root","","The final, expected state root.",21,null],[12,"block_number","","Block number this snapshot was taken at.",21,null],[12,"block_hash","","Block hash this snapshot was taken at.",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"manifestdata"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"manifestdata"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"manifestdata"}],"output":{"name":"bool"}}],[11,"into_rlp","","Encode the manifest data to rlp.",21,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"from_rlp","","Try to restore manifest data from raw bytes, interpreted as RLP.",21,null],[0,"state_diff","common_types","State diff module.",null,null],[3,"StateDiff","common_types::state_diff","Expression for the delta between two system states. Encoded the delta of every altered account.",null,null],[12,"raw","","Raw diff key-value",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"statediff"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"statediff"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"statediff"}}],[11,"get","","Get the actual data.",22,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",22,null],[0,"trace_filter","common_types","Trace filter related types",null,null],[3,"Filter","common_types::trace_filter","Easy to use trace filter.",null,null],[12,"range","","Range of filtering.",23,null],[12,"from_address","","From address.",23,null],[12,"to_address","","To address.",23,null],[12,"after","","Output offset",23,null],[12,"count","","Output amount",23,null],[0,"tree_route","common_types","Tree route info type definition",null,null],[3,"TreeRoute","common_types::tree_route","Represents a tree route between `from` block and `to` block:",null,null],[12,"blocks","","A vector of hashes of all blocks, ordered from `from` to `to`.",24,null],[12,"ancestor","","Best common ancestor of these blocks.",24,null],[12,"index","","An index where best common ancestor would be.",24,null],[12,"is_from_route_finalized","","Whether it has finalized blocks from `from` (inclusive) to `ancestor` (exclusive).",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"verification_queue_info","common_types","Verification queue info types",null,null],[3,"VerificationQueueInfo","common_types::verification_queue_info","Verification queue status",null,null],[12,"unverified_queue_size","","Number of queued items pending verification",25,null],[12,"verified_queue_size","","Number of verified queued items pending import",25,null],[12,"verifying_queue_size","","Number of items being verified",25,null],[12,"max_queue_size","","Configured maximum number of items in the queue",25,null],[12,"max_mem_use","","Configured maximum number of bytes to use",25,null],[12,"mem_used","","Heap memory used in bytes",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"verificationqueueinfo"}}],[11,"total_queue_size","","The total size of the queues.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"incomplete_queue_size","","The size of the unverified and verifying queues.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Indicates that queue is full",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Indicates that queue is empty",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"ancestry_action","common_types","Actions on ancestry blocks when working on a new block.",null,null],[4,"AncestryAction","common_types::ancestry_action","Actions on a live block's parent block. Only committed when the live block is committed. Those actions here must respect the normal blockchain reorganization rules.",null,null],[13,"MarkFinalized","","Mark an ancestry block as finalized.",26,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"ancestryaction"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"ancestryaction"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"ancestryaction"}}],[6,"BlockNumber","common_types","Type for block number.",null,null]],"paths":[[3,"AccountDiff"],[4,"Diff"],[4,"Existance"],[3,"BasicAccount"],[4,"BlockStatus"],[3,"BlockChainInfo"],[3,"CallAnalytics"],[3,"Filter"],[3,"TraceId"],[3,"UncleId"],[4,"BlockId"],[4,"TransactionId"],[3,"LogEntry"],[3,"LocalizedLogEntry"],[3,"PruningInfo"],[3,"Receipt"],[3,"RichReceipt"],[3,"LocalizedReceipt"],[4,"TransactionOutcome"],[4,"RestorationStatus"],[4,"SecurityLevel"],[3,"ManifestData"],[3,"StateDiff"],[3,"Filter"],[3,"TreeRoute"],[3,"VerificationQueueInfo"],[4,"AncestryAction"]]};
searchIndex["crossbeam"] = {"doc":"Support for concurrent and parallel programming.","items":[[3,"Scope","crossbeam","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[3,"CachePadded","","Pad `T` to the length of a cacheline.",null,null],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"generics":["joinhandle"],"name":"result"}}],[0,"epoch","","Epoch-based memory management",null,null],[3,"Atomic","crossbeam::epoch","Like `std::sync::atomic::AtomicPtr`.",null,null],[3,"Guard","","An RAII-style guard for pinning the current epoch.",null,null],[3,"Owned","","Like `Box<T>`: an owned, heap-allocated data value of type `T`.",null,null],[3,"Shared","","Like `&'a T`: a shared reference valid for lifetime `'a`.",null,null],[5,"pin","","Pin the current epoch.",null,{"inputs":[],"output":{"name":"guard"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","",0,{"inputs":[],"output":{"name":"atomic"}}],[11,"new","","Create a new atomic pointer",0,{"inputs":[{"name":"t"}],"output":{"name":"atomic"}}],[11,"load","","Do an atomic load with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"ordering"},{"name":"guard"}],"output":{"generics":["shared"],"name":"option"}}],[11,"store","","Do an atomic store with the given memory ordering.",0,{"inputs":[{"name":"self"},{"generics":["owned"],"name":"option"},{"name":"ordering"}],"output":null}],[11,"store_and_ref","","Do an atomic store with the given memory ordering, immediately yielding a shared reference to the pointer that was stored.",0,{"inputs":[{"name":"self"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"store_shared","","Do an atomic store of a `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"generics":["shared"],"name":"option"},{"name":"ordering"}],"output":null}],[11,"cas","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"generics":["shared"],"name":"option"},{"generics":["owned"],"name":"option"},{"name":"ordering"}],"output":{"generics":["option"],"name":"result"}}],[11,"cas_and_ref","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering, immediatley acquiring a new `Shared` reference to the previously-owned pointer if successful.",0,{"inputs":[{"name":"self"},{"generics":["shared"],"name":"option"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"generics":["shared","owned"],"name":"result"}}],[11,"cas_shared","","Do a compare-and-set from a `Shared` to another `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"generics":["shared"],"name":"option"},{"generics":["shared"],"name":"option"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"swap","","Do an atomic swap with an `Owned` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"generics":["owned"],"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"generics":["shared"],"name":"option"}}],[11,"swap_shared","","Do an atomic swap with a `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"generics":["shared"],"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"generics":["shared"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlinked","","Assert that the value is no longer reachable from a lock-free data structure and should be collected when sufficient epochs have passed.",1,{"inputs":[{"name":"self"},{"name":"shared"}],"output":null}],[11,"migrate_garbage","","Move the thread-local garbage into the global set of garbage.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Move `t` to a new heap allocation.",2,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"into_inner","","Move data out of the owned box, deallocating the box.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_raw","","",3,null],[0,"sync","crossbeam","Synchronization primitives.",null,null],[3,"MsQueue","crossbeam::sync","A Michael-Scott lock-free queue, with support for blocking `pop`s.",null,null],[3,"AtomicOption","","",null,null],[3,"TreiberStack","","Treiber's lock-free stack.",null,null],[3,"SegQueue","","A Michael-Scott queue that allocates \"segments\" (arrays of nodes) for efficiency.",null,null],[3,"ArcCell","","A type providing atomic storage and retrieval of an `Arc<T>`.",null,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",4,{"inputs":[],"output":{"name":"atomicoption"}}],[11,"swap_box","","",4,{"inputs":[{"name":"self"},{"name":"box"},{"name":"ordering"}],"output":{"generics":["box"],"name":"option"}}],[11,"swap","","",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"take","","",4,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty queue.",5,{"inputs":[],"output":{"name":"msqueue"}}],[11,"push","","Add `t` to the back of the queue, possibly waking up threads blocked on `pop`.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"is_empty","","Check if this queue is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_pop","","Attempt to dequeue from the front.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop","","Dequeue an element from the front of the queue, blocking if the queue is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty stack.",6,{"inputs":[],"output":{"name":"treiberstack"}}],[11,"push","","Push `t` on top of the stack.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Attempt to pop the top element of the stack. Deprecated method, use try_pop",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_pop","","Attempt to pop the top element of the stack.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","Check if this queue is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty queue.",7,{"inputs":[],"output":{"name":"segqueue"}}],[11,"push","","Add `t` to the back of the queue.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"is_empty","","Judge if the queue is empty.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_pop","","Attempt to dequeue from the front.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[0,"chase_lev","","A lock-free concurrent work-stealing deque",null,null],[3,"Worker","crossbeam::sync::chase_lev","Worker half of the work-stealing deque. This worker has exclusive access to one side of the deque, and uses `push` and `try_pop` method to manipulate it.",null,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the opposite end of the deque from the worker, and they only have access to the `steal` method.",null,null],[4,"Steal","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",8,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more data.",8,null],[13,"Data","","The stealer has successfully stolen some data.",8,null],[5,"deque","","Creates a new empty deque",null,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"push","","Pushes data onto the front of this work queue.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"try_pop","","Pops data off the front of the work queue, returning `None` on an empty queue.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals work off the end of the queue (opposite of the worker's end)",10,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","crossbeam::sync","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `ArcCell`.",11,{"inputs":[{"name":"arc"}],"output":{"name":"arccell"}}],[11,"set","","Stores a new value in the `ArcCell`, returning the previous value.",11,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"arc"}}],[11,"get","","Returns a copy of the value stored by the `ArcCell`.",11,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"fmt","crossbeam","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn","","Create a scoped thread.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scopedjoinhandle"}}],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",12,{"inputs":[{"name":"self"}],"output":{"name":"scopedthreadbuilder"}}],[11,"join","","Join the scoped thread, returning the result it produced.",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"thread","","Get the underlying thread handle.",13,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zeroed","","A const fn equivalent to mem::zeroed().",14,{"inputs":[],"output":{"name":"cachepadded"}}],[11,"new","","Wrap `t` with cacheline padding.",14,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ZerosValid","","Types for which mem::zeroed() is safe.",null,null]],"paths":[[3,"Atomic"],[3,"Guard"],[3,"Owned"],[3,"Shared"],[3,"AtomicOption"],[3,"MsQueue"],[3,"TreiberStack"],[3,"SegQueue"],[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"ArcCell"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"CachePadded"]]};
searchIndex["crossbeam_deque"] = {"doc":"A concurrent work-stealing deque.","items":[[3,"Deque","crossbeam_deque","A concurrent work-stealing deque.",null,null],[3,"Stealer","","A stealer that steals elements from the top of a deque.",null,null],[4,"Steal","","Possible outcomes of a steal operation.",null,null],[13,"Empty","","The deque was empty at the time of stealing.",0,null],[13,"Data","","Some data has been successfully stolen.",0,null],[13,"Retry","","Lost the race for stealing data to another concurrent operation. Try again.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"new","","Returns a new deque.",1,{"inputs":[],"output":{"name":"deque"}}],[11,"with_min_capacity","","Returns a new deque with the specified minimum capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"deque"}}],[11,"is_empty","","Returns `true` if the deque is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of elements in the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","Pushes an element into the bottom of the deque.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Pops an element from the bottom of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals an element from the top of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"stealer","","Creates a stealer that can be shared with other threads.",1,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"deque"}}],[11,"is_empty","","Returns `true` if the deque is empty.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of elements in the deque.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"steal","","Steals an element from the top of the deque.",2,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"clone","","Creates another stealer.",2,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Steal"],[3,"Deque"],[3,"Stealer"]]};
searchIndex["crossbeam_epoch"] = {"doc":"Epoch-based memory reclamation.","items":[[3,"Atomic","crossbeam_epoch","An atomic pointer that can be safely shared between threads.",null,null],[3,"CompareAndSetError","","The error returned on failed compare-and-set operation.",null,null],[12,"current","","The value in the atomic pointer at the time of the failed operation.",0,null],[12,"new","","The new value, which the operation failed to store.",0,null],[3,"Owned","","An owned heap-allocated object.",null,null],[3,"Shared","","A pointer to an object protected by the epoch GC.",null,null],[3,"Guard","","A guard that keeps the current thread pinned.",null,null],[3,"Collector","","An epoch-based garbage collector.",null,null],[3,"Handle","","A handle to a garbage collector.",null,null],[5,"unprotected","","Returns a reference to a dummy guard that allows unprotected access to [`Atomic`]s.",null,{"inputs":[],"output":{"name":"guard"}}],[5,"default_handle","","Returns the default handle associated with the current thread.",null,{"inputs":[],"output":{"name":"handle"}}],[5,"is_pinned","","Returns `true` if the current thread is pinned.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"pin","","Pins the current thread.",null,{"inputs":[],"output":{"name":"guard"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","Returns a new null atomic pointer.",1,{"inputs":[],"output":{"name":"atomic"}}],[11,"new","","Allocates `value` on the heap and returns a new atomic pointer pointing to it.",1,{"inputs":[{"name":"t"}],"output":{"name":"atomic"}}],[11,"load","","Loads a `Shared` from the atomic pointer.",1,{"inputs":[{"name":"self"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"store","","Stores a `Shared` or `Owned` pointer into the atomic pointer.",1,{"inputs":[{"name":"self"},{"name":"p"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a `Shared` or `Owned` pointer into the atomic pointer, returning the previous `Shared`.",1,{"inputs":[{"name":"self"},{"name":"p"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"compare_and_set","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,{"inputs":[{"name":"self"},{"name":"shared"},{"name":"p"},{"name":"o"},{"name":"guard"}],"output":{"generics":["shared","compareandseterror"],"name":"result"}}],[11,"compare_and_set_weak","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,{"inputs":[{"name":"self"},{"name":"shared"},{"name":"p"},{"name":"o"},{"name":"guard"}],"output":{"generics":["shared","compareandseterror"],"name":"result"}}],[11,"fetch_and","","Bitwise \"and\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fetch_or","","Bitwise \"or\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","Returns a copy of the atomic value.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `owned`.",1,{"inputs":[{"name":"owned"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `ptr`.",1,{"inputs":[{"name":"shared"}],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `raw`.",1,null],[11,"new","","Allocates `value` on the heap and returns a new owned pointer pointing to it.",2,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"from_raw","","Returns a new owned pointer pointing to `raw`.",2,null],[11,"into_shared","","Converts the owned pointer into a [`Shared`].",2,{"inputs":[{"name":"self"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"into_box","","Converts the owned pointer into a `Box`.",2,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"tag","","Returns the tag stored within the pointer.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"owned"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","Returns a new owned pointer pointing to `b`.",2,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"borrow","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"null","","Returns a new null pointer.",3,{"inputs":[],"output":{"name":"shared"}}],[11,"is_null","","Returns `true` if the pointer is null.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_raw","","Converts the pointer to a raw pointer (without the tag).",3,null],[11,"deref","","Dereferences the pointer.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","Converts the pointer to a reference.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_owned","","Takes ownership of the pointee.",3,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"tag","","Returns the tag stored within the pointer.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"shared"}}],[11,"from","","Returns a new pointer pointing to `raw`.",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new collector.",4,{"inputs":[],"output":{"name":"self"}}],[11,"handle","","Creates a new handle for the collector.",4,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"clone","","Creates another reference to the same garbage collector.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pin","","Pins the handle.",5,{"inputs":[{"name":"self"}],"output":{"name":"guard"}}],[11,"is_pinned","","Returns `true` if the handle is pinned.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"defer","","Stores a function so that it can be executed at some point after all currently pinned threads get unpinned.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"flush","","Clears up the thread-local cache of deferred functions by executing them or moving into the global cache.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"repin","","Unpins and then immediately re-pins the thread.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"repin_after","","Temporarily unpins the thread, executes the given function and then re-pins the thread.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"guard"}}],[8,"CompareAndSetOrdering","","Memory orderings for compare-and-set operations.",null,null],[10,"success","","The ordering of the operation when it succeeds.",7,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[10,"failure","","The ordering of the operation when it fails.",7,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}]],"paths":[[3,"CompareAndSetError"],[3,"Atomic"],[3,"Owned"],[3,"Shared"],[3,"Collector"],[3,"Handle"],[3,"Guard"],[8,"CompareAndSetOrdering"]]};
searchIndex["crossbeam_utils"] = {"doc":"","items":[[0,"cache_padded","crossbeam_utils","",null,null],[3,"CachePadded","crossbeam_utils::cache_padded","Pads `T` to the length of a cache line.",null,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Pads a value to the length of a cache line.",0,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"atomic_option","crossbeam_utils","",null,null],[3,"AtomicOption","crossbeam_utils::atomic_option","",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"swap_box","","",1,{"inputs":[{"name":"self"},{"name":"box"},{"name":"ordering"}],"output":{"generics":["box"],"name":"option"}}],[11,"swap","","",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"take","","",1,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[0,"scoped","crossbeam_utils","",null,null],[3,"Scope","crossbeam_utils::scoped","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",null,null],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"generics":["joinhandle"],"name":"result"}}],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn","","Create a scoped thread.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scopedjoinhandle"}}],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",2,{"inputs":[{"name":"self"}],"output":{"name":"scopedthreadbuilder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"scopedthreadbuilder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"scopedthreadbuilder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["scopedjoinhandle"],"name":"result"}}],[11,"join","","Join the scoped thread, returning the result it produced.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"thread","","Get the underlying thread handle.",3,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"CachePadded"],[3,"AtomicOption"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"ScopedThreadBuilder"]]};
searchIndex["crunchy"] = {"doc":"The crunchy unroller - deterministically unroll constant loops. For number \"crunching\".","items":[[14,"unroll","crunchy","Unroll the given for loop",null,null]],"paths":[]};
searchIndex["crypto"] = {"doc":"","items":[[0,"aead","crypto","",null,null],[8,"AeadEncryptor","crypto::aead","",null,null],[10,"encrypt","","",0,null],[8,"AeadDecryptor","","",null,null],[10,"decrypt","","",1,null],[0,"aes","crypto","",null,null],[4,"KeySize","crypto::aes","AES key size",null,null],[13,"KeySize128","","",2,null],[13,"KeySize192","","",2,null],[13,"KeySize256","","",2,null],[5,"ecb_encryptor","","Get the best implementation of an EcbEncryptor",null,null],[5,"ecb_decryptor","","Get the best implementation of an EcbDecryptor",null,null],[5,"cbc_encryptor","","Get the best implementation of a CbcEncryptor",null,null],[5,"cbc_decryptor","","Get the best implementation of a CbcDecryptor",null,null],[5,"ctr","","Get the best implementation of a Ctr",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"keysize"}}],[0,"aes_gcm","crypto","",null,null],[3,"AesGcm","crypto::aes_gcm","",null,null],[11,"new","","",3,null],[11,"encrypt","","",3,null],[11,"decrypt","","",3,null],[0,"aessafe","crypto","The `aessafe` module implements the AES algorithm completely in software without using any table lookups or other timing dependant mechanisms. This module actually contains two seperate implementations - an implementation that works on a single block at a time and a second implementation that processes 8 blocks in parallel. Some block encryption modes really only work if you are processing a single blocks (CFB, OFB, and CBC encryption for example) while other modes are trivially parallelizable (CTR and CBC decryption). Processing more blocks at once allows for greater efficiency, especially when using wide registers, such as the XMM registers available in x86 processors.",null,null],[3,"AesSafe128Encryptor","crypto::aessafe","",null,null],[3,"AesSafe128Decryptor","","",null,null],[3,"AesSafe192Encryptor","","",null,null],[3,"AesSafe192Decryptor","","",null,null],[3,"AesSafe256Encryptor","","",null,null],[3,"AesSafe256Decryptor","","",null,null],[3,"AesSafe128EncryptorX8","","",null,null],[3,"AesSafe128DecryptorX8","","",null,null],[3,"AesSafe192EncryptorX8","","",null,null],[3,"AesSafe192DecryptorX8","","",null,null],[3,"AesSafe256EncryptorX8","","",null,null],[3,"AesSafe256DecryptorX8","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"aessafe128encryptor"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"aessafe128decryptor"}}],[11,"new","","",4,null],[11,"new","","",5,null],[11,"block_size","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",4,null],[11,"block_size","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"aessafe192encryptor"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"aessafe192decryptor"}}],[11,"new","","",6,null],[11,"new","","",7,null],[11,"block_size","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",6,null],[11,"block_size","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",7,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"aessafe256encryptor"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"aessafe256decryptor"}}],[11,"new","","",8,null],[11,"new","","",9,null],[11,"block_size","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",8,null],[11,"block_size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"aessafe128encryptorx8"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"aessafe128decryptorx8"}}],[11,"new","","",10,null],[11,"new","","",11,null],[11,"block_size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block_x8","","",10,null],[11,"block_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block_x8","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"aessafe192encryptorx8"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"aessafe192decryptorx8"}}],[11,"new","","",12,null],[11,"new","","",13,null],[11,"block_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block_x8","","",12,null],[11,"block_size","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block_x8","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"aessafe256encryptorx8"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"aessafe256decryptorx8"}}],[11,"new","","",14,null],[11,"new","","",15,null],[11,"block_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block_x8","","",14,null],[11,"block_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block_x8","","",15,null],[0,"bcrypt","crypto","",null,null],[5,"bcrypt","crypto::bcrypt","",null,null],[0,"bcrypt_pbkdf","crypto","",null,null],[5,"bcrypt_pbkdf","crypto::bcrypt_pbkdf","",null,null],[0,"blake2b","crypto","",null,null],[3,"Blake2b","crypto::blake2b","",null,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"blake2b"}}],[11,"new","","",16,{"inputs":[{"name":"usize"}],"output":{"name":"blake2b"}}],[11,"new_keyed","","",16,null],[11,"reset","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"blake2b","","",16,null],[11,"reset","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"input","","",16,null],[11,"result","","",16,null],[11,"output_bits","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"input","","Process input data.",16,null],[11,"reset","","Reset the Mac state to begin processing another input stream.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","Obtain the result of a Mac computation as a MacResult.",16,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[11,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully since incorrect use of the Mac code could result in permitting a timing attack which defeats the security provided by a Mac function.",16,null],[11,"output_bytes","","Get the size of the Mac code, in bytes.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"blake2s","crypto","",null,null],[3,"Blake2s","crypto::blake2s","",null,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"blake2s"}}],[11,"new","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"blake2s"}}],[11,"new_keyed","","",17,null],[11,"reset","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"blake2s","","",17,null],[11,"reset","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"input","","",17,null],[11,"result","","",17,null],[11,"output_bits","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"input","","Process input data.",17,null],[11,"reset","","Reset the Mac state to begin processing another input stream.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","Obtain the result of a Mac computation as a MacResult.",17,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[11,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully since incorrect use of the Mac code could result in permitting a timing attack which defeats the security provided by a Mac function.",17,null],[11,"output_bytes","","Get the size of the Mac code, in bytes.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"blockmodes","crypto","",null,null],[3,"NoPadding","crypto::blockmodes","No padding mode for ECB and CBC encryption",null,null],[3,"PkcsPadding","","PKCS padding mode for ECB and CBC encryption",null,null],[3,"EncPadding","","Wraps a PaddingProcessor so that only pad_input() will actually be called.",null,null],[3,"DecPadding","","Wraps a PaddingProcessor so that only strip_output() will actually be called.",null,null],[3,"EcbEncryptor","","ECB Encryption mode",null,null],[3,"EcbDecryptor","","ECB Decryption mode",null,null],[3,"CbcEncryptor","","CBC encryption mode",null,null],[3,"CbcDecryptor","","CBC decryption mode",null,null],[3,"CtrMode","","CTR Mode",null,null],[3,"CtrModeX8","","CTR Mode that operates on 8 blocks at a time",null,null],[8,"PaddingProcessor","","A PaddingProcessor handles adding or removing padding",null,null],[10,"pad_input","","Add padding to the last block of input data If the mode can't handle a non-full block, it signals that error by simply leaving the block as it is which will be detected as an InvalidLength error.",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[10,"strip_output","","Remove padding from the last block of output data If false is returned, the processing fails",18,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"nopadding"}}],[11,"pad_input","","",19,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"strip_output","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"pkcspadding"}}],[11,"pad_input","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"strip_output","","",20,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"pad_input","","",21,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"strip_output","","",21,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"pad_input","","",22,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"strip_output","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"new","","Create a new ECB encryption mode object",23,{"inputs":[{"name":"t"},{"name":"x"}],"output":{"generics":["encpadding"],"name":"ecbencryptor"}}],[11,"reset","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"encrypt","","",23,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"new","","Create a new ECB decryption mode object",24,{"inputs":[{"name":"t"},{"name":"x"}],"output":{"generics":["decpadding"],"name":"ecbdecryptor"}}],[11,"reset","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"decrypt","","",24,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"new","","Create a new CBC encryption mode object",25,{"inputs":[{"name":"t"},{"name":"x"},{"generics":["u8"],"name":"vec"}],"output":{"generics":["encpadding"],"name":"cbcencryptor"}}],[11,"reset","","",25,null],[11,"encrypt","","",25,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"new","","Create a new CBC decryption mode object",26,{"inputs":[{"name":"t"},{"name":"x"},{"generics":["u8"],"name":"vec"}],"output":{"generics":["decpadding"],"name":"cbcdecryptor"}}],[11,"reset","","",26,null],[11,"decrypt","","",26,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"new","","Create a new CTR object",27,{"inputs":[{"name":"a"},{"generics":["u8"],"name":"vec"}],"output":{"name":"ctrmode"}}],[11,"reset","","",27,null],[11,"process","","",27,null],[11,"encrypt","","",27,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"decrypt","","",27,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"new","","Create a new CTR object that operates on 8 blocks at a time",28,null],[11,"reset","","",28,null],[11,"process","","",28,null],[11,"encrypt","","",28,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"decrypt","","",28,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[0,"blowfish","crypto","",null,null],[3,"Blowfish","crypto::blowfish","",null,null],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"blowfish"}}],[11,"new","","",29,null],[11,"init_state","","",29,{"inputs":[],"output":{"name":"blowfish"}}],[11,"expand_key","","",29,null],[11,"salted_expand_key","","",29,null],[11,"encrypt","","",29,null],[11,"block_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",29,null],[11,"block_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",29,null],[0,"buffer","crypto","",null,null],[3,"RefReadBuffer","crypto::buffer","",null,null],[3,"OwnedReadBuffer","","",null,null],[3,"RefWriteBuffer","","",null,null],[3,"BorrowedWriteBuffer","","",null,null],[3,"OwnedWriteBuffer","","",null,null],[4,"BufferResult","","",null,null],[13,"BufferUnderflow","","",30,null],[13,"BufferOverflow","","",30,null],[8,"ReadBuffer","","",null,null],[10,"is_empty","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_full","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"remaining","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"capacity","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"position","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"rewind","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"truncate","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"reset","","",31,{"inputs":[{"name":"self"}],"output":null}],[10,"peek_next","","",31,null],[11,"peek_remaining","","",31,null],[10,"take_next","","",31,null],[11,"take_remaining","","",31,null],[11,"push_to","","",31,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[8,"WriteBuffer","","",null,null],[10,"is_empty","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_full","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"remaining","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"capacity","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"position","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"rewind","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"reset","","",32,{"inputs":[{"name":"self"}],"output":null}],[10,"peek_read_buffer","","",32,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[10,"take_next","","",32,null],[11,"take_remaining","","",32,null],[10,"take_read_buffer","","",32,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bufferresult"}}],[11,"new","","",33,null],[11,"is_empty","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rewind","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"truncate","","",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reset","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"peek_next","","",33,null],[11,"take_next","","",33,null],[11,"new","","",34,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"ownedreadbuffer"}}],[11,"new_with_len","","",34,{"inputs":[{"generics":["u8"],"name":"vec"},{"name":"usize"}],"output":{"name":"ownedreadbuffer"}}],[11,"into_write_buffer","","",34,{"inputs":[{"name":"self"}],"output":{"name":"ownedwritebuffer"}}],[11,"borrow_write_buffer","","",34,{"inputs":[{"name":"self"}],"output":{"name":"borrowedwritebuffer"}}],[11,"is_empty","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rewind","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"truncate","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reset","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"peek_next","","",34,null],[11,"take_next","","",34,null],[11,"new","","",35,null],[11,"is_empty","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rewind","","",35,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reset","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"peek_read_buffer","","",35,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"take_next","","",35,null],[11,"take_read_buffer","","",35,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"is_empty","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rewind","","",36,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reset","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"peek_read_buffer","","",36,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"take_next","","",36,null],[11,"take_read_buffer","","",36,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"new","","",37,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"ownedwritebuffer"}}],[11,"into_read_buffer","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ownedreadbuffer"}}],[11,"is_empty","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_full","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remaining","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rewind","","",37,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reset","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"peek_read_buffer","","",37,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[11,"take_next","","",37,null],[11,"take_read_buffer","","",37,{"inputs":[{"name":"self"}],"output":{"name":"refreadbuffer"}}],[0,"chacha20","crypto","",null,null],[3,"ChaCha20","crypto::chacha20","",null,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"chacha20"}}],[11,"new","","",38,null],[11,"new_xchacha20","","",38,null],[11,"process","","",38,null],[11,"encrypt","","",38,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"decrypt","","",38,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[0,"chacha20poly1305","crypto","",null,null],[3,"ChaCha20Poly1305","crypto::chacha20poly1305","",null,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"chacha20poly1305"}}],[11,"new","","",39,null],[11,"encrypt","","",39,null],[11,"decrypt","","",39,null],[0,"curve25519","crypto","",null,null],[3,"Fe","crypto::curve25519","",null,null],[12,"0","","",40,null],[3,"GeP2","","",null,null],[3,"GeP3","","",null,null],[3,"GeP1P1","","",null,null],[3,"GePrecomp","","",null,null],[3,"GeCached","","",null,null],[5,"ge_scalarmult_base","","",null,null],[5,"sc_reduce","","",null,null],[5,"sc_muladd","","",null,null],[5,"curve25519","","",null,null],[5,"curve25519_base","","",null,null],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"fe"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"fe"}],"output":{"name":"bool"}}],[11,"add","","",40,{"inputs":[{"name":"self"},{"name":"fe"}],"output":{"name":"fe"}}],[11,"sub","","",40,{"inputs":[{"name":"self"},{"name":"fe"}],"output":{"name":"fe"}}],[11,"mul","","",40,{"inputs":[{"name":"self"},{"name":"fe"}],"output":{"name":"fe"}}],[11,"from_bytes","","",40,null],[11,"to_bytes","","",40,null],[11,"maybe_swap_with","","",40,{"inputs":[{"name":"self"},{"name":"fe"},{"name":"i32"}],"output":null}],[11,"maybe_set","","",40,{"inputs":[{"name":"self"},{"name":"fe"},{"name":"i32"}],"output":null}],[11,"invert","","",40,{"inputs":[{"name":"self"}],"output":{"name":"fe"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"gep2"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"gep3"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"gep1p1"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"geprecomp"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"gecached"}}],[11,"to_bytes","","",41,null],[11,"double_scalarmult_vartime","","",41,null],[11,"from_bytes_negate_vartime","","",42,null],[11,"to_bytes","","",42,null],[11,"add","","",42,{"inputs":[{"name":"self"},{"name":"gecached"}],"output":{"name":"gep1p1"}}],[11,"add","","",42,{"inputs":[{"name":"self"},{"name":"geprecomp"}],"output":{"name":"gep1p1"}}],[11,"sub","","",42,{"inputs":[{"name":"self"},{"name":"gecached"}],"output":{"name":"gep1p1"}}],[11,"sub","","",42,{"inputs":[{"name":"self"},{"name":"geprecomp"}],"output":{"name":"gep1p1"}}],[11,"maybe_set","","",44,{"inputs":[{"name":"self"},{"name":"geprecomp"},{"name":"i32"}],"output":null}],[11,"select","","",44,{"inputs":[{"name":"usize"},{"name":"i8"}],"output":{"name":"geprecomp"}}],[0,"digest","crypto","",null,null],[8,"Digest","crypto::digest","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2 family of digest functions.",null,null],[10,"input","","Provide message data.",46,null],[10,"result","","Retrieve the digest result. This method may be called multiple times.",46,null],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more data.",46,{"inputs":[{"name":"self"}],"output":null}],[10,"output_bits","","Get the output size in bits.",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"output_bytes","","Get the output size in bytes.",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"block_size","","Get the block size in bytes.",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"input_str","","Convenience function that feeds a string into a digest.",46,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"result_str","","Convenience function that retrieves the result of a digest as a String in hexadecimal format.",46,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[0,"ed25519","crypto","",null,null],[5,"keypair","crypto::ed25519","",null,null],[5,"signature","","",null,null],[5,"verify","","",null,null],[5,"exchange","","",null,null],[0,"fortuna","crypto","An implementation of the Fortuna CSPRNG",null,null],[3,"Fortuna","crypto::fortuna","The `Fortuna` CSPRNG (PC 9.5)",null,null],[17,"MIN_POOL_SIZE","","Length in bytes that the first pool must be before a \"catastrophic reseed\" is allowed to happen. (A direct reseed through the `SeedableRng` API is not affected by this limit.)",null,null],[11,"new_unseeded","","Creates a new unseeded `Fortuna` (PC 9.5.4)",47,{"inputs":[],"output":{"name":"fortuna"}}],[11,"add_random_event","","Adds a random event `e` from source `s` to entropy pool `i` (PC 9.5.6)",47,null],[11,"fill_bytes","","Generate a bunch of random data into `dest` (PC 9.5.5)",47,null],[11,"next_u32","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_seed","","",47,null],[11,"reseed","","",47,null],[0,"ghash","crypto","",null,null],[3,"Ghash","crypto::ghash","A structure representing the state of a GHASH computation",null,null],[3,"GhashWithC","","A structure representing the state of a GHASH computation, after input for C was provided",null,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"ghash"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ghashwithc"}}],[11,"new","","Creates a new GHASH state, with `h` as the key",48,null],[11,"input_a","","Feeds data for GHASH's A input",48,null],[11,"input_c","","Feeds data for GHASH's C input",48,null],[11,"result","","Retrieve the digest result",48,null],[11,"input_c","","Feeds data for GHASH's C input",49,null],[11,"result","","Retrieve the digest result",49,null],[11,"input","","",48,null],[11,"reset","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","",48,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[11,"raw_result","","",48,null],[11,"output_bytes","","",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"hc128","crypto","",null,null],[3,"Hc128","crypto::hc128","",null,null],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"hc128"}}],[11,"new","","",50,null],[11,"process","","",50,null],[11,"encrypt","","",50,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"decrypt","","",50,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[0,"hmac","crypto","This module implements the Hmac function - a Message Authentication Code using a Digest.",null,null],[3,"Hmac","crypto::hmac","The Hmac struct represents an Hmac function - a Message Authentication Code using a Digest.",null,null],[11,"new","","Create a new Hmac instance.",51,null],[11,"input","","",51,null],[11,"reset","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","",51,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[11,"raw_result","","",51,null],[11,"output_bytes","","",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"hkdf","crypto","This module implements the HMAC-based Extract-and-Expand Key Derivation Function as specified by  https://tools.ietf.org/html/rfc5869.",null,null],[5,"hkdf_extract","crypto::hkdf","Execute the HKDF-Extract function.  Applications MUST NOT use this for password hashing.",null,null],[5,"hkdf_expand","","Execute the HKDF-Expand function.  Applications MUST NOT use this for password hashing.",null,null],[0,"mac","crypto","The mac module defines the Message Authentication Code (Mac) trait.",null,null],[3,"MacResult","crypto::mac","A MacResult wraps a Mac code and provides a safe Eq implementation that runs in fixed time.",null,null],[8,"Mac","","The Mac trait defines methods for a Message Authentication function.",null,null],[10,"input","","Process input data.",52,null],[10,"reset","","Reset the Mac state to begin processing another input stream.",52,{"inputs":[{"name":"self"}],"output":null}],[10,"result","","Obtain the result of a Mac computation as a MacResult.",52,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[10,"raw_result","","Obtain the result of a Mac computation as [u8]. This method should be used very carefully since incorrect use of the Mac code could result in permitting a timing attack which defeats the security provided by a Mac function.",52,null],[10,"output_bytes","","Get the size of the Mac code, in bytes.",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new MacResult.",53,null],[11,"new_from_owned","","Create a new MacResult taking ownership of the specified code value.",53,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"macresult"}}],[11,"code","","Get the code value. Be very careful using this method, since incorrect use of the code value may permit timing attacks which defeat the security provided by the Mac function.",53,null],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"macresult"}],"output":{"name":"bool"}}],[0,"md5","crypto","",null,null],[3,"Md5","crypto::md5","The MD5 Digest algorithm",null,null],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"md5"}}],[11,"new","","Construct a new instance of the MD5 Digest.",54,{"inputs":[],"output":{"name":"md5"}}],[11,"input","","",54,null],[11,"reset","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","",54,null],[11,"output_bits","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"pbkdf2","crypto","This module implements the PBKDF2 Key Derivation Function as specified by http://tools.ietf.org/html/rfc2898.",null,null],[5,"pbkdf2","crypto::pbkdf2","Execute the PBKDF2 Key Derivation Function. The Scrypt Key Derivation Function generally provides better security, so, applications that do not have a requirement to use PBKDF2 specifically should consider using that function instead.",null,null],[5,"pbkdf2_simple","","pbkdf2_simple is a helper function that should be sufficient for the majority of cases where an application needs to use PBKDF2 to hash a password for storage. The result is a String that contains the parameters used as part of its encoding. The pbkdf2_check function may be used on a password to check if it is equal to a hashed value.",null,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["string"],"name":"result"}}],[5,"pbkdf2_check","","pbkdf2_check compares a password against the result of a previous call to pbkdf2_simple and returns true if the passed in password hashes to the same value.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["bool","str"],"name":"result"}}],[0,"poly1305","crypto","",null,null],[3,"Poly1305","crypto::poly1305","",null,null],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poly1305"}}],[11,"new","","",55,null],[11,"input","","",55,null],[11,"reset","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"result","","",55,{"inputs":[{"name":"self"}],"output":{"name":"macresult"}}],[11,"raw_result","","",55,null],[11,"output_bytes","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"rc4","crypto","An implementation of the RC4 (also sometimes called ARC4) stream cipher. THIS IMPLEMENTATION IS NOT A FIXED TIME IMPLEMENTATION.",null,null],[3,"Rc4","crypto::rc4","",null,null],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"rc4"}}],[11,"new","","",56,null],[11,"process","","",56,null],[11,"encrypt","","",56,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"decrypt","","",56,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[0,"ripemd160","crypto","An implementation of the RIPEMD-160 cryptographic hash.",null,null],[3,"Ripemd160","crypto::ripemd160","Structure representing the state of a Ripemd160 computation",null,null],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ripemd160"}}],[11,"new","","",57,{"inputs":[],"output":{"name":"ripemd160"}}],[11,"reset","","Resets the hash to its original state also clearing the buffer. To be used in between hashing separate messages to avoid having to recreate and allocate the whole structure.",57,{"inputs":[{"name":"self"}],"output":null}],[11,"input","","Adds the input `msg` to the hash. This method can be called repeatedly for use with streaming messages.",57,null],[11,"result","","Returns the resulting digest of the entire message. Note: `out` must be at least 20 bytes (160 bits)",57,null],[11,"output_bits","","Returns the size of the digest in bits",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","Returns the block size the hash operates on in bytes",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"salsa20","crypto","",null,null],[3,"Salsa20","crypto::salsa20","",null,null],[5,"hsalsa20","","",null,null],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"salsa20"}}],[11,"new","","",58,null],[11,"new_xsalsa20","","",58,null],[11,"process","","",58,null],[11,"encrypt","","",58,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"decrypt","","",58,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[0,"scrypt","crypto","This module implements the Scrypt key derivation function as specified in [1].",null,null],[3,"ScryptParams","crypto::scrypt","The Scrypt parameter values.",null,null],[5,"scrypt","","The scrypt key derivation function.",null,null],[5,"scrypt_simple","","scrypt_simple is a helper function that should be sufficient for the majority of cases where an application needs to use Scrypt to hash a password for storage. The result is a String that contains the parameters used as part of its encoding. The scrypt_check function may be used on a password to check if it is equal to a hashed value.",null,{"inputs":[{"name":"str"},{"name":"scryptparams"}],"output":{"generics":["string"],"name":"result"}}],[5,"scrypt_check","","scrypt_check compares a password against the result of a previous call to scrypt_simple and returns true if the passed in password hashes to the same value.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["bool","str"],"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"scryptparams"}}],[11,"new","","Create a new instance of ScryptParams.",59,{"inputs":[{"name":"u8"},{"name":"u32"},{"name":"u32"}],"output":{"name":"scryptparams"}}],[0,"sha1","crypto","An implementation of the SHA-1 cryptographic hash algorithm.",null,null],[3,"Sha1","crypto::sha1","Structure representing the state of a Sha1 computation",null,null],[5,"sha1_first","","Not an intrinsic, but gets the first element of a vector.",null,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32"}}],[5,"sha1_first_add","","Not an intrinsic, but adds a word to the first element of a vector.",null,{"inputs":[{"name":"u32"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha1_schedule_x4","","Performs 4 rounds of the message schedule update.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha1_first_half","","Emulates `llvm.x86.sha1nexte` intrinsic.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha1_digest_round_x4","","Emulates `llvm.x86.sha1rnds4` intrinsic. Performs 4 rounds of the message block digest.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"i8"}],"output":{"name":"u32x4"}}],[5,"sha1_digest_block_u32","","Process a block with the SHA-1 algorithm.",null,null],[5,"sha1_digest_block","","Process a block with the SHA-1 algorithm. (See more...)",null,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"sha1"}}],[11,"new","","Construct a `sha` object",60,{"inputs":[],"output":{"name":"sha1"}}],[11,"reset","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"input","","",60,null],[11,"result","","",60,null],[11,"output_bits","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"sha2","crypto","An implementation of the SHA-2 cryptographic hash algorithms.",null,null],[3,"Sha512","crypto::sha2","The SHA-512 hash algorithm with the SHA-512 initial hash value.",null,null],[3,"Sha384","","The SHA-512 hash algorithm with the SHA-384 initial hash value. The result is truncated to 384 bits.",null,null],[3,"Sha512Trunc256","","The SHA-512 hash algorithm with the SHA-512/256 initial hash value. The result is truncated to 256 bits.",null,null],[3,"Sha512Trunc224","","The SHA-512 hash algorithm with the SHA-512/224 initial hash value. The result is truncated to 224 bits.",null,null],[3,"Sha256","","The SHA-256 hash algorithm with the SHA-256 initial hash value.",null,null],[3,"Sha224","","The SHA-256 hash algorithm with the SHA-224 initial hash value. The result is truncated to 224 bits.",null,null],[5,"sha256_schedule_x4","","Performs 4 rounds of the SHA-256 message schedule update.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha256_digest_round_x2","","Emulates `llvm.x86.sha256rnds2` intrinsic.",null,{"inputs":[{"name":"u32x4"},{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[5,"sha256_digest_block_u32","","Process a block with the SHA-256 algorithm.",null,null],[5,"sha256_digest_block","","Process a block with the SHA-256 algorithm. (See more...)",null,null],[5,"sha512_schedule_x2","","Performs 2 rounds of the SHA-512 message schedule update.",null,{"inputs":[{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[5,"sha512_digest_round","","Performs one round of the SHA-512 message block digest.",null,{"inputs":[{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"},{"name":"u64x2"},{"name":"u64"}],"output":{"name":"u64x2"}}],[5,"sha512_digest_block_u64","","Process a block with the SHA-512 algorithm.",null,null],[5,"sha512_digest_block","","Process a block with the SHA-512 algorithm. (See more...)",null,null],[17,"K64","","Constants necessary for SHA-512 family of digests.",null,null],[17,"K64X2","","Constants necessary for SHA-512 family of digests.",null,null],[17,"K32","","Constants necessary for SHA-256 family of digests.",null,null],[17,"K32X4","","Constants necessary for SHA-256 family of digests.",null,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"sha512"}}],[11,"new","","Construct an new instance of a SHA-512 digest.",61,{"inputs":[],"output":{"name":"sha512"}}],[11,"input","","",61,null],[11,"result","","",61,null],[11,"reset","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"sha384"}}],[11,"new","","Construct an new instance of a SHA-384 digest.",62,{"inputs":[],"output":{"name":"sha384"}}],[11,"input","","",62,null],[11,"result","","",62,null],[11,"reset","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"sha512trunc256"}}],[11,"new","","Construct an new instance of a SHA-512/256 digest.",63,{"inputs":[],"output":{"name":"sha512trunc256"}}],[11,"input","","",63,null],[11,"result","","",63,null],[11,"reset","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"sha512trunc224"}}],[11,"new","","Construct an new instance of a SHA-512/224 digest.",64,{"inputs":[],"output":{"name":"sha512trunc224"}}],[11,"input","","",64,null],[11,"result","","",64,null],[11,"reset","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"sha256"}}],[11,"new","","Construct an new instance of a SHA-256 digest.",65,{"inputs":[],"output":{"name":"sha256"}}],[11,"input","","",65,null],[11,"result","","",65,null],[11,"reset","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"sha224"}}],[11,"new","","Construct an new instance of a SHA-224 digest.",66,{"inputs":[],"output":{"name":"sha224"}}],[11,"input","","",66,null],[11,"result","","",66,null],[11,"reset","","",66,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"sha3","crypto","An implementation of the SHA-3 cryptographic hash algorithms.",null,null],[3,"Sha3","crypto::sha3","",null,null],[4,"Sha3Mode","","SHA-3 Modes.",null,null],[13,"Sha3_224","","",67,null],[13,"Sha3_256","","",67,null],[13,"Sha3_384","","",67,null],[13,"Sha3_512","","",67,null],[13,"Shake128","","",67,null],[13,"Shake256","","",67,null],[13,"Keccak224","","",67,null],[13,"Keccak256","","",67,null],[13,"Keccak384","","",67,null],[13,"Keccak512","","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"sha3mode"}}],[11,"digest_length","","Return the expected hash size in bytes specified for `mode`, or 0 for modes with variable output as for shake functions.",67,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_shake","","Return `true` if `mode` is a SHAKE mode.",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_keccak","","Return `true` if `mode` is a Keccak mode.",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","New SHA-3 instanciated from specified SHA-3 `mode`.",68,{"inputs":[{"name":"sha3mode"}],"output":{"name":"sha3"}}],[11,"sha3_224","","New SHA3-224 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"sha3_256","","New SHA3-256 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"sha3_384","","New SHA3-384 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"sha3_512","","New SHA3-512 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"shake_128","","New SHAKE-128 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"shake_256","","New SHAKE-256 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"keccak224","","New Keccak224 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"keccak256","","New Keccak256 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"keccak384","","New Keccak384 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"keccak512","","New Keccak512 instance.",68,{"inputs":[],"output":{"name":"sha3"}}],[11,"input","","",68,null],[11,"result","","",68,null],[11,"reset","","",68,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",68,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",68,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"sosemanuk","crypto","",null,null],[3,"Sosemanuk","crypto::sosemanuk","",null,null],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"sosemanuk"}}],[11,"new","","",69,null],[11,"process","","",69,null],[11,"encrypt","","",69,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[11,"decrypt","","",69,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[0,"symmetriccipher","crypto","",null,null],[4,"SymmetricCipherError","crypto::symmetriccipher","",null,null],[13,"InvalidLength","","",70,null],[13,"InvalidPadding","","",70,null],[8,"BlockEncryptor","","",null,null],[10,"block_size","","",71,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"encrypt_block","","",71,null],[8,"BlockEncryptorX8","","",null,null],[10,"block_size","","",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"encrypt_block_x8","","",72,null],[8,"BlockDecryptor","","",null,null],[10,"block_size","","",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"decrypt_block","","",73,null],[8,"BlockDecryptorX8","","",null,null],[10,"block_size","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"decrypt_block_x8","","",74,null],[8,"Encryptor","","",null,null],[10,"encrypt","","",75,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[8,"Decryptor","","",null,null],[10,"decrypt","","",76,{"inputs":[{"name":"self"},{"name":"refreadbuffer"},{"name":"refwritebuffer"},{"name":"bool"}],"output":{"generics":["bufferresult","symmetricciphererror"],"name":"result"}}],[8,"SynchronousStreamCipher","","",null,null],[10,"process","","",77,null],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"symmetricciphererror"}}],[0,"util","crypto","",null,null],[5,"supports_aesni","crypto::util","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"secure_memset","","",null,null],[5,"fixed_time_eq","","Compare two vectors using a fixed number of operations. If the two vectors are not of equal length, the function returns false immediately.",null,null],[5,"rust_crypto_util_supports_aesni","","",null,null],[5,"rust_crypto_util_fixed_time_eq_asm","","",null,null],[5,"rust_crypto_util_secure_memset","","",null,null],[0,"whirlpool","crypto","An implementation of the Whirlpool cryptographic hash algorithm.",null,null],[3,"Whirlpool","crypto::whirlpool","",null,null],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"whirlpool"}}],[11,"new","","",78,{"inputs":[],"output":{"name":"whirlpool"}}],[11,"input","","",78,null],[11,"result","","",78,null],[11,"reset","","",78,{"inputs":[{"name":"self"}],"output":null}],[11,"output_bits","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_size","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"aesni","crypto","",null,null],[3,"AesNiEncryptor","crypto::aesni","",null,null],[3,"AesNiDecryptor","","",null,null],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"aesniencryptor"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"aesnidecryptor"}}],[11,"new","","",79,null],[11,"new","","",80,null],[11,"block_size","","",79,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encrypt_block","","",79,null],[11,"block_size","","",80,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"decrypt_block","","",80,null]],"paths":[[8,"AeadEncryptor"],[8,"AeadDecryptor"],[4,"KeySize"],[3,"AesGcm"],[3,"AesSafe128Encryptor"],[3,"AesSafe128Decryptor"],[3,"AesSafe192Encryptor"],[3,"AesSafe192Decryptor"],[3,"AesSafe256Encryptor"],[3,"AesSafe256Decryptor"],[3,"AesSafe128EncryptorX8"],[3,"AesSafe128DecryptorX8"],[3,"AesSafe192EncryptorX8"],[3,"AesSafe192DecryptorX8"],[3,"AesSafe256EncryptorX8"],[3,"AesSafe256DecryptorX8"],[3,"Blake2b"],[3,"Blake2s"],[8,"PaddingProcessor"],[3,"NoPadding"],[3,"PkcsPadding"],[3,"EncPadding"],[3,"DecPadding"],[3,"EcbEncryptor"],[3,"EcbDecryptor"],[3,"CbcEncryptor"],[3,"CbcDecryptor"],[3,"CtrMode"],[3,"CtrModeX8"],[3,"Blowfish"],[4,"BufferResult"],[8,"ReadBuffer"],[8,"WriteBuffer"],[3,"RefReadBuffer"],[3,"OwnedReadBuffer"],[3,"RefWriteBuffer"],[3,"BorrowedWriteBuffer"],[3,"OwnedWriteBuffer"],[3,"ChaCha20"],[3,"ChaCha20Poly1305"],[3,"Fe"],[3,"GeP2"],[3,"GeP3"],[3,"GeP1P1"],[3,"GePrecomp"],[3,"GeCached"],[8,"Digest"],[3,"Fortuna"],[3,"Ghash"],[3,"GhashWithC"],[3,"Hc128"],[3,"Hmac"],[8,"Mac"],[3,"MacResult"],[3,"Md5"],[3,"Poly1305"],[3,"Rc4"],[3,"Ripemd160"],[3,"Salsa20"],[3,"ScryptParams"],[3,"Sha1"],[3,"Sha512"],[3,"Sha384"],[3,"Sha512Trunc256"],[3,"Sha512Trunc224"],[3,"Sha256"],[3,"Sha224"],[4,"Sha3Mode"],[3,"Sha3"],[3,"Sosemanuk"],[4,"SymmetricCipherError"],[8,"BlockEncryptor"],[8,"BlockEncryptorX8"],[8,"BlockDecryptor"],[8,"BlockDecryptorX8"],[8,"Encryptor"],[8,"Decryptor"],[8,"SynchronousStreamCipher"],[3,"Whirlpool"],[3,"AesNiEncryptor"],[3,"AesNiDecryptor"]]};
searchIndex["dir"] = {"doc":"Dir utilities for platform-specific operations","items":[[3,"Directories","dir","Parity local data directories",null,null],[12,"base","","Base dir",0,null],[12,"db","","Database dir",0,null],[12,"cache","","Cache dir",0,null],[12,"keys","","Dir to store keys",0,null],[12,"signer","","Signer dir",0,null],[12,"secretstore","","Secrets dir",0,null],[3,"DatabaseDirectories","","Database directories for the given fork.",null,null],[12,"path","","Base path",1,null],[12,"legacy_path","","Legacy path",1,null],[12,"genesis_hash","","Genesis hash",1,null],[12,"fork_name","","Name of current fork",1,null],[12,"spec_name","","Name of current spec",1,null],[5,"default_data_path","","Default data path",null,{"inputs":[],"output":{"name":"string"}}],[5,"default_local_path","","Default local path",null,{"inputs":[],"output":{"name":"string"}}],[5,"default_hypervisor_path","","Default hypervisor path",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"geth","","Geth path",null,{"inputs":[{"name":"bool"}],"output":{"name":"pathbuf"}}],[5,"parity","","Parity path for specific chain",null,{"inputs":[{"name":"str"}],"output":{"name":"pathbuf"}}],[0,"helpers","","Directory helper functions",null,null],[5,"replace_home","dir::helpers","Replaces `$HOME` str with home directory path.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"string"}}],[5,"replace_home_and_local","","Replaces `$HOME` str with home directory path and `$LOCAL` with local path.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"string"}}],[17,"CHAINS_PATH","dir","Platform-specific chains path for standard client",null,null],[17,"CHAINS_PATH_LIGHT","","Platform-specific chains path for light client",null,null],[17,"CACHE_PATH","","Platform-specific cache path",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"directories"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"directories"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"create_dirs","","Create local directories",0,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"generics":["string"],"name":"result"}}],[11,"database","","Database paths.",0,{"inputs":[{"name":"self"},{"name":"h256"},{"generics":["string"],"name":"option"},{"name":"string"}],"output":{"name":"databasedirectories"}}],[11,"ipc_path","","Get the ipc sockets path",0,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"legacy_keys_path","","Legacy keys path",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"pathbuf"}}],[11,"keys_path","","Get the keys path",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"pathbuf"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"databasedirectories"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"databasedirectories"}],"output":{"name":"bool"}}],[11,"legacy_fork_path","","Base DB directory for the given fork.",1,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"spec_root_path","","Spec root directory for the given fork.",1,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"client_path","","Generic client path",1,{"inputs":[{"name":"self"},{"name":"algorithm"}],"output":{"name":"pathbuf"}}],[11,"db_root_path","","DB root path, named after genesis hash",1,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"db_path","","DB path",1,{"inputs":[{"name":"self"},{"name":"algorithm"}],"output":{"name":"pathbuf"}}],[11,"legacy_version_path","","Get the root path for database",1,{"inputs":[{"name":"self"},{"name":"algorithm"}],"output":{"name":"pathbuf"}}],[11,"legacy_user_defaults_path","","Get user defaults path, legacy way",1,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"legacy_snapshot_path","","Get snapshot path, legacy way",1,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"legacy_network_path","","Get user defaults path, legacy way",1,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"user_defaults_path","","Get user defauls path",1,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"snapshot_path","","Get the path for the snapshot directory given the genesis hash and fork name.",1,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"network_path","","Get the path for the network directory.",1,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}]],"paths":[[3,"Directories"],[3,"DatabaseDirectories"]]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"generics":["usize"],"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["usize"],"name":"result"}}],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["edit_distance"] = {"doc":"Edit distance","items":[[5,"edit_distance","edit_distance","Returns the edit distance between strings `a` and `b`.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"read","","",0,null],[11,"read_to_end","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"fill_buf","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["elastic_array"] = {"doc":"","items":[[3,"ElasticArray2","elastic_array","",null,null],[3,"ElasticArray4","","",null,null],[3,"ElasticArray8","","",null,null],[3,"ElasticArray16","","",null,null],[3,"ElasticArray32","","",null,null],[3,"ElasticArray36","","",null,null],[3,"ElasticArray64","","",null,null],[3,"ElasticArray128","","",null,null],[3,"ElasticArray256","","",null,null],[3,"ElasticArray512","","",null,null],[3,"ElasticArray1024","","",null,null],[3,"ElasticArray2048","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray2"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"elasticarray2"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"elasticarray2"}}],[11,"from_slice","","",0,null],[11,"from_vec","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray2"}}],[11,"push","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",0,null],[11,"into_vec","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",0,null],[11,"deref","","",0,null],[11,"as_ref","","",0,null],[11,"borrow","","",0,null],[11,"deref_mut","","",0,null],[11,"from","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray4"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"elasticarray4"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"elasticarray4"}}],[11,"from_slice","","",1,null],[11,"from_vec","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray4"}}],[11,"push","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",1,null],[11,"into_vec","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",1,null],[11,"deref","","",1,null],[11,"as_ref","","",1,null],[11,"borrow","","",1,null],[11,"deref_mut","","",1,null],[11,"from","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray8"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"elasticarray8"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"elasticarray8"}}],[11,"from_slice","","",2,null],[11,"from_vec","","",2,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray8"}}],[11,"push","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",2,null],[11,"into_vec","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",2,null],[11,"deref","","",2,null],[11,"as_ref","","",2,null],[11,"borrow","","",2,null],[11,"deref_mut","","",2,null],[11,"from","","",2,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray16"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"elasticarray16"}}],[11,"new","","",3,{"inputs":[],"output":{"name":"elasticarray16"}}],[11,"from_slice","","",3,null],[11,"from_vec","","",3,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray16"}}],[11,"push","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",3,null],[11,"into_vec","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",3,null],[11,"deref","","",3,null],[11,"as_ref","","",3,null],[11,"borrow","","",3,null],[11,"deref_mut","","",3,null],[11,"from","","",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray32"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"elasticarray32"}}],[11,"new","","",4,{"inputs":[],"output":{"name":"elasticarray32"}}],[11,"from_slice","","",4,null],[11,"from_vec","","",4,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray32"}}],[11,"push","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",4,null],[11,"into_vec","","",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",4,null],[11,"deref","","",4,null],[11,"as_ref","","",4,null],[11,"borrow","","",4,null],[11,"deref_mut","","",4,null],[11,"from","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",5,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray36"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"elasticarray36"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"elasticarray36"}}],[11,"from_slice","","",5,null],[11,"from_vec","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray36"}}],[11,"push","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",5,null],[11,"into_vec","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",5,null],[11,"deref","","",5,null],[11,"as_ref","","",5,null],[11,"borrow","","",5,null],[11,"deref_mut","","",5,null],[11,"from","","",5,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",6,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray64"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"elasticarray64"}}],[11,"new","","",6,{"inputs":[],"output":{"name":"elasticarray64"}}],[11,"from_slice","","",6,null],[11,"from_vec","","",6,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray64"}}],[11,"push","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",6,null],[11,"into_vec","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",6,null],[11,"deref","","",6,null],[11,"as_ref","","",6,null],[11,"borrow","","",6,null],[11,"deref_mut","","",6,null],[11,"from","","",6,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray128"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"elasticarray128"}}],[11,"new","","",7,{"inputs":[],"output":{"name":"elasticarray128"}}],[11,"from_slice","","",7,null],[11,"from_vec","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray128"}}],[11,"push","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",7,null],[11,"into_vec","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",7,null],[11,"deref","","",7,null],[11,"as_ref","","",7,null],[11,"borrow","","",7,null],[11,"deref_mut","","",7,null],[11,"from","","",7,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray256"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"elasticarray256"}}],[11,"new","","",8,{"inputs":[],"output":{"name":"elasticarray256"}}],[11,"from_slice","","",8,null],[11,"from_vec","","",8,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray256"}}],[11,"push","","",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",8,null],[11,"into_vec","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",8,null],[11,"deref","","",8,null],[11,"as_ref","","",8,null],[11,"borrow","","",8,null],[11,"deref_mut","","",8,null],[11,"from","","",8,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray512"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"elasticarray512"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"elasticarray512"}}],[11,"from_slice","","",9,null],[11,"from_vec","","",9,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray512"}}],[11,"push","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",9,null],[11,"into_vec","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",9,null],[11,"deref","","",9,null],[11,"as_ref","","",9,null],[11,"borrow","","",9,null],[11,"deref_mut","","",9,null],[11,"from","","",9,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray1024"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"elasticarray1024"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"elasticarray1024"}}],[11,"from_slice","","",10,null],[11,"from_vec","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray1024"}}],[11,"push","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",10,null],[11,"into_vec","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",10,null],[11,"deref","","",10,null],[11,"as_ref","","",10,null],[11,"borrow","","",10,null],[11,"deref_mut","","",10,null],[11,"from","","",10,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"heap_size_of_children","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"elasticarray2048"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"elasticarray2048"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"elasticarray2048"}}],[11,"from_slice","","",11,null],[11,"from_vec","","",11,{"inputs":[{"name":"vec"}],"output":{"name":"elasticarray2048"}}],[11,"push","","",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"append_slice","","",11,null],[11,"into_vec","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"insert_slice","","",11,null],[11,"deref","","",11,null],[11,"as_ref","","",11,null],[11,"borrow","","",11,null],[11,"deref_mut","","",11,null],[11,"from","","",11,null],[14,"impl_elastic_array","","",null,null]],"paths":[[3,"ElasticArray2"],[3,"ElasticArray4"],[3,"ElasticArray8"],[3,"ElasticArray16"],[3,"ElasticArray32"],[3,"ElasticArray36"],[3,"ElasticArray64"],[3,"ElasticArray128"],[3,"ElasticArray256"],[3,"ElasticArray512"],[3,"ElasticArray1024"],[3,"ElasticArray2048"]]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard error.","items":[[3,"Logger","env_logger","The logger.",null,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the Logger. It can be used to customize the log format, change the enviromental variable used to provide the logging directives and also set the default log level filter.",null,null],[4,"LogTarget","","Log target, either stdout or stderr.",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"generics":["setloggererror"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",1,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",1,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"},{"name":"loglevelfilter"}],"output":{"name":"self"}}],[11,"format","","Sets the format function for formatting the log output.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"target","","Sets the target for the log output.",1,{"inputs":[{"name":"self"},{"name":"logtarget"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string in the same form as the RUST_LOG environment variable.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"init","","Initializes the global logger with an env logger.",1,{"inputs":[{"name":"self"}],"output":{"generics":["setloggererror"],"name":"result"}}],[11,"build","","Build an env logger.",1,{"inputs":[{"name":"self"}],"output":{"name":"logger"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"logger"}}],[11,"filter","","",2,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"enabled","","",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"log","","",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}]],"paths":[[4,"LogTarget"],[3,"LogBuilder"],[3,"Logger"]]};
searchIndex["error_chain"] = {"doc":"A library for consistent and reliable error handling","items":[[3,"Backtrace","error_chain","Representation of an owned and self-contained backtrace.",null,null],[3,"Iter","","Iterator over the error chain using the `Error::cause()` method.",null,null],[3,"DisplayChain","","A struct which formats an error for output.",null,null],[0,"example_generated","","These modules show an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Error","error_chain::example_generated","The Error type.",null,null],[12,"0","","The kind of the error.",0,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",1,null],[13,"Inner","","Link to another `ErrorChain`.",1,null],[13,"Io","","Link to a `std::io::Error` type.",1,null],[13,"Custom","","A custom error kind.",1,null],[0,"inner","","Another code generated by the macro.",null,null],[3,"Error","error_chain::example_generated::inner","The Error type.",null,null],[12,"0","","The kind of the error.",2,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",3,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",2,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",2,null],[11,"with_chain","","",2,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",2,null],[11,"iter","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"extract_backtrace","","",2,{"inputs":[{"name":"error"}],"output":{"generics":["internalbacktrace"],"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",2,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",2,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",2,{"inputs":[{"generics":["error"],"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",2,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",2,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","A short description of the error. This method is identical to `Error::description()`",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[6,"Result","error_chain::example_generated","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",0,null],[11,"with_chain","","",0,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",0,null],[11,"iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"extract_backtrace","","",0,{"inputs":[{"name":"error"}],"output":{"generics":["internalbacktrace"],"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",0,{"inputs":[{"generics":["error"],"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",0,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",0,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","A short description of the error. This method is identical to `Error::description()`",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[8,"ExitCode","error_chain","Represents a value that can be used as the exit status of the process. See `quick_main!`.",null,null],[10,"code","","Returns the value to use as the exit status.",6,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"ChainedError","","This trait is implemented on all the errors generated by the `error_chain` macro.",null,null],[16,"ErrorKind","","Associated kind type.",7,null],[10,"from_kind","","Constructs an error from a kind, and generates a backtrace.",7,null],[10,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",7,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[10,"kind","","Returns the kind of the error.",7,null],[10,"iter","","Iterates over the error chain.",7,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[10,"backtrace","","Returns the backtrace associated with this error.",7,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"display_chain","","Returns an object which implements `Display` for printing the full context of this error.",7,{"inputs":[{"name":"self"}],"output":{"name":"displaychain"}}],[10,"chain_err","","Extends the error chain with a new entry.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new iterator over the error chain using `Error::cause()`.",8,{"inputs":[{"generics":["error"],"name":"option"}],"output":{"name":"iter"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"error_chain","","Macro for generating error types and traits. See crate level documentation for details.",null,null],[14,"quick_main","","Convenient wrapper to be able to use `?` and such in the main. You can use it with a separated function:",null,null],[14,"bail","","Exits a function early with an error",null,null],[14,"ensure","","Exits a function early with an error if the condition is not satisfied",null,null],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",10,{"inputs":[],"output":{"name":"backtrace"}}],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",10,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",10,null],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",10,null],[11,"from","","",10,{"inputs":[{"generics":["backtraceframe"],"name":"vec"}],"output":{"name":"backtrace"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"backtrace"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"into","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["backtraceframe"],"name":"vec"}}]],"paths":[[3,"Error"],[4,"ErrorKind"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[8,"ResultExt"],[8,"ExitCode"],[8,"ChainedError"],[3,"Iter"],[3,"DisplayChain"],[3,"Backtrace"]]};
searchIndex["ethabi"] = {"doc":"Ethereum ABI encoding decoding library.","items":[[3,"Constructor","ethabi","Contract constructor specification.",null,null],[12,"inputs","","Constructor input.",0,null],[3,"Contract","","API building calls to contracts ABI.",null,null],[12,"constructor","","Contract constructor.",1,null],[12,"functions","","Contract functions.",1,null],[12,"events","","Contract events.",1,null],[12,"fallback","","Contract has fallback function.",1,null],[3,"Functions","","Contract functions interator.",null,null],[3,"Events","","Contract events interator.",null,null],[3,"Error","","The Error type.",null,null],[12,"0","","The kind of the error.",2,null],[3,"TopicFilter","","Topic filter.",null,null],[12,"topic0","","Usually (for not-anonymous transactions) the first topic is event signature.",3,null],[12,"topic1","","Second topic.",3,null],[12,"topic2","","Third topic.",3,null],[12,"topic3","","Fourth topic.",3,null],[3,"RawTopicFilter","","Raw topic filter.",null,null],[12,"topic0","","Topic.",4,null],[12,"topic1","","Topic.",4,null],[12,"topic2","","Topic.",4,null],[3,"Function","","Contract function specification.",null,null],[12,"name","","Function name.",5,null],[12,"inputs","","Function input.",5,null],[12,"outputs","","Function output.",5,null],[12,"constant","","Constant function.",5,null],[3,"Param","","Function param.",null,null],[12,"name","","Param name.",6,null],[12,"kind","","Param type.",6,null],[3,"Log","","Decoded log.",null,null],[12,"params","","Log params.",7,null],[3,"RawLog","","Ethereum log.",null,null],[12,"topics","","Indexed event params are represented as log topics.",8,null],[12,"data","","Others are just plain data.",8,null],[3,"LogParam","","Decoded log param.",null,null],[12,"name","","Decoded log name.",9,null],[12,"value","","Decoded log value.",9,null],[3,"Event","","Contract event.",null,null],[12,"name","","Event name.",10,null],[12,"inputs","","Event input.",10,null],[12,"anonymous","","If anonymous, event cannot be found using `from` filter.",10,null],[3,"EventParam","","Event param specification.",null,null],[12,"name","","Param name.",11,null],[12,"kind","","Param type.",11,null],[12,"indexed","","Indexed flag. If true, param is used to build block bloom.",11,null],[4,"ParamModifier","","Modifier for parameter types.",null,null],[13,"Storage","","The storage modifier associated with parameter types.",12,null],[4,"ParamType","","Function and event param types.",null,null],[13,"Address","","Address.",13,null],[13,"Bytes","","Bytes.",13,null],[13,"Int","","Signed integer.",13,null],[13,"Uint","","Unisgned integer.",13,null],[13,"Bool","","Boolean.",13,null],[13,"String","","String.",13,null],[13,"Array","","Array of unknown size.",13,null],[13,"FixedBytes","","Vector of bytes with fixed size.",13,null],[13,"FixedArray","","Array with fixed size.",13,null],[4,"Token","","Ethereum ABI params.",null,null],[13,"Address","","Address.",14,null],[13,"FixedBytes","","Vector of bytes with known size.",14,null],[13,"Bytes","","Vector of bytes of unknown size.",14,null],[13,"Int","","Signed integer.",14,null],[13,"Uint","","Unisnged integer.",14,null],[13,"Bool","","Boolean value.",14,null],[13,"String","","String.",14,null],[13,"FixedArray","","Array with known size.",14,null],[13,"Array","","Array of params with unknown size.",14,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",15,null],[13,"SerdeJson","","",15,null],[13,"ParseInt","","",15,null],[13,"Utf8","","",15,null],[13,"Hex","","",15,null],[13,"InvalidName","","",15,null],[13,"InvalidData","","",15,null],[4,"Topic","","Acceptable topic possibilities.",null,null],[13,"Any","","Match any.",16,null],[13,"OneOf","","Match any of the hashes.",16,null],[13,"This","","Match only this hash.",16,null],[5,"encode","","Encodes vector of tokens into ABI compliant vector of bytes.",null,null],[5,"decode","","Decodes ABI compliant vector of bytes into vector of tokens described by types param.",null,null],[0,"param_type","","Function and event param types.",null,null],[3,"Writer","ethabi::param_type","Output formatter for param type.",null,null],[3,"Reader","","Used to convert param type represented as a string to rust structure.",null,null],[4,"ParamModifier","","Modifier for parameter types.",null,null],[13,"Storage","","The storage modifier associated with parameter types.",12,null],[4,"ParamType","","Function and event param types.",null,null],[13,"Address","","Address.",13,null],[13,"Bytes","","Bytes.",13,null],[13,"Int","","Signed integer.",13,null],[13,"Uint","","Unisgned integer.",13,null],[13,"Bool","","Boolean.",13,null],[13,"String","","String.",13,null],[13,"Array","","Array of unknown size.",13,null],[13,"FixedBytes","","Vector of bytes with fixed size.",13,null],[13,"FixedArray","","Array with fixed size.",13,null],[11,"deserialize","ethabi","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"parammodifier"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"parammodifier"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"paramtype"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"paramtype"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"paramtype"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","ethabi::param_type","Converts string to param type.",17,{"inputs":[{"name":"str"}],"output":{"generics":["paramtype","error"],"name":"result"}}],[11,"write","","Returns string which is a formatted represenation of param.",18,{"inputs":[{"name":"paramtype"}],"output":{"name":"string"}}],[0,"token","ethabi","ABI param and parsing for it.",null,null],[3,"LenientTokenizer","ethabi::token","Tries to parse string as a token. Does not require string to clearly represent the value.",null,null],[3,"StrictTokenizer","","Tries to parse string as a token. Require string to clearly represent the value.",null,null],[4,"Token","","Ethereum ABI params.",null,null],[13,"Address","","Address.",14,null],[13,"FixedBytes","","Vector of bytes with known size.",14,null],[13,"Bytes","","Vector of bytes of unknown size.",14,null],[13,"Int","","Signed integer.",14,null],[13,"Uint","","Unisnged integer.",14,null],[13,"Bool","","Boolean value.",14,null],[13,"String","","String.",14,null],[13,"FixedArray","","Array with known size.",14,null],[13,"Array","","Array of params with unknown size.",14,null],[11,"tokenize_address","","",19,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"tokenize_string","","",19,{"inputs":[{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"tokenize_bool","","",19,{"inputs":[{"name":"str"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"tokenize_bytes","","",19,{"inputs":[{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"tokenize_fixed_bytes","","",19,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"tokenize_uint","","",19,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"tokenize_int","","",19,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"tokenize_address","","",20,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"tokenize_string","","",20,{"inputs":[{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"tokenize_bool","","",20,{"inputs":[{"name":"str"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"tokenize_bytes","","",20,{"inputs":[{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"tokenize_fixed_bytes","","",20,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"tokenize_uint","","",20,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"tokenize_int","","",20,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","ethabi","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"type_check","","Check whether the type of the token matches the given parameter type.",14,{"inputs":[{"name":"self"},{"name":"paramtype"}],"output":{"name":"bool"}}],[11,"to_address","","Converts token to...",14,{"inputs":[{"name":"self"}],"output":{"generics":["address"],"name":"option"}}],[11,"to_fixed_bytes","","Converts token to...",14,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"to_bytes","","Converts token to...",14,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"to_int","","Converts token to...",14,{"inputs":[{"name":"self"}],"output":{"generics":["uint"],"name":"option"}}],[11,"to_uint","","Converts token to...",14,{"inputs":[{"name":"self"}],"output":{"generics":["uint"],"name":"option"}}],[11,"to_bool","","Converts token to...",14,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"to_string","","Converts token to...",14,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"to_fixed_array","","Converts token to...",14,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"to_array","","Converts token to...",14,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"types_check","","Check if all the types of the tokens match the given parameter types.",14,null],[8,"Tokenizer","ethabi::token","This trait should be used to parse string values as tokens.",null,null],[11,"tokenize","","Tries to parse a string as a token of given type.",21,{"inputs":[{"name":"paramtype"},{"name":"str"}],"output":{"generics":["token","error"],"name":"result"}}],[11,"tokenize_fixed_array","","Tries to parse a value as a vector of tokens of fixed size.",21,{"inputs":[{"name":"str"},{"name":"paramtype"},{"name":"usize"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"tokenize_array","","Tries to parse a value as a vector of tokens.",21,{"inputs":[{"name":"str"},{"name":"paramtype"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"tokenize_address","","Tries to parse a value as an address.",21,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"tokenize_string","","Tries to parse a value as a string.",21,{"inputs":[{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[10,"tokenize_bool","","Tries to parse a value as a bool.",21,{"inputs":[{"name":"str"}],"output":{"generics":["bool","error"],"name":"result"}}],[10,"tokenize_bytes","","Tries to parse a value as bytes.",21,{"inputs":[{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"tokenize_fixed_bytes","","Tries to parse a value as bytes.",21,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"tokenize_uint","","Tries to parse a value as unsigned integer.",21,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"tokenize_int","","Tries to parse a value as signed integer.",21,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","ethabi","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"constructor"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"constructor"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"constructor"}],"output":{"name":"bool"}}],[11,"encode_input","","Prepares ABI constructor call with given input params.",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"contract"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"contract"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"contract"}],"output":{"name":"bool"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"generics":["contract"],"name":"result"}}],[11,"load","","Loads contract from json.",1,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"constructor","","Creates constructor call builder.",1,{"inputs":[{"name":"self"}],"output":{"generics":["constructor"],"name":"option"}}],[11,"function","","Creates function call builder.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["function"],"name":"result"}}],[11,"event","","Creates event decoder.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["event"],"name":"result"}}],[11,"functions","","Iterate over all functions of the contract in arbitrary order.",1,{"inputs":[{"name":"self"}],"output":{"name":"functions"}}],[11,"events","","Iterate over all events of the contract in arbitrary order.",1,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"fallback","","Returns true if contract has fallback",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",2,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",2,null],[11,"with_chain","","",2,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",2,null],[11,"iter","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"extract_backtrace","","",2,{"inputs":[{"name":"error"}],"output":{"generics":["internalbacktrace"],"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",2,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",2,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",2,{"inputs":[{"generics":["error"],"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",2,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",2,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","A short description of the error. This method is identical to `Error::description()`",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"parseinterror"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",15,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",15,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",15,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"signature","","Event signature",10,{"inputs":[{"name":"self"}],"output":{"name":"hash"}}],[11,"filter","","Creates topic filter",10,{"inputs":[{"name":"self"},{"name":"rawtopicfilter"}],"output":{"generics":["topicfilter"],"name":"result"}}],[11,"parse_log","","Parses `RawLog` and retrieves all log params from it.",10,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"generics":["log"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"eventparam"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"eventparam"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"eventparam"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"rawtopicfilter"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"rawtopicfilter"}],"output":{"name":"bool"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"rawtopicfilter"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"topicfilter"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"topicfilter"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"topicfilter"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"topic"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"topic"}],"output":{"name":"bool"}}],[11,"map","","Map",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"topic"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",16,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",16,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",16,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"serialize","","",16,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"function"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"function"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"function"}],"output":{"name":"bool"}}],[11,"encode_input","","Prepares ABI function call with given input params.",5,null],[11,"decode_output","","Parses the ABI function output to list of tokens.",5,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"name":"bool"}}],[11,"from","","",8,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"logparam"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"logparam"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"log"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"log"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"param"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"param"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"param"}],"output":{"name":"bool"}}],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[6,"Address","","ABI address.",null,null],[6,"FixedBytes","","ABI fixed bytes.",null,null],[6,"Bytes","","ABI bytes.",null,null],[6,"Int","","ABI signed integer.",null,null],[6,"Uint","","ABI unsigned integer.",null,null],[6,"Hash","","Commonly used FixedBytes of size 32",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["error"],"name":"result"}}],[8,"ParseLog","","trait common to things (events) that have an associated `Log` type that can be parsed from a `RawLog`",null,null],[16,"Log","","the associated `Log` type that can be parsed from a `RawLog` by calling `parse_log`",25,null],[10,"parse_log","","parse the associated `Log` type from a `RawLog`",25,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"name":"result"}}],[8,"LogFilter","","Common filtering functions that are available for any event.",null,null],[10,"wildcard_filter","","Match any log parameters.",26,{"inputs":[{"name":"self"}],"output":{"name":"topicfilter"}}],[8,"ContractFunction","","Contract functions generated by ethabi-derive",null,null],[16,"Output","","Output types of the contract function",27,null],[10,"encoded","","Encodes the input for the contract function",27,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[10,"output","","Decodes the given bytes output for the contract function",27,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"result"}}]],"paths":[[3,"Constructor"],[3,"Contract"],[3,"Error"],[3,"TopicFilter"],[3,"RawTopicFilter"],[3,"Function"],[3,"Param"],[3,"Log"],[3,"RawLog"],[3,"LogParam"],[3,"Event"],[3,"EventParam"],[4,"ParamModifier"],[4,"ParamType"],[4,"Token"],[4,"ErrorKind"],[4,"Topic"],[3,"Reader"],[3,"Writer"],[3,"LenientTokenizer"],[3,"StrictTokenizer"],[8,"Tokenizer"],[3,"Functions"],[3,"Events"],[8,"ResultExt"],[8,"ParseLog"],[8,"LogFilter"],[8,"ContractFunction"]]};
searchIndex["ethabi_contract"] = {"doc":"","items":[[14,"use_contract","ethabi_contract","",null,null]],"paths":[]};
searchIndex["ethabi_derive"] = {"doc":"","items":[[5,"ethabi_derive","ethabi_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["ethash"] = {"doc":"","items":[[3,"NodeCacheBuilder","ethash","",null,null],[3,"ProofOfWork","","Computation result",null,null],[12,"value","","Difficulty boundary",0,null],[12,"mix_hash","","Mix",0,null],[3,"SeedHashCompute","","",null,null],[3,"EthashManager","","Light/Full cache manager.",null,null],[4,"OptimizeFor","","",null,null],[13,"Cpu","","",1,null],[13,"Memory","","",1,null],[5,"quick_get_difficulty","","Difficulty quick check for POW preverification",null,null],[5,"slow_hash_block_number","","",null,null],[11,"default","","",2,{"inputs":[],"output":{"name":"seedhashcompute"}}],[11,"hash_block_number","","",2,null],[11,"hash_epoch","","",2,null],[11,"resume_compute_seedhash","","",2,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"optimizefor"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"optimizefor"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"nodecachebuilder"}}],[11,"light","","",3,{"inputs":[{"name":"self"},{"name":"path"},{"name":"u64"}],"output":{"name":"light"}}],[11,"light_from_file","","",3,{"inputs":[{"name":"self"},{"name":"path"},{"name":"u64"}],"output":{"generics":["light"],"name":"result"}}],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_file","","",3,{"inputs":[{"name":"self"},{"name":"p"},{"name":"u64"}],"output":{"generics":["nodecache"],"name":"result"}}],[11,"new_cache","","",3,{"inputs":[{"name":"self"},{"name":"p"},{"name":"u64"}],"output":{"name":"nodecache"}}],[17,"ETHASH_EPOCH_LENGTH","","",null,null],[11,"new","","Create a new new instance of ethash manager",4,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"ethashmanager"}}],[11,"compute_light","","Calculate the light client data `block_number` - Block number to check `light` - The light client handler `header_hash` - The header hash to pack into the mix `nonce` - The nonce to pack into the mix",4,null]],"paths":[[3,"ProofOfWork"],[4,"OptimizeFor"],[3,"SeedHashCompute"],[3,"NodeCacheBuilder"],[3,"EthashManager"]]};
searchIndex["ethbloom"] = {"doc":"","items":[[3,"Bloom","ethbloom","Unformatted binary data of fixed length.",null,null],[12,"0","","",0,null],[3,"BloomRef","","",null,null],[4,"Input","","",null,null],[13,"Raw","","",1,null],[13,"Hash","","",1,null],[11,"from","","",0,null],[11,"deref","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"deref_mut","","",0,null],[11,"new","","Create a new, zero-initialised, instance.",0,{"inputs":[],"output":{"name":"bloom"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",0,{"inputs":[],"output":{"name":"bloom"}}],[11,"len","","Get the size of this object in bytes.",0,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",0,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",0,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",0,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"random","","Create a new, cryptographically random, instance.",0,{"inputs":[],"output":{"name":"bloom"}}],[11,"randomize","","Assign self have a cryptographically random value.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",0,null],[11,"index_mut","","",0,null],[11,"index","","",0,null],[11,"index_mut","","",0,null],[11,"bitor","","",0,null],[11,"bitand","","",0,null],[11,"bitxor","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"bloom"}}],[11,"from","","",0,null],[11,"hex","","Get a hex representation.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["bloom","fromhexerror"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"bloom"}}],[11,"heap_size_of_children","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bloomref"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"input"}],"output":{"name":"bloom"}}],[11,"is_empty","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_input","","",0,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"contains_bloom","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"accrue","","",0,{"inputs":[{"name":"self"},{"name":"input"}],"output":null}],[11,"accrue_bloom","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"data","","",0,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bloomref"}}],[11,"is_empty","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_input","","",2,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"contains_bloom","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"data","","",2,null],[11,"from","","",2,null],[11,"from","","",2,{"inputs":[{"name":"bloom"}],"output":{"name":"self"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}]],"paths":[[3,"Bloom"],[4,"Input"],[3,"BloomRef"]]};
searchIndex["ethcore"] = {"doc":"Ethcore library","items":[[4,"CreateContractAddress","ethcore","Specifies how an address is calculated for a new contract.",null,null],[13,"FromSenderAndNonce","","Address is calculated from nonce and sender. Pre EIP-86 (Metropolis)",0,null],[13,"FromCodeHash","","Address is calculated from code hash. Default since EIP-86",0,null],[13,"FromSenderAndCodeHash","","Address is calculated from code hash and sender. Used by CREATE_P2SH instruction.",0,null],[0,"views","","Block oriented views onto rlp.",null,null],[3,"ViewRlp","ethcore::views","Wrapper for trusted rlp, which is expected to be valid, for use in views When created with view!, records the file and line where it was created for debugging",null,null],[12,"rlp","","Wrapped Rlp, expected to be valid",1,null],[3,"BlockView","","View onto block rlp.",null,null],[3,"BodyView","","View onto block rlp.",null,null],[3,"HeaderView","","View onto block header rlp.",null,null],[3,"TransactionView","","View onto transaction rlp.",null,null],[11,"at","","Returns rlp at the given index, panics if no rlp at that index",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"viewrlp"}}],[11,"iter","","Returns an iterator over all rlp values",1,{"inputs":[{"name":"self"}],"output":{"name":"viewrlpiterator"}}],[11,"as_val","","Returns decoded value of this rlp, panics if rlp not valid",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"val_at","","Returns decoded value at the given index, panics not present or valid at that index",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"list_at","","Returns decoded list of values, panics if rlp is invalid",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"item_count","","Returns the number of items in the rlp, panics if it is not a list of rlp values",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_raw","","Returns raw rlp bytes",1,null],[11,"new","","Creates new view onto block from rlp. Use the `view!` macro to create this view in order to capture debugging info.",2,{"inputs":[{"name":"viewrlp"}],"output":{"name":"blockview"}}],[11,"hash","","Block header hash.",2,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"rlp","","Return reference to underlaying rlp.",2,{"inputs":[{"name":"self"}],"output":{"name":"viewrlp"}}],[11,"header","","Create new Header object from header rlp.",2,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"header_rlp","","Return header rlp.",2,{"inputs":[{"name":"self"}],"output":{"name":"viewrlp"}}],[11,"header_view","","Create new header view obto block head rlp.",2,{"inputs":[{"name":"self"}],"output":{"name":"headerview"}}],[11,"transactions","","Return List of transactions in given block.",2,{"inputs":[{"name":"self"}],"output":{"generics":["unverifiedtransaction"],"name":"vec"}}],[11,"localized_transactions","","Return List of transactions with additional localization info.",2,{"inputs":[{"name":"self"}],"output":{"generics":["localizedtransaction"],"name":"vec"}}],[11,"transactions_rlp","","Return the raw rlp for the transactions in the given block.",2,{"inputs":[{"name":"self"}],"output":{"name":"viewrlp"}}],[11,"transactions_count","","Return number of transactions in given block, without deserializing them.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"transaction_views","","Return List of transactions in given block.",2,{"inputs":[{"name":"self"}],"output":{"generics":["transactionview"],"name":"vec"}}],[11,"transaction_hashes","","Return transaction hashes.",2,{"inputs":[{"name":"self"}],"output":{"generics":["h256"],"name":"vec"}}],[11,"transaction_at","","Returns transaction at given index without deserializing unnecessary data.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["unverifiedtransaction"],"name":"option"}}],[11,"localized_transaction_at","","Returns localized transaction at given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["localizedtransaction"],"name":"option"}}],[11,"uncles_rlp","","Returns raw rlp for the uncles in the given block",2,{"inputs":[{"name":"self"}],"output":{"name":"viewrlp"}}],[11,"uncles","","Return list of uncles of given block.",2,{"inputs":[{"name":"self"}],"output":{"generics":["header"],"name":"vec"}}],[11,"uncles_count","","Return number of uncles in given block, without deserializing them.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"uncle_views","","Return List of transactions in given block.",2,{"inputs":[{"name":"self"}],"output":{"generics":["headerview"],"name":"vec"}}],[11,"uncle_hashes","","Return list of uncle hashes of given block.",2,{"inputs":[{"name":"self"}],"output":{"generics":["h256"],"name":"vec"}}],[11,"uncle_at","","Return nth uncle.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["header"],"name":"option"}}],[11,"uncle_rlp_at","","Return nth uncle rlp.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bytes"],"name":"option"}}],[11,"new","","Creates new view onto block body from rlp. Use the `view!` macro to create this view in order to capture debugging info.",3,{"inputs":[{"name":"viewrlp"}],"output":{"name":"bodyview"}}],[11,"rlp","","Return reference to underlaying rlp.",3,{"inputs":[{"name":"self"}],"output":{"name":"viewrlp"}}],[11,"transactions","","Return List of transactions in given block.",3,{"inputs":[{"name":"self"}],"output":{"generics":["unverifiedtransaction"],"name":"vec"}}],[11,"localized_transactions","","Return List of transactions with additional localization info.",3,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"blocknumber"}],"output":{"generics":["localizedtransaction"],"name":"vec"}}],[11,"transactions_rlp","","Return the raw rlp for the transactions in the given block.",3,{"inputs":[{"name":"self"}],"output":{"name":"viewrlp"}}],[11,"transactions_count","","Return number of transactions in given block, without deserializing them.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"transaction_views","","Return List of transactions in given block.",3,{"inputs":[{"name":"self"}],"output":{"generics":["transactionview"],"name":"vec"}}],[11,"transaction_hashes","","Return transaction hashes.",3,{"inputs":[{"name":"self"}],"output":{"generics":["h256"],"name":"vec"}}],[11,"transaction_at","","Returns transaction at given index without deserializing unnecessary data.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["unverifiedtransaction"],"name":"option"}}],[11,"localized_transaction_at","","Returns localized transaction at given index.",3,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"blocknumber"},{"name":"usize"}],"output":{"generics":["localizedtransaction"],"name":"option"}}],[11,"uncles_rlp","","Returns raw rlp for the uncles in the given block",3,{"inputs":[{"name":"self"}],"output":{"name":"viewrlp"}}],[11,"uncles","","Return list of uncles of given block.",3,{"inputs":[{"name":"self"}],"output":{"generics":["header"],"name":"vec"}}],[11,"uncles_count","","Return number of uncles in given block, without deserializing them.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"uncle_views","","Return List of transactions in given block.",3,{"inputs":[{"name":"self"}],"output":{"generics":["headerview"],"name":"vec"}}],[11,"uncle_hashes","","Return list of uncle hashes of given block.",3,{"inputs":[{"name":"self"}],"output":{"generics":["h256"],"name":"vec"}}],[11,"uncle_at","","Return nth uncle.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["header"],"name":"option"}}],[11,"uncle_rlp_at","","Return nth uncle rlp.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bytes"],"name":"option"}}],[11,"new","","Creates a new Header view from valid ViewRlp Use the `view!` macro to create this view in order to capture debugging info.",4,{"inputs":[{"name":"viewrlp"}],"output":{"name":"headerview"}}],[11,"hash","","Returns header hash.",4,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"rlp","","Returns raw rlp.",4,{"inputs":[{"name":"self"}],"output":{"name":"viewrlp"}}],[11,"parent_hash","","Returns parent hash.",4,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"uncles_hash","","Returns uncles hash.",4,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"author","","Returns author.",4,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"state_root","","Returns state root.",4,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"transactions_root","","Returns transactions root.",4,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"receipts_root","","Returns block receipts root.",4,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"log_bloom","","Returns block log bloom.",4,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"difficulty","","Returns block difficulty.",4,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"number","","Returns block number.",4,{"inputs":[{"name":"self"}],"output":{"name":"blocknumber"}}],[11,"gas_limit","","Returns block gas limit.",4,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"gas_used","","Returns block gas used.",4,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"timestamp","","Returns timestamp.",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"extra_data","","Returns block extra data.",4,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"seal","","Returns a vector of post-RLP-encoded seal fields.",4,{"inputs":[{"name":"self"}],"output":{"generics":["bytes"],"name":"vec"}}],[11,"decode_seal","","Returns a vector of seal fields (RLP-decoded).",4,{"inputs":[{"name":"self"}],"output":{"generics":["vec","decodererror"],"name":"result"}}],[11,"new","","Creates new view onto valid transaction rlp. Use the `view!` macro to create this view in order to capture debugging info.",5,{"inputs":[{"name":"viewrlp"}],"output":{"name":"transactionview"}}],[11,"rlp","","Return reference to underlaying rlp.",5,{"inputs":[{"name":"self"}],"output":{"name":"viewrlp"}}],[11,"hash","","Returns transaction hash.",5,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"nonce","","Get the nonce field of the transaction.",5,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"gas_price","","Get the gas_price field of the transaction.",5,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"gas","","Get the gas field of the transaction.",5,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"value","","Get the value field of the transaction.",5,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"data","","Get the data field of the transaction.",5,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"v","","Get the v field of the transaction.",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"r","","Get the r field of the transaction.",5,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"s","","Get the s field of the transaction.",5,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[0,"account_provider","ethcore","Account management.",null,null],[3,"Signature","ethcore::account_provider","Signature encoded as RSV components",null,null],[4,"Derivation","","Derivation scheme for keys",null,null],[13,"Hierarchical","","Hierarchical derivation",6,null],[13,"SoftHash","","Hash derivation, soft.",6,null],[13,"HardHash","","Hash derivation, hard.",6,null],[3,"IndexDerivation","","Node in hierarchical derivation.",null,null],[12,"soft","","Node is soft (allows proof of parent from parent node).",7,null],[12,"index","","Index sequence of the node.",7,null],[3,"KeyFile","","Public opaque type representing serializable `KeyFile`.",null,null],[4,"HardwareError","","Hardware wallet error.",null,null],[13,"LedgerDevice","","Ledger device error.",8,null],[13,"TrezorDevice","","Trezor device error",8,null],[13,"Usb","","USB error.",8,null],[13,"Hid","","HID error",8,null],[13,"KeyNotFound","","Hardware wallet not found for specified key.",8,null],[3,"HardwareWalletManager","","Hardware wallet management interface.",null,null],[4,"KeyPath","","Key derivation paths used on hardware wallets.",null,null],[13,"Ethereum","","Ethereum.",9,null],[13,"EthereumClassic","","Ethereum classic.",9,null],[3,"TransactionInfo","","This is the transaction info we need to supply to Trezor message. It's more or less a duplicate of `ethcore::transaction::Transaction`, but we can't import ethcore here as that would be a circular dependency.",null,null],[12,"nonce","","Nonce",10,null],[12,"gas_price","","Gas price",10,null],[12,"gas_limit","","Gas limit",10,null],[12,"to","","Receiver",10,null],[12,"value","","Value",10,null],[12,"data","","Data",10,null],[12,"chain_id","","Chain ID",10,null],[4,"Action","","Transaction action type.",null,null],[13,"Create","","Create creates new contract.",11,null],[13,"Call","","Calls contract at given address. In the case of a transfer, this is the receiver's address.'",11,null],[3,"Transaction","","A set of information describing an externally-originating message call or contract creation operation.",null,null],[12,"nonce","","Nonce.",12,null],[12,"gas_price","","Gas price.",12,null],[12,"gas","","Gas paid up front for transaction execution.",12,null],[12,"action","","Action, can be either call or contract create.",12,null],[12,"value","","Transfered value.",12,null],[12,"data","","Transaction data.",12,null],[3,"DappId","","Dapp identifier",null,null],[3,"AccountProvider","","Account management. Responsible for unlocking accounts.",null,null],[3,"AccountProviderSettings","","Account management settings.",null,null],[12,"enable_hardware_wallets","","Enable hardware wallet support.",13,null],[12,"hardware_wallet_classic_key","","Use the classic chain key on the hardware wallet.",13,null],[12,"unlock_keep_secret","","Store raw account secret when unlocking the account permanently.",13,null],[12,"blacklisted_accounts","","Disallowed accounts.",13,null],[4,"SignError","","Signing error",null,null],[13,"NotUnlocked","","Account is not unlocked",14,null],[13,"NotFound","","Account does not exist.",14,null],[13,"Hardware","","Low-level hardware device error.",14,null],[13,"SStore","","Low-level error from store",14,null],[6,"Error","","`AccountProvider` errors.",null,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",14,{"inputs":[{"name":"hardwareerror"}],"output":{"name":"self"}}],[11,"from","","",14,{"inputs":[{"name":"sserror"}],"output":{"name":"self"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"dappid"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"dappid"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"dappid"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"dappid"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"dappid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"dappid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"self"},{"name":"dappid"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"self"},{"name":"dappid"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"self"},{"name":"dappid"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"self"},{"name":"dappid"}],"output":{"name":"bool"}}],[11,"from","","",15,{"inputs":[{"name":"string"}],"output":{"name":"dappid"}}],[11,"from","","",15,{"inputs":[{"name":"str"}],"output":{"name":"dappid"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates new account provider.",16,{"inputs":[{"generics":["secretstore"],"name":"box"},{"name":"accountprovidersettings"}],"output":{"name":"self"}}],[11,"transient_provider","","Creates not disk backed provider.",16,{"inputs":[],"output":{"name":"self"}}],[11,"new_account","","Creates new random account.",16,{"inputs":[{"name":"self"},{"name":"password"}],"output":{"generics":["address","error"],"name":"result"}}],[11,"new_account_and_public","","Creates new random account and returns address and public key",16,{"inputs":[{"name":"self"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"insert_account","","Inserts new account into underlying store. Does not unlock account!",16,{"inputs":[{"name":"self"},{"name":"secret"},{"name":"password"}],"output":{"generics":["address","error"],"name":"result"}}],[11,"derive_account","","Generates new derived account based on the existing one If password is not provided, account must be unlocked New account will be created with the same password (if save: true)",16,{"inputs":[{"name":"self"},{"name":"address"},{"generics":["password"],"name":"option"},{"name":"derivation"},{"name":"bool"}],"output":{"generics":["address","signerror"],"name":"result"}}],[11,"import_presale","","Import a new presale wallet.",16,null],[11,"import_wallet","","Import a new wallet.",16,null],[11,"has_account","","Checks whether an account with a given address is present.",16,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"accounts","","Returns addresses of all accounts.",16,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"hardware_accounts","","Returns addresses of hardware accounts.",16,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"locked_hardware_accounts","","Get a list of paths to locked hardware wallets",16,{"inputs":[{"name":"self"}],"output":{"generics":["vec","signerror"],"name":"result"}}],[11,"hardware_pin_matrix_ack","","Provide a pin to a locked hardware wallet on USB path to unlock it",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["bool","signerror"],"name":"result"}}],[11,"set_new_dapps_addresses","","Sets addresses of accounts exposed for unknown dapps. `None` means that all accounts will be visible. If not `None` or empty it will also override default account.",16,{"inputs":[{"name":"self"},{"generics":["vec"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"new_dapps_addresses","","Gets addresses of accounts exposed for unknown dapps. `None` means that all accounts will be visible.",16,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"set_new_dapps_default_address","","Sets a default account for unknown dapps. This account will always be returned as the first one.",16,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["error"],"name":"result"}}],[11,"new_dapps_default_address","","Gets a default account for new dapps Will return zero address in case the default is not set and there are no accounts configured.",16,{"inputs":[{"name":"self"}],"output":{"generics":["address","error"],"name":"result"}}],[11,"recent_dapps","","Gets a list of dapps recently requesting accounts.",16,{"inputs":[{"name":"self"}],"output":{"generics":["hashmap","error"],"name":"result"}}],[11,"note_dapp_used","","Marks dapp as recently used.",16,{"inputs":[{"name":"self"},{"name":"dappid"}],"output":{"generics":["error"],"name":"result"}}],[11,"dapp_addresses","","Gets addresses visible for given dapp.",16,{"inputs":[{"name":"self"},{"name":"dappid"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"dapp_default_address","","Returns default account for particular dapp falling back to other allowed accounts if necessary.",16,{"inputs":[{"name":"self"},{"name":"dappid"}],"output":{"generics":["address","error"],"name":"result"}}],[11,"set_dapp_default_address","","Sets default address for given dapp. Does not alter dapp addresses, but this account will always be returned as the first one.",16,{"inputs":[{"name":"self"},{"name":"dappid"},{"name":"address"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_dapp_addresses","","Sets addresses visible for given dapp. If `None` - falls back to dapps addresses If not `None` and not empty it will also override default account.",16,{"inputs":[{"name":"self"},{"name":"dappid"},{"generics":["vec"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"addresses_info","","Returns each address along with metadata.",16,{"inputs":[{"name":"self"}],"output":{"generics":["address","accountmeta"],"name":"hashmap"}}],[11,"set_address_name","","Returns each address along with metadata.",16,{"inputs":[{"name":"self"},{"name":"address"},{"name":"string"}],"output":null}],[11,"set_address_meta","","Returns each address along with metadata.",16,{"inputs":[{"name":"self"},{"name":"address"},{"name":"string"}],"output":null}],[11,"remove_address","","Removes and address from the address book",16,{"inputs":[{"name":"self"},{"name":"address"}],"output":null}],[11,"accounts_info","","Returns each account along with name and meta.",16,{"inputs":[{"name":"self"}],"output":{"generics":["hashmap","error"],"name":"result"}}],[11,"hardware_accounts_info","","Returns each hardware account along with name and meta.",16,{"inputs":[{"name":"self"}],"output":{"generics":["hashmap","error"],"name":"result"}}],[11,"is_hardware_address","","Returns each hardware account along with name and meta.",16,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"account_meta","","Returns each account along with name and meta.",16,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["accountmeta","error"],"name":"result"}}],[11,"account_public","","Returns account public key.",16,{"inputs":[{"name":"self"},{"name":"address"},{"name":"password"}],"output":{"generics":["public","error"],"name":"result"}}],[11,"set_account_name","","Returns each account along with name and meta.",16,{"inputs":[{"name":"self"},{"name":"address"},{"name":"string"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_account_meta","","Returns each account along with name and meta.",16,{"inputs":[{"name":"self"},{"name":"address"},{"name":"string"}],"output":{"generics":["error"],"name":"result"}}],[11,"test_password","","Returns `true` if the password for `account` is `password`. `false` if not.",16,{"inputs":[{"name":"self"},{"name":"address"},{"name":"password"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"kill_account","","Permanently removes an account.",16,{"inputs":[{"name":"self"},{"name":"address"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"change_password","","Changes the password of `account` from `password` to `new_password`. Fails if incorrect `password` given.",16,{"inputs":[{"name":"self"},{"name":"address"},{"name":"password"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"export_account","","Exports an account for given address.",16,{"inputs":[{"name":"self"},{"name":"address"},{"name":"password"}],"output":{"generics":["keyfile","error"],"name":"result"}}],[11,"unlock_account_permanently","","Unlocks account permanently.",16,{"inputs":[{"name":"self"},{"name":"address"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"unlock_account_temporarily","","Unlocks account temporarily (for one signing).",16,{"inputs":[{"name":"self"},{"name":"address"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"unlock_account_timed","","Unlocks account temporarily with a timeout.",16,{"inputs":[{"name":"self"},{"name":"address"},{"name":"password"},{"name":"duration"}],"output":{"generics":["error"],"name":"result"}}],[11,"is_unlocked","","Checks if given account is unlocked",16,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"is_unlocked_permanently","","Checks if given account is unlocked permanently",16,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"sign","","Signs the message. If password is not provided the account must be unlocked.",16,{"inputs":[{"name":"self"},{"name":"address"},{"generics":["password"],"name":"option"},{"name":"message"}],"output":{"generics":["signature","signerror"],"name":"result"}}],[11,"sign_derived","","Signs message using the derived secret. If password is not provided the account must be unlocked.",16,{"inputs":[{"name":"self"},{"name":"address"},{"generics":["password"],"name":"option"},{"name":"derivation"},{"name":"message"}],"output":{"generics":["signature","signerror"],"name":"result"}}],[11,"sign_with_token","","Signs given message with supplied token. Returns a token to use in next signing within this session.",16,{"inputs":[{"name":"self"},{"name":"address"},{"name":"password"},{"name":"message"}],"output":{"generics":["signerror"],"name":"result"}}],[11,"decrypt_with_token","","Decrypts a message with given token. Returns a token to use in next operation for this account.",16,null],[11,"decrypt","","Decrypts a message. If password is not provided the account must be unlocked.",16,null],[11,"agree","","Agree on shared key.",16,{"inputs":[{"name":"self"},{"name":"address"},{"generics":["password"],"name":"option"},{"name":"public"}],"output":{"generics":["secret","signerror"],"name":"result"}}],[11,"list_geth_accounts","","Returns the underlying `SecretStore` reference if one exists.",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["address"],"name":"vec"}}],[11,"import_geth_accounts","","Returns the underlying `SecretStore` reference if one exists.",16,{"inputs":[{"name":"self"},{"generics":["address"],"name":"vec"},{"name":"bool"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"create_vault","","Create new vault.",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"open_vault","","Open existing vault.",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"close_vault","","Close previously opened vault.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"list_vaults","","List all vaults",16,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"list_opened_vaults","","List all currently opened vaults",16,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"change_vault_password","","Change vault password.",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"change_vault","","Change vault of the given address.",16,{"inputs":[{"name":"self"},{"name":"address"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"get_vault_meta","","Get vault metadata string.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"set_vault_meta","","Set vault metadata string.",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"sign_message_with_hardware","","Sign message with hardware wallet.",16,null],[11,"sign_transaction_with_hardware","","Sign transaction with hardware wallet.",16,null],[0,"block","ethcore","Base data structure of this module is `Block`.",null,null],[3,"Block","ethcore::block","A block, encoded as it is on the block chain.",null,null],[12,"header","","The header of this block.",17,null],[12,"transactions","","The transactions in this block.",17,null],[12,"uncles","","The uncles of this block.",17,null],[3,"ExecutedBlock","","An internal type for a block's common elements.",null,null],[12,"header","","Executed block header.",18,null],[12,"transactions","","Executed transactions.",18,null],[12,"uncles","","Uncles.",18,null],[12,"receipts","","Transaction receipts.",18,null],[12,"transactions_set","","Hashes of already executed transactions.",18,null],[12,"state","","Underlaying state.",18,null],[12,"traces","","Transaction traces.",18,null],[12,"last_hashes","","Hashes of last 256 blocks.",18,null],[12,"is_finalized","","Finalization flag.",18,null],[12,"metadata","","Block metadata.",18,null],[3,"OpenBlock","","Block that is ready for transactions to be added.",null,null],[3,"ClosedBlock","","Just like `OpenBlock`, except that we've applied `Engine::on_close_block`, finished up the non-seal header fields, and collected the uncles.",null,null],[3,"LockedBlock","","Just like `ClosedBlock` except that we can't reopen it and it's faster.",null,null],[3,"SealedBlock","","A block that has a valid seal.",null,null],[5,"enact_verified","","Enact the block given by `block_bytes` using `engine` on the database `db` with given `parent` block header",null,{"inputs":[{"name":"preverifiedblock"},{"name":"ethengine"},{"name":"bool"},{"name":"statedb"},{"name":"header"},{"generics":["lasthashes"],"name":"arc"},{"name":"factories"},{"name":"bool"},{"name":"iterator"}],"output":{"generics":["lockedblock","error"],"name":"result"}}],[8,"IsBlock","","Trait for a object that is a `ExecutedBlock`.",null,null],[10,"block","","Get the `ExecutedBlock` associated with this object.",19,{"inputs":[{"name":"self"}],"output":{"name":"executedblock"}}],[11,"to_base","","Get the base `Block` object associated with this.",19,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"header","","Get the header associated with this object's block.",19,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"state","","Get the final state associated with this object's block.",19,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"transactions","","Get all information on transactions in this block.",19,null],[11,"receipts","","Get all information on receipts in this block.",19,null],[11,"uncles","","Get all uncles in this block.",19,null],[8,"Drain","","Trait for an object that owns an `ExecutedBlock`",null,null],[10,"drain","","Returns `ExecutedBlock`",20,{"inputs":[{"name":"self"}],"output":{"name":"executedblock"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"block"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"is_good","","Returns true if the given bytes form a valid encoding of a block in RLP.",17,null],[11,"rlp_bytes","","Get the RLP-encoding of the block with the seal.",17,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"decode","","",17,{"inputs":[{"name":"rlp"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"executedblock"}}],[11,"env_info","","Get the environment info concerning this block.",18,{"inputs":[{"name":"self"}],"output":{"name":"envinfo"}}],[11,"state_mut","","Get mutable access to a state.",18,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"traces_mut","","Get mutable reference to traces.",18,{"inputs":[{"name":"self"}],"output":{"name":"tracing"}}],[11,"block","","",18,{"inputs":[{"name":"self"}],"output":{"name":"executedblock"}}],[11,"header","","",18,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"uncles","","",18,null],[11,"transactions","","",18,null],[11,"is_finalized","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mark_finalized","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"metadata","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_metadata","","",18,{"inputs":[{"name":"self"},{"generics":["vec"],"name":"option"}],"output":null}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"closedblock"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"lockedblock"}}],[11,"new","","Create a new `OpenBlock` ready for transaction pushing.",23,null],[11,"set_timestamp","","Alter the timestamp of the block.",23,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"remove_gas_limit","","Removes block gas limit.",23,{"inputs":[{"name":"self"}],"output":null}],[11,"push_uncle","","Add an uncle to the block, if possible.",23,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"generics":["blockerror"],"name":"result"}}],[11,"env_info","","Get the environment info concerning this block.",23,{"inputs":[{"name":"self"}],"output":{"name":"envinfo"}}],[11,"push_transaction","","Push a transaction into the block.",23,{"inputs":[{"name":"self"},{"name":"signedtransaction"},{"generics":["h256"],"name":"option"}],"output":{"generics":["receipt","error"],"name":"result"}}],[11,"close","","Turn this into a `ClosedBlock`.",23,{"inputs":[{"name":"self"}],"output":{"generics":["closedblock","error"],"name":"result"}}],[11,"close_and_lock","","Turn this into a `LockedBlock`.",23,{"inputs":[{"name":"self"}],"output":{"generics":["lockedblock","error"],"name":"result"}}],[11,"block","","",23,{"inputs":[{"name":"self"}],"output":{"name":"executedblock"}}],[11,"block","","",21,{"inputs":[{"name":"self"}],"output":{"name":"executedblock"}}],[11,"block","","",22,{"inputs":[{"name":"self"}],"output":{"name":"executedblock"}}],[11,"hash","","Get the hash of the header without seal arguments.",21,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"lock","","Turn this into a `LockedBlock`, unable to be reopened again.",21,{"inputs":[{"name":"self"}],"output":{"name":"lockedblock"}}],[11,"reopen","","Given an engine reference, reopen the `ClosedBlock` into an `OpenBlock`.",21,{"inputs":[{"name":"self"},{"name":"ethengine"}],"output":{"name":"openblock"}}],[11,"strip_receipts_outcomes","","Removes outcomes from receipts and updates the receipt root.",22,{"inputs":[{"name":"self"}],"output":null}],[11,"hash","","Get the hash of the header without seal arguments.",22,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"seal","","Provide a valid seal in order to turn this into a `SealedBlock`.",22,{"inputs":[{"name":"self"},{"name":"ethengine"},{"generics":["bytes"],"name":"vec"}],"output":{"generics":["sealedblock","blockerror"],"name":"result"}}],[11,"try_seal","","Provide a valid seal in order to turn this into a `SealedBlock`. This does check the validity of `seal` with the engine. Returns the `ClosedBlock` back again if the seal is no good.",22,{"inputs":[{"name":"self"},{"name":"ethengine"},{"generics":["bytes"],"name":"vec"}],"output":{"generics":["sealedblock"],"name":"result"}}],[11,"drain","","",22,{"inputs":[{"name":"self"}],"output":{"name":"executedblock"}}],[11,"rlp_bytes","","Get the RLP-encoding of the block.",24,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"drain","","",24,{"inputs":[{"name":"self"}],"output":{"name":"executedblock"}}],[11,"block","","",24,{"inputs":[{"name":"self"}],"output":{"name":"executedblock"}}],[0,"client","ethcore","Blockchain database client.",null,null],[3,"BlockChainInfo","ethcore::client","Information about the blockchain gathered together.",null,null],[12,"total_difficulty","","Blockchain difficulty.",25,null],[12,"pending_total_difficulty","","Block queue difficulty.",25,null],[12,"genesis_hash","","Genesis block hash.",25,null],[12,"best_block_hash","","Best blockchain block hash.",25,null],[12,"best_block_number","","Best blockchain block number.",25,null],[12,"best_block_timestamp","","Best blockchain block timestamp.",25,null],[12,"ancient_block_hash","","Best ancient block hash.",25,null],[12,"ancient_block_number","","Best ancient block number.",25,null],[12,"first_block_hash","","First block on the best sequence.",25,null],[12,"first_block_number","","Number of the first block on the best sequence.",25,null],[4,"BlockStatus","","General block status",null,null],[13,"InChain","","Part of the blockchain.",26,null],[13,"Queued","","Queued for import.",26,null],[13,"Bad","","Known as bad.",26,null],[13,"Pending","","Pending block.",26,null],[13,"Unknown","","Unknown.",26,null],[3,"BlockQueueInfo","","Verification queue status",null,null],[12,"unverified_queue_size","","Number of queued items pending verification",27,null],[12,"verified_queue_size","","Number of verified queued items pending import",27,null],[12,"verifying_queue_size","","Number of items being verified",27,null],[12,"max_queue_size","","Configured maximum number of items in the queue",27,null],[12,"max_mem_use","","Configured maximum number of bytes to use",27,null],[12,"mem_used","","Heap memory used in bytes",27,null],[4,"VMType","","Type of EVM to use.",null,null],[13,"Interpreter","","RUST EVM",28,null],[3,"TraceFilter","","Easy to use trace filter.",null,null],[12,"range","","Range of filtering.",29,null],[12,"from_address","","From address.",29,null],[12,"to_address","","To address.",29,null],[12,"after","","Output offset",29,null],[12,"count","","Output amount",29,null],[3,"PruningInfo","","Client pruning info. See module-level docs for more details.",null,null],[12,"earliest_chain","","The first block which everything can be served after.",30,null],[12,"earliest_state","","The first block where state requests may be served.",30,null],[3,"CallAnalytics","","Options concerning what analytics we run on the call.",null,null],[12,"transaction_tracing","","Make a transaction trace.",31,null],[12,"vm_tracing","","Make a VM trace.",31,null],[12,"state_diffing","","Make a diff.",31,null],[6,"LastHashes","","Simple vector of hashes, should be at most 256 items large, can be smaller if being used for a block whose number is less than 257.",null,null],[3,"EnvInfo","","Information concerning the execution environment for a message-call/contract-creation.",null,null],[12,"number","","The block number.",32,null],[12,"author","","The block author.",32,null],[12,"timestamp","","The block timestamp.",32,null],[12,"difficulty","","The block difficulty.",32,null],[12,"gas_limit","","The block gas limit.",32,null],[12,"last_hashes","","The last 256 block hashes.",32,null],[12,"gas_used","","The gas used.",32,null],[3,"BlockChainCacheSize","","Represents blockchain's in-memory cache size in bytes.",null,null],[12,"blocks","","Blocks cache size.",33,null],[12,"block_details","","BlockDetails cache size.",33,null],[12,"transaction_addresses","","Transaction addresses cache size.",33,null],[12,"block_receipts","","Block receipts size.",33,null],[3,"ClientReport","","Report on the status of a client.",null,null],[12,"blocks_imported","","How many blocks have been imported so far.",34,null],[12,"transactions_applied","","How many transactions have been applied so far.",34,null],[12,"gas_processed","","How much gas has been processed so far.",34,null],[12,"state_db_mem","","Memory used by state DB",34,null],[3,"Client","","Blockchain database client backed by a persistent database. Owns and manages a blockchain and a block queue. Call `import_block()` to import a block asynchronously; `flush_queue()` flushes the queue.",null,null],[3,"ClientConfig","","Client configuration. Includes configs for all sub-systems.",null,null],[12,"queue","","Block queue configuration.",35,null],[12,"blockchain","","Blockchain configuration.",35,null],[12,"tracing","","Trace configuration.",35,null],[12,"vm_type","","VM type.",35,null],[12,"fat_db","","Fat DB enabled?",35,null],[12,"pruning","","The JournalDB (\"pruning\") algorithm to use.",35,null],[12,"name","","The name of the client instance.",35,null],[12,"db_cache_size","","RocksDB column cache-size if not default",35,null],[12,"db_compaction","","State db compaction profile",35,null],[12,"mode","","Operating mode",35,null],[12,"spec_name","","The chain spec name",35,null],[12,"verifier_type","","Type of block verifier used by client.",35,null],[12,"state_cache_size","","State db cache-size.",35,null],[12,"jump_table_size","","EVM jump-tables cache size.",35,null],[12,"history","","Minimum state pruning history size.",35,null],[12,"history_mem","","Ideal memory usage for state pruning history.",35,null],[12,"check_seal","","Check seal valididity on block import",35,null],[12,"transaction_verification_queue_size","","Maximal number of transactions queued for verification in a separate thread.",35,null],[3,"BlockChainConfig","","Blockchain configuration.",null,null],[12,"pref_cache_size","","Preferred cache size in bytes.",36,null],[12,"max_cache_size","","Maximum cache size in bytes.",36,null],[3,"EvmTestClient","","Simplified, single-block EVM test client.",null,null],[3,"TestBlockChainClient","","Test client.",null,null],[12,"blocks","","Blocks.",37,null],[12,"numbers","","Mapping of numbers to hashes.",37,null],[12,"genesis_hash","","Genesis block hash.",37,null],[12,"last_hash","","Last block hash.",37,null],[12,"extra_data","","Extra data do set for each block",37,null],[12,"difficulty","","Difficulty.",37,null],[12,"balances","","Balances.",37,null],[12,"nonces","","Nonces.",37,null],[12,"storage","","Storage.",37,null],[12,"code","","Code.",37,null],[12,"execution_result","","Execution result.",37,null],[12,"receipts","","Transaction receipts.",37,null],[12,"logs","","Logs",37,null],[12,"queue_size","","Block queue size.",37,null],[12,"miner","","Miner",37,null],[12,"spec","","Spec",37,null],[12,"latest_block_timestamp","","Timestamp assigned to latest sealed block",37,null],[12,"ancient_block","","Ancient block info.",37,null],[12,"first_block","","First block info.",37,null],[12,"traces","","Traces to return",37,null],[12,"history","","Pruning history size to report.",37,null],[12,"disabled","","Is disabled",37,null],[3,"ChainRoute","","A complete chain enacted retracted route.",null,null],[4,"Mode","","Operating mode for the client.",null,null],[13,"Active","","Always on.",38,null],[13,"Passive","","Goes offline after client is inactive for some (given) time, but comes back online after a while of inactivity.",38,null],[13,"Dark","","Goes offline after client is inactive for some (given) time and stays inactive.",38,null],[13,"Off","","Always off.",38,null],[4,"DatabaseCompactionProfile","","Client state db compaction profile",null,null],[13,"Auto","","Try to determine compaction profile automatically",39,null],[13,"SSD","","SSD compaction profile",39,null],[13,"HDD","","HDD or other slow storage io compaction profile",39,null],[4,"Error","","Client configuration errors.",null,null],[13,"Trie","","TrieDB-related error.",40,null],[13,"Io","","Io error.",40,null],[4,"EvmTestError","","EVM test Error.",null,null],[13,"Trie","","Trie integrity error.",41,null],[13,"Evm","","EVM error.",41,null],[13,"ClientError","","Initialization error.",41,null],[13,"PostCondition","","Post-condition failure,",41,null],[4,"TransactResult","","A result of applying transaction to the state.",null,null],[13,"Ok","","Successful execution",42,null],[12,"state_root","ethcore::client::TransactResult","State root",42,null],[12,"gas_left","","Amount of gas left",42,null],[12,"output","","Output",42,null],[12,"trace","","Traces",42,null],[12,"vm_trace","","VM Traces",42,null],[12,"contract_address","","Created contract address (if any)",42,null],[12,"logs","","Generated logs",42,null],[12,"outcome","","outcome",42,null],[13,"Err","ethcore::client","Transaction failed to run",42,null],[12,"state_root","ethcore::client::TransactResult","State root",42,null],[12,"error","","Execution error",42,null],[4,"ClientIoMessage","ethcore::client","Message type for external and internal events",null,null],[13,"NewChainHead","","Best Block Hash in chain has been changed",43,null],[13,"BlockVerified","","A block is ready",43,null],[13,"BeginRestoration","","Begin snapshot restoration",43,null],[13,"FeedStateChunk","","Feed a state chunk to the snapshot service",43,null],[13,"FeedBlockChunk","","Feed a block chunk to the snapshot service",43,null],[13,"TakeSnapshot","","Take a snapshot for the block with given number.",43,null],[13,"Execute","","Execute wrapped closure",43,null],[4,"EachBlockWith","","Used for generating test client blocks.",null,null],[13,"Nothing","","Plain block.",44,null],[13,"Uncle","","Block with an uncle.",44,null],[13,"Transaction","","Block with a transaction.",44,null],[13,"UncleAndTransaction","","Block with an uncle and transaction.",44,null],[4,"ChainRouteType","","Route type to indicate whether it is enacted or retracted.",null,null],[13,"Enacted","","Enacted block",45,null],[13,"Retracted","","Retracted block",45,null],[4,"ChainMessageType","","Messages to broadcast via chain",null,null],[13,"Consensus","","Consensus message",46,null],[13,"PrivateTransaction","","Message with private transaction",46,null],[13,"SignedPrivateTransaction","","Message with signed private transaction",46,null],[4,"StateOrBlock","","State information to be used during client query",null,null],[13,"State","","State to be used, may be pending",47,null],[13,"Block","","Id of an existing block from a chain to get state from",47,null],[11,"default","","",34,{"inputs":[],"output":{"name":"clientreport"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"clientreport"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"clientreport"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"clientreport"}],"output":{"name":"bool"}}],[11,"accrue_block","","Alter internal reporting to reflect the additional `block` has been processed.",34,{"inputs":[{"name":"self"},{"name":"header"},{"name":"usize"}],"output":null}],[11,"sub","","",34,{"inputs":[{"name":"self"},{"name":"clientreport"}],"output":{"name":"self"}}],[11,"new","","Create a new client with given parameters. The database is assumed to have been initialized with the correct columns.",48,{"inputs":[{"name":"clientconfig"},{"name":"spec"},{"generics":["blockchaindb"],"name":"arc"},{"generics":["miner"],"name":"arc"},{"generics":["clientiomessage"],"name":"iochannel"}],"output":{"generics":["arc","error"],"name":"result"}}],[11,"keep_alive","","Wakes up client if it's a sleep.",48,{"inputs":[{"name":"self"}],"output":null}],[11,"add_notify","","Adds an actor to be notified on certain events",48,{"inputs":[{"name":"self"},{"generics":["chainnotify"],"name":"arc"}],"output":null}],[11,"set_exit_handler","","Set a closure to call when the client wants to be restarted.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"engine","","Returns engine reference.",48,{"inputs":[{"name":"self"}],"output":{"name":"ethengine"}}],[11,"on_user_defaults_change","","Register an action to be done if a mode/spec_name change happens.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"flush_queue","","Flush the block import queue.",48,{"inputs":[{"name":"self"}],"output":null}],[11,"latest_env_info","","The env info as of the best block.",48,{"inputs":[{"name":"self"}],"output":{"name":"envinfo"}}],[11,"env_info","","The env info as of a given block. returns `None` if the block unknown.",48,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["envinfo"],"name":"option"}}],[11,"import_verified_blocks","","This is triggered by a message coming from a block queue when the block is ready for insertion",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_io_channel","","Replace io channel. Useful for testing.",48,{"inputs":[{"name":"self"},{"generics":["clientiomessage"],"name":"iochannel"}],"output":null}],[11,"latest_state","","Get a copy of the best block's state.",48,{"inputs":[{"name":"self"}],"output":{"generics":["statedb"],"name":"state"}}],[11,"state_at","","Attempt to get a copy of a specific block's final state.",48,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["state"],"name":"option"}}],[11,"state_at_beginning","","Attempt to get a copy of a specific block's beginning state.",48,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["state"],"name":"option"}}],[11,"state","","Get a copy of the best block's state.",48,{"inputs":[{"name":"self"}],"output":{"generics":["stateinfo"],"name":"box"}}],[11,"blockchain_cache_info","","Get info on the cache.",48,{"inputs":[{"name":"self"}],"output":{"name":"blockchaincachesize"}}],[11,"report","","Get the report.",48,{"inputs":[{"name":"self"}],"output":{"name":"clientreport"}}],[11,"tick","","Tick the client.",48,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"take_snapshot","","Take a snapshot at the given block. If the ID given is \"latest\", this will default to 1000 blocks behind.",48,{"inputs":[{"name":"self"},{"name":"w"},{"name":"blockid"},{"name":"progress"}],"output":{"generics":["ethcoreerror"],"name":"result"}}],[11,"pruning_history","","Ask the client what the history parameter is.",48,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"restore_db","","Restart the client with a new backend",48,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ethcoreerror"],"name":"result"}}],[11,"nonce","","",48,{"inputs":[{"name":"self"},{"name":"address"},{"name":"blockid"}],"output":{"generics":["u256"],"name":"option"}}],[11,"balance","","",48,{"inputs":[{"name":"self"},{"name":"address"},{"name":"stateorblock"}],"output":{"generics":["u256"],"name":"option"}}],[11,"chain_info","","",48,{"inputs":[{"name":"self"}],"output":{"name":"blockchaininfo"}}],[11,"block_header","","",48,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["header"],"name":"option"}}],[11,"best_block_header","","",48,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"block","","",48,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["block"],"name":"option"}}],[11,"code_hash","","",48,{"inputs":[{"name":"self"},{"name":"address"},{"name":"blockid"}],"output":{"generics":["h256"],"name":"option"}}],[11,"transaction_block","","",48,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":{"generics":["h256"],"name":"option"}}],[11,"registry_address","","",48,{"inputs":[{"name":"self"},{"name":"string"},{"name":"blockid"}],"output":{"generics":["address"],"name":"option"}}],[11,"call_contract","","",48,{"inputs":[{"name":"self"},{"name":"blockid"},{"name":"address"},{"name":"bytes"}],"output":{"generics":["bytes","string"],"name":"result"}}],[11,"import_block","","",48,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["h256","blockimporterror"],"name":"result"}}],[11,"latest_state","","",48,null],[11,"state_at","","",48,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"call","","",48,null],[11,"call_many","","",48,null],[11,"estimate_gas","","",48,null],[11,"engine","","",48,{"inputs":[{"name":"self"}],"output":{"name":"ethengine"}}],[11,"replay","","",48,{"inputs":[{"name":"self"},{"name":"transactionid"},{"name":"callanalytics"}],"output":{"generics":["executed","callerror"],"name":"result"}}],[11,"replay_block_transactions","","",48,{"inputs":[{"name":"self"},{"name":"blockid"},{"name":"callanalytics"}],"output":{"generics":["box","callerror"],"name":"result"}}],[11,"mode","","",48,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"disable","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"set_mode","","",48,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"spec_name","","",48,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"set_spec_name","","",48,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"block_number","","",48,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["blocknumber"],"name":"option"}}],[11,"block_body","","",48,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["body"],"name":"option"}}],[11,"block_status","","",48,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"name":"blockstatus"}}],[11,"block_total_difficulty","","",48,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["u256"],"name":"option"}}],[11,"storage_root","","",48,{"inputs":[{"name":"self"},{"name":"address"},{"name":"blockid"}],"output":{"generics":["h256"],"name":"option"}}],[11,"block_hash","","",48,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["h256"],"name":"option"}}],[11,"code","","",48,{"inputs":[{"name":"self"},{"name":"address"},{"name":"stateorblock"}],"output":{"generics":["option"],"name":"option"}}],[11,"storage_at","","",48,{"inputs":[{"name":"self"},{"name":"address"},{"name":"h256"},{"name":"stateorblock"}],"output":{"generics":["h256"],"name":"option"}}],[11,"list_accounts","","",48,{"inputs":[{"name":"self"},{"name":"blockid"},{"generics":["address"],"name":"option"},{"name":"u64"}],"output":{"generics":["vec"],"name":"option"}}],[11,"list_storage","","",48,{"inputs":[{"name":"self"},{"name":"blockid"},{"name":"address"},{"generics":["h256"],"name":"option"},{"name":"u64"}],"output":{"generics":["vec"],"name":"option"}}],[11,"transaction","","",48,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":{"generics":["localizedtransaction"],"name":"option"}}],[11,"uncle","","",48,{"inputs":[{"name":"self"},{"name":"uncleid"}],"output":{"generics":["header"],"name":"option"}}],[11,"transaction_receipt","","",48,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":{"generics":["localizedreceipt"],"name":"option"}}],[11,"tree_route","","",48,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"h256"}],"output":{"generics":["treeroute"],"name":"option"}}],[11,"find_uncles","","",48,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["vec"],"name":"option"}}],[11,"state_data","","",48,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["bytes"],"name":"option"}}],[11,"block_receipts","","",48,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["bytes"],"name":"option"}}],[11,"queue_info","","",48,{"inputs":[{"name":"self"}],"output":{"name":"blockqueueinfo"}}],[11,"clear_queue","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"additional_params","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["string","string"],"name":"btreemap"}}],[11,"logs","","",48,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"generics":["localizedlogentry"],"name":"vec"}}],[11,"filter_traces","","",48,{"inputs":[{"name":"self"},{"name":"tracefilter"}],"output":{"generics":["vec"],"name":"option"}}],[11,"trace","","",48,{"inputs":[{"name":"self"},{"name":"traceid"}],"output":{"generics":["localizedtrace"],"name":"option"}}],[11,"transaction_traces","","",48,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":{"generics":["vec"],"name":"option"}}],[11,"block_traces","","",48,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["vec"],"name":"option"}}],[11,"last_hashes","","",48,{"inputs":[{"name":"self"}],"output":{"name":"lasthashes"}}],[11,"ready_transactions","","",48,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["arc"],"name":"vec"}}],[11,"signing_chain_id","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"block_extra_info","","",48,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["btreemap"],"name":"option"}}],[11,"uncle_extra_info","","",48,{"inputs":[{"name":"self"},{"name":"uncleid"}],"output":{"generics":["btreemap"],"name":"option"}}],[11,"pruning_info","","",48,{"inputs":[{"name":"self"}],"output":{"name":"pruninginfo"}}],[11,"transact_contract","","",48,{"inputs":[{"name":"self"},{"name":"address"},{"name":"bytes"}],"output":{"generics":["error"],"name":"result"}}],[11,"registrar_address","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["address"],"name":"option"}}],[11,"eip86_transition","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"queue_transactions","","",48,{"inputs":[{"name":"self"},{"generics":["bytes"],"name":"vec"},{"name":"usize"}],"output":null}],[11,"queue_ancient_block","","",48,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"bytes"}],"output":{"generics":["h256","blockimporterror"],"name":"result"}}],[11,"queue_consensus_message","","",48,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"reopen_block","","",48,{"inputs":[{"name":"self"},{"name":"closedblock"}],"output":{"name":"openblock"}}],[11,"prepare_open_block","","",48,null],[11,"latest_schedule","","",48,{"inputs":[{"name":"self"}],"output":{"name":"schedule"}}],[11,"import_sealed_block","","",48,{"inputs":[{"name":"self"},{"name":"sealedblock"}],"output":{"name":"importresult"}}],[11,"broadcast_proposal_block","","",48,{"inputs":[{"name":"self"},{"name":"sealedblock"}],"output":null}],[11,"update_sealing","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"submit_seal","","",48,{"inputs":[{"name":"self"},{"name":"h256"},{"generics":["bytes"],"name":"vec"}],"output":null}],[11,"broadcast_consensus_message","","",48,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"epoch_transition_for","","",48,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["epochtransition"],"name":"option"}}],[11,"as_full_client","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["blockchainclient"],"name":"option"}}],[11,"block_number","","",48,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["blocknumber"],"name":"option"}}],[11,"block_header","","",48,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["header"],"name":"option"}}],[11,"prove_storage","","",48,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"h256"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"prove_account","","",48,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"prove_transaction","","",48,{"inputs":[{"name":"self"},{"name":"signedtransaction"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"epoch_signal","","",48,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["vec"],"name":"option"}}],[11,"drop","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"databasecompactionprofile"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"databasecompactionprofile"}}],[11,"default","","",39,{"inputs":[],"output":{"name":"self"}}],[11,"from_str","","",39,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["fmterror"],"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"clientconfig"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"clientconfig"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"clientconfig"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",40,{"inputs":[{"name":"trieerror"}],"output":{"name":"self"}}],[11,"from","","",40,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",40,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["fmterror"],"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",41,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"spec_from_json","","Converts a json spec definition into spec.",49,{"inputs":[{"name":"forkspec"}],"output":{"generics":["spec"],"name":"option"}}],[11,"new","","Creates new EVM test client with in-memory DB initialized with genesis of given Spec.",49,{"inputs":[{"name":"spec"}],"output":{"generics":["evmtesterror"],"name":"result"}}],[11,"from_pod_state","","Creates new EVM test client with in-memory DB initialized with given PodState.",49,{"inputs":[{"name":"spec"},{"name":"podstate"}],"output":{"generics":["evmtesterror"],"name":"result"}}],[11,"state","","Return current state.",49,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"call","","Execute the VM given ActionParams and tracer. Returns amount of gas left and the output.",49,{"inputs":[{"name":"self"},{"name":"actionparams"},{"name":"t"},{"name":"v"}],"output":{"generics":["finalizationresult","evmtesterror"],"name":"result"}}],[11,"transact","","Executes a SignedTransaction within context of the provided state and `EnvInfo`. Returns the state root, gas left and the output.",49,{"inputs":[{"name":"self"},{"name":"envinfo"},{"name":"signedtransaction"},{"name":"t"},{"name":"v"}],"output":{"name":"transactresult"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"execute","","Create new `ClientIoMessage` that executes given procedure.",43,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"eachblockwith"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates new test client.",37,{"inputs":[],"output":{"name":"self"}}],[11,"new_with_extra_data","","Creates new test client with specified extra data for each block",37,{"inputs":[{"name":"bytes"}],"output":{"name":"self"}}],[11,"new_with_spec","","Create test client with custom spec.",37,{"inputs":[{"name":"spec"}],"output":{"name":"self"}}],[11,"new_with_spec_and_extra","","Create test client with custom spec and extra data.",37,{"inputs":[{"name":"spec"},{"name":"bytes"}],"output":{"name":"self"}}],[11,"set_transaction_receipt","","Set the transaction receipt result",37,{"inputs":[{"name":"self"},{"name":"transactionid"},{"name":"localizedreceipt"}],"output":null}],[11,"set_execution_result","","Set the execution result.",37,{"inputs":[{"name":"self"},{"generics":["executed","callerror"],"name":"result"}],"output":null}],[11,"set_balance","","Set the balance of account `address` to `balance`.",37,{"inputs":[{"name":"self"},{"name":"address"},{"name":"u256"}],"output":null}],[11,"set_nonce","","Set nonce of account `address` to `nonce`.",37,{"inputs":[{"name":"self"},{"name":"address"},{"name":"u256"}],"output":null}],[11,"set_code","","Set `code` at `address`.",37,{"inputs":[{"name":"self"},{"name":"address"},{"name":"bytes"}],"output":null}],[11,"set_storage","","Set storage `position` to `value` for account `address`.",37,{"inputs":[{"name":"self"},{"name":"address"},{"name":"h256"},{"name":"h256"}],"output":null}],[11,"set_queue_size","","Set block queue size for testing",37,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"set_latest_block_timestamp","","Set timestamp assigned to latest sealed block",37,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"set_logs","","Set logs to return for each logs call.",37,{"inputs":[{"name":"self"},{"generics":["localizedlogentry"],"name":"vec"}],"output":null}],[11,"add_blocks","","Add blocks to test client.",37,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"eachblockwith"}],"output":null}],[11,"corrupt_block","","Make a bad block by setting invalid extra data.",37,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":null}],[11,"corrupt_block_parent","","Make a bad block by setting invalid parent hash.",37,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":null}],[11,"block_hash_delta_minus","","Get block hash with `delta` as offset from the most recent blocks.",37,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"h256"}}],[11,"insert_transaction_with_gas_price_to_queue","","Inserts a transaction with given gas price to miners transactions queue.",37,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"h256"}}],[11,"insert_transaction_to_queue","","Inserts a transaction to miners transactions queue.",37,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"set_history","","Set reported history size.",37,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"option"}],"output":null}],[11,"is_disabled","","Returns true if the client has been disabled.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reopen_block","","",37,{"inputs":[{"name":"self"},{"name":"closedblock"}],"output":{"name":"openblock"}}],[11,"prepare_open_block","","",37,null],[11,"latest_schedule","","",37,{"inputs":[{"name":"self"}],"output":{"name":"schedule"}}],[11,"import_sealed_block","","",37,{"inputs":[{"name":"self"},{"name":"sealedblock"}],"output":{"name":"importresult"}}],[11,"broadcast_proposal_block","","",37,{"inputs":[{"name":"self"},{"name":"sealedblock"}],"output":null}],[11,"nonce","","",37,{"inputs":[{"name":"self"},{"name":"address"},{"name":"blockid"}],"output":{"generics":["u256"],"name":"option"}}],[11,"latest_nonce","","",37,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"u256"}}],[11,"balance","","",37,{"inputs":[{"name":"self"},{"name":"address"},{"name":"stateorblock"}],"output":{"generics":["u256"],"name":"option"}}],[11,"latest_balance","","",37,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"u256"}}],[11,"chain_info","","",37,{"inputs":[{"name":"self"}],"output":{"name":"blockchaininfo"}}],[11,"block_header","","",37,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["header"],"name":"option"}}],[11,"best_block_header","","",37,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"block","","",37,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["block"],"name":"option"}}],[11,"code_hash","","",37,{"inputs":[{"name":"self"},{"name":"address"},{"name":"blockid"}],"output":{"generics":["h256"],"name":"option"}}],[11,"call_contract","","",37,{"inputs":[{"name":"self"},{"name":"blockid"},{"name":"address"},{"name":"bytes"}],"output":{"generics":["bytes","string"],"name":"result"}}],[11,"transaction_block","","",37,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":{"generics":["h256"],"name":"option"}}],[11,"registry_address","","",37,{"inputs":[{"name":"self"},{"name":"string"},{"name":"blockid"}],"output":{"generics":["address"],"name":"option"}}],[11,"import_block","","",37,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["h256","blockimporterror"],"name":"result"}}],[11,"call","","",37,null],[11,"call_many","","",37,null],[11,"estimate_gas","","",37,null],[11,"latest_state","","",37,null],[11,"state_at","","",37,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"engine","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ethengine"}}],[11,"replay","","",37,{"inputs":[{"name":"self"},{"name":"transactionid"},{"name":"callanalytics"}],"output":{"generics":["executed","callerror"],"name":"result"}}],[11,"replay_block_transactions","","",37,{"inputs":[{"name":"self"},{"name":"blockid"},{"name":"callanalytics"}],"output":{"generics":["box","callerror"],"name":"result"}}],[11,"block_total_difficulty","","",37,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["u256"],"name":"option"}}],[11,"block_hash","","",37,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["h256"],"name":"option"}}],[11,"storage_root","","",37,{"inputs":[{"name":"self"},{"name":"address"},{"name":"blockid"}],"output":{"generics":["h256"],"name":"option"}}],[11,"code","","",37,{"inputs":[{"name":"self"},{"name":"address"},{"name":"stateorblock"}],"output":{"generics":["option"],"name":"option"}}],[11,"storage_at","","",37,{"inputs":[{"name":"self"},{"name":"address"},{"name":"h256"},{"name":"stateorblock"}],"output":{"generics":["h256"],"name":"option"}}],[11,"list_accounts","","",37,{"inputs":[{"name":"self"},{"name":"blockid"},{"generics":["address"],"name":"option"},{"name":"u64"}],"output":{"generics":["vec"],"name":"option"}}],[11,"list_storage","","",37,{"inputs":[{"name":"self"},{"name":"blockid"},{"name":"address"},{"generics":["h256"],"name":"option"},{"name":"u64"}],"output":{"generics":["vec"],"name":"option"}}],[11,"transaction","","",37,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":{"generics":["localizedtransaction"],"name":"option"}}],[11,"uncle","","",37,{"inputs":[{"name":"self"},{"name":"uncleid"}],"output":{"generics":["header"],"name":"option"}}],[11,"uncle_extra_info","","",37,{"inputs":[{"name":"self"},{"name":"uncleid"}],"output":{"generics":["btreemap"],"name":"option"}}],[11,"transaction_receipt","","",37,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":{"generics":["localizedreceipt"],"name":"option"}}],[11,"logs","","",37,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"generics":["localizedlogentry"],"name":"vec"}}],[11,"last_hashes","","",37,{"inputs":[{"name":"self"}],"output":{"name":"lasthashes"}}],[11,"block_number","","",37,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["blocknumber"],"name":"option"}}],[11,"block_body","","",37,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["body"],"name":"option"}}],[11,"block_extra_info","","",37,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["btreemap"],"name":"option"}}],[11,"block_status","","",37,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"name":"blockstatus"}}],[11,"tree_route","","",37,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"h256"}],"output":{"generics":["treeroute"],"name":"option"}}],[11,"find_uncles","","",37,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["vec"],"name":"option"}}],[11,"state_data","","",37,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["bytes"],"name":"option"}}],[11,"block_receipts","","",37,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["bytes"],"name":"option"}}],[11,"queue_info","","",37,{"inputs":[{"name":"self"}],"output":{"name":"queueinfo"}}],[11,"clear_queue","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"additional_params","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["string","string"],"name":"btreemap"}}],[11,"filter_traces","","",37,{"inputs":[{"name":"self"},{"name":"tracefilter"}],"output":{"generics":["vec"],"name":"option"}}],[11,"trace","","",37,{"inputs":[{"name":"self"},{"name":"traceid"}],"output":{"generics":["localizedtrace"],"name":"option"}}],[11,"transaction_traces","","",37,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":{"generics":["vec"],"name":"option"}}],[11,"block_traces","","",37,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["vec"],"name":"option"}}],[11,"ready_transactions","","",37,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["arc"],"name":"vec"}}],[11,"signing_chain_id","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"mode","","",37,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"set_mode","","",37,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"spec_name","","",37,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"set_spec_name","","",37,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"disable","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"pruning_info","","",37,{"inputs":[{"name":"self"}],"output":{"name":"pruninginfo"}}],[11,"transact_contract","","",37,{"inputs":[{"name":"self"},{"name":"address"},{"name":"bytes"}],"output":{"generics":["error"],"name":"result"}}],[11,"registrar_address","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["address"],"name":"option"}}],[11,"eip86_transition","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"queue_transactions","","",37,{"inputs":[{"name":"self"},{"generics":["bytes"],"name":"vec"},{"name":"usize"}],"output":null}],[11,"queue_ancient_block","","",37,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"bytes"}],"output":{"generics":["h256","blockimporterror"],"name":"result"}}],[11,"queue_consensus_message","","",37,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"prove_storage","","",37,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"h256"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"prove_account","","",37,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"prove_transaction","","",37,{"inputs":[{"name":"self"},{"name":"signedtransaction"},{"name":"blockid"}],"output":{"name":"option"}}],[11,"epoch_signal","","",37,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["vec"],"name":"option"}}],[11,"update_sealing","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"submit_seal","","",37,{"inputs":[{"name":"self"},{"name":"h256"},{"generics":["bytes"],"name":"vec"}],"output":null}],[11,"broadcast_consensus_message","","",37,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"epoch_transition_for","","",37,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["epochtransition"],"name":"option"}}],[11,"as_full_client","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["blockchainclient"],"name":"option"}}],[11,"block_number","","",37,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["blocknumber"],"name":"option"}}],[11,"block_header","","",37,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["header"],"name":"option"}}],[0,"registry","","",null,null],[3,"Registry","ethcore::client::registry","Contract",null,null],[3,"RegistryEvents","","",null,null],[3,"RegistryFunctions","","",null,null],[0,"events","","",null,null],[3,"ReverseRemoved","ethcore::client::registry::events","",null,null],[3,"Dropped","","",null,null],[3,"FeeChanged","","",null,null],[3,"DataChanged","","",null,null],[3,"ReverseConfirmed","","",null,null],[3,"ReverseProposed","","",null,null],[3,"Transferred","","",null,null],[3,"Drained","","",null,null],[3,"Reserved","","",null,null],[3,"NewOwner","","",null,null],[0,"logs","ethcore::client::registry","",null,null],[3,"ReverseRemoved","ethcore::client::registry::logs","",null,null],[12,"name","","",50,null],[12,"reverse","","",50,null],[3,"Dropped","","",null,null],[12,"name","","",51,null],[12,"owner","","",51,null],[3,"FeeChanged","","",null,null],[12,"amount","","",52,null],[3,"DataChanged","","",null,null],[12,"name","","",53,null],[12,"owner","","",53,null],[12,"key","","",53,null],[3,"ReverseConfirmed","","",null,null],[12,"name","","",54,null],[12,"reverse","","",54,null],[3,"ReverseProposed","","",null,null],[12,"name","","",55,null],[12,"reverse","","",55,null],[3,"Transferred","","",null,null],[12,"name","","",56,null],[12,"old_owner","","",56,null],[12,"new_owner","","",56,null],[3,"Drained","","",null,null],[12,"amount","","",57,null],[3,"Reserved","","",null,null],[12,"name","","",58,null],[12,"owner","","",58,null],[3,"NewOwner","","",null,null],[12,"old","","",59,null],[12,"current","","",59,null],[0,"functions","ethcore::client::registry","",null,null],[3,"SetOwner","ethcore::client::registry::functions","",null,null],[3,"Transfer","","",null,null],[3,"Set","","",null,null],[3,"Fee","","",null,null],[3,"GetAddress","","",null,null],[3,"Get","","",null,null],[3,"ProposeReverse","","",null,null],[3,"Owner","","",null,null],[3,"SetUint","","",null,null],[3,"Reverse","","",null,null],[3,"Drop","","",null,null],[3,"RemoveReverse","","",null,null],[3,"SetAddress","","",null,null],[3,"Reserved","","",null,null],[3,"Reserve","","",null,null],[3,"SetFee","","",null,null],[3,"ConfirmReverse","","",null,null],[3,"GetUint","","",null,null],[3,"Drain","","",null,null],[11,"from","ethcore::client","",47,{"inputs":[{"name":"s"}],"output":{"name":"stateorblock"}}],[11,"from","","",47,{"inputs":[{"generics":["stateinfo"],"name":"box"}],"output":{"name":"stateorblock"}}],[11,"from","","",47,{"inputs":[{"name":"blockid"}],"output":{"name":"stateorblock"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"chainroutetype"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"chainroute"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"chainroute"}}],[11,"from","","",60,null],[11,"new","","Create a new ChainRoute based on block hash and route type pairs.",60,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into_enacted_retracted","","Consume route and return the enacted retracted form.",60,null],[11,"enacted","","All non-duplicate enacted blocks.",60,null],[11,"retracted","","All non-duplicate retracted blocks.",60,null],[11,"route","","All blocks in the route.",60,null],[8,"ChainNotify","","Represents what has to be handled by actor listening to chain events",null,null],[11,"new_blocks","","fires when chain has new blocks.",61,{"inputs":[{"name":"self"},{"generics":["h256"],"name":"vec"},{"generics":["h256"],"name":"vec"},{"name":"chainroute"},{"generics":["h256"],"name":"vec"},{"generics":["bytes"],"name":"vec"},{"name":"duration"}],"output":null}],[11,"start","","fires when chain achieves active mode",61,{"inputs":[{"name":"self"}],"output":null}],[11,"stop","","fires when chain achieves passive mode",61,{"inputs":[{"name":"self"}],"output":null}],[11,"broadcast","","fires when chain broadcasts a message",61,{"inputs":[{"name":"self"},{"name":"chainmessagetype"}],"output":null}],[11,"transactions_received","","fires when new transactions are received from a peer",61,null],[8,"Nonce","","Provides `nonce` and `latest_nonce` methods",null,null],[10,"nonce","","Attempt to get address nonce at given block. May not fail on BlockId::Latest.",62,{"inputs":[{"name":"self"},{"name":"address"},{"name":"blockid"}],"output":{"generics":["u256"],"name":"option"}}],[11,"latest_nonce","","Get address nonce at the latest block's state.",62,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"u256"}}],[8,"Balance","","Provides `balance` and `latest_balance` methods",null,null],[10,"balance","","Get address balance at the given block's state.",63,{"inputs":[{"name":"self"},{"name":"address"},{"name":"stateorblock"}],"output":{"generics":["u256"],"name":"option"}}],[11,"latest_balance","","Get address balance at the latest block's state.",63,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"u256"}}],[8,"ChainInfo","","Provides `chain_info` method",null,null],[10,"chain_info","","Get blockchain information.",64,{"inputs":[{"name":"self"}],"output":{"name":"blockchaininfo"}}],[8,"BlockInfo","","Provides various information on a block by it's ID",null,null],[10,"block_header","","Get raw block header data by block id.",65,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["header"],"name":"option"}}],[10,"best_block_header","","Get the best block header.",65,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[10,"block","","Get raw block data by block header hash.",65,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["block"],"name":"option"}}],[10,"code_hash","","Get address code hash at given block's state.",65,{"inputs":[{"name":"self"},{"name":"address"},{"name":"blockid"}],"output":{"generics":["h256"],"name":"option"}}],[8,"ReopenBlock","","Provides `reopen_block` method",null,null],[10,"reopen_block","","Reopens an OpenBlock and updates uncles.",66,{"inputs":[{"name":"self"},{"name":"closedblock"}],"output":{"name":"openblock"}}],[8,"PrepareOpenBlock","","Provides `prepare_open_block` method",null,null],[10,"prepare_open_block","","Returns OpenBlock prepared for closing.",67,null],[8,"CallContract","","Provides `call_contract` method",null,null],[10,"call_contract","","Like `call`, but with various defaults. Designed to be used for calling contracts.",68,{"inputs":[{"name":"self"},{"name":"blockid"},{"name":"address"},{"name":"bytes"}],"output":{"generics":["bytes","string"],"name":"result"}}],[8,"TransactionInfo","","Provides various information on a transaction by it's ID",null,null],[10,"transaction_block","","Get the hash of block that contains the transaction, if any.",69,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":{"generics":["h256"],"name":"option"}}],[8,"RegistryInfo","","Provides information on a blockchain service and it's registry",null,null],[10,"registry_address","","Get the address of a particular blockchain service, if available.",70,{"inputs":[{"name":"self"},{"name":"string"},{"name":"blockid"}],"output":{"generics":["address"],"name":"option"}}],[8,"ScheduleInfo","","Provides `latest_schedule` method",null,null],[10,"latest_schedule","","Returns latest schedule.",71,{"inputs":[{"name":"self"}],"output":{"name":"schedule"}}],[8,"ImportSealedBlock","","Provides `import_sealed_block` method",null,null],[10,"import_sealed_block","","Import sealed block. Skips all verifications.",72,{"inputs":[{"name":"self"},{"name":"sealedblock"}],"output":{"name":"importresult"}}],[8,"BroadcastProposalBlock","","Provides `broadcast_proposal_block` method",null,null],[10,"broadcast_proposal_block","","Broadcast a block proposal.",73,{"inputs":[{"name":"self"},{"name":"sealedblock"}],"output":null}],[8,"ImportBlock","","Provides methods to import block into blockchain",null,null],[10,"import_block","","Import a block into the blockchain.",74,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["h256","blockimporterror"],"name":"result"}}],[8,"StateClient","","Provides methods to access chain state",null,null],[16,"State","","Type representing chain state",75,null],[10,"latest_state","","Get a copy of the best block's state.",75,null],[10,"state_at","","Attempt to get a copy of a specific block's final state.",75,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"name":"option"}}],[8,"Call","","Provides `call` and `call_many` methods",null,null],[16,"State","","Type representing chain state",76,null],[10,"call","","Makes a non-persistent transaction call.",76,null],[10,"call_many","","Makes multiple non-persistent but dependent transaction calls. Returns a vector of successes or a failure if any of the transaction fails.",76,null],[10,"estimate_gas","","Estimates how much gas will be necessary for a call.",76,null],[8,"EngineInfo","","Provides `engine` method",null,null],[10,"engine","","Get underlying engine object",77,{"inputs":[{"name":"self"}],"output":{"name":"ethengine"}}],[8,"AccountData","","Provides methods to access account info",null,null],[8,"BlockChain","","Provides various blockchain information, like block header, chain state etc.",null,null],[8,"BlockProducer","","Provides methods used for sealing new state",null,null],[8,"SealedBlockImporter","","Provides methods to import sealed block and broadcast a block proposal",null,null],[8,"BlockChainClient","","Blockchain database client. Owns and manages a blockchain and a block queue.",null,null],[10,"block_number","","Look up the block number for the given block ID.",78,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["blocknumber"],"name":"option"}}],[10,"block_body","","Get raw block body data by block id. Block body is an RLP list of two items: uncles and transactions.",78,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["body"],"name":"option"}}],[10,"block_status","","Get block status by block header hash.",78,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"name":"blockstatus"}}],[10,"block_total_difficulty","","Get block total difficulty.",78,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["u256"],"name":"option"}}],[10,"storage_root","","Attempt to get address storage root at given block. May not fail on BlockId::Latest.",78,{"inputs":[{"name":"self"},{"name":"address"},{"name":"blockid"}],"output":{"generics":["h256"],"name":"option"}}],[10,"block_hash","","Get block hash.",78,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["h256"],"name":"option"}}],[10,"code","","Get address code at given block's state.",78,{"inputs":[{"name":"self"},{"name":"address"},{"name":"stateorblock"}],"output":{"generics":["option"],"name":"option"}}],[11,"latest_code","","Get address code at the latest block's state.",78,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["bytes"],"name":"option"}}],[10,"storage_at","","Get address code hash at given block's state. Get value of the storage at given position at the given block's state.",78,{"inputs":[{"name":"self"},{"name":"address"},{"name":"h256"},{"name":"stateorblock"}],"output":{"generics":["h256"],"name":"option"}}],[11,"latest_storage_at","","Get value of the storage at given position at the latest block's state.",78,{"inputs":[{"name":"self"},{"name":"address"},{"name":"h256"}],"output":{"name":"h256"}}],[10,"list_accounts","","Get a list of all accounts in the block `id`, if fat DB is in operation, otherwise `None`. If `after` is set the list starts with the following item.",78,{"inputs":[{"name":"self"},{"name":"blockid"},{"generics":["address"],"name":"option"},{"name":"u64"}],"output":{"generics":["vec"],"name":"option"}}],[10,"list_storage","","Get a list of all storage keys in the block `id`, if fat DB is in operation, otherwise `None`. If `after` is set the list starts with the following item.",78,{"inputs":[{"name":"self"},{"name":"blockid"},{"name":"address"},{"generics":["h256"],"name":"option"},{"name":"u64"}],"output":{"generics":["vec"],"name":"option"}}],[10,"transaction","","Get transaction with given hash.",78,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":{"generics":["localizedtransaction"],"name":"option"}}],[10,"uncle","","Get uncle with given id.",78,{"inputs":[{"name":"self"},{"name":"uncleid"}],"output":{"generics":["header"],"name":"option"}}],[10,"transaction_receipt","","Get transaction receipt with given hash.",78,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":{"generics":["localizedreceipt"],"name":"option"}}],[10,"tree_route","","Get a tree route between `from` and `to`. See `BlockChain::tree_route`.",78,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"h256"}],"output":{"generics":["treeroute"],"name":"option"}}],[10,"find_uncles","","Get all possible uncle hashes for a block.",78,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["vec"],"name":"option"}}],[10,"state_data","","Get latest state node",78,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["bytes"],"name":"option"}}],[10,"block_receipts","","Get raw block receipts data by block header hash.",78,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["bytes"],"name":"option"}}],[10,"queue_info","","Get block queue information.",78,{"inputs":[{"name":"self"}],"output":{"name":"blockqueueinfo"}}],[10,"clear_queue","","Clear block queue and abort all import activity.",78,{"inputs":[{"name":"self"}],"output":null}],[10,"additional_params","","Get the registrar address, if it exists.",78,{"inputs":[{"name":"self"}],"output":{"generics":["string","string"],"name":"btreemap"}}],[10,"logs","","Returns logs matching given filter.",78,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"generics":["localizedlogentry"],"name":"vec"}}],[10,"replay","","Replays a given transaction for inspection.",78,{"inputs":[{"name":"self"},{"name":"transactionid"},{"name":"callanalytics"}],"output":{"generics":["executed","callerror"],"name":"result"}}],[10,"replay_block_transactions","","Replays all the transactions in a given block for inspection.",78,{"inputs":[{"name":"self"},{"name":"blockid"},{"name":"callanalytics"}],"output":{"generics":["box","callerror"],"name":"result"}}],[10,"filter_traces","","Returns traces matching given filter.",78,{"inputs":[{"name":"self"},{"name":"tracefilter"}],"output":{"generics":["vec"],"name":"option"}}],[10,"trace","","Returns trace with given id.",78,{"inputs":[{"name":"self"},{"name":"traceid"}],"output":{"generics":["localizedtrace"],"name":"option"}}],[10,"transaction_traces","","Returns traces created by transaction.",78,{"inputs":[{"name":"self"},{"name":"transactionid"}],"output":{"generics":["vec"],"name":"option"}}],[10,"block_traces","","Returns traces created by transaction from block.",78,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["vec"],"name":"option"}}],[10,"last_hashes","","Get last hashes starting from best block.",78,{"inputs":[{"name":"self"}],"output":{"name":"lasthashes"}}],[10,"ready_transactions","","List all transactions that are allowed into the next block.",78,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["arc"],"name":"vec"}}],[11,"gas_price_corpus","","Sorted list of transaction gas prices from at least last sample_size blocks.",78,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u256"],"name":"corpus"}}],[10,"signing_chain_id","","Get the preferred chain ID to sign on",78,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[10,"mode","","Get the mode.",78,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[10,"set_mode","","Set the mode.",78,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[10,"spec_name","","Get the chain spec name.",78,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"set_spec_name","","Set the chain via a spec name.",78,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[10,"disable","","Disable the client from importing blocks. This cannot be undone in this session and indicates that a subsystem has reason to believe this executable incapable of syncing the chain.",78,{"inputs":[{"name":"self"}],"output":null}],[10,"block_extra_info","","Returns engine-related extra info for `BlockId`.",78,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["btreemap"],"name":"option"}}],[10,"uncle_extra_info","","Returns engine-related extra info for `UncleId`.",78,{"inputs":[{"name":"self"},{"name":"uncleid"}],"output":{"generics":["btreemap"],"name":"option"}}],[10,"pruning_info","","Returns information about pruning/data availability.",78,{"inputs":[{"name":"self"}],"output":{"name":"pruninginfo"}}],[10,"transact_contract","","Schedule state-altering transaction to be executed on the next pending block.",78,{"inputs":[{"name":"self"},{"name":"address"},{"name":"bytes"}],"output":{"generics":["error"],"name":"result"}}],[10,"registrar_address","","Get the address of the registry itself.",78,{"inputs":[{"name":"self"}],"output":{"generics":["address"],"name":"option"}}],[10,"eip86_transition","","Get the EIP-86 transition block number.",78,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"EngineClient","","Client facilities used by internally sealing Engines.",null,null],[10,"update_sealing","","Make a new block and seal it.",79,{"inputs":[{"name":"self"}],"output":null}],[10,"submit_seal","","Submit a seal for a block in the mining queue.",79,{"inputs":[{"name":"self"},{"name":"h256"},{"generics":["bytes"],"name":"vec"}],"output":null}],[10,"broadcast_consensus_message","","Broadcast a consensus message to the network.",79,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[10,"epoch_transition_for","","Get the transition to the epoch the given parent hash is part of or transitions to. This will give the epoch that any children of this parent belong to.",79,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["epochtransition"],"name":"option"}}],[10,"as_full_client","","Attempt to cast the engine client to a full client.",79,{"inputs":[{"name":"self"}],"output":{"generics":["blockchainclient"],"name":"option"}}],[10,"block_number","","Get a block number by ID.",79,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["blocknumber"],"name":"option"}}],[10,"block_header","","Get raw block header data by block id.",79,{"inputs":[{"name":"self"},{"name":"blockid"}],"output":{"generics":["header"],"name":"option"}}],[8,"ProvingBlockChainClient","","Extended client interface for providing proofs of the state.",null,null],[10,"prove_storage","","Prove account storage at a specific block id.",80,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"h256"},{"name":"blockid"}],"output":{"name":"option"}}],[10,"prove_account","","Prove account existence at a specific block id. The key is the keccak hash of the account's address. Returns a vector of raw trie nodes (in order from the root) proving the query.",80,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"blockid"}],"output":{"name":"option"}}],[10,"prove_transaction","","Prove execution of a transaction at the given block. Returns the output of the call and a vector of database items necessary to reproduce it.",80,{"inputs":[{"name":"self"},{"name":"signedtransaction"},{"name":"blockid"}],"output":{"name":"option"}}],[10,"epoch_signal","","Get an epoch change signal by block hash.",80,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["vec"],"name":"option"}}],[8,"IoClient","","IO operations that should off-load heavy work to another thread.",null,null],[10,"queue_transactions","","Queue transactions for importing.",81,{"inputs":[{"name":"self"},{"generics":["bytes"],"name":"vec"},{"name":"usize"}],"output":null}],[10,"queue_ancient_block","","Queue block import with transaction receipts. Does no sealing and transaction validation.",81,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"bytes"}],"output":{"generics":["h256","blockimporterror"],"name":"result"}}],[10,"queue_consensus_message","","Queue conensus engine message.",81,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[0,"db","ethcore","Database utilities and definitions.",null,null],[4,"CacheUpdatePolicy","ethcore::db","Modes for updating caches.",null,null],[13,"Overwrite","","Overwrite entries.",82,null],[13,"Remove","","Remove entries.",82,null],[17,"COL_STATE","","Column for State",null,null],[17,"COL_HEADERS","","Column for Block headers",null,null],[17,"COL_BODIES","","Column for Block bodies",null,null],[17,"COL_EXTRA","","Column for Extras",null,null],[17,"COL_TRACE","","Column for Traces",null,null],[17,"COL_ACCOUNT_BLOOM","","Column for the empty accounts bloom filter.",null,null],[17,"COL_NODE_INFO","","Column for general information from the local node which can persist.",null,null],[17,"COL_LIGHT_CHAIN","","Column for the light client chain.",null,null],[17,"NUM_COLUMNS","","Number of columns in DB",null,null],[8,"Cache","","A cache for arbitrary key-value pairs.",null,null],[10,"insert","","Insert an entry into the cache and get the old value.",83,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[10,"remove","","Remove an entry from the cache, getting the old value if it existed.",83,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[10,"get","","Query the cache for a key's associated value.",83,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[8,"Key","","Should be used to get database key associated with given value.",null,null],[16,"Target","","The db key associated with this value.",84,null],[10,"key","","Returns db key.",84,null],[8,"Writable","","Should be used to write value into database.",null,null],[10,"write","","Writes the value into the database.",85,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"},{"name":"key"},{"name":"t"}],"output":null}],[10,"delete","","Deletes key from the databse.",85,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"},{"name":"key"}],"output":null}],[11,"write_with_cache","","Writes the value into the database and updates the cache.",85,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"},{"name":"cache"},{"name":"k"},{"name":"t"},{"name":"cacheupdatepolicy"}],"output":null}],[11,"extend_with_cache","","Writes the values into the database and updates the cache.",85,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"},{"name":"cache"},{"name":"hashmap"},{"name":"cacheupdatepolicy"}],"output":null}],[11,"extend_with_option_cache","","Writes and removes the values into the database and updates the cache.",85,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"},{"name":"cache"},{"generics":["option"],"name":"hashmap"},{"name":"cacheupdatepolicy"}],"output":null}],[8,"Readable","","Should be used to read values from database.",null,null],[10,"read","","Returns value for given key.",86,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"},{"name":"key"}],"output":{"name":"option"}}],[11,"read_with_cache","","Returns value for given key either in cache or in database.",86,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"},{"name":"rwlock"},{"name":"k"}],"output":{"name":"option"}}],[10,"exists","","Returns true if given value exists.",86,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"},{"name":"key"}],"output":{"name":"bool"}}],[11,"exists_with_cache","","Returns true if given value exists either in cache or in database.",86,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"},{"name":"rwlock"},{"name":"k"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"cacheupdatepolicy"}}],[0,"encoded","ethcore","Lazily-decoded owning views of RLP-encoded blockchain objects. These views are meant to contain trusted data -- without encoding errors or inconsistencies.",null,null],[3,"Header","ethcore::encoded","Owning header view.",null,null],[3,"Body","","Owning block body view.",null,null],[3,"Block","","Owning block view.",null,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new owning header view. Expects the data to be an RLP-encoded header -- any other case will likely lead to panics further down the line.",87,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[11,"decode","","Upgrade this encoded view to a fully owned `Header` object.",87,{"inputs":[{"name":"self"}],"output":{"generics":["fullheader","decodererror"],"name":"result"}}],[11,"view","","Get a borrowed header view onto the data.",87,{"inputs":[{"name":"self"}],"output":{"name":"headerview"}}],[11,"rlp","","Get the rlp of the header.",87,{"inputs":[{"name":"self"}],"output":{"name":"rlp"}}],[11,"into_inner","","Consume the view and return the raw bytes.",87,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"hash","","Returns the header hash.",87,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"parent_hash","","Returns the parent hash.",87,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"uncles_hash","","Returns the uncles hash.",87,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"author","","Returns the author.",87,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"state_root","","Returns the state root.",87,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"transactions_root","","Returns the transaction trie root.",87,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"receipts_root","","Returns the receipts trie root",87,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"log_bloom","","Returns the block log bloom",87,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"difficulty","","Difficulty of this block",87,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"number","","Number of this block.",87,{"inputs":[{"name":"self"}],"output":{"name":"blocknumber"}}],[11,"timestamp","","Time this block was produced.",87,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"gas_limit","","Gas limit of this block.",87,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"gas_used","","Total gas used in this block.",87,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"extra_data","","Block extra data.",87,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"seal","","Engine-specific seal fields.",87,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"vec"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",88,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new owning block body view. The raw bytes passed in must be an rlp-encoded block body.",88,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[11,"view","","Get a borrowed view of the data within.",88,{"inputs":[{"name":"self"}],"output":{"name":"bodyview"}}],[11,"decode","","Fully decode this block body.",88,null],[11,"rlp","","Get the RLP of this block body.",88,{"inputs":[{"name":"self"}],"output":{"name":"rlp"}}],[11,"into_inner","","Consume the view and return the raw bytes.",88,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"transactions_rlp","","Get raw rlp of transactions",88,{"inputs":[{"name":"self"}],"output":{"name":"rlp"}}],[11,"transactions","","Get a vector of all transactions.",88,{"inputs":[{"name":"self"}],"output":{"generics":["unverifiedtransaction"],"name":"vec"}}],[11,"transactions_count","","Number of transactions in the block.",88,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"transaction_views","","A view over each transaction in the block.",88,{"inputs":[{"name":"self"}],"output":{"generics":["transactionview"],"name":"vec"}}],[11,"transaction_hashes","","The hash of each transaction in the block.",88,{"inputs":[{"name":"self"}],"output":{"generics":["h256"],"name":"vec"}}],[11,"uncles_rlp","","Get raw rlp of uncle headers",88,{"inputs":[{"name":"self"}],"output":{"name":"rlp"}}],[11,"uncles","","Decode uncle headers.",88,{"inputs":[{"name":"self"}],"output":{"generics":["fullheader"],"name":"vec"}}],[11,"uncles_count","","Number of uncles.",88,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"uncle_views","","Borrowed view over each uncle.",88,{"inputs":[{"name":"self"}],"output":{"generics":["headerview"],"name":"vec"}}],[11,"uncle_hashes","","Hash of each uncle.",88,{"inputs":[{"name":"self"}],"output":{"generics":["h256"],"name":"vec"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",89,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new owning block view. The raw bytes passed in must be an rlp-encoded block.",89,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[11,"new_from_header_and_body","","Create a new owning block view by concatenating the encoded header and body",89,{"inputs":[{"name":"headerview"},{"name":"bodyview"}],"output":{"name":"self"}}],[11,"view","","Get a borrowed view of the whole block.",89,{"inputs":[{"name":"self"}],"output":{"name":"blockview"}}],[11,"header_view","","Get a borrowed view of the block header.",89,{"inputs":[{"name":"self"}],"output":{"name":"headerview"}}],[11,"decode","","Decode to a full block.",89,{"inputs":[{"name":"self"}],"output":{"generics":["fullblock","decodererror"],"name":"result"}}],[11,"decode_header","","Decode the header.",89,{"inputs":[{"name":"self"}],"output":{"name":"fullheader"}}],[11,"header","","Clone the encoded header.",89,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"rlp","","Get the rlp of this block.",89,{"inputs":[{"name":"self"}],"output":{"name":"rlp"}}],[11,"into_inner","","Consume the view and return the raw bytes.",89,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"hash","","Returns the header hash.",89,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"parent_hash","","Returns the parent hash.",89,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"uncles_hash","","Returns the uncles hash.",89,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"author","","Returns the author.",89,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"state_root","","Returns the state root.",89,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"transactions_root","","Returns the transaction trie root.",89,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"receipts_root","","Returns the receipts trie root",89,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"log_bloom","","Returns the block log bloom",89,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"difficulty","","Difficulty of this block",89,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"number","","Number of this block.",89,{"inputs":[{"name":"self"}],"output":{"name":"blocknumber"}}],[11,"timestamp","","Time this block was produced.",89,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"gas_limit","","Gas limit of this block.",89,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"gas_used","","Total gas used in this block.",89,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"extra_data","","Block extra data.",89,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"seal","","Engine-specific seal fields.",89,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"vec"}}],[11,"transactions","","Get a vector of all transactions.",89,{"inputs":[{"name":"self"}],"output":{"generics":["unverifiedtransaction"],"name":"vec"}}],[11,"transactions_count","","Number of transactions in the block.",89,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"transaction_views","","A view over each transaction in the block.",89,{"inputs":[{"name":"self"}],"output":{"generics":["transactionview"],"name":"vec"}}],[11,"transaction_hashes","","The hash of each transaction in the block.",89,{"inputs":[{"name":"self"}],"output":{"generics":["h256"],"name":"vec"}}],[11,"uncles","","Decode uncle headers.",89,{"inputs":[{"name":"self"}],"output":{"generics":["fullheader"],"name":"vec"}}],[11,"uncles_count","","Number of uncles.",89,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"uncle_views","","Borrowed view over each uncle.",89,{"inputs":[{"name":"self"}],"output":{"generics":["headerview"],"name":"vec"}}],[11,"uncle_hashes","","Hash of each uncle.",89,{"inputs":[{"name":"self"}],"output":{"generics":["h256"],"name":"vec"}}],[0,"engines","ethcore","Consensus engine specification and basic implementations.",null,null],[3,"AuthorityRound","ethcore::engines","Engine using `AuthorityRound` proof-of-authority BFT consensus.",null,null],[3,"BasicAuthority","","Engine using `BasicAuthority`, trivial proof-of-authority consensus.",null,null],[3,"InstantSeal","","An engine which does not provide any consensus mechanism, just seals blocks internally. Only seals blocks which have transactions.",null,null],[3,"NullEngine","","An engine which does not provide any consensus mechanism and does not seal blocks.",null,null],[3,"Tendermint","","Engine using `Tendermint` consensus algorithm, suitable for EVM chain.",null,null],[4,"ForkChoice","","Fork choice.",null,null],[13,"New","","Choose the new block.",90,null],[13,"Old","","Choose the current best block.",90,null],[4,"EngineError","","Voting errors.",null,null],[13,"NotAuthorized","","Signature or author field does not belong to an authority.",91,null],[13,"DoubleVote","","The same author issued different votes at the same step.",91,null],[13,"NotProposer","","The received block is from an incorrect proposer.",91,null],[13,"UnexpectedMessage","","Message was not expected.",91,null],[13,"BadSealFieldSize","","Seal field has an unexpected size.",91,null],[13,"InsufficientProof","","Validation proof insufficient.",91,null],[13,"FailedSystemCall","","Failed system call.",91,null],[13,"MalformedMessage","","Malformed consensus message.",91,null],[13,"RequiresClient","","Requires client ref, but none registered.",91,null],[4,"Seal","","Seal type.",null,null],[13,"Proposal","","Proposal seal; should be broadcasted, but not inserted into blockchain.",92,null],[13,"Regular","","Regular block seal; should be part of the blockchain.",92,null],[13,"None","","Engine does generate seal for this block right now.",92,null],[4,"Proof","","Proof generated on epoch change.",null,null],[13,"Known","","Known proof (extracted from signal)",93,null],[13,"WithState","","State dependent proof.",93,null],[4,"ConstructedVerifier","","Generated epoch verifier.",null,null],[13,"Trusted","","Fully trusted verifier.",94,null],[13,"Unconfirmed","","Verifier unconfirmed. Check whether given finality proof finalizes given hash under previous epoch.",94,null],[13,"Err","","Error constructing verifier.",94,null],[4,"EpochChange","","Results of a query of whether an epoch change occurred at the given block.",null,null],[13,"Unsure","","Cannot determine until more data is passed.",95,null],[13,"No","","No epoch change.",95,null],[13,"Yes","","The epoch will change, with proof.",95,null],[5,"total_difficulty_fork_choice","","Check whether a given block is the best block based on the default total difficulty rule.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"forkchoice"}}],[11,"new","","Create a new instance of AuthorityRound engine.",96,{"inputs":[{"name":"authorityroundparams"},{"name":"ethereummachine"}],"output":{"generics":["arc","error"],"name":"result"}}],[11,"name","","",96,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"machine","","",96,{"inputs":[{"name":"self"}],"output":{"name":"ethereummachine"}}],[11,"seal_fields","","Three fields - consensus step and the corresponding proposer signature, and a list of empty step messages (which should be empty if no steps are skipped)",96,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"usize"}}],[11,"step","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"extra_info","","Additional engine-specific information for the user/developer concerning `header`.",96,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"generics":["string","string"],"name":"btreemap"}}],[11,"maximum_uncle_count","","",96,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"name":"usize"}}],[11,"populate_from_parent","","",96,{"inputs":[{"name":"self"},{"name":"header"},{"name":"header"}],"output":null}],[11,"seals_internally","","",96,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"handle_message","","",96,null],[11,"generate_seal","","Attempt to seal the block internally.",96,{"inputs":[{"name":"self"},{"name":"executedblock"},{"name":"header"}],"output":{"name":"seal"}}],[11,"verify_local_seal","","",96,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"generics":["error"],"name":"result"}}],[11,"on_new_block","","",96,{"inputs":[{"name":"self"},{"name":"executedblock"},{"name":"bool"},{"name":"iterator"}],"output":{"generics":["error"],"name":"result"}}],[11,"on_close_block","","Apply the block reward on finalisation of the block.",96,{"inputs":[{"name":"self"},{"name":"executedblock"}],"output":{"generics":["error"],"name":"result"}}],[11,"verify_block_basic","","Check the number of seal fields.",96,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"generics":["error"],"name":"result"}}],[11,"verify_block_family","","Do the step and gas limit validation.",96,{"inputs":[{"name":"self"},{"name":"header"},{"name":"header"}],"output":{"generics":["error"],"name":"result"}}],[11,"verify_block_external","","",96,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"generics":["error"],"name":"result"}}],[11,"genesis_epoch_data","","",96,{"inputs":[{"name":"self"},{"name":"header"},{"name":"call"}],"output":{"generics":["vec","string"],"name":"result"}}],[11,"signals_epoch_end","","",96,{"inputs":[{"name":"self"},{"name":"header"},{"name":"auxiliarydata"}],"output":{"generics":["ethereummachine"],"name":"epochchange"}}],[11,"is_epoch_end","","",96,{"inputs":[{"name":"self"},{"name":"header"},{"name":"headers"},{"name":"pendingtransitionstore"}],"output":{"generics":["vec"],"name":"option"}}],[11,"epoch_verifier","","",96,null],[11,"register_client","","",96,{"inputs":[{"name":"self"},{"generics":["engineclient"],"name":"weak"}],"output":null}],[11,"set_signer","","",96,{"inputs":[{"name":"self"},{"generics":["accountprovider"],"name":"arc"},{"name":"address"},{"name":"password"}],"output":null}],[11,"sign","","",96,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["signature","error"],"name":"result"}}],[11,"snapshot_components","","",96,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"fork_choice","","",96,{"inputs":[{"name":"self"},{"name":"extendedheader"},{"name":"extendedheader"}],"output":{"name":"forkchoice"}}],[11,"new","","Create a new instance of BasicAuthority engine",97,{"inputs":[{"name":"basicauthorityparams"},{"name":"ethereummachine"}],"output":{"name":"self"}}],[11,"name","","",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"machine","","",97,{"inputs":[{"name":"self"}],"output":{"name":"ethereummachine"}}],[11,"seal_fields","","",97,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"usize"}}],[11,"seals_internally","","",97,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"generate_seal","","Attempt to seal the block internally.",97,{"inputs":[{"name":"self"},{"name":"executedblock"},{"name":"header"}],"output":{"name":"seal"}}],[11,"verify_local_seal","","",97,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"generics":["error"],"name":"result"}}],[11,"verify_block_external","","",97,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"generics":["error"],"name":"result"}}],[11,"genesis_epoch_data","","",97,{"inputs":[{"name":"self"},{"name":"header"},{"name":"call"}],"output":{"generics":["vec","string"],"name":"result"}}],[11,"signals_epoch_end","","",97,{"inputs":[{"name":"self"},{"name":"header"},{"name":"auxiliarydata"}],"output":{"generics":["ethereummachine"],"name":"epochchange"}}],[11,"is_epoch_end","","",97,{"inputs":[{"name":"self"},{"name":"header"},{"name":"headers"},{"name":"pendingtransitionstore"}],"output":{"generics":["vec"],"name":"option"}}],[11,"epoch_verifier","","",97,null],[11,"register_client","","",97,{"inputs":[{"name":"self"},{"generics":["engineclient"],"name":"weak"}],"output":null}],[11,"set_signer","","",97,{"inputs":[{"name":"self"},{"generics":["accountprovider"],"name":"arc"},{"name":"address"},{"name":"password"}],"output":null}],[11,"sign","","",97,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["signature","error"],"name":"result"}}],[11,"snapshot_components","","",97,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"fork_choice","","",97,{"inputs":[{"name":"self"},{"name":"extendedheader"},{"name":"extendedheader"}],"output":{"name":"forkchoice"}}],[11,"new","","Returns new instance of InstantSeal over the given state machine.",98,{"inputs":[{"name":"m"}],"output":{"name":"self"}}],[11,"name","","",98,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"machine","","",98,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"seals_internally","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"generate_seal","","",98,null],[11,"verify_local_seal","","",98,null],[11,"open_block_header_timestamp","","",98,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"is_timestamp_valid","","",98,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"fork_choice","","",98,null],[11,"new","","Returns new instance of NullEngine with default VM Factory",99,{"inputs":[{"name":"nullengineparams"},{"name":"m"}],"output":{"name":"self"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"name","","",99,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"machine","","",99,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"on_close_block","","",99,null],[11,"maximum_uncle_count","","",99,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"name":"usize"}}],[11,"verify_local_seal","","",99,null],[11,"snapshot_components","","",99,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"fork_choice","","",99,null],[11,"new","","Create a new instance of Tendermint engine",100,{"inputs":[{"name":"tendermintparams"},{"name":"ethereummachine"}],"output":{"generics":["arc","error"],"name":"result"}}],[11,"name","","",100,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"seal_fields","","(consensus view, proposal signature, authority signatures)",100,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"usize"}}],[11,"machine","","",100,{"inputs":[{"name":"self"}],"output":{"name":"ethereummachine"}}],[11,"maximum_uncle_count","","",100,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"name":"usize"}}],[11,"maximum_uncle_age","","",100,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"populate_from_parent","","",100,{"inputs":[{"name":"self"},{"name":"header"},{"name":"header"}],"output":null}],[11,"seals_internally","","Should this node participate.",100,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"generate_seal","","Attempt to seal generate a proposal seal.",100,{"inputs":[{"name":"self"},{"name":"executedblock"},{"name":"header"}],"output":{"name":"seal"}}],[11,"handle_message","","",100,null],[11,"on_new_block","","",100,{"inputs":[{"name":"self"},{"name":"executedblock"},{"name":"bool"},{"name":"iterator"}],"output":{"generics":["error"],"name":"result"}}],[11,"on_close_block","","Apply the block reward on finalisation of the block.",100,{"inputs":[{"name":"self"},{"name":"executedblock"}],"output":{"generics":["error"],"name":"result"}}],[11,"verify_local_seal","","",100,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"generics":["error"],"name":"result"}}],[11,"verify_block_basic","","",100,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"generics":["error"],"name":"result"}}],[11,"verify_block_external","","",100,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"generics":["error"],"name":"result"}}],[11,"signals_epoch_end","","",100,{"inputs":[{"name":"self"},{"name":"header"},{"name":"auxiliarydata"}],"output":{"generics":["ethereummachine"],"name":"epochchange"}}],[11,"is_epoch_end","","",100,{"inputs":[{"name":"self"},{"name":"header"},{"name":"headers"},{"name":"pendingtransitionstore"}],"output":{"generics":["vec"],"name":"option"}}],[11,"epoch_verifier","","",100,null],[11,"set_signer","","",100,{"inputs":[{"name":"self"},{"generics":["accountprovider"],"name":"arc"},{"name":"address"},{"name":"password"}],"output":null}],[11,"sign","","",100,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["signature","error"],"name":"result"}}],[11,"snapshot_components","","",100,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"stop","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"is_proposal","","",100,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"step","","Equivalent to a timeout: to be used for tests.",100,{"inputs":[{"name":"self"}],"output":null}],[11,"register_client","","",100,{"inputs":[{"name":"self"},{"generics":["engineclient"],"name":"weak"}],"output":null}],[11,"fork_choice","","",100,{"inputs":[{"name":"self"},{"name":"extendedheader"},{"name":"extendedheader"}],"output":{"name":"forkchoice"}}],[0,"block_reward","","A module with types for declaring block rewards and a client interface for interacting with a block reward contract.",null,null],[3,"BlockRewardContract","ethcore::engines::block_reward","A client for the block reward contract.",null,null],[4,"RewardKind","","The kind of block reward. Depending on the consensus engine the allocated block reward might have different semantics which could lead e.g. to different reward values.",null,null],[13,"Author","","Reward attributed to the block author.",101,null],[13,"Uncle","","Reward attributed to the block uncle(s).",101,null],[13,"EmptyStep","","Reward attributed to the author(s) of empty step(s) included in the block (AuthorityRound engine).",101,null],[13,"External","","Reward attributed by an external protocol (e.g. block reward contract).",101,null],[5,"apply_block_rewards","","Applies the given block rewards, i.e. adds the given balance to each benefactors' address. If tracing is enabled the operations are recorded.",null,null],[0,"block_reward_contract","","",null,null],[3,"BlockReward","ethcore::engines::block_reward::block_reward_contract","Contract",null,null],[3,"BlockRewardFunctions","","",null,null],[0,"functions","","",null,null],[3,"Reward","ethcore::engines::block_reward::block_reward_contract::functions","",null,null],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"reward"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"reward"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"reward"}],"output":{"name":"bool"}}],[11,"default","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",102,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"}],"output":{"name":"bytes"}}],[11,"fmt","ethcore::engines::block_reward::block_reward_contract","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"blockreward"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"blockreward"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"blockreward"}],"output":{"name":"bool"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"blockrewardfunctions"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"blockrewardfunctions"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"blockrewardfunctions"}],"output":{"name":"bool"}}],[11,"reward","","",104,{"inputs":[{"name":"self"}],"output":{"name":"reward"}}],[11,"functions","","",103,{"inputs":[{"name":"self"}],"output":{"name":"blockrewardfunctions"}}],[11,"eq","ethcore::engines::block_reward","",101,{"inputs":[{"name":"self"},{"name":"rewardkind"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"rewardkind"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",101,{"inputs":[{"name":"self"}],"output":{"name":"rewardtype"}}],[11,"new","","Create a new block reward contract client targeting the given address.",105,{"inputs":[{"name":"address"}],"output":{"name":"blockrewardcontract"}}],[11,"reward","","Calls the block reward contract with the given benefactors list (and associated reward kind) and returns the reward allocation (address - value). The block reward contract must be called by the system address so the `caller` must ensure that (e.g. using `machine.execute_as_system`).",105,null],[0,"epoch","ethcore::engines","Epoch verifiers and transitions.",null,null],[3,"Transition","ethcore::engines::epoch","A full epoch transition.",null,null],[12,"block_hash","","Block hash at which the transition occurred.",106,null],[12,"block_number","","Block number at which the transition occurred.",106,null],[12,"proof","","\"transition/epoch\" proof from the engine combined with a finality proof.",106,null],[3,"PendingTransition","","An epoch transition pending a finality proof. Not all transitions need one.",null,null],[12,"proof","","\"transition/epoch\" proof from the engine.",107,null],[3,"NoOp","","Special \"no-op\" verifier for stateless, epoch-less engines.",null,null],[8,"EpochVerifier","","Verifier for all blocks within an epoch with self-contained state.",null,null],[10,"verify_light","","Lightly verify the next block header. This may not be a header belonging to a different epoch.",108,null],[11,"verify_heavy","","Perform potentially heavier checks on the next block header.",108,null],[11,"check_finality_proof","","Check a finality proof against this epoch verifier. Returns `Some(hashes)` if the proof proves finality of these hashes. Returns `None` if the proof doesn't prove anything.",108,null],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"transition"}}],[11,"rlp_append","","",106,{"inputs":[{"name":"self"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",106,{"inputs":[{"name":"rlp"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"rlp_append","","",107,{"inputs":[{"name":"self"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",107,{"inputs":[{"name":"rlp"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"verify_light","","",109,null],[6,"SystemCall","ethcore::engines","A system-calling closure. Enacts calls on a block's state from the system address.",null,null],[6,"Headers","","Type alias for a function we can get headers by hash through.",null,null],[6,"PendingTransitionStore","","Type alias for a function we can query pending transitions by block hash through.",null,null],[17,"DEFAULT_BLOCKHASH_CONTRACT","","Default EIP-210 contract code. As defined in https://github.com/ethereum/EIPs/pull/210",null,null],[8,"StateDependentProof","","Proof dependent on state.",null,null],[10,"generate_proof","","Generate a proof, given the state.",110,null],[10,"check_proof","","Check a proof generated elsewhere (potentially by a peer).",110,null],[8,"Engine","","A consensus mechanism for the chain. Generally either proof-of-work or proof-of-stake-based. Provides hooks into each of the major parts of block import.",null,null],[10,"name","","The name of this engine.",111,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"machine","","Get access to the underlying state machine.",111,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"seal_fields","","The number of additional header fields required for this engine.",111,null],[11,"extra_info","","Additional engine-specific information for the user/developer concerning `header`.",111,null],[11,"maximum_uncle_count","","Maximum number of uncles a block is allowed to declare.",111,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"name":"usize"}}],[11,"maximum_uncle_age","","The number of generations back that uncles can be.",111,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"on_new_block","","Block transformation functions, before the transactions. `epoch_begin` set to true if this block kicks off an epoch.",111,null],[11,"on_close_block","","Block transformation functions, after the transactions.",111,null],[11,"seals_internally","","None means that it requires external input (e.g. PoW) to seal a block. Some(true) means the engine is currently prime for seal generation (i.e. node is the current validator). Some(false) means that the node might seal internally but is not qualified now.",111,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"generate_seal","","Attempt to seal the block internally.",111,null],[10,"verify_local_seal","","Verify a locally-generated seal of a header.",111,null],[11,"verify_block_basic","","Phase 1 quick block verification. Only does checks that are cheap. Returns either a null `Ok` or a general error detailing the problem with import.",111,null],[11,"verify_block_unordered","","Phase 2 verification. Perform costly checks such as transaction signatures. Returns either a null `Ok` or a general error detailing the problem with import.",111,null],[11,"verify_block_family","","Phase 3 verification. Check block information against parent. Returns either a null `Ok` or a general error detailing the problem with import.",111,null],[11,"verify_block_external","","Phase 4 verification. Verify block header against potentially external data. Should only be called when `register_client` has been called previously.",111,null],[11,"genesis_epoch_data","","Genesis epoch data.",111,null],[11,"signals_epoch_end","","Whether an epoch change is signalled at the given header but will require finality. If a change can be enacted immediately then return `No` from this function but `Yes` from `is_epoch_end`.",111,null],[11,"is_epoch_end","","Whether a block is the end of an epoch.",111,null],[11,"epoch_verifier","","Create an epoch verifier from validation proof and a flag indicating whether finality is required.",111,null],[11,"populate_from_parent","","Populate a header's fields based on its parent's header. Usually implements the chain scoring rule based on weight.",111,null],[11,"handle_message","","Handle any potential consensus messages; updating consensus state and potentially issuing a new one.",111,null],[11,"is_proposal","","Find out if the block is a proposal block and should not be inserted into the DB. Takes a header of a fully verified block.",111,null],[11,"set_signer","","Register an account which signs consensus messages.",111,{"inputs":[{"name":"self"},{"generics":["accountprovider"],"name":"arc"},{"name":"address"},{"name":"password"}],"output":null}],[11,"sign","","Sign using the EngineSigner, to be used for consensus tx signing.",111,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["signature"],"name":"result"}}],[11,"register_client","","Add Client which can be used for sealing, potentially querying the state and sending messages.",111,{"inputs":[{"name":"self"},{"name":"weak"}],"output":null}],[11,"step","","Trigger next step of the consensus engine.",111,{"inputs":[{"name":"self"}],"output":null}],[11,"stop","","Stops any services that the may hold the Engine and makes it safe to drop.",111,{"inputs":[{"name":"self"}],"output":null}],[11,"snapshot_components","","Create a factory for building snapshot chunks and restoring from them. Returning `None` indicates that this engine doesn't support snapshot creation.",111,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"supports_warp","","Whether this engine supports warp sync.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"open_block_header_timestamp","","Return a new open block header timestamp based on the parent timestamp.",111,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"is_timestamp_valid","","Check whether the parent timestamp is valid.",111,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"ancestry_actions","","Gather all ancestry actions. Called at the last stage when a block is committed. The Engine must guarantee that the ancestry exists.",111,null],[10,"fork_choice","","Check whether the given new block is the best block, after finalization check.",111,null],[8,"EthEngine","","Common type alias for an engine coupled with an Ethereum-like state machine.",null,null],[11,"params","","Get the general parameters of the chain.",112,{"inputs":[{"name":"self"}],"output":{"name":"commonparams"}}],[11,"schedule","","Get the EVM schedule for the given block number.",112,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"name":"schedule"}}],[11,"builtins","","Builtin-contracts for the chain..",112,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"builtin","","Attempt to get a handle to a built-in contract. Only returns references to activated built-ins.",112,{"inputs":[{"name":"self"},{"name":"address"},{"name":"blocknumber"}],"output":{"generics":["builtin"],"name":"option"}}],[11,"maximum_extra_data_size","","Some intrinsic operation parameters; by default they take their value from the `spec()`'s `engine_params`.",112,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"account_start_nonce","","The nonce with which accounts begin at given block.",112,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"name":"u256"}}],[11,"signing_chain_id","","The network ID that transactions should be signed with.",112,{"inputs":[{"name":"self"},{"name":"envinfo"}],"output":{"generics":["u64"],"name":"option"}}],[11,"create_address_scheme","","Returns new contract address generation scheme at given block number.",112,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"name":"createcontractaddress"}}],[11,"verify_transaction_unordered","","Verify a particular transaction is valid.",112,{"inputs":[{"name":"self"},{"name":"unverifiedtransaction"},{"name":"header"}],"output":{"generics":["signedtransaction","error"],"name":"result"}}],[11,"verify_transaction_basic","","Perform basic/cheap transaction verification.",112,{"inputs":[{"name":"self"},{"name":"unverifiedtransaction"},{"name":"header"}],"output":{"generics":["error"],"name":"result"}}],[11,"additional_params","","Additional information.",112,{"inputs":[{"name":"self"}],"output":{"generics":["string","string"],"name":"hashmap"}}],[11,"decode_transaction","","Performs pre-validation of RLP decoded transaction before other processing",112,null],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"forkchoice"}],"output":{"name":"bool"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",91,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"seal"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"seal"}],"output":{"name":"bool"}}],[11,"known_confirmed","","Convert to a result, indicating that any necessary confirmation has been done already.",94,{"inputs":[{"name":"self"}],"output":{"generics":["box","error"],"name":"result"}}],[0,"error","ethcore","General error types for use in ethcore.",null,null],[3,"ImportError","ethcore::error","The Error type.",null,null],[12,"0","","The kind of the error.",113,null],[3,"BlockImportError","","The Error type.",null,null],[12,"0","","The kind of the error.",114,null],[3,"Error","","The Error type.",null,null],[12,"0","","The kind of the error.",115,null],[4,"BlockError","","Errors concerning block processing.",null,null],[13,"TooManyUncles","","Block has too many uncles.",116,null],[13,"ExtraDataOutOfBounds","","Extra data is of an invalid length.",116,null],[13,"InvalidSealArity","","Seal is incorrect format.",116,null],[13,"TooMuchGasUsed","","Block has too much gas used.",116,null],[13,"InvalidUnclesHash","","Uncles hash in header is invalid.",116,null],[13,"UncleTooOld","","An uncle is from a generation too old.",116,null],[13,"UncleIsBrother","","An uncle is from the same generation as the block.",116,null],[13,"UncleInChain","","An uncle is already in the chain.",116,null],[13,"DuplicateUncle","","An uncle is included twice.",116,null],[13,"UncleParentNotInChain","","An uncle has a parent not in the chain.",116,null],[13,"InvalidStateRoot","","State root header field is invalid.",116,null],[13,"InvalidGasUsed","","Gas used header field is invalid.",116,null],[13,"InvalidTransactionsRoot","","Transactions root header field is invalid.",116,null],[13,"DifficultyOutOfBounds","","Difficulty is out of range; this can be used as an looser error prior to getting a definitive value for difficulty. This error needs only provide bounds of which it is out.",116,null],[13,"InvalidDifficulty","","Difficulty header field is invalid; this is a strong error used after getting a definitive value for difficulty (which is provided).",116,null],[13,"MismatchedH256SealElement","","Seal element of type H256 (max_hash for Ethash, but could be something else for other seal engines) is out of bounds.",116,null],[13,"InvalidProofOfWork","","Proof-of-work aspect of seal, which we assume is a 256-bit value, is invalid.",116,null],[13,"InvalidSeal","","Some low-level aspect of the seal is incorrect.",116,null],[13,"InvalidGasLimit","","Gas limit header field is invalid.",116,null],[13,"InvalidReceiptsRoot","","Receipts trie root header field is invalid.",116,null],[13,"InvalidTimestamp","","Timestamp header field is invalid.",116,null],[13,"TemporarilyInvalid","","Timestamp header field is too far in future.",116,null],[13,"InvalidLogBloom","","Log bloom header field is invalid.",116,null],[13,"InvalidNumber","","Number field of header is invalid.",116,null],[13,"RidiculousNumber","","Block number isn't sensible.",116,null],[13,"TooManyTransactions","","Too many transactions from a particular address.",116,null],[13,"UnknownParent","","Parent given is unknown.",116,null],[13,"UnknownUncleParent","","Uncle parent given is unknown.",116,null],[13,"UnknownEpochTransition","","No transition to epoch number.",116,null],[4,"ImportErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",117,null],[13,"AlreadyInChain","","Already in the block chain.",117,null],[13,"AlreadyQueued","","Already in the block queue",117,null],[13,"KnownBad","","Already marked as bad from a previous import (could mean parent is bad).",117,null],[4,"BlockImportErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",118,null],[13,"Import","","Import error",118,null],[13,"Block","","Block error",118,null],[13,"Decoder","","Rlp decoding error",118,null],[13,"Other","","Other error",118,null],[4,"TransactionImportError","","Api-level error for transaction import",null,null],[13,"Transaction","","Transaction error",119,null],[13,"Other","","Other error",119,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",120,null],[13,"Import","","Error concerning block import.",120,null],[13,"Io","","Io create error",120,null],[13,"StdIo","","Error concerning the Rust standard library's IO subsystem.",120,null],[13,"Trie","","Error concerning TrieDBs.",120,null],[13,"Execution","","Error concerning EVM code execution.",120,null],[13,"Block","","Error concerning block processing.",120,null],[13,"Transaction","","Error concerning transaction processing.",120,null],[13,"Snappy","","Snappy error.",120,null],[13,"Engine","","Consensus vote error.",120,null],[13,"Ethkey","","Ethkey error.",120,null],[13,"Client","","Client configuration error.",120,null],[13,"Snapshot","","Snapshot error.",120,null],[13,"AccountProvider","","Account Provider error",120,null],[13,"PowHashInvalid","","PoW hash is invalid or out of date.",120,null],[13,"PowInvalid","","The value of the nonce or mishash is invalid.",120,null],[13,"UnknownEngineName","","Unknown engine given",120,null],[13,"Decoder","","RLP decoding errors",120,null],[6,"ImportErrorResult","","Convenient wrapper around `std::Result`.",null,null],[6,"EthcoreResult","","Convenient wrapper around `std::Result`.",null,null],[6,"ImportResult","","Result of import block operation.",null,null],[8,"ImportErrorResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",121,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["importerror"],"name":"result"}}],[8,"BlockImportErrorResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",122,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["blockimporterror"],"name":"result"}}],[8,"ErrorResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",123,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"blockerror"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"blockerror"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"blockerror"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",116,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",113,{"inputs":[{"name":"importerrorkind"},{"name":"state"}],"output":{"name":"importerror"}}],[11,"from_kind","","",113,null],[11,"with_chain","","",113,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",113,null],[11,"iter","","",113,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",113,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"extract_backtrace","","",113,{"inputs":[{"name":"error"}],"output":{"generics":["internalbacktrace"],"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",113,{"inputs":[{"name":"importerrorkind"}],"output":{"name":"importerror"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",113,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"importerror"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",113,{"inputs":[{"generics":["error"],"name":"box"},{"name":"k"}],"output":{"name":"importerror"}}],[11,"kind","","Returns the kind of the error.",113,{"inputs":[{"name":"self"}],"output":{"name":"importerrorkind"}}],[11,"iter","","Iterates over the error chain.",113,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",113,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"importerror"}}],[11,"description","","A short description of the error. This method is identical to `Error::description()`",113,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",113,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",113,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",113,{"inputs":[{"name":"importerrorkind"}],"output":{"name":"self"}}],[11,"from","","",113,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",113,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",117,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",117,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",117,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",117,{"inputs":[{"name":"importerror"}],"output":{"name":"self"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",114,{"inputs":[{"name":"blockimporterrorkind"},{"name":"state"}],"output":{"name":"blockimporterror"}}],[11,"from_kind","","",114,null],[11,"with_chain","","",114,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",114,null],[11,"iter","","",114,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",114,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",114,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"extract_backtrace","","",114,{"inputs":[{"name":"error"}],"output":{"generics":["internalbacktrace"],"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",114,{"inputs":[{"name":"blockimporterrorkind"}],"output":{"name":"blockimporterror"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",114,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"blockimporterror"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",114,{"inputs":[{"generics":["error"],"name":"box"},{"name":"k"}],"output":{"name":"blockimporterror"}}],[11,"kind","","Returns the kind of the error.",114,{"inputs":[{"name":"self"}],"output":{"name":"blockimporterrorkind"}}],[11,"iter","","Iterates over the error chain.",114,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",114,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",114,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"blockimporterror"}}],[11,"description","","A short description of the error. This method is identical to `Error::description()`",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",114,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",114,{"inputs":[{"name":"importerror"}],"output":{"name":"self"}}],[11,"from","","",114,{"inputs":[{"name":"blockerror"}],"output":{"name":"self"}}],[11,"from","","",114,{"inputs":[{"name":"decodererror"}],"output":{"name":"self"}}],[11,"from","","",114,{"inputs":[{"name":"blockimporterrorkind"}],"output":{"name":"self"}}],[11,"from","","",114,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",114,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",118,{"inputs":[{"name":"importerrorkind"}],"output":{"name":"self"}}],[11,"from","","",118,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",118,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",118,{"inputs":[{"name":"blockimporterror"}],"output":{"name":"self"}}],[11,"from","","",114,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"transactionimporterror"}}],[11,"from","","",119,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",115,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",115,null],[11,"with_chain","","",115,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",115,null],[11,"iter","","",115,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",115,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",115,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"extract_backtrace","","",115,{"inputs":[{"name":"error"}],"output":{"generics":["internalbacktrace"],"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",115,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",115,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",115,{"inputs":[{"generics":["error"],"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",115,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",115,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",115,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",115,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","A short description of the error. This method is identical to `Error::description()`",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",115,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",115,{"inputs":[{"name":"importerror"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"ioerror"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"trieerror"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"executionerror"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"blockerror"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"transactionerror"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"invalidinput"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"engineerror"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"ethkeyerror"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",120,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",120,{"inputs":[{"name":"importerrorkind"}],"output":{"name":"self"}}],[11,"from","","",120,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",120,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",120,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"clienterror"}],"output":{"name":"error"}}],[11,"from","","",115,{"inputs":[{"name":"accountserror"}],"output":{"name":"error"}}],[11,"from","","",115,{"inputs":[{"name":"decodererror"}],"output":{"name":"error"}}],[11,"from","","",115,{"inputs":[{"name":"blockimporterror"}],"output":{"name":"error"}}],[11,"from","","",115,{"inputs":[{"name":"snapshoterror"}],"output":{"name":"error"}}],[11,"from","","",115,{"inputs":[{"name":"box"}],"output":{"name":"error"}}],[0,"ethereum","ethcore","Ethereum protocol module.",null,null],[5,"new_olympic","ethcore::ethereum","Create a new Foundation Olympic chain spec.",null,{"inputs":[{"name":"t"}],"output":{"name":"spec"}}],[5,"new_foundation","","Create a new Foundation Mainnet chain spec.",null,{"inputs":[{"name":"t"}],"output":{"name":"spec"}}],[5,"new_classic","","Create a new Classic Mainnet chain spec without the DAO hardfork.",null,{"inputs":[{"name":"t"}],"output":{"name":"spec"}}],[5,"new_expanse","","Create a new Expanse mainnet chain spec.",null,{"inputs":[{"name":"t"}],"output":{"name":"spec"}}],[5,"new_tobalaba","","Create a new Tobalaba chain spec.",null,{"inputs":[{"name":"t"}],"output":{"name":"spec"}}],[5,"new_musicoin","","Create a new Musicoin mainnet chain spec.",null,{"inputs":[{"name":"t"}],"output":{"name":"spec"}}],[5,"new_ellaism","","Create a new Ellaism mainnet chain spec.",null,{"inputs":[{"name":"t"}],"output":{"name":"spec"}}],[5,"new_easthub","","Create a new Easthub mainnet chain spec.",null,{"inputs":[{"name":"t"}],"output":{"name":"spec"}}],[5,"new_social","","Create a new Ethereum Social mainnet chain spec.",null,{"inputs":[{"name":"t"}],"output":{"name":"spec"}}],[5,"new_kovan","","Create a new Kovan testnet chain spec.",null,{"inputs":[{"name":"t"}],"output":{"name":"spec"}}],[5,"new_ropsten","","Create a new Foundation Ropsten chain spec.",null,{"inputs":[{"name":"t"}],"output":{"name":"spec"}}],[5,"new_morden","","Create a new Morden chain spec.",null,{"inputs":[{"name":"t"}],"output":{"name":"spec"}}],[5,"new_frontier_test","","Create a new Foundation Frontier-era chain spec as though it never changes to Homestead.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_ropsten_test","","Create a new Ropsten chain spec.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_homestead_test","","Create a new Foundation Homestead-era chain spec as though it never changed from Frontier.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_eip150_test","","Create a new Foundation Homestead-EIP150-era chain spec as though it never changed from Homestead/Frontier.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_eip161_test","","Create a new Foundation Homestead-EIP161-era chain spec as though it never changed from Homestead/Frontier.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_transition_test","","Create a new Foundation Frontier/Homestead/DAO chain spec with transition points at #5 and #8.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_mainnet_like","","Create a new Foundation Mainnet chain spec without genesis accounts.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_byzantium_test","","Create a new Foundation Byzantium era spec.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_constantinople_test","","Create a new Foundation Constantinople era spec.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_mcip3_test","","Create a new Musicoin-MCIP3-era spec.",null,{"inputs":[],"output":{"name":"spec"}}],[5,"new_frontier_test_machine","","Create a new Foundation Frontier-era chain spec as though it never changes to Homestead.",null,{"inputs":[],"output":{"name":"ethereummachine"}}],[5,"new_homestead_test_machine","","Create a new Foundation Homestead-era chain spec as though it never changed from Frontier.",null,{"inputs":[],"output":{"name":"ethereummachine"}}],[5,"new_byzantium_test_machine","","Create a new Foundation Byzantium era spec.",null,{"inputs":[],"output":{"name":"ethereummachine"}}],[5,"new_constantinople_test_machine","","Create a new Foundation Constantinople era spec.",null,{"inputs":[],"output":{"name":"ethereummachine"}}],[5,"new_mcip3_test_machine","","Create a new Musicoin-MCIP3-era spec.",null,{"inputs":[],"output":{"name":"ethereummachine"}}],[5,"new_kovan_wasm_test_machine","","Create new Kovan spec with wasm activated at certain block",null,{"inputs":[],"output":{"name":"ethereummachine"}}],[0,"ethash","","Export the ethash module.",null,null],[3,"Seal","ethcore::ethereum::ethash","Ethash specific seal",null,null],[12,"mix_hash","","Ethash seal mix_hash",124,null],[12,"nonce","","Ethash seal nonce",124,null],[3,"EthashParams","","Ethash params.",null,null],[12,"minimum_difficulty","","Minimum difficulty.",125,null],[12,"difficulty_bound_divisor","","Difficulty bound divisor.",125,null],[12,"difficulty_increment_divisor","","Difficulty increment divisor.",125,null],[12,"metropolis_difficulty_increment_divisor","","Metropolis difficulty increment divisor.",125,null],[12,"duration_limit","","Block duration.",125,null],[12,"homestead_transition","","Homestead transition block number.",125,null],[12,"difficulty_hardfork_transition","","Transition block for a change of difficulty params (currently just bound_divisor).",125,null],[12,"difficulty_hardfork_bound_divisor","","Difficulty param after the difficulty transition.",125,null],[12,"bomb_defuse_transition","","Block on which there is no additional difficulty from the exponential bomb.",125,null],[12,"eip100b_transition","","Number of first block where EIP-100 rules begin.",125,null],[12,"ecip1010_pause_transition","","Number of first block where ECIP-1010 begins.",125,null],[12,"ecip1010_continue_transition","","Number of first block where ECIP-1010 ends.",125,null],[12,"ecip1017_era_rounds","","Total block number for one ECIP-1017 era.",125,null],[12,"mcip3_transition","","Number of first block where MCIP-3 begins.",125,null],[12,"mcip3_miner_reward","","MCIP-3 Block reward coin-base for miners.",125,null],[12,"mcip3_ubi_reward","","MCIP-3 Block reward ubi-base for basic income.",125,null],[12,"mcip3_ubi_contract","","MCIP-3 contract address for universal basic income.",125,null],[12,"mcip3_dev_reward","","MCIP-3 Block reward dev-base for dev funds.",125,null],[12,"mcip3_dev_contract","","MCIP-3 contract address for the developer funds.",125,null],[12,"block_reward","","Block reward in base units.",125,null],[12,"eip649_transition","","EIP-649 transition block.",125,null],[12,"eip649_delay","","EIP-649 bomb delay.",125,null],[12,"eip649_reward","","EIP-649 base reward.",125,null],[12,"expip2_transition","","EXPIP-2 block height",125,null],[12,"expip2_duration_limit","","EXPIP-2 duration limit",125,null],[3,"Ethash","","Engine using Ethash proof-of-work consensus algorithm, suitable for Ethereum mainnet chains in the Olympic, Frontier and Homestead eras.",null,null],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"seal"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"self"},{"name":"seal"}],"output":{"name":"bool"}}],[11,"parse_seal","","Tries to parse rlp as ethash seal.",124,null],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"ethashparams"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"self"},{"name":"ethashparams"}],"output":{"name":"bool"}}],[11,"from","","",125,{"inputs":[{"name":"ethashparams"}],"output":{"name":"self"}}],[11,"new","","Create a new instance of Ethash engine",126,{"inputs":[{"name":"path"},{"name":"ethashparams"},{"name":"ethereummachine"},{"name":"t"}],"output":{"name":"arc"}}],[11,"boundary_to_difficulty","","Convert an Ethash boundary to its original difficulty. Basically just `f(x) = 2^256 / x`.",126,{"inputs":[{"name":"h256"}],"output":{"name":"u256"}}],[11,"difficulty_to_boundary","","Convert an Ethash difficulty to the target boundary. Basically just `f(x) = 2^256 / x`.",126,{"inputs":[{"name":"u256"}],"output":{"name":"h256"}}],[0,"denominations","ethcore::ethereum","Export the denominations module.",null,null],[5,"ether","ethcore::ethereum::denominations","1 Ether in Wei",null,{"inputs":[],"output":{"name":"u256"}}],[5,"finney","","1 Finney in Wei",null,{"inputs":[],"output":{"name":"u256"}}],[5,"szabo","","1 Szabo in Wei",null,{"inputs":[],"output":{"name":"u256"}}],[5,"shannon","","1 Shannon in Wei",null,{"inputs":[],"output":{"name":"u256"}}],[5,"wei","","1 Wei in Wei",null,{"inputs":[],"output":{"name":"u256"}}],[0,"executed","ethcore","Transaction execution format module.",null,null],[3,"Executed","ethcore::executed","Transaction execution receipt.",null,null],[12,"exception","","True if the outer call/create resulted in an exceptional exit.",127,null],[12,"gas","","Gas paid up front for execution of transaction.",127,null],[12,"gas_used","","Gas used during execution of transaction.",127,null],[12,"refunded","","Gas refunded after the execution of transaction. To get gas that was required up front, add `refunded` and `gas_used`.",127,null],[12,"cumulative_gas_used","","Cumulative gas used in current block so far.",127,null],[12,"logs","","Vector of logs generated by transaction.",127,null],[12,"contracts_created","","Addresses of contracts created during execution of transaction. Ordered from earliest creation.",127,null],[12,"output","","Transaction output.",127,null],[12,"trace","","The trace of this transaction.",127,null],[12,"vm_trace","","The VM trace of this transaction.",127,null],[12,"state_diff","","The state diff, if we traced it.",127,null],[4,"ExecutionError","","Result of executing the transaction.",null,null],[13,"NotEnoughBaseGas","","Returned when there gas paid for transaction execution is lower than base gas required.",128,null],[12,"required","ethcore::executed::ExecutionError","Absolute minimum gas required.",128,null],[12,"got","","Gas provided.",128,null],[13,"BlockGasLimitReached","ethcore::executed","Returned when block (gas_used + gas) > gas_limit.",128,null],[12,"gas_limit","ethcore::executed::ExecutionError","Gas limit of block for transaction.",128,null],[12,"gas_used","","Gas used in block prior to transaction.",128,null],[12,"gas","","Amount of gas in block.",128,null],[13,"InvalidNonce","ethcore::executed","Returned when transaction nonce does not match state nonce.",128,null],[12,"expected","ethcore::executed::ExecutionError","Nonce expected.",128,null],[12,"got","","Nonce found.",128,null],[13,"NotEnoughCash","ethcore::executed","Returned when cost of transaction (value + gas_price * gas) exceeds current sender balance.",128,null],[12,"required","ethcore::executed::ExecutionError","Minimum required balance.",128,null],[12,"got","","Actual balance.",128,null],[13,"MutableCallInStaticContext","ethcore::executed","When execution tries to modify the state in static context",128,null],[13,"SenderMustExist","","Returned when transacting from a non-existing account with dust protection enabled.",128,null],[13,"Internal","","Returned when internal evm error occurs.",128,null],[13,"TransactionMalformed","","Returned when generic transaction occurs",128,null],[4,"CallError","","Result of executing the transaction.",null,null],[13,"TransactionNotFound","","Couldn't find the transaction in the chain.",129,null],[13,"StatePruned","","Couldn't find requested block's state in the chain.",129,null],[13,"Exceptional","","Couldn't find an amount of gas that didn't result in an exception.",129,null],[13,"StateCorrupt","","Corrupt state.",129,null],[13,"Execution","","Error executing.",129,null],[6,"ExecutionResult","","Transaction execution result.",null,null],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"executed"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"executed"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"executed"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"executionerror"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"executionerror"}],"output":{"name":"bool"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"executionerror"}}],[11,"from","","",128,{"inputs":[{"generics":["trieerror"],"name":"box"}],"output":{"name":"self"}}],[11,"from","","",128,{"inputs":[{"name":"trieerror"}],"output":{"name":"self"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",128,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"callerror"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"self"},{"name":"callerror"}],"output":{"name":"bool"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"callerror"}}],[11,"from","","",129,{"inputs":[{"name":"executionerror"}],"output":{"name":"self"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"executive","ethcore","Transaction Execution environment.",null,null],[3,"TransactOptions","ethcore::executive","Transaction execution options.",null,null],[12,"tracer","","Enable call tracing.",130,null],[12,"vm_tracer","","Enable VM tracing.",130,null],[12,"check_nonce","","Check transaction nonce before execution.",130,null],[12,"output_from_init_contract","","Records the output from init contract calls.",130,null],[3,"Executive","","Transaction executor.",null,null],[5,"contract_address","","Returns new address created from address, nonce, and code hash",null,null],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"transactoptions"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"transactoptions"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"self"},{"name":"transactoptions"}],"output":{"name":"bool"}}],[11,"new","","Create new `TransactOptions` with given tracer and VM tracer.",130,{"inputs":[{"name":"t"},{"name":"v"}],"output":{"name":"self"}}],[11,"dont_check_nonce","","Disables the nonce check",130,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"save_output_from_contract","","Saves the output from contract creation.",130,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"with_tracing_and_vm_tracing","","Creates new `TransactOptions` with default tracing and VM tracing.",130,{"inputs":[],"output":{"name":"self"}}],[11,"with_tracing","","Creates new `TransactOptions` with default tracing and no VM tracing.",130,{"inputs":[],"output":{"name":"self"}}],[11,"with_vm_tracing","","Creates new `TransactOptions` with no tracing and default VM tracing.",130,{"inputs":[],"output":{"name":"self"}}],[11,"with_no_tracing","","Creates new `TransactOptions` without any tracing.",130,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Basic constructor.",131,{"inputs":[{"name":"state"},{"name":"envinfo"},{"name":"machine"}],"output":{"name":"self"}}],[11,"from_parent","","Populates executive from parent properties. Increments executive depth.",131,{"inputs":[{"name":"state"},{"name":"envinfo"},{"name":"machine"},{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"as_externalities","","Creates `Externalities` from `Executive`.",131,{"inputs":[{"name":"self"},{"name":"origininfo"},{"name":"substate"},{"name":"outputpolicy"},{"name":"t"},{"name":"v"},{"name":"bool"}],"output":{"name":"externalities"}}],[11,"transact","","This function should be used to execute transaction.",131,{"inputs":[{"name":"self"},{"name":"signedtransaction"},{"name":"transactoptions"}],"output":{"generics":["executed","executionerror"],"name":"result"}}],[11,"transact_virtual","","Execute a transaction in a \"virtual\" context. This will ensure the caller has enough balance to execute the desired transaction. Used for extra-block executions for things like consensus contracts and RPCs",131,{"inputs":[{"name":"self"},{"name":"signedtransaction"},{"name":"transactoptions"}],"output":{"generics":["executed","executionerror"],"name":"result"}}],[11,"call","","Calls contract function with given contract params. NOTE. It does not finalize the transaction (doesn't do refunds, nor suicides). Modifies the substate and the output. Returns either gas_left or `vm::Error`.",131,{"inputs":[{"name":"self"},{"name":"actionparams"},{"name":"substate"},{"name":"bytesref"},{"name":"t"},{"name":"v"}],"output":{"generics":["finalizationresult"],"name":"result"}}],[11,"create","","Creates contract with given contract params. NOTE. It does not finalize the transaction (doesn't do refunds, nor suicides). Modifies the substate.",131,{"inputs":[{"name":"self"},{"name":"actionparams"},{"name":"substate"},{"name":"option"},{"name":"t"},{"name":"v"}],"output":{"generics":["finalizationresult"],"name":"result"}}],[0,"header","ethcore","Block header.",null,null],[6,"BlockNumber","ethcore::header","Type for block number.",null,null],[3,"ExtendedHeader","","Extended block header, wrapping `Header` with finalized and total difficulty information.",null,null],[12,"header","","The actual header.",132,null],[12,"is_finalized","","Whether the block underlying this header is considered finalized.",132,null],[12,"parent_total_difficulty","","The parent block difficulty.",132,null],[12,"metadata","","The block metadata information.",132,null],[3,"Header","","A block header.",null,null],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"extendedheader"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"extendedheader"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"self"},{"name":"extendedheader"}],"output":{"name":"bool"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"default","","",133,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a new, default-valued, header.",133,{"inputs":[],"output":{"name":"self"}}],[11,"parent_hash","","Get the parent_hash field of the header.",133,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"timestamp","","Get the timestamp field of the header.",133,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"number","","Get the number field of the header.",133,{"inputs":[{"name":"self"}],"output":{"name":"blocknumber"}}],[11,"author","","Get the author field of the header.",133,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"extra_data","","Get the extra data field of the header.",133,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"state_root","","Get the state root field of the header.",133,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"receipts_root","","Get the receipts root field of the header.",133,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"log_bloom","","Get the log bloom field of the header.",133,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"transactions_root","","Get the transactions root field of the header.",133,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"uncles_hash","","Get the uncles hash field of the header.",133,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"gas_used","","Get the gas used field of the header.",133,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"gas_limit","","Get the gas limit field of the header.",133,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"difficulty","","Get the difficulty field of the header.",133,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"seal","","Get the seal field of the header.",133,null],[11,"decode_seal","","Get the seal field with RLP-decoded values as bytes.",133,{"inputs":[{"name":"self"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"set_parent_hash","","Set the number field of the header.",133,{"inputs":[{"name":"self"},{"name":"h256"}],"output":null}],[11,"set_uncles_hash","","Set the uncles hash field of the header.",133,{"inputs":[{"name":"self"},{"name":"h256"}],"output":null}],[11,"set_state_root","","Set the state root field of the header.",133,{"inputs":[{"name":"self"},{"name":"h256"}],"output":null}],[11,"set_transactions_root","","Set the transactions root field of the header.",133,{"inputs":[{"name":"self"},{"name":"h256"}],"output":null}],[11,"set_receipts_root","","Set the receipts root field of the header.",133,{"inputs":[{"name":"self"},{"name":"h256"}],"output":null}],[11,"set_log_bloom","","Set the log bloom field of the header.",133,{"inputs":[{"name":"self"},{"name":"bloom"}],"output":null}],[11,"set_timestamp","","Set the timestamp field of the header.",133,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"set_number","","Set the number field of the header.",133,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":null}],[11,"set_author","","Set the author field of the header.",133,{"inputs":[{"name":"self"},{"name":"address"}],"output":null}],[11,"set_extra_data","","Set the extra data field of the header.",133,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"set_gas_used","","Set the gas used field of the header.",133,{"inputs":[{"name":"self"},{"name":"u256"}],"output":null}],[11,"set_gas_limit","","Set the gas limit field of the header.",133,{"inputs":[{"name":"self"},{"name":"u256"}],"output":null}],[11,"set_difficulty","","Set the difficulty field of the header.",133,{"inputs":[{"name":"self"},{"name":"u256"}],"output":null}],[11,"set_seal","","Set the seal field of the header.",133,{"inputs":[{"name":"self"},{"generics":["bytes"],"name":"vec"}],"output":null}],[11,"compute_hash","","Get & memoize the hash of this header (keccak of the RLP with seal).",133,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"hash","","Get the hash of this header (keccak of the RLP with seal).",133,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"bare_hash","","Get the hash of the header excluding the seal",133,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"encoded","","Encode the header, getting a type-safe wrapper around the RLP.",133,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"decode","","",133,{"inputs":[{"name":"rlp"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"rlp_append","","",133,{"inputs":[{"name":"self"},{"name":"rlpstream"}],"output":null}],[11,"heap_size_of_children","","",133,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bare_hash","","",133,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"hash","","",133,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"seal","","",133,null],[11,"author","","",133,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"number","","",133,{"inputs":[{"name":"self"}],"output":{"name":"blocknumber"}}],[11,"score","","",133,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"set_score","","",133,{"inputs":[{"name":"self"},{"name":"u256"}],"output":null}],[11,"bare_hash","","",132,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"hash","","",132,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"seal","","",132,null],[11,"author","","",132,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"number","","",132,{"inputs":[{"name":"self"}],"output":{"name":"blocknumber"}}],[11,"score","","",132,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"set_score","","",132,{"inputs":[{"name":"self"},{"name":"u256"}],"output":null}],[11,"total_score","","",132,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"is_finalized","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"metadata","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"machine","ethcore","Ethereum-like state machine definition.",null,null],[3,"EthashExtensions","ethcore::machine","Ethash-specific extensions.",null,null],[12,"homestead_transition","","Homestead transition block number.",134,null],[12,"dao_hardfork_transition","","DAO hard-fork transition block (X).",134,null],[12,"dao_hardfork_beneficiary","","DAO hard-fork refund contract address (C).",134,null],[12,"dao_hardfork_accounts","","DAO hard-fork DAO accounts list (L)",134,null],[3,"EthereumMachine","","An ethereum-like state machine.",null,null],[3,"AuxiliaryData","","Auxiliary data fetcher for an Ethereum machine. In Ethereum-like machines there are two kinds of auxiliary data: bodies and receipts.",null,null],[12,"bytes","","The full block bytes, including the header.",135,null],[12,"receipts","","The block receipts.",135,null],[4,"AuxiliaryRequest","","Request for auxiliary data of a block.",null,null],[13,"Body","","Needs the body.",136,null],[13,"Receipts","","Needs the receipts.",136,null],[13,"Both","","Needs both body and receipts.",136,null],[6,"ScheduleCreationRules","","Special rules to be applied to the schedule.",null,null],[6,"Call","","Type alias for a function we can make calls through synchronously. Returns the call result and state proof for each call.",null,null],[17,"PARITY_GAS_LIMIT_DETERMINANT","","Parity tries to round block.gas_limit to multiple of this constant",null,null],[8,"WithRewards","","A state machine that uses block rewards.",null,null],[10,"note_rewards","","Note block rewards, traces each reward storing information about benefactor, amount and type of reward.",137,null],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"ethashextensions"}}],[11,"from","","",134,{"inputs":[{"name":"ethashparams"}],"output":{"name":"self"}}],[11,"regular","","Regular ethereum machine.",138,{"inputs":[{"name":"commonparams"},{"generics":["address","builtin"],"name":"btreemap"}],"output":{"name":"ethereummachine"}}],[11,"with_ethash_extensions","","Ethereum machine with ethash extensions.",138,{"inputs":[{"name":"commonparams"},{"generics":["address","builtin"],"name":"btreemap"},{"name":"ethashextensions"}],"output":{"name":"ethereummachine"}}],[11,"set_schedule_creation_rules","","Attach special rules to the creation of schedule.",138,{"inputs":[{"name":"self"},{"generics":["schedulecreationrules"],"name":"box"}],"output":null}],[11,"ethash_extensions","","Get a reference to the ethash-specific extensions.",138,{"inputs":[{"name":"self"}],"output":{"generics":["ethashextensions"],"name":"option"}}],[11,"execute_as_system","","Execute a call as the system address. Block environment information passed to the VM is modified to have its gas limit bounded at the upper limit of possible used gases including this system call, capped at the maximum value able to be represented by U256. This system call modifies the block state, but discards other information. If suicides, logs or refunds happen within the system call, they will not be executed or recorded. Gas used by this system call will not be counted on the block.",138,{"inputs":[{"name":"self"},{"name":"executedblock"},{"name":"address"},{"name":"u256"},{"generics":["vec"],"name":"option"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"on_new_block","","Logic to perform on a new block: updating last hashes and the DAO fork, for ethash.",138,{"inputs":[{"name":"self"},{"name":"executedblock"}],"output":{"generics":["error"],"name":"result"}}],[11,"populate_from_parent","","Populate a header's fields based on its parent's header. Usually implements the chain scoring rule based on weight. The gas floor target must not be lower than the engine's minimum gas limit.",138,{"inputs":[{"name":"self"},{"name":"header"},{"name":"header"},{"name":"u256"},{"name":"u256"}],"output":null}],[11,"params","","Get the general parameters of the chain.",138,{"inputs":[{"name":"self"}],"output":{"name":"commonparams"}}],[11,"schedule","","Get the EVM schedule for the given block number.",138,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"name":"schedule"}}],[11,"builtins","","Builtin-contracts for the chain..",138,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"builtin","","Attempt to get a handle to a built-in contract. Only returns references to activated built-ins.",138,{"inputs":[{"name":"self"},{"name":"address"},{"name":"blocknumber"}],"output":{"generics":["builtin"],"name":"option"}}],[11,"maximum_extra_data_size","","Some intrinsic operation parameters; by default they take their value from the `spec()`'s `engine_params`.",138,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"account_start_nonce","","The nonce with which accounts begin at given block.",138,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u256"}}],[11,"signing_chain_id","","The network ID that transactions should be signed with.",138,{"inputs":[{"name":"self"},{"name":"envinfo"}],"output":{"generics":["u64"],"name":"option"}}],[11,"create_address_scheme","","Returns new contract address generation scheme at given block number.",138,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"name":"createcontractaddress"}}],[11,"verify_transaction_unordered","","Verify a particular transaction is valid, regardless of order.",138,{"inputs":[{"name":"self"},{"name":"unverifiedtransaction"},{"name":"header"}],"output":{"generics":["signedtransaction","error"],"name":"result"}}],[11,"verify_transaction_basic","","Does basic verification of the transaction.",138,{"inputs":[{"name":"self"},{"name":"unverifiedtransaction"},{"name":"header"}],"output":{"generics":["error"],"name":"result"}}],[11,"verify_transaction","","Does verification of the transaction against the parent state.",138,{"inputs":[{"name":"self"},{"name":"signedtransaction"},{"name":"header"},{"name":"c"}],"output":{"generics":["error"],"name":"result"}}],[11,"additional_params","","Additional params.",138,{"inputs":[{"name":"self"}],"output":{"generics":["string","string"],"name":"hashmap"}}],[11,"decode_transaction","","Performs pre-validation of RLP decoded transaction before other processing",138,null],[11,"default","","",135,{"inputs":[],"output":{"name":"auxiliarydata"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"auxiliarydata"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"auxiliaryrequest"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"auxiliaryrequest"}],"output":{"name":"bool"}}],[11,"balance","","",138,{"inputs":[{"name":"self"},{"name":"executedblock"},{"name":"address"}],"output":{"generics":["u256","error"],"name":"result"}}],[11,"add_balance","","",138,{"inputs":[{"name":"self"},{"name":"executedblock"},{"name":"address"},{"name":"u256"}],"output":{"generics":["error"],"name":"result"}}],[11,"note_rewards","","",138,null],[0,"miner","ethcore","Miner module Keeps track of transactions and currently sealed pending block.",null,null],[4,"PendingOrdering","ethcore::miner","Transaction ordering when requesting pending set.",null,null],[13,"Priority","","Get pending transactions ordered by their priority (potentially expensive)",139,null],[13,"Unordered","","Get pending transactions without any care of particular ordering (cheaper).",139,null],[3,"Miner","","Keeps track of transactions using priority queue and holds currently mined block. Handles preparing work for \"work sealing\" or seals \"internally\" if Engine does not require work.",null,null],[3,"MinerOptions","","Configures the behaviour of the miner.",null,null],[12,"force_sealing","","Force the miner to reseal, even when nobody has asked for work.",140,null],[12,"reseal_on_external_tx","","Reseal on receipt of new external transactions.",140,null],[12,"reseal_on_own_tx","","Reseal on receipt of new local transactions.",140,null],[12,"reseal_on_uncle","","Reseal when new uncle block has been imported.",140,null],[12,"reseal_min_period","","Minimum period between transaction-inspired reseals.",140,null],[12,"reseal_max_period","","Maximum period between blocks (enables force sealing after that).",140,null],[12,"pending_set","","Whether we should fallback to providing all the queue's transactions or just pending.",140,null],[12,"work_queue_size","","How many historical work packages can we store before running out?",140,null],[12,"enable_resubmission","","Can we submit two different solutions for the same block and expect both to result in an import?",140,null],[12,"infinite_pending_block","","Create a pending block with maximal possible gas limit. NOTE: Such block will contain all pending transactions but will be invalid if mined.",140,null],[12,"tx_queue_strategy","","Strategy to use for prioritizing transactions in the queue.",140,null],[12,"tx_queue_penalization","","Simple senders penalization.",140,null],[12,"tx_queue_no_unfamiliar_locals","","Do we want to mark transactions recieved locally (e.g. RPC) as local if we don't have the sending account?",140,null],[12,"refuse_service_transactions","","Do we refuse to accept service transactions even if sender is certified.",140,null],[12,"pool_limits","","Transaction pool limits.",140,null],[12,"pool_verification_options","","Initial transaction verification options.",140,null],[3,"AuthoringParams","","Configurable parameters of block authoring.",null,null],[12,"gas_range_target","","Lower and upper bound of block gas limit that we are targeting",141,null],[12,"author","","Block author",141,null],[12,"extra_data","","Block extra data",141,null],[4,"Penalization","","Transaction queue penalization settings.",null,null],[13,"Disabled","","Penalization in transaction queue is disabled",142,null],[13,"Enabled","","Penalization in transaction queue is enabled",142,null],[12,"offend_threshold","ethcore::miner::Penalization","Upper limit of transaction processing time before penalizing.",142,null],[4,"PendingSet","ethcore::miner","Different possible definitions for pending transaction set.",null,null],[13,"AlwaysQueue","","Always just the transactions in the queue. These have had only cheap checks.",143,null],[13,"AlwaysSealing","","Always just the transactions in the sealing block. These have had full checks but may be empty if the node is not actively mining or has no force_sealing enabled.",143,null],[13,"SealingOrElseQueue","","Takes from sealing if mining, from queue otherwise.",143,null],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"pendingset"}],"output":{"name":"bool"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"penalization"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"penalization"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"penalization"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"mineroptions"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"mineroptions"}],"output":{"name":"bool"}}],[11,"default","","",140,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",141,{"inputs":[],"output":{"name":"authoringparams"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"authoringparams"}}],[11,"add_transactions_listener","","Set a callback to be notified about imported transactions' hashes.",144,{"inputs":[{"name":"self"},{"generics":["fn"],"name":"box"}],"output":null}],[11,"new","","Creates new instance of miner Arc.",144,{"inputs":[{"name":"mineroptions"},{"name":"gaspricer"},{"name":"spec"},{"generics":["arc"],"name":"option"}],"output":{"name":"self"}}],[11,"new_for_tests","","Creates new instance of miner with given spec and accounts.",144,{"inputs":[{"name":"spec"},{"generics":["arc"],"name":"option"}],"output":{"name":"miner"}}],[11,"set_io_channel","","Sets `IoChannel`",144,{"inputs":[{"name":"self"},{"generics":["clientiomessage"],"name":"iochannel"}],"output":null}],[11,"clear","","Clear all pending block states",144,{"inputs":[{"name":"self"}],"output":null}],[11,"update_transaction_queue_limits","","Updates transaction queue verification limits.",144,{"inputs":[{"name":"self"},{"name":"u256"}],"output":null}],[11,"authoring_params","","",144,{"inputs":[{"name":"self"}],"output":{"name":"authoringparams"}}],[11,"set_gas_range_target","","",144,null],[11,"set_extra_data","","",144,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"set_author","","",144,{"inputs":[{"name":"self"},{"name":"address"},{"generics":["password"],"name":"option"}],"output":{"generics":["accounterror"],"name":"result"}}],[11,"sensible_gas_price","","",144,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"sensible_gas_limit","","",144,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"import_external_transactions","","",144,{"inputs":[{"name":"self"},{"name":"c"},{"generics":["unverifiedtransaction"],"name":"vec"}],"output":{"generics":["result"],"name":"vec"}}],[11,"import_own_transaction","","",144,{"inputs":[{"name":"self"},{"name":"c"},{"name":"pendingtransaction"}],"output":{"generics":["error"],"name":"result"}}],[11,"import_claimed_local_transaction","","",144,{"inputs":[{"name":"self"},{"name":"c"},{"name":"pendingtransaction"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"local_transactions","","",144,{"inputs":[{"name":"self"}],"output":{"generics":["h256","status"],"name":"btreemap"}}],[11,"queued_transactions","","",144,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"vec"}}],[11,"pending_transaction_hashes","","",144,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"generics":["h256"],"name":"btreeset"}}],[11,"ready_transactions","","",144,{"inputs":[{"name":"self"},{"name":"c"},{"name":"usize"},{"name":"pendingordering"}],"output":{"generics":["arc"],"name":"vec"}}],[11,"next_nonce","","",144,{"inputs":[{"name":"self"},{"name":"c"},{"name":"address"}],"output":{"name":"u256"}}],[11,"transaction","","",144,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["arc"],"name":"option"}}],[11,"remove_transaction","","",144,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["arc"],"name":"option"}}],[11,"queue_status","","",144,{"inputs":[{"name":"self"}],"output":{"name":"queuestatus"}}],[11,"pending_receipt","","",144,{"inputs":[{"name":"self"},{"name":"blocknumber"},{"name":"h256"}],"output":{"generics":["richreceipt"],"name":"option"}}],[11,"pending_receipts","","",144,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"generics":["btreemap"],"name":"option"}}],[11,"update_sealing","","Update sealing if required. Prepare the block and work if the Engine does not seal internally.",144,{"inputs":[{"name":"self"},{"name":"c"}],"output":null}],[11,"is_currently_sealing","","",144,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"work_package","","",144,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"option"}}],[11,"submit_seal","","",144,{"inputs":[{"name":"self"},{"name":"h256"},{"generics":["bytes"],"name":"vec"}],"output":{"generics":["sealedblock","error"],"name":"result"}}],[11,"chain_new_blocks","","",144,null],[11,"pending_state","","",144,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"name":"option"}}],[11,"pending_block_header","","",144,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"generics":["header"],"name":"option"}}],[11,"pending_block","","",144,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"generics":["block"],"name":"option"}}],[11,"pending_transactions","","",144,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"generics":["vec"],"name":"option"}}],[0,"pool_client","","Blockchain access for transaction pool.",null,null],[3,"NonceCache","ethcore::miner::pool_client","Cache for state nonces.",null,null],[3,"PoolClient","","Blockchain accesss for transaction pool.",null,null],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"noncecache"}}],[11,"new","","Create new cache with a limit of `limit` entries.",145,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"get","","Retrieve a cached nonce for given sender.",145,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["u256"],"name":"option"}}],[11,"clear","","Clear all entries from the cache.",145,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Creates new client given chain, nonce cache, accounts and service transaction verifier.",146,{"inputs":[{"name":"c"},{"name":"noncecache"},{"name":"ethengine"},{"generics":["accountprovider"],"name":"option"},{"name":"bool"}],"output":{"name":"self"}}],[11,"verify_signed","","Verifies if signed transaction is executable.",146,{"inputs":[{"name":"self"},{"name":"signedtransaction"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"transaction_already_included","","",146,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"verify_transaction","","",146,{"inputs":[{"name":"self"},{"name":"unverifiedtransaction"}],"output":{"generics":["signedtransaction","error"],"name":"result"}}],[11,"account_details","","",146,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"accountdetails"}}],[11,"required_gas","","",146,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"u256"}}],[11,"transaction_type","","",146,{"inputs":[{"name":"self"},{"name":"signedtransaction"}],"output":{"name":"transactiontype"}}],[11,"decode_transaction","","",146,null],[11,"account_nonce","","",146,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"u256"}}],[8,"TransactionVerifierClient","ethcore::miner","Provides methods to verify incoming external transactions",null,null],[8,"BlockChainClient","","Extended client interface used for mining",null,null],[8,"MinerService","","Miner client API",null,null],[16,"State","","Type representing chain state",147,null],[10,"submit_seal","","Submit `seal` as a valid solution for the header of `pow_hash`. Will check the seal, but not actually insert the block into the chain.",147,{"inputs":[{"name":"self"},{"name":"h256"},{"generics":["bytes"],"name":"vec"}],"output":{"generics":["sealedblock","error"],"name":"result"}}],[10,"is_currently_sealing","","Is it currently sealing?",147,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"work_package","","Get the sealing work package preparing it if doesn't exist yet.",147,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"option"}}],[10,"update_sealing","","Update current pending block",147,{"inputs":[{"name":"self"},{"name":"c"}],"output":null}],[10,"chain_new_blocks","","Called when blocks are imported to chain, updates transactions queue. `is_internal_import` indicates that the block has just been created in miner and internally sealed by the engine, so we shouldn't attempt creating new block again.",147,null],[10,"pending_receipts","","Get a list of all pending receipts from pending block.",147,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"generics":["btreemap"],"name":"option"}}],[10,"pending_receipt","","Get a particular receipt from pending block.",147,{"inputs":[{"name":"self"},{"name":"blocknumber"},{"name":"h256"}],"output":{"generics":["richreceipt"],"name":"option"}}],[10,"pending_state","","Get `Some` `clone()` of the current pending block's state or `None` if we're not sealing.",147,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"name":"option"}}],[10,"pending_block_header","","Get `Some` `clone()` of the current pending block header or `None` if we're not sealing.",147,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"generics":["header"],"name":"option"}}],[10,"pending_block","","Get `Some` `clone()` of the current pending block or `None` if we're not sealing.",147,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"generics":["block"],"name":"option"}}],[10,"pending_transactions","","Get `Some` `clone()` of the current pending block transactions or `None` if we're not sealing.",147,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"generics":["vec"],"name":"option"}}],[10,"authoring_params","","Get current authoring parameters.",147,{"inputs":[{"name":"self"}],"output":{"name":"authoringparams"}}],[10,"set_gas_range_target","","Set the lower and upper bound of gas limit we wish to target when sealing a new block.",147,null],[10,"set_extra_data","","Set the extra_data that we will seal blocks with.",147,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[10,"set_author","","Set info necessary to sign consensus messages and block authoring.",147,{"inputs":[{"name":"self"},{"name":"address"},{"generics":["password"],"name":"option"}],"output":{"generics":["signerror"],"name":"result"}}],[10,"import_external_transactions","","Imports transactions to transaction queue.",147,{"inputs":[{"name":"self"},{"name":"c"},{"generics":["unverifiedtransaction"],"name":"vec"}],"output":{"generics":["result"],"name":"vec"}}],[10,"import_own_transaction","","Imports own (node owner) transaction to queue.",147,{"inputs":[{"name":"self"},{"name":"c"},{"name":"pendingtransaction"}],"output":{"generics":["error"],"name":"result"}}],[10,"import_claimed_local_transaction","","Imports transactions from potentially external sources, with behaviour determined by the config flag `tx_queue_allow_unfamiliar_locals`",147,{"inputs":[{"name":"self"},{"name":"c"},{"name":"pendingtransaction"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[10,"remove_transaction","","Removes transaction from the pool.",147,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["arc"],"name":"option"}}],[10,"transaction","","Query transaction from the pool given it's hash.",147,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["arc"],"name":"option"}}],[10,"next_nonce","","Returns next valid nonce for given address.",147,{"inputs":[{"name":"self"},{"name":"c"},{"name":"address"}],"output":{"name":"u256"}}],[10,"pending_transaction_hashes","","Get a set of all pending transaction hashes.",147,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"generics":["h256"],"name":"btreeset"}}],[10,"ready_transactions","","Get a list of all ready transactions either ordered by priority or unordered (cheaper).",147,{"inputs":[{"name":"self"},{"name":"c"},{"name":"usize"},{"name":"pendingordering"}],"output":{"generics":["arc"],"name":"vec"}}],[10,"queued_transactions","","Get a list of all transactions in the pool (some of them might not be ready for inclusion yet).",147,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"vec"}}],[10,"local_transactions","","Get a list of local transactions with statuses.",147,{"inputs":[{"name":"self"}],"output":{"generics":["h256","status"],"name":"btreemap"}}],[10,"queue_status","","Get current queue status.",147,{"inputs":[{"name":"self"}],"output":{"name":"queuestatus"}}],[10,"sensible_gas_price","","Suggested gas price.",147,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[10,"sensible_gas_limit","","Suggested gas limit.",147,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[0,"pod_state","ethcore","State of all accounts in the system expressed in Plain Old Data.",null,null],[3,"PodState","ethcore::pod_state","State of all accounts in the system expressed in Plain Old Data.",null,null],[5,"diff_pod","","Calculate and return diff between `pre` state and `post` state.",null,{"inputs":[{"name":"podstate"},{"name":"podstate"}],"output":{"name":"statediff"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"podstate"}}],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"podstate"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"self"},{"name":"podstate"}],"output":{"name":"bool"}}],[11,"default","","",148,{"inputs":[],"output":{"name":"podstate"}}],[11,"new","","Contruct a new object from the `m`.",148,{"inputs":[],"output":{"name":"podstate"}}],[11,"from","","Contruct a new object from the `m`.",148,{"inputs":[{"generics":["address","podaccount"],"name":"btreemap"}],"output":{"name":"podstate"}}],[11,"get","","Get the underlying map.",148,{"inputs":[{"name":"self"}],"output":{"name":"btreemap"}}],[11,"root","","Get the root hash of the trie of the RLP of this.",148,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"drain","","Drain object to get the underlying map.",148,{"inputs":[{"name":"self"}],"output":{"generics":["address","podaccount"],"name":"btreemap"}}],[11,"from","","",148,{"inputs":[{"name":"state"}],"output":{"name":"podstate"}}],[11,"from","","",148,{"inputs":[{"name":"state"}],"output":{"name":"podstate"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"snapshot","ethcore","Snapshot creation, restoration, and network service.",null,null],[3,"ManifestData","ethcore::snapshot","Manifest data.",null,null],[12,"version","","Snapshot format version.",149,null],[12,"state_hashes","","List of state chunk hashes.",149,null],[12,"block_hashes","","List of block chunk hashes.",149,null],[12,"state_root","","The final, expected state root.",149,null],[12,"block_number","","Block number this snapshot was taken at.",149,null],[12,"block_hash","","Block hash this snapshot was taken at.",149,null],[4,"RestorationStatus","","Statuses for restorations.",null,null],[13,"Inactive","","No restoration.",150,null],[13,"Initializing","","Restoration is initalizing",150,null],[12,"chunks_done","ethcore::snapshot::RestorationStatus","Number of chunks done/imported",150,null],[13,"Ongoing","ethcore::snapshot","Ongoing restoration.",150,null],[12,"state_chunks","ethcore::snapshot::RestorationStatus","Total number of state chunks.",150,null],[12,"block_chunks","","Total number of block chunks.",150,null],[12,"state_chunks_done","","Number of state chunks completed.",150,null],[12,"block_chunks_done","","Number of block chunks completed.",150,null],[13,"Failed","ethcore::snapshot","Failed restoration.",150,null],[3,"BasicAccount","","Basic account type.",null,null],[12,"nonce","","Nonce of the account.",151,null],[12,"balance","","Balance of the account.",151,null],[12,"storage_root","","Storage root of the account.",151,null],[12,"code_hash","","Code hash of the account.",151,null],[3,"PoaSnapshot","","Snapshot creation and restoration for PoA chains. Chunk format:",null,null],[3,"PowSnapshot","","Snapshot creation and restoration for PoW chains. This includes blocks from the head of the chain as a loose assurance that the chain is valid.",null,null],[12,"blocks","","Number of blocks from the head of the chain to include in the snapshot.",152,null],[12,"max_restore_blocks","","Number of to allow in the snapshot when restoring.",152,null],[3,"PowRebuilder","","Rebuilder for proof-of-work chains. Does basic verification for all blocks, but `PoW` verification for some. Blocks must be fed in-order.",null,null],[3,"Watcher","","A `ChainNotify` implementation which will trigger a snapshot event at certain block numbers.",null,null],[3,"Progress","","A progress indicator for snapshots.",null,null],[3,"StateRebuilder","","Used to rebuild the state trie piece by piece.",null,null],[4,"Error","","Snapshot-related errors.",null,null],[13,"InvalidStartingBlock","","Invalid starting block for snapshot.",153,null],[13,"BlockNotFound","","Block not found.",153,null],[13,"IncompleteChain","","Incomplete chain.",153,null],[13,"WrongStateRoot","","Best block has wrong state root.",153,null],[13,"WrongBlockHash","","Wrong block hash.",153,null],[13,"TooManyBlocks","","Too many blocks contained within the snapshot.",153,null],[13,"OldBlockPrunedDB","","Old starting block in a pruned database.",153,null],[13,"MissingCode","","Missing code.",153,null],[13,"UnrecognizedCodeState","","Unrecognized code encoding.",153,null],[13,"RestorationAborted","","Restoration aborted.",153,null],[13,"Trie","","Trie error.",153,null],[13,"Decoder","","Decoder error.",153,null],[13,"Io","","Io error.",153,null],[13,"VersionNotSupported","","Snapshot version is not supported.",153,null],[13,"ChunkTooSmall","","Max chunk size is to small to fit basic account data.",153,null],[13,"ChunkTooLarge","","Oversized chunk",153,null],[13,"SnapshotsUnsupported","","Snapshots not supported by the consensus engine.",153,null],[13,"BadEpochProof","","Bad epoch transition.",153,null],[13,"WrongChunkFormat","","Wrong chunk format.",153,null],[5,"take_snapshot","","Take a snapshot using the given blockchain, starting block hash, and database, writing into the given writer.",null,{"inputs":[{"name":"ethengine"},{"name":"blockchain"},{"name":"h256"},{"name":"hashdb"},{"name":"w"},{"name":"progress"}],"output":{"generics":["error"],"name":"result"}}],[5,"chunk_secondary","","Create and write out all secondary chunks to disk, returning a vector of all the hashes of secondary chunks created.",null,{"inputs":[{"generics":["snapshotcomponents"],"name":"box"},{"name":"blockchain"},{"name":"h256"},{"name":"mutex"},{"name":"progress"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"chunk_state","","Walk the given state database starting from the given root, creating chunks and writing them out.",null,{"inputs":[{"name":"hashdb"},{"name":"h256"},{"name":"mutex"},{"name":"progress"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"verify_old_block","","Verify an old block with the given header, engine, blockchain, body. If `always` is set, it will perform the fullest verification possible. If not, it will take a random sample to determine whether it will do heavy or light verification.",null,{"inputs":[{"name":"osrng"},{"name":"header"},{"name":"ethengine"},{"name":"blockchain"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[0,"io","","Snapshot i/o. Ways of writing and reading snapshots. This module supports writing and reading snapshots of two different formats: packed and loose. Packed snapshots are written to a single file, and loose snapshots are written to multiple files in one directory.",null,null],[3,"PackedWriter","ethcore::snapshot::io","A packed snapshot writer. This writes snapshots to a single concatenated file.",null,null],[3,"LooseWriter","","A \"loose\" writer writes chunk files into a directory.",null,null],[3,"PackedReader","","Packed snapshot reader.",null,null],[3,"LooseReader","","reader for \"loose\" snapshots",null,null],[8,"SnapshotWriter","","Something which can write snapshots. Writing the same chunk multiple times will lead to implementation-defined behavior, and is not advised.",null,null],[10,"write_state_chunk","","Write a compressed state chunk.",154,null],[10,"write_block_chunk","","Write a compressed block chunk.",154,null],[10,"finish","","Complete writing. The manifest's chunk lists must be consistent with the chunks written.",154,{"inputs":[{"name":"self"},{"name":"manifestdata"}],"output":{"name":"result"}}],[8,"SnapshotReader","","Something which can read compressed snapshots.",null,null],[10,"manifest","","Get the manifest data for this snapshot.",155,{"inputs":[{"name":"self"}],"output":{"name":"manifestdata"}}],[10,"chunk","","Get raw chunk data by hash. implementation defined behavior if a chunk not in the manifest is requested.",155,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["bytes"],"name":"result"}}],[11,"new","","Create a new \"PackedWriter\", to write into the file at the given path.",156,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"write_state_chunk","","",156,null],[11,"write_block_chunk","","",156,null],[11,"finish","","",156,{"inputs":[{"name":"self"},{"name":"manifestdata"}],"output":{"name":"result"}}],[11,"new","","Create a new LooseWriter which will write into the given directory, creating it if it doesn't exist.",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"result"}}],[11,"write_state_chunk","","",157,null],[11,"write_block_chunk","","",157,null],[11,"finish","","",157,{"inputs":[{"name":"self"},{"name":"manifestdata"}],"output":{"name":"result"}}],[11,"new","","Create a new `PackedReader` for the file at the given path. This will fail if any io errors are encountered or the file is not a valid packed snapshot.",158,{"inputs":[{"name":"path"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"manifest","","",158,{"inputs":[{"name":"self"}],"output":{"name":"manifestdata"}}],[11,"chunk","","",158,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["bytes"],"name":"result"}}],[11,"new","","Create a new `LooseReader` which will read the manifest and chunk data from the given directory.",159,{"inputs":[{"name":"pathbuf"}],"output":{"generics":["error"],"name":"result"}}],[11,"manifest","","",159,{"inputs":[{"name":"self"}],"output":{"name":"manifestdata"}}],[11,"chunk","","",159,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["bytes"],"name":"result"}}],[0,"service","ethcore::snapshot","Snapshot network service implementation.",null,null],[3,"ServiceParams","ethcore::snapshot::service","Snapshot service parameters.",null,null],[12,"engine","","The consensus engine this is built on.",160,null],[12,"genesis_block","","The chain's genesis block.",160,null],[12,"pruning","","State pruning algorithm.",160,null],[12,"restoration_db_handler","","Handler for opening a restoration DB.",160,null],[12,"channel","","Async IO channel for sending messages.",160,null],[12,"snapshot_root","","The directory to put snapshots in. Usually \"/snapshot\"",160,null],[12,"db_restore","","A handle for database restoration.",160,null],[3,"Service","","`SnapshotService` implementation. This controls taking snapshots and restoring from them.",null,null],[6,"Channel","","Type alias for client io channel.",null,null],[8,"DatabaseRestore","","External database restoration handler",null,null],[10,"restore_db","","Restart with a new backend. Takes ownership of passed database and moves it to a new location.",161,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Create a new snapshot service from the given parameters.",162,{"inputs":[{"name":"serviceparams"}],"output":{"generics":["error"],"name":"result"}}],[11,"reader","","Get a reference to the snapshot reader.",162,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"rwlockreadguard"}}],[11,"tick","","Tick the snapshot service. This will log any active snapshot being taken.",162,{"inputs":[{"name":"self"}],"output":null}],[11,"take_snapshot","","Take a snapshot at the block with the given number. calling this while a restoration is in progress or vice versa will lead to a race condition where the first one to finish will have their produced snapshot overwritten.",162,{"inputs":[{"name":"self"},{"name":"client"},{"name":"u64"}],"output":{"generics":["error"],"name":"result"}}],[11,"init_restore","","Initialize the restoration synchronously. The recover flag indicates whether to recover the restored snapshot.",162,{"inputs":[{"name":"self"},{"name":"manifestdata"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"feed_state_chunk","","Feed a state chunk to be processed synchronously.",162,null],[11,"feed_block_chunk","","Feed a block chunk to be processed synchronously.",162,null],[11,"manifest","","",162,{"inputs":[{"name":"self"}],"output":{"generics":["manifestdata"],"name":"option"}}],[11,"supported_versions","","",162,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"chunk","","",162,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["bytes"],"name":"option"}}],[11,"completed_chunks","","",162,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"status","","",162,{"inputs":[{"name":"self"}],"output":{"name":"restorationstatus"}}],[11,"begin_restore","","",162,{"inputs":[{"name":"self"},{"name":"manifestdata"}],"output":null}],[11,"abort_restore","","",162,{"inputs":[{"name":"self"}],"output":null}],[11,"restore_state_chunk","","",162,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"bytes"}],"output":null}],[11,"restore_block_chunk","","",162,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"bytes"}],"output":null}],[11,"shutdown","","",162,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",162,{"inputs":[{"name":"self"}],"output":null}],[11,"chunk_all","ethcore::snapshot","",163,{"inputs":[{"name":"self"},{"name":"blockchain"},{"name":"h256"},{"name":"chunksink"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"rebuilder","","",163,{"inputs":[{"name":"self"},{"name":"blockchain"},{"generics":["blockchaindb"],"name":"arc"},{"name":"manifestdata"}],"output":{"generics":["box","error"],"name":"result"}}],[11,"min_supported_version","","",163,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"current_version","","",163,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"powsnapshot"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"powsnapshot"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"self"},{"name":"powsnapshot"}],"output":{"name":"bool"}}],[11,"new","","Create a new instance.",152,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"powsnapshot"}}],[11,"chunk_all","","",152,{"inputs":[{"name":"self"},{"name":"blockchain"},{"name":"h256"},{"name":"chunksink"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"rebuilder","","",152,{"inputs":[{"name":"self"},{"name":"blockchain"},{"generics":["blockchaindb"],"name":"arc"},{"name":"manifestdata"}],"output":{"generics":["box","error"],"name":"result"}}],[11,"min_supported_version","","",152,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"current_version","","",152,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"feed","","Feed the rebuilder an uncompressed block chunk. Returns the number of blocks fed or any errors.",164,null],[11,"finalize","","Glue together any disconnected chunks and check that the chain is complete.",164,{"inputs":[{"name":"self"},{"name":"ethengine"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",153,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",153,{"inputs":[{"name":"trieerror"}],"output":{"name":"self"}}],[11,"from","","",153,{"inputs":[{"name":"decodererror"}],"output":{"name":"self"}}],[11,"from","","",153,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"new","","Create a new `Watcher` which will trigger a snapshot event once every `period` blocks, but only after that block is `history` blocks old.",165,{"inputs":[{"generics":["client"],"name":"arc"},{"name":"f"},{"generics":["clientiomessage"],"name":"iochannel"},{"name":"u64"},{"name":"u64"}],"output":{"name":"self"}}],[11,"new_blocks","","",165,{"inputs":[{"name":"self"},{"generics":["h256"],"name":"vec"},{"generics":["h256"],"name":"vec"},{"name":"chainroute"},{"generics":["h256"],"name":"vec"},{"generics":["bytes"],"name":"vec"},{"name":"duration"}],"output":null}],[6,"ChunkSink","","A sink for produced chunks.",null,null],[8,"SnapshotComponents","","Components necessary for snapshot creation and restoration.",null,null],[10,"chunk_all","","Create secondary snapshot chunks; these corroborate the state data in the state chunks.",166,{"inputs":[{"name":"self"},{"name":"blockchain"},{"name":"h256"},{"name":"chunksink"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[10,"rebuilder","","Create a rebuilder, which will have chunks fed into it in aribtrary order and then be finalized.",166,{"inputs":[{"name":"self"},{"name":"blockchain"},{"generics":["blockchaindb"],"name":"arc"},{"name":"manifestdata"}],"output":{"generics":["box","error"],"name":"result"}}],[10,"min_supported_version","","Minimum supported snapshot version number.",166,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"current_version","","Current version number",166,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"Rebuilder","","Restore from secondary snapshot chunks.",null,null],[10,"feed","","Feed a chunk, potentially out of order.",167,null],[10,"finalize","","Finalize the restoration. Will be done after all chunks have been fed successfully.",167,{"inputs":[{"name":"self"},{"name":"ethengine"}],"output":{"generics":["error"],"name":"result"}}],[8,"SnapshotService","","The interface for a snapshot network service. This handles:    - restoration of snapshots to temporary databases.    - responding to queries for snapshot manifests and chunks",null,null],[10,"manifest","","Query the most recent manifest data.",168,{"inputs":[{"name":"self"}],"output":{"generics":["manifestdata"],"name":"option"}}],[10,"supported_versions","","Get the supported range of snapshot version numbers. `None` indicates warp sync isn't supported by the consensus engine.",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"completed_chunks","","Returns a list of the completed chunks",168,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[10,"chunk","","Get raw chunk for a given hash.",168,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["bytes"],"name":"option"}}],[10,"status","","Ask the snapshot service for the restoration status.",168,{"inputs":[{"name":"self"}],"output":{"name":"restorationstatus"}}],[10,"begin_restore","","Begin snapshot restoration. If restoration in-progress, this will reset it. From this point on, any previous snapshot may become unavailable.",168,{"inputs":[{"name":"self"},{"name":"manifestdata"}],"output":null}],[10,"abort_restore","","Abort an in-progress restoration if there is one.",168,{"inputs":[{"name":"self"}],"output":null}],[10,"restore_state_chunk","","Feed a raw state chunk to the service to be processed asynchronously. no-op if not currently restoring.",168,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"bytes"}],"output":null}],[10,"restore_block_chunk","","Feed a raw block chunk to the service to be processed asynchronously. no-op if currently restoring.",168,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"bytes"}],"output":null}],[10,"shutdown","","Shutdown the Snapshot Service by aborting any ongoing restore",168,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",169,{"inputs":[],"output":{"name":"progress"}}],[11,"reset","","Reset the progress.",169,{"inputs":[{"name":"self"}],"output":null}],[11,"accounts","","Get the number of accounts snapshotted thus far.",169,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"blocks","","Get the number of blocks snapshotted thus far.",169,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size","","Get the written size of the snapshot in bytes.",169,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"done","","Whether the snapshot is complete.",169,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new state rebuilder to write into the given backing DB.",170,{"inputs":[{"generics":["keyvaluedb"],"name":"arc"},{"name":"algorithm"}],"output":{"name":"self"}}],[11,"feed","","Feed an uncompressed state chunk into the rebuilder.",170,null],[11,"finalize","","Finalize the restoration. Check for accounts missing code and make a dummy journal entry. Once all chunks have been fed, there should be nothing missing.",170,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"h256"}],"output":{"generics":["box","error"],"name":"result"}}],[11,"state_root","","Get the state root of the rebuilder.",170,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[0,"spec","ethcore","Blockchain params.",null,null],[4,"OptimizeFor","ethcore::spec","",null,null],[13,"Cpu","","",171,null],[13,"Memory","","",171,null],[3,"Genesis","","Genesis components.",null,null],[12,"seal","","Seal.",172,null],[12,"difficulty","","Difficulty.",172,null],[12,"author","","Author.",172,null],[12,"timestamp","","Timestamp.",172,null],[12,"parent_hash","","Parent hash.",172,null],[12,"gas_limit","","Gas limit.",172,null],[12,"transactions_root","","Transactions root.",172,null],[12,"receipts_root","","Receipts root.",172,null],[12,"state_root","","State root.",172,null],[12,"gas_used","","Gas used.",172,null],[12,"extra_data","","Extra data.",172,null],[3,"Spec","","Parameters for a block chain; includes both those intrinsic to the design of the chain and those to be interpreted by the active chain engine.",null,null],[12,"name","","User friendly spec name",173,null],[12,"engine","","What engine are we using for this?",173,null],[12,"data_dir","","Name of the subdir inside the main data dir to use for chain data and settings.",173,null],[12,"nodes","","Known nodes on the network in enode format.",173,null],[12,"parent_hash","","The genesis block's parent hash field.",173,null],[12,"author","","The genesis block's author field.",173,null],[12,"difficulty","","The genesis block's difficulty field.",173,null],[12,"gas_limit","","The genesis block's gas limit field.",173,null],[12,"gas_used","","The genesis block's gas used field.",173,null],[12,"timestamp","","The genesis block's timestamp field.",173,null],[12,"transactions_root","","Transactions root of the genesis block. Should be KECCAK_NULL_RLP.",173,null],[12,"receipts_root","","Receipts root of the genesis block. Should be KECCAK_NULL_RLP.",173,null],[12,"extra_data","","The genesis block's extra data field.",173,null],[12,"seal_rlp","","Each seal field, expressed as RLP, concatenated.",173,null],[12,"hardcoded_sync","","Hardcoded synchronization. Allows the light client to immediately jump to a specific block.",173,null],[3,"SpecHardcodedSync","","Part of `Spec`. Describes the hardcoded synchronization parameters.",null,null],[12,"header","","Header of the block to jump to for hardcoded sync, and total difficulty.",174,null],[12,"total_difficulty","","Total difficulty of the block to jump to.",174,null],[12,"chts","","List of hardcoded CHTs, in order. If `hardcoded_sync` is set, the CHTs should include the header of `hardcoded_sync`.",174,null],[3,"SpecParams","","Runtime parameters for the spec that are related to how the software should run the chain, rather than integral properties of the chain itself.",null,null],[12,"cache_dir","","The path to the folder used to cache nodes. This is typically /tmp/ on Unix-like systems",175,null],[12,"optimization_setting","","Whether to run slower at the expense of better memory usage, or run faster while using more memory. This may get more fine-grained in the future but for now is simply a binary option.",175,null],[3,"CommonParams","","Parameters common to ethereum-like blockchains. NOTE: when adding bugfix hard-fork parameters, add to `nonzero_bugfix_hard_fork`",null,null],[12,"account_start_nonce","","Account start nonce.",176,null],[12,"maximum_extra_data_size","","Maximum size of extra data.",176,null],[12,"network_id","","Network id.",176,null],[12,"chain_id","","Chain id.",176,null],[12,"subprotocol_name","","Main subprotocol name.",176,null],[12,"min_gas_limit","","Minimum gas limit.",176,null],[12,"fork_block","","Fork block to check.",176,null],[12,"eip150_transition","","EIP150 transition block number.",176,null],[12,"eip160_transition","","Number of first block where EIP-160 rules begin.",176,null],[12,"eip161abc_transition","","Number of first block where EIP-161.abc begin.",176,null],[12,"eip161d_transition","","Number of first block where EIP-161.d begins.",176,null],[12,"eip98_transition","","Number of first block where EIP-98 rules begin.",176,null],[12,"eip658_transition","","Number of first block where EIP-658 rules begin.",176,null],[12,"eip155_transition","","Number of first block where EIP-155 rules begin.",176,null],[12,"validate_receipts_transition","","Validate block receipts root.",176,null],[12,"validate_chain_id_transition","","Validate transaction chain id.",176,null],[12,"eip86_transition","","Number of first block where EIP-86 (Metropolis) rules begin.",176,null],[12,"eip140_transition","","Number of first block where EIP-140 (Metropolis: REVERT opcode) rules begin.",176,null],[12,"eip210_transition","","Number of first block where EIP-210 (Metropolis: BLOCKHASH changes) rules begin.",176,null],[12,"eip210_contract_address","","EIP-210 Blockhash contract address.",176,null],[12,"eip210_contract_code","","EIP-210 Blockhash contract code.",176,null],[12,"eip210_contract_gas","","Gas allocated for EIP-210 blockhash update.",176,null],[12,"eip211_transition","","Number of first block where EIP-211 (Metropolis: RETURNDATASIZE/RETURNDATACOPY) rules begin.",176,null],[12,"eip214_transition","","Number of first block where EIP-214 rules begin.",176,null],[12,"eip145_transition","","Number of first block where EIP-145 rules begin.",176,null],[12,"dust_protection_transition","","Number of first block where dust cleanup rules (EIP-168 and EIP169) begin.",176,null],[12,"nonce_cap_increment","","Nonce cap increase per block. Nonce cap is only checked if dust protection is enabled.",176,null],[12,"remove_dust_contracts","","Enable dust cleanup for contracts.",176,null],[12,"wasm_activation_transition","","Wasm activation blocknumber, if any disabled initially.",176,null],[12,"gas_limit_bound_divisor","","Gas limit bound divisor (how much gas limit can change per block)",176,null],[12,"registrar","","Registrar contract address.",176,null],[12,"node_permission_contract","","Node permission managing contract address.",176,null],[12,"max_code_size","","Maximum contract code size that can be deployed.",176,null],[12,"max_code_size_transition","","Number of first block where max code size limit is active.",176,null],[12,"transaction_permission_contract","","Transaction permission managing contract address.",176,null],[12,"max_transaction_size","","Maximum size of transaction's RLP payload",176,null],[11,"from","","",172,{"inputs":[{"name":"genesis"}],"output":{"name":"self"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"commonparams"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"commonparams"}],"output":{"name":"bool"}}],[11,"default","","",176,{"inputs":[],"output":{"name":"commonparams"}}],[11,"schedule","","Schedule for an EVM in the post-EIP-150-era of the Ethereum main net.",176,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"schedule"}}],[11,"max_code_size","","Returns max code size at given block.",176,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"update_schedule","","Apply common spec config parameters to the schedule.",176,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"schedule"}],"output":null}],[11,"nonzero_bugfix_hard_fork","","Return Some if the current parameters contain a bugfix hard fork not on block 0.",176,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",176,{"inputs":[{"name":"params"}],"output":{"name":"self"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"specparams"}}],[11,"from_path","","Create from a cache path, with null values for the other fields",175,{"inputs":[{"name":"path"}],"output":{"name":"self"}}],[11,"new","","Create from a cache path and an optimization setting",175,{"inputs":[{"name":"path"},{"name":"optimizefor"}],"output":{"name":"self"}}],[11,"from","","",175,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"to_json","","Turns this specifications back into JSON. Useful for pretty printing.",174,{"inputs":[{"name":"self"}],"output":{"name":"hardcodedsync"}}],[11,"state_root","","Return the state root for the genesis state, memoising accordingly.",173,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"params","","Get common blockchain parameters.",173,{"inputs":[{"name":"self"}],"output":{"name":"commonparams"}}],[11,"nodes","","Get the known knodes of the network in enode format.",173,null],[11,"network_id","","Get the configured Network ID.",173,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"chain_id","","Get the chain ID used for signing.",173,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"subprotocol_name","","Get the configured subprotocol name.",173,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fork_block","","Get the configured network fork block.",173,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"genesis_header","","Get the header of the genesis block.",173,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"genesis_block","","Compose the genesis block for this chain.",173,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"overwrite_genesis_params","","Overwrite the genesis components.",173,{"inputs":[{"name":"self"},{"name":"genesis"}],"output":null}],[11,"set_genesis_state","","Alter the value of the genesis state.",173,{"inputs":[{"name":"self"},{"name":"podstate"}],"output":{"generics":["error"],"name":"result"}}],[11,"is_state_root_valid","","Returns `false` if the memoized state root is invalid. `true` otherwise.",173,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ensure_db_good","","Ensure that the given state DB has the trie nodes in for the genesis state.",173,{"inputs":[{"name":"self"},{"name":"t"},{"name":"factories"}],"output":{"generics":["error"],"name":"result"}}],[11,"load_machine","","Loads just the state machine from a json file.",173,{"inputs":[{"name":"r"}],"output":{"generics":["ethereummachine","string"],"name":"result"}}],[11,"load","","Loads spec from json file. Provide factories for executing contracts and ensuring storage goes to the right place.",173,{"inputs":[{"name":"t"},{"name":"r"}],"output":{"generics":["string"],"name":"result"}}],[11,"genesis_epoch_data","","initialize genesis epoch data, using in-memory database for constructor.",173,{"inputs":[{"name":"self"}],"output":{"generics":["vec","string"],"name":"result"}}],[11,"new_instant","","Create a new Spec with InstantSeal consensus which does internal sealing (not requiring work).",173,{"inputs":[],"output":{"name":"spec"}}],[11,"new_test","","Create a new Spec which conforms to the Frontier-era Morden chain except that it's a NullEngine consensus.",173,{"inputs":[],"output":{"name":"spec"}}],[11,"new_test_machine","","Create the EthereumMachine corresponding to Spec::new_test.",173,{"inputs":[],"output":{"name":"ethereummachine"}}],[11,"new_test_with_reward","","Create a new Spec which conforms to the Frontier-era Morden chain except that it's a NullEngine consensus with applying reward on block close.",173,{"inputs":[],"output":{"name":"spec"}}],[11,"new_null","","Create a new Spec which is a NullEngine consensus with a premine of address whose secret is keccak('').",173,{"inputs":[],"output":{"name":"spec"}}],[11,"new_test_constructor","","Create a new Spec which constructs a contract at address 5 with storage at 0 equal to 1.",173,{"inputs":[],"output":{"name":"spec"}}],[11,"new_test_round","","Create a new Spec with AuthorityRound consensus which does internal sealing (not requiring work). Accounts with secrets keccak(\"0\") and keccak(\"1\") are the validators.",173,{"inputs":[],"output":{"name":"self"}}],[11,"new_test_round_empty_steps","","Create a new Spec with AuthorityRound consensus which does internal sealing (not requiring work) with empty step messages enabled. Accounts with secrets keccak(\"0\") and keccak(\"1\") are the validators.",173,{"inputs":[],"output":{"name":"self"}}],[11,"new_test_round_block_reward_contract","","Create a new Spec with AuthorityRound consensus (with empty steps) using a block reward contract. The contract source code can be found at: https://github.com/parity-contracts/block-reward/blob/daf7d44383b6cdb11cb6b953b018648e2b027cfb/contracts/ExampleBlockReward.sol",173,{"inputs":[],"output":{"name":"self"}}],[11,"new_test_tendermint","","Create a new Spec with Tendermint consensus which does internal sealing (not requiring work). Account keccak(\"0\") and keccak(\"1\") are a authorities.",173,{"inputs":[],"output":{"name":"self"}}],[11,"new_validator_safe_contract","","TestList.sol used in both specs: https://github.com/paritytech/contracts/pull/30/files Accounts with secrets keccak(\"0\") and keccak(\"1\") are initially the validators. Create a new Spec with BasicAuthority which uses a contract at address 5 to determine the current validators using `getValidators`. Second validator can be removed with \"0xbfc708a000000000000000000000000082a978b3f5962a5b0957d9ee9eef472ee55b42f1\" and added back in using \"0x4d238c8e00000000000000000000000082a978b3f5962a5b0957d9ee9eef472ee55b42f1\".",173,{"inputs":[],"output":{"name":"self"}}],[11,"new_validator_contract","","The same as the `safeContract`, but allows reporting and uses AuthorityRound. Account is marked with `reportBenign` it can be checked as disliked with \"0xd8f2e0bf\". Validator can be removed with `reportMalicious`.",173,{"inputs":[],"output":{"name":"self"}}],[11,"new_validator_multi","","Create a new Spec with BasicAuthority which uses multiple validator sets changing with height. Account with secrets keccak(\"0\") is the validator for block 1 and with keccak(\"1\") onwards.",173,{"inputs":[],"output":{"name":"self"}}],[0,"state","ethcore","A mutable state representation suitable to execute transactions. Generic over a `Backend`. Deals with `Account`s. Unconfirmed sub-states are managed with `checkpoint`s which may be canonicalized or rolled back.",null,null],[3,"Account","ethcore::state","Single account in the system. Keeps track of changes to the code and storage. The changes are applied in `commit_storage` and `commit_code`",null,null],[3,"Substate","","State changes which should be applied in finalize, after transaction is fully executed.",null,null],[12,"suicides","","Any accounts that have suicided.",177,null],[12,"touched","","Any accounts that are touched.",177,null],[12,"logs","","Any logs.",177,null],[12,"sstore_clears_count","","Refund counter of SSTORE nonzero -> zero.",177,null],[12,"contracts_created","","Created contracts.",177,null],[3,"ApplyOutcome","","Used to return information about an `State::apply` operation.",null,null],[12,"receipt","","The receipt for the applied transaction.",178,null],[12,"output","","The output of the applied transaction.",178,null],[12,"trace","","The trace for the applied transaction, empty if tracing was not produced.",178,null],[12,"vm_trace","","The VM trace for the applied transaction, None if tracing was not produced.",178,null],[3,"State","","Representation of the entire state of all accounts in the system.",null,null],[4,"ProvedExecution","","Return type of proof validity check.",null,null],[13,"BadProof","","Proof wasn't enough to complete execution.",179,null],[13,"Failed","","The transaction failed, but not due to a bad proof.",179,null],[13,"Complete","","The transaction successfully completd with the given proof.",179,null],[4,"CleanupMode","","Mode of dealing with null accounts.",null,null],[13,"ForceCreate","","Create accounts which would be null.",180,null],[13,"NoEmpty","","Don't delete null accounts upon touching, but also don't create them.",180,null],[13,"TrackTouched","","Mark all touched accounts.",180,null],[5,"check_proof","","Check the given proof of execution. `Err(ExecutionError::Internal)` indicates failure, everything else indicates a successful proof (as the transaction itself may be poorly chosen).",null,null],[5,"prove_transaction","","Prove a transaction on the given state. Returns `None` when the transacion could not be proved, and a proof otherwise.",null,{"inputs":[{"name":"h"},{"name":"h256"},{"name":"signedtransaction"},{"name":"machine"},{"name":"envinfo"},{"name":"factories"},{"name":"bool"}],"output":{"name":"option"}}],[11,"from","","",181,{"inputs":[{"name":"basicaccount"}],"output":{"name":"self"}}],[11,"from_pod","","General constructor.",181,{"inputs":[{"name":"podaccount"}],"output":{"name":"account"}}],[11,"new_basic","","Create a new account with the given balance.",181,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"account"}}],[11,"from_rlp","","Create a new account from RLP.",181,null],[11,"new_contract","","Create a new contract account. NOTE: make sure you use `init_code` on this before `commit`ing.",181,{"inputs":[{"name":"u256"},{"name":"u256"}],"output":{"name":"account"}}],[11,"init_code","","Set this account's code to the given code. NOTE: Account should have been created with `new_contract()`",181,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"reset_code","","Reset this account's code to the given code.",181,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":null}],[11,"reset_code_and_storage","","Reset this account's code and storage to given values.",181,{"inputs":[{"name":"self"},{"generics":["bytes"],"name":"arc"},{"generics":["h256","h256"],"name":"hashmap"}],"output":null}],[11,"set_storage","","Set (and cache) the contents of the trie's storage at `key` to `value`.",181,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"h256"}],"output":null}],[11,"storage_at","","Get (and cache) the contents of the trie's storage at `key`. Takes modified storage into account.",181,{"inputs":[{"name":"self"},{"name":"hashdb"},{"name":"h256"}],"output":{"generics":["h256"],"name":"trieresult"}}],[11,"cached_storage_at","","Get cached storage value if any. Returns `None` if the key is not in the cache.",181,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["h256"],"name":"option"}}],[11,"balance","","return the balance associated with this account.",181,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"nonce","","return the nonce associated with this account.",181,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"code_hash","","return the code hash associated with this account.",181,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"address_hash","","return the code hash associated with this account.",181,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"h256"}}],[11,"code","","returns the account's code. If `None` then the code cache isn't available - get someone who knows to call `note_code`.",181,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"code_size","","returns the account's code size. If `None` then the code cache or code size cache isn't available - get someone who knows to call `note_code`.",181,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"is_cached","","Is `code_cache` valid; such that code is going to return Some?",181,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cache_code","","Provide a database to get `code_hash`. Should not be called if it is a contract without code.",181,{"inputs":[{"name":"self"},{"name":"hashdb"}],"output":{"generics":["arc"],"name":"option"}}],[11,"cache_given_code","","Provide code to cache. For correctness, should be the correct code for the account.",181,{"inputs":[{"name":"self"},{"generics":["bytes"],"name":"arc"}],"output":null}],[11,"cache_code_size","","Provide a database to get `code_size`. Should not be called if it is a contract without code.",181,{"inputs":[{"name":"self"},{"name":"hashdb"}],"output":{"name":"bool"}}],[11,"storage_is_clean","","Determine whether there are any un-`commit()`-ed storage-setting operations.",181,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Check if account has zero nonce, balance, no code and no storage.",181,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_null","","Check if account has zero nonce, balance, no code.",181,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_basic","","Check if account is basic (Has no code).",181,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"storage_root","","Return the storage root associated with this account or None if it has been altered via the overlay.",181,{"inputs":[{"name":"self"}],"output":{"generics":["h256"],"name":"option"}}],[11,"storage_changes","","Return the storage overlay.",181,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"inc_nonce","","Increment the nonce of the account by one.",181,{"inputs":[{"name":"self"}],"output":null}],[11,"add_balance","","Increase account balance.",181,{"inputs":[{"name":"self"},{"name":"u256"}],"output":null}],[11,"sub_balance","","Decrease account balance. Panics if balance is less than `x`",181,{"inputs":[{"name":"self"},{"name":"u256"}],"output":null}],[11,"commit_storage","","Commit the `storage_changes` to the backing DB and update `storage_root`.",181,{"inputs":[{"name":"self"},{"name":"triefactory"},{"name":"hashdb"}],"output":{"name":"trieresult"}}],[11,"commit_code","","Commit any unsaved code. `code_hash` will always return the hash of the `code_cache` after this.",181,{"inputs":[{"name":"self"},{"name":"hashdb"}],"output":null}],[11,"rlp","","Export to RLP.",181,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"clone_basic","","Clone basic account data",181,{"inputs":[{"name":"self"}],"output":{"name":"account"}}],[11,"clone_dirty","","Clone account data and dirty storage keys",181,{"inputs":[{"name":"self"}],"output":{"name":"account"}}],[11,"clone_all","","Clone account data, dirty storage keys and cached storage keys.",181,{"inputs":[{"name":"self"}],"output":{"name":"account"}}],[11,"overwrite_with","","Replace self with the data from other account merging storage cache. Basic account data and all modifications are overwritten with new values.",181,{"inputs":[{"name":"self"},{"name":"account"}],"output":null}],[11,"prove_storage","","Prove a storage key's existence or nonexistence in the account's storage trie. `storage_key` is the hash of the desired storage key, meaning this will only work correctly under a secure trie.",181,{"inputs":[{"name":"self"},{"name":"hashdb"},{"name":"h256"}],"output":{"name":"trieresult"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",177,{"inputs":[],"output":{"name":"substate"}}],[11,"new","","Creates new substate.",177,{"inputs":[],"output":{"name":"self"}}],[11,"accrue","","Merge secondary substate `s` into self, accruing each element correspondingly.",177,{"inputs":[{"name":"self"},{"name":"substate"}],"output":null}],[11,"to_cleanup_mode","","Get the cleanup mode object from this.",177,{"inputs":[{"name":"self"},{"name":"schedule"}],"output":{"name":"cleanupmode"}}],[0,"backend","","A minimal \"state backend\" trait: an abstraction over the sources of data a blockchain state may draw upon.",null,null],[3,"ProofCheck","ethcore::state::backend","A raw backend used to check proofs of execution.",null,null],[3,"Proving","","Proving state backend. This keeps track of all state values loaded during usage of this backend. The proof-of-execution can be extracted with `extract_proof`.",null,null],[3,"Basic","","A basic backend. Just wraps the given database, directly inserting into and deleting from it. Doesn't cache anything.",null,null],[12,"0","","",182,null],[8,"Backend","","State backend. See module docs for more details.",null,null],[10,"as_hashdb","","Treat the backend as a read-only hashdb.",183,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[10,"as_hashdb_mut","","Treat the backend as a writeable hashdb.",183,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[10,"add_to_account_cache","","Add an account entry to the cache.",183,{"inputs":[{"name":"self"},{"name":"address"},{"generics":["account"],"name":"option"},{"name":"bool"}],"output":null}],[10,"cache_code","","Add a global code cache entry. This doesn't need to worry about canonicality because it simply maps hashes to raw code and will always be correct in the absence of hash collisions.",183,{"inputs":[{"name":"self"},{"name":"h256"},{"generics":["vec"],"name":"arc"}],"output":null}],[10,"get_cached_account","","Get basic copy of the cached account. Not required to include storage. Returns 'None' if cache is disabled or if the account is not cached.",183,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["option"],"name":"option"}}],[10,"get_cached","","Get value from a cached account. `None` is passed to the closure if the account entry cached is known not to exist. `None` is returned if the entry is not cached.",183,{"inputs":[{"name":"self"},{"name":"address"},{"name":"f"}],"output":{"name":"option"}}],[10,"get_cached_code","","Get cached code based on hash.",183,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["arc"],"name":"option"}}],[10,"note_non_null_account","","Note that an account with the given address is non-null.",183,{"inputs":[{"name":"self"},{"name":"address"}],"output":null}],[10,"is_known_null","","Check whether an account is known to be empty. Returns true if known to be empty, false otherwise.",183,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"proofcheck"}}],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"proofcheck"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"self"},{"name":"proofcheck"}],"output":{"name":"bool"}}],[11,"new","","Create a new `ProofCheck` backend from the given state items.",184,null],[11,"keys","","",184,{"inputs":[{"name":"self"}],"output":{"generics":["h256","i32"],"name":"hashmap"}}],[11,"get","","",184,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["dbvalue"],"name":"option"}}],[11,"contains","","",184,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"insert","","",184,null],[11,"emplace","","",184,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"dbvalue"}],"output":null}],[11,"remove","","",184,{"inputs":[{"name":"self"},{"name":"h256"}],"output":null}],[11,"as_hashdb","","",184,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"as_hashdb_mut","","",184,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"as_hashdb","","",184,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"as_hashdb_mut","","",184,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"add_to_account_cache","","",184,{"inputs":[{"name":"self"},{"name":"address"},{"generics":["account"],"name":"option"},{"name":"bool"}],"output":null}],[11,"cache_code","","",184,{"inputs":[{"name":"self"},{"name":"h256"},{"generics":["vec"],"name":"arc"}],"output":null}],[11,"get_cached_account","","",184,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["option"],"name":"option"}}],[11,"get_cached","","",184,{"inputs":[{"name":"self"},{"name":"address"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_cached_code","","",184,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["arc"],"name":"option"}}],[11,"note_non_null_account","","",184,{"inputs":[{"name":"self"},{"name":"address"}],"output":null}],[11,"is_known_null","","",184,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"as_hashdb","","",185,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"as_hashdb_mut","","",185,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"keys","","",185,{"inputs":[{"name":"self"}],"output":{"generics":["h256","i32"],"name":"hashmap"}}],[11,"get","","",185,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["dbvalue"],"name":"option"}}],[11,"contains","","",185,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"insert","","",185,null],[11,"emplace","","",185,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"dbvalue"}],"output":null}],[11,"remove","","",185,{"inputs":[{"name":"self"},{"name":"h256"}],"output":null}],[11,"as_hashdb","","",185,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"as_hashdb_mut","","",185,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"add_to_account_cache","","",185,{"inputs":[{"name":"self"},{"name":"address"},{"generics":["account"],"name":"option"},{"name":"bool"}],"output":null}],[11,"cache_code","","",185,{"inputs":[{"name":"self"},{"name":"h256"},{"generics":["vec"],"name":"arc"}],"output":null}],[11,"get_cached_account","","",185,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["option"],"name":"option"}}],[11,"get_cached","","",185,{"inputs":[{"name":"self"},{"name":"address"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_cached_code","","",185,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["arc"],"name":"option"}}],[11,"note_non_null_account","","",185,{"inputs":[{"name":"self"},{"name":"address"}],"output":null}],[11,"is_known_null","","",185,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"new","","Create a new `Proving` over a base database. This will store all values ever fetched from that base.",185,{"inputs":[{"name":"h"}],"output":{"name":"self"}}],[11,"extract_proof","","Consume the backend, extracting the gathered proof in lexicographical order by value.",185,{"inputs":[{"name":"self"}],"output":{"generics":["dbvalue"],"name":"vec"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"as_hashdb","","",182,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"as_hashdb_mut","","",182,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"add_to_account_cache","","",182,{"inputs":[{"name":"self"},{"name":"address"},{"generics":["account"],"name":"option"},{"name":"bool"}],"output":null}],[11,"cache_code","","",182,{"inputs":[{"name":"self"},{"name":"h256"},{"generics":["vec"],"name":"arc"}],"output":null}],[11,"get_cached_account","","",182,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["option"],"name":"option"}}],[11,"get_cached","","",182,{"inputs":[{"name":"self"},{"name":"address"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_cached_code","","",182,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["arc"],"name":"option"}}],[11,"note_non_null_account","","",182,{"inputs":[{"name":"self"},{"name":"address"}],"output":null}],[11,"is_known_null","","",182,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[6,"ApplyResult","ethcore::state","Result type for the execution (\"application\") of a transaction.",null,null],[8,"StateInfo","","Provides subset of `State` methods to query state information",null,null],[10,"nonce","","Get the nonce of account `a`.",186,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["u256"],"name":"trieresult"}}],[10,"balance","","Get the balance of account `a`.",186,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["u256"],"name":"trieresult"}}],[10,"storage_at","","Mutate storage of account `address` so that it is `value` for `key`.",186,{"inputs":[{"name":"self"},{"name":"address"},{"name":"h256"}],"output":{"generics":["h256"],"name":"trieresult"}}],[10,"code","","Get accounts' code.",186,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["option"],"name":"trieresult"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"provedexecution"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"cleanupmode"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"cleanupmode"}],"output":{"name":"bool"}}],[11,"nonce","","",187,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["u256"],"name":"trieresult"}}],[11,"balance","","",187,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["u256"],"name":"trieresult"}}],[11,"storage_at","","",187,{"inputs":[{"name":"self"},{"name":"address"},{"name":"h256"}],"output":{"generics":["h256"],"name":"trieresult"}}],[11,"code","","",187,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["option"],"name":"trieresult"}}],[11,"new","","Creates new state with empty state root Used for tests.",187,{"inputs":[{"name":"b"},{"name":"u256"},{"name":"factories"}],"output":{"name":"state"}}],[11,"from_existing","","Creates new state with existing state root",187,{"inputs":[{"name":"b"},{"name":"h256"},{"name":"u256"},{"name":"factories"}],"output":{"generics":["state"],"name":"trieresult"}}],[11,"vm_factory","","Get a VM factory that can execute on this state.",187,{"inputs":[{"name":"self"}],"output":{"name":"vmfactory"}}],[11,"checkpoint","","Create a recoverable checkpoint of this state.",187,{"inputs":[{"name":"self"}],"output":null}],[11,"discard_checkpoint","","Merge last checkpoint with previous.",187,{"inputs":[{"name":"self"}],"output":null}],[11,"revert_to_checkpoint","","Revert to the last checkpoint and discard it.",187,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","Destroy the current object and return root and database.",187,null],[11,"into_account","","Destroy the current object and return single account data.",187,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"trieresult"}}],[11,"root","","Return reference to root",187,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"new_contract","","Create a new contract at address `contract`. If there is already an account at the address it will have its code reset, ready for `init_code()`.",187,{"inputs":[{"name":"self"},{"name":"address"},{"name":"u256"},{"name":"u256"}],"output":null}],[11,"kill_account","","Remove an existing account.",187,{"inputs":[{"name":"self"},{"name":"address"}],"output":null}],[11,"exists","","Determine whether an account exists.",187,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["bool"],"name":"trieresult"}}],[11,"exists_and_not_null","","Determine whether an account exists and if not empty.",187,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["bool"],"name":"trieresult"}}],[11,"exists_and_has_code_or_nonce","","Determine whether an account exists and has code or non-zero nonce.",187,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["bool"],"name":"trieresult"}}],[11,"balance","","Get the balance of account `a`.",187,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["u256"],"name":"trieresult"}}],[11,"nonce","","Get the nonce of account `a`.",187,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["u256"],"name":"trieresult"}}],[11,"storage_root","","Get the storage root of account `a`.",187,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["option"],"name":"trieresult"}}],[11,"storage_at","","Mutate storage of account `address` so that it is `value` for `key`.",187,{"inputs":[{"name":"self"},{"name":"address"},{"name":"h256"}],"output":{"generics":["h256"],"name":"trieresult"}}],[11,"code","","Get accounts' code.",187,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["option"],"name":"trieresult"}}],[11,"code_hash","","Get an account's code hash.",187,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["h256"],"name":"trieresult"}}],[11,"code_size","","Get accounts' code size.",187,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["option"],"name":"trieresult"}}],[11,"add_balance","","Add `incr` to the balance of account `a`.",187,{"inputs":[{"name":"self"},{"name":"address"},{"name":"u256"},{"name":"cleanupmode"}],"output":{"name":"trieresult"}}],[11,"sub_balance","","Subtract `decr` from the balance of account `a`.",187,{"inputs":[{"name":"self"},{"name":"address"},{"name":"u256"},{"name":"cleanupmode"}],"output":{"name":"trieresult"}}],[11,"transfer_balance","","Subtracts `by` from the balance of `from` and adds it to that of `to`.",187,{"inputs":[{"name":"self"},{"name":"address"},{"name":"address"},{"name":"u256"},{"name":"cleanupmode"}],"output":{"name":"trieresult"}}],[11,"inc_nonce","","Increment the nonce of account `a` by 1.",187,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"trieresult"}}],[11,"set_storage","","Mutate storage of account `a` so that it is `value` for `key`.",187,{"inputs":[{"name":"self"},{"name":"address"},{"name":"h256"},{"name":"h256"}],"output":{"name":"trieresult"}}],[11,"init_code","","Initialise the code of account `a` so that it is `code`. NOTE: Account should have been created with `new_contract`.",187,{"inputs":[{"name":"self"},{"name":"address"},{"name":"bytes"}],"output":{"name":"trieresult"}}],[11,"reset_code","","Reset the code of account `a` so that it is `code`.",187,{"inputs":[{"name":"self"},{"name":"address"},{"name":"bytes"}],"output":{"name":"trieresult"}}],[11,"apply","","Execute a given transaction, producing a receipt and an optional trace. This will change the state accordingly.",187,{"inputs":[{"name":"self"},{"name":"envinfo"},{"name":"machine"},{"name":"signedtransaction"},{"name":"bool"}],"output":{"generics":["flattrace","vmtrace"],"name":"applyresult"}}],[11,"apply_with_tracing","","Execute a given transaction with given tracer and VM tracer producing a receipt and an optional trace. This will change the state accordingly.",187,{"inputs":[{"name":"self"},{"name":"envinfo"},{"name":"machine"},{"name":"signedtransaction"},{"name":"t"},{"name":"v"}],"output":{"name":"applyresult"}}],[11,"commit","","Commits our cached account changes into the trie.",187,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"clear","","Clear state cache",187,{"inputs":[{"name":"self"}],"output":null}],[11,"kill_garbage","","Remove any touched empty or dust accounts.",187,{"inputs":[{"name":"self"},{"name":"hashset"},{"name":"bool"},{"name":"option"},{"name":"bool"}],"output":{"name":"trieresult"}}],[11,"populate_from","","Populate the state from `accounts`. Used for tests.",187,{"inputs":[{"name":"self"},{"name":"podstate"}],"output":null}],[11,"to_pod","","Populate a PodAccount map from this state.",187,{"inputs":[{"name":"self"}],"output":{"name":"podstate"}}],[11,"to_pod_diff","","Populate a PodAccount map from this state, with another state as the account and storage query.",187,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"generics":["podstate"],"name":"trieresult"}}],[11,"diff_from","","Returns a `StateDiff` describing the difference from `orig` to `self`. Consumes self.",187,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"generics":["statediff"],"name":"trieresult"}}],[11,"patch_account","","Replace account code and storage. Creates account if it does not exist.",187,{"inputs":[{"name":"self"},{"name":"address"},{"generics":["bytes"],"name":"arc"},{"generics":["h256","h256"],"name":"hashmap"}],"output":{"name":"trieresult"}}],[11,"prove_account","","Prove an account's existence or nonexistence in the state trie. Returns a merkle proof of the account's trie node omitted or an encountered trie error. If the account doesn't exist in the trie, prove that and return defaults. Requires a secure trie to be used for accurate results. `account_key` == keccak(address)",187,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"trieresult"}}],[11,"prove_storage","","Prove an account's storage key's existence or nonexistence in the state. Returns a merkle proof of the account's storage trie. Requires a secure trie to be used for correctness. `account_key` == keccak(address) `storage_key` == keccak(key)",187,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"h256"}],"output":{"name":"trieresult"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"generics":["statedb"],"name":"state"}}],[0,"state_db","ethcore","State database abstraction. For more info, see the doc for `StateDB`",null,null],[3,"StateDB","ethcore::state_db","State database abstraction. Manages shared global state cache which reflects the canonical state as it is on the disk. All the entries in the cache are clean. A clone of `StateDB` may be created as canonical or not. For canonical clones local cache is accumulated and applied in `sync_cache` For non-canonical clones local cache is dropped.",null,null],[17,"ACCOUNT_BLOOM_SPACE","","Value used to initialize bloom bitmap size.",null,null],[17,"DEFAULT_ACCOUNT_PRESET","","Value used to initialize bloom items count.",null,null],[17,"ACCOUNT_BLOOM_HASHCOUNT_KEY","","Key for a value storing amount of hashes",null,null],[11,"new","","Create a new instance wrapping `JournalDB` and the maximum allowed size of the LRU cache in bytes. Actual used memory may (read: will) be higher due to bookkeeping.",188,{"inputs":[{"generics":["journaldb"],"name":"box"},{"name":"usize"}],"output":{"name":"statedb"}}],[11,"load_bloom","","Loads accounts bloom from the database This bloom is used to handle request for the non-existant account fast",188,{"inputs":[{"name":"keyvaluedb"}],"output":{"name":"bloom"}}],[11,"commit_bloom","","Commit blooms journal to the database transaction",188,{"inputs":[{"name":"dbtransaction"},{"name":"bloomjournal"}],"output":{"name":"result"}}],[11,"journal_under","","Journal all recent operations under the given era and ID.",188,{"inputs":[{"name":"self"},{"name":"dbtransaction"},{"name":"u64"},{"name":"h256"}],"output":{"generics":["u32"],"name":"result"}}],[11,"mark_canonical","","Mark a given candidate from an ancient era as canonical, enacting its removals from the backing database and reverting any non-canonical historical commit's insertions.",188,{"inputs":[{"name":"self"},{"name":"dbtransaction"},{"name":"u64"},{"name":"h256"}],"output":{"generics":["u32"],"name":"result"}}],[11,"sync_cache","","Propagate local cache into the global cache and synchonize the global cache with the best block state. This function updates the global cache by removing entries that are invalidated by chain reorganization. `sync_cache` should be called after the block has been committed and the blockchain route has ben calculated.",188,null],[11,"as_hashdb","","Conversion method to interpret self as `HashDB` reference",188,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"as_hashdb_mut","","Conversion method to interpret self as mutable `HashDB` reference",188,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"boxed_clone","","Clone the database.",188,{"inputs":[{"name":"self"}],"output":{"name":"statedb"}}],[11,"boxed_clone_canon","","Clone the database for a canonical state.",188,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"statedb"}}],[11,"is_pruned","","Check if pruning is enabled on the database.",188,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mem_used","","Heap size used.",188,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"journal_db","","Returns underlying `JournalDB`.",188,{"inputs":[{"name":"self"}],"output":{"name":"journaldb"}}],[11,"cache_size","","Query how much memory is set aside for the accounts cache (in bytes).",188,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_hashdb","","",188,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"as_hashdb_mut","","",188,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"add_to_account_cache","","",188,{"inputs":[{"name":"self"},{"name":"address"},{"generics":["account"],"name":"option"},{"name":"bool"}],"output":null}],[11,"cache_code","","",188,{"inputs":[{"name":"self"},{"name":"h256"},{"generics":["vec"],"name":"arc"}],"output":null}],[11,"get_cached_account","","",188,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["option"],"name":"option"}}],[11,"get_cached","","",188,{"inputs":[{"name":"self"},{"name":"address"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_cached_code","","",188,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["arc"],"name":"option"}}],[11,"note_non_null_account","","",188,{"inputs":[{"name":"self"},{"name":"address"}],"output":null}],[11,"is_known_null","","",188,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[0,"trace","ethcore","Tracing",null,null],[3,"Config","ethcore::trace","Traces config.",null,null],[12,"enabled","","Indicates if tracing should be enabled or not. If it's None, it will be automatically configured.",189,null],[12,"pref_cache_size","","Preferef cache-size.",189,null],[12,"max_cache_size","","Max cache-size.",189,null],[3,"TraceDB","","Database to store transaction execution trace.",null,null],[3,"NoopTracer","","Nonoperative tracer. Does not trace anything.",null,null],[3,"NoopVMTracer","","Nonoperative VM tracer. Does not trace anything.",null,null],[3,"ExecutiveTracer","","Simple executive tracer. Traces all calls and creates. Ignores delegatecalls.",null,null],[3,"ExecutiveVMTracer","","Simple VM tracer. Traces all operations.",null,null],[3,"ImportRequest","","Traces import request.",null,null],[12,"traces","","Traces to import.",190,null],[12,"block_hash","","Hash of traces block.",190,null],[12,"block_number","","Number of traces block.",190,null],[12,"enacted","","Blocks enacted by this import.",190,null],[12,"retracted","","Number of blocks retracted by this import.",190,null],[3,"LocalizedTrace","","Localized trace.",null,null],[12,"action","","Type of action performed by a transaction.",191,null],[12,"result","","Result of this action.",191,null],[12,"subtraces","","Number of subtraces.",191,null],[12,"trace_address","","Exact location of trace.",191,null],[12,"transaction_number","","Transaction number within the block.",191,null],[12,"transaction_hash","","Signed transaction hash.",191,null],[12,"block_number","","Block number.",191,null],[12,"block_hash","","Block hash.",191,null],[3,"VMTrace","","A record of a full VM trace for a CALL/CREATE.",null,null],[12,"parent_step","","The step (i.e. index into operations) at which this trace corresponds.",192,null],[12,"code","","The code to be executed.",192,null],[12,"operations","","The operations executed.",192,null],[12,"subs","","The sub traces for each interior action performed as part of this call/create. Thre is a 1:1 correspondance between these and a CALL/CREATE/CALLCODE/DELEGATECALL instruction.",192,null],[3,"VMOperation","","A record of the execution of a single VM operation.",null,null],[12,"pc","","The program counter.",193,null],[12,"instruction","","The instruction executed.",193,null],[12,"gas_cost","","The gas cost for this instruction.",193,null],[12,"executed","","Information concerning the execution of the operation.",193,null],[3,"VMExecutedOperation","","A record of an executed VM operation.",null,null],[12,"gas_used","","The total gas used.",194,null],[12,"stack_push","","The stack item placed, if any.",194,null],[12,"mem_diff","","If altered, the memory delta.",194,null],[12,"store_diff","","The altered storage value, if any.",194,null],[3,"MemoryDiff","","A diff of some chunk of memory.",null,null],[12,"offset","","Offset into memory the change begins.",195,null],[12,"data","","The changed data.",195,null],[3,"StorageDiff","","A diff of some storage value.",null,null],[12,"location","","Which key in storage is changed.",196,null],[12,"value","","What the value has been changed to.",196,null],[3,"FlatTrace","","Trace localized in vector of traces produced by a single transaction.",null,null],[12,"action","","Type of action performed by a transaction.",197,null],[12,"result","","Result of this action.",197,null],[12,"subtraces","","Number of subtraces.",197,null],[12,"trace_address","","Exact location of trace.",197,null],[3,"FlatTransactionTraces","","Represents all traces produced by a single transaction.",null,null],[3,"FlatBlockTraces","","Represents all traces produced by transactions in a single block.",null,null],[3,"Filter","","Traces filter.",null,null],[12,"range","","Block range.",198,null],[12,"from_address","","From address filter.",198,null],[12,"to_address","","To address filter.",198,null],[3,"AddressesFilter","","Addresses filter.",null,null],[4,"Tracing","","Container for block traces.",null,null],[13,"Enabled","","This variant should be used when tracing is enabled.",199,null],[13,"Disabled","","Tracing is disabled.",199,null],[4,"TraceError","","Trace evm errors.",null,null],[13,"OutOfGas","","`OutOfGas` is returned when transaction execution runs out of gas.",200,null],[13,"BadJumpDestination","","`BadJumpDestination` is returned when execution tried to move to position that wasn't marked with JUMPDEST instruction",200,null],[13,"BadInstruction","","`BadInstructions` is returned when given instruction is not supported",200,null],[13,"StackUnderflow","","`StackUnderflow` when there is not enough stack elements to execute instruction",200,null],[13,"OutOfStack","","When execution would exceed defined Stack Limit",200,null],[13,"BuiltIn","","When builtin contract failed on input data",200,null],[13,"Internal","","Returned on evm internal error. Should never be ignored during development. Likely to cause consensus issues.",200,null],[13,"MutableCallInStaticContext","","When execution tries to modify the state in static context",200,null],[13,"Wasm","","Wasm error",200,null],[13,"OutOfBounds","","Contract tried to access past the return data buffer.",200,null],[13,"Reverted","","Execution has been reverted with REVERT instruction.",200,null],[4,"RewardType","","Reward type.",null,null],[13,"Block","","Block",201,null],[13,"Uncle","","Uncle",201,null],[13,"EmptyStep","","Empty step (AuthorityRound)",201,null],[13,"External","","A reward directly attributed by an external protocol (e.g. block reward contract)",201,null],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",189,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"default","","",189,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates new instance of `TraceDB`.",202,{"inputs":[{"name":"config"},{"generics":["blockchaindb"],"name":"arc"},{"name":"arc"}],"output":{"name":"self"}}],[11,"collect_garbage","","Ticks our cache system and throws out any old data.",202,{"inputs":[{"name":"self"}],"output":null}],[11,"tracing_enabled","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"import","","Traces of import request's enacted blocks are expected to be already in database or to be the currently inserted trace.",202,{"inputs":[{"name":"self"},{"name":"dbtransaction"},{"name":"importrequest"}],"output":null}],[11,"trace","","",202,{"inputs":[{"name":"self"},{"name":"blocknumber"},{"name":"usize"},{"generics":["usize"],"name":"vec"}],"output":{"generics":["localizedtrace"],"name":"option"}}],[11,"transaction_traces","","",202,{"inputs":[{"name":"self"},{"name":"blocknumber"},{"name":"usize"}],"output":{"generics":["vec"],"name":"option"}}],[11,"block_traces","","",202,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"generics":["vec"],"name":"option"}}],[11,"filter","","",202,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"generics":["localizedtrace"],"name":"vec"}}],[11,"default","","",203,{"inputs":[],"output":{"name":"executivetracer"}}],[11,"prepare_trace_call","","",203,{"inputs":[{"name":"self"},{"name":"actionparams"}],"output":{"generics":["call"],"name":"option"}}],[11,"prepare_trace_create","","",203,{"inputs":[{"name":"self"},{"name":"actionparams"}],"output":{"generics":["create"],"name":"option"}}],[11,"prepare_trace_output","","",203,{"inputs":[{"name":"self"}],"output":{"generics":["bytes"],"name":"option"}}],[11,"trace_call","","",203,{"inputs":[{"name":"self"},{"generics":["call"],"name":"option"},{"name":"u256"},{"generics":["bytes"],"name":"option"},{"generics":["flattrace"],"name":"vec"}],"output":null}],[11,"trace_create","","",203,{"inputs":[{"name":"self"},{"generics":["create"],"name":"option"},{"name":"u256"},{"generics":["bytes"],"name":"option"},{"name":"address"},{"generics":["flattrace"],"name":"vec"}],"output":null}],[11,"trace_failed_call","","",203,{"inputs":[{"name":"self"},{"generics":["call"],"name":"option"},{"generics":["flattrace"],"name":"vec"},{"name":"traceerror"}],"output":null}],[11,"trace_failed_create","","",203,{"inputs":[{"name":"self"},{"generics":["create"],"name":"option"},{"generics":["flattrace"],"name":"vec"},{"name":"traceerror"}],"output":null}],[11,"trace_suicide","","",203,{"inputs":[{"name":"self"},{"name":"address"},{"name":"u256"},{"name":"address"}],"output":null}],[11,"trace_reward","","",203,{"inputs":[{"name":"self"},{"name":"address"},{"name":"u256"},{"name":"rewardtype"}],"output":null}],[11,"subtracer","","",203,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drain","","",203,{"inputs":[{"name":"self"}],"output":{"generics":["flattrace"],"name":"vec"}}],[11,"toplevel","","Create a new top-level instance.",204,{"inputs":[],"output":{"name":"self"}}],[11,"trace_next_instruction","","",204,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"trace_prepare_execute","","",204,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"},{"name":"u256"}],"output":null}],[11,"trace_executed","","",204,null],[11,"prepare_subtrace","","",204,null],[11,"done_subtrace","","",204,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"drain","","",204,{"inputs":[{"name":"self"}],"output":{"generics":["vmtrace"],"name":"option"}}],[11,"prepare_trace_call","","",205,{"inputs":[{"name":"self"},{"name":"actionparams"}],"output":{"generics":["call"],"name":"option"}}],[11,"prepare_trace_create","","",205,{"inputs":[{"name":"self"},{"name":"actionparams"}],"output":{"generics":["create"],"name":"option"}}],[11,"prepare_trace_output","","",205,{"inputs":[{"name":"self"}],"output":{"generics":["bytes"],"name":"option"}}],[11,"trace_call","","",205,{"inputs":[{"name":"self"},{"generics":["call"],"name":"option"},{"name":"u256"},{"generics":["bytes"],"name":"option"},{"generics":["flattrace"],"name":"vec"}],"output":null}],[11,"trace_create","","",205,{"inputs":[{"name":"self"},{"generics":["create"],"name":"option"},{"name":"u256"},{"generics":["bytes"],"name":"option"},{"name":"address"},{"generics":["flattrace"],"name":"vec"}],"output":null}],[11,"trace_failed_call","","",205,{"inputs":[{"name":"self"},{"generics":["call"],"name":"option"},{"generics":["flattrace"],"name":"vec"},{"name":"traceerror"}],"output":null}],[11,"trace_failed_create","","",205,{"inputs":[{"name":"self"},{"generics":["create"],"name":"option"},{"generics":["flattrace"],"name":"vec"},{"name":"traceerror"}],"output":null}],[11,"trace_suicide","","",205,{"inputs":[{"name":"self"},{"name":"address"},{"name":"u256"},{"name":"address"}],"output":null}],[11,"trace_reward","","",205,{"inputs":[{"name":"self"},{"name":"address"},{"name":"u256"},{"name":"rewardtype"}],"output":null}],[11,"subtracer","","",205,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drain","","",205,{"inputs":[{"name":"self"}],"output":{"generics":["flattrace"],"name":"vec"}}],[11,"trace_next_instruction","","",206,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"trace_prepare_execute","","",206,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"},{"name":"u256"}],"output":null}],[11,"trace_executed","","",206,null],[11,"prepare_subtrace","","",206,null],[11,"done_subtrace","","",206,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"drain","","",206,{"inputs":[{"name":"self"}],"output":{"generics":["vmtrace"],"name":"option"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"from","","",200,{"inputs":[{"name":"vmerror"}],"output":{"name":"self"}}],[11,"from","","",200,{"inputs":[{"name":"vmerror"}],"output":{"name":"self"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rlp_append","","",200,{"inputs":[{"name":"self"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",200,{"inputs":[{"name":"rlp"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",207,{"inputs":[{"generics":["address"],"name":"vec"}],"output":{"name":"self"}}],[11,"matches","","Returns true if address matches one of the searched addresses.",207,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"matches_all","","Returns true if this address filter matches everything.",207,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"blooms","","Returns blooms of this addresses filter.",207,{"inputs":[{"name":"self"}],"output":{"generics":["bloom"],"name":"vec"}}],[11,"with_blooms","","Returns vector of blooms zipped with blooms of this addresses filter.",207,{"inputs":[{"name":"self"},{"generics":["bloom"],"name":"vec"}],"output":{"generics":["bloom"],"name":"vec"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bloom_possibilities","","Returns combinations of each address.",198,{"inputs":[{"name":"self"}],"output":{"generics":["bloom"],"name":"vec"}}],[11,"matches","","Returns true if given trace matches the filter.",198,{"inputs":[{"name":"self"},{"name":"flattrace"}],"output":{"name":"bool"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",197,{"inputs":[{"name":"self"},{"name":"flattrace"}],"output":{"name":"bool"}}],[11,"ne","","",197,{"inputs":[{"name":"self"},{"name":"flattrace"}],"output":{"name":"bool"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"flattrace"}}],[11,"bloom","","Returns bloom of the trace.",197,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"heap_size_of_children","","",197,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rlp_append","","",197,{"inputs":[{"name":"self"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",197,{"inputs":[{"name":"rlp"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"flattransactiontraces"}],"output":{"name":"bool"}}],[11,"ne","","",208,{"inputs":[{"name":"self"},{"name":"flattransactiontraces"}],"output":{"name":"bool"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"flattransactiontraces"}}],[11,"from","","",208,{"inputs":[{"generics":["flattrace"],"name":"vec"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",208,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bloom","","Returns bloom of all traces in the collection.",208,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"into","","",208,{"inputs":[{"name":"self"}],"output":{"generics":["flattrace"],"name":"vec"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"flatblocktraces"}],"output":{"name":"bool"}}],[11,"ne","","",209,{"inputs":[{"name":"self"},{"name":"flatblocktraces"}],"output":{"name":"bool"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"flatblocktraces"}}],[11,"default","","",209,{"inputs":[],"output":{"name":"flatblocktraces"}}],[11,"heap_size_of_children","","",209,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from","","",209,{"inputs":[{"generics":["flattransactiontraces"],"name":"vec"}],"output":{"name":"self"}}],[11,"bloom","","Returns bloom of all traces in the block.",209,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"into","","",209,{"inputs":[{"name":"self"}],"output":{"generics":["flattransactiontraces"],"name":"vec"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",201,{"inputs":[{"name":"self"},{"name":"rewardtype"}],"output":{"name":"bool"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"rewardtype"}}],[11,"rlp_append","","",201,{"inputs":[{"name":"self"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",201,{"inputs":[{"name":"rlp"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"memorydiff"}}],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"memorydiff"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"self"},{"name":"memorydiff"}],"output":{"name":"bool"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"storagediff"}}],[11,"eq","","",196,{"inputs":[{"name":"self"},{"name":"storagediff"}],"output":{"name":"bool"}}],[11,"ne","","",196,{"inputs":[{"name":"self"},{"name":"storagediff"}],"output":{"name":"bool"}}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"vmexecutedoperation"}}],[11,"eq","","",194,{"inputs":[{"name":"self"},{"name":"vmexecutedoperation"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"self"},{"name":"vmexecutedoperation"}],"output":{"name":"bool"}}],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"vmoperation"}}],[11,"eq","","",193,{"inputs":[{"name":"self"},{"name":"vmoperation"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"self"},{"name":"vmoperation"}],"output":{"name":"bool"}}],[11,"default","","",193,{"inputs":[],"output":{"name":"vmoperation"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"vmtrace"}}],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"vmtrace"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"self"},{"name":"vmtrace"}],"output":{"name":"bool"}}],[11,"default","","",192,{"inputs":[],"output":{"name":"vmtrace"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",191,{"inputs":[{"name":"self"},{"name":"localizedtrace"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"self"},{"name":"localizedtrace"}],"output":{"name":"bool"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"localizedtrace"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"tracing"}}],[11,"enabled","","Creates new instance of enabled tracing object.",199,{"inputs":[],"output":{"name":"self"}}],[11,"is_enabled","","Returns true if tracing is enabled.",199,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Drain all traces.",199,{"inputs":[{"name":"self"}],"output":{"generics":["flattransactiontraces"],"name":"vec"}}],[0,"filter","","Trace filters type definitions",null,null],[3,"AddressesFilter","ethcore::trace::filter","Addresses filter.",null,null],[3,"Filter","","Traces filter.",null,null],[12,"range","","Block range.",198,null],[12,"from_address","","From address filter.",198,null],[12,"to_address","","To address filter.",198,null],[0,"flat","ethcore::trace","Flat trace module",null,null],[3,"FlatTrace","ethcore::trace::flat","Trace localized in vector of traces produced by a single transaction.",null,null],[12,"action","","Type of action performed by a transaction.",197,null],[12,"result","","Result of this action.",197,null],[12,"subtraces","","Number of subtraces.",197,null],[12,"trace_address","","Exact location of trace.",197,null],[3,"FlatTransactionTraces","","Represents all traces produced by a single transaction.",null,null],[3,"FlatBlockTraces","","Represents all traces produced by transactions in a single block.",null,null],[0,"localized","ethcore::trace","Localized traces type definitions",null,null],[3,"LocalizedTrace","ethcore::trace::localized","Localized trace.",null,null],[12,"action","","Type of action performed by a transaction.",191,null],[12,"result","","Result of this action.",191,null],[12,"subtraces","","Number of subtraces.",191,null],[12,"trace_address","","Exact location of trace.",191,null],[12,"transaction_number","","Transaction number within the block.",191,null],[12,"transaction_hash","","Signed transaction hash.",191,null],[12,"block_number","","Block number.",191,null],[12,"block_hash","","Block hash.",191,null],[0,"trace","ethcore::trace","Tracing datatypes.",null,null],[3,"CallResult","ethcore::trace::trace","`Call` result.",null,null],[12,"gas_used","","Gas used by call.",210,null],[12,"output","","Call Output.",210,null],[3,"CreateResult","","`Create` result.",null,null],[12,"gas_used","","Gas used by create.",211,null],[12,"code","","Code of the newly created contract.",211,null],[12,"address","","Address of the newly created contract.",211,null],[3,"Call","","Description of a call action, either a `CALL` operation or a message transction.",null,null],[12,"from","","The sending account.",212,null],[12,"to","","The destination account.",212,null],[12,"value","","The value transferred to the destination account.",212,null],[12,"gas","","The gas available for executing the call.",212,null],[12,"input","","The input data provided to the call.",212,null],[12,"call_type","","The type of the call.",212,null],[3,"Create","","Description of a create action, either a `CREATE` operation or a create transction.",null,null],[12,"from","","The address of the creator.",213,null],[12,"value","","The value with which the new account is endowed.",213,null],[12,"gas","","The gas available for the creation init code.",213,null],[12,"init","","The init code.",213,null],[3,"Reward","","Reward action",null,null],[12,"author","","Author's address.",214,null],[12,"value","","Reward amount.",214,null],[12,"reward_type","","Reward type.",214,null],[3,"Suicide","","Suicide action.",null,null],[12,"address","","Suicided address.",215,null],[12,"refund_address","","Suicided contract heir.",215,null],[12,"balance","","Balance of the contract just before suicide.",215,null],[3,"MemoryDiff","","A diff of some chunk of memory.",null,null],[12,"offset","","Offset into memory the change begins.",195,null],[12,"data","","The changed data.",195,null],[3,"StorageDiff","","A diff of some storage value.",null,null],[12,"location","","Which key in storage is changed.",196,null],[12,"value","","What the value has been changed to.",196,null],[3,"VMExecutedOperation","","A record of an executed VM operation.",null,null],[12,"gas_used","","The total gas used.",194,null],[12,"stack_push","","The stack item placed, if any.",194,null],[12,"mem_diff","","If altered, the memory delta.",194,null],[12,"store_diff","","The altered storage value, if any.",194,null],[3,"VMOperation","","A record of the execution of a single VM operation.",null,null],[12,"pc","","The program counter.",193,null],[12,"instruction","","The instruction executed.",193,null],[12,"gas_cost","","The gas cost for this instruction.",193,null],[12,"executed","","Information concerning the execution of the operation.",193,null],[3,"VMTrace","","A record of a full VM trace for a CALL/CREATE.",null,null],[12,"parent_step","","The step (i.e. index into operations) at which this trace corresponds.",192,null],[12,"code","","The code to be executed.",192,null],[12,"operations","","The operations executed.",192,null],[12,"subs","","The sub traces for each interior action performed as part of this call/create. Thre is a 1:1 correspondance between these and a CALL/CREATE/CALLCODE/DELEGATECALL instruction.",192,null],[4,"RewardType","","Reward type.",null,null],[13,"Block","","Block",201,null],[13,"Uncle","","Uncle",201,null],[13,"EmptyStep","","Empty step (AuthorityRound)",201,null],[13,"External","","A reward directly attributed by an external protocol (e.g. block reward contract)",201,null],[4,"Action","","Description of an action that we trace; will be either a call or a create.",null,null],[13,"Call","","It's a call action.",216,null],[13,"Create","","It's a create action.",216,null],[13,"Suicide","","Suicide.",216,null],[13,"Reward","","Reward",216,null],[4,"Res","","The result of the performed action.",null,null],[13,"Call","","Successful call action result.",217,null],[13,"Create","","Successful create action result.",217,null],[13,"FailedCall","","Failed call.",217,null],[13,"FailedCreate","","Failed create.",217,null],[13,"None","","None",217,null],[8,"Tracer","ethcore::trace","This trait is used by executive to build traces.",null,null],[16,"Output","","Data returned when draining the Tracer.",218,null],[10,"prepare_trace_call","","Prepares call trace for given params. Noop tracer should return None.",218,{"inputs":[{"name":"self"},{"name":"actionparams"}],"output":{"generics":["call"],"name":"option"}}],[10,"prepare_trace_create","","Prepares create trace for given params. Noop tracer should return None.",218,{"inputs":[{"name":"self"},{"name":"actionparams"}],"output":{"generics":["create"],"name":"option"}}],[10,"prepare_trace_output","","Prepare trace output. Noop tracer should return None.",218,{"inputs":[{"name":"self"}],"output":{"generics":["bytes"],"name":"option"}}],[10,"trace_call","","Stores trace call info.",218,{"inputs":[{"name":"self"},{"generics":["call"],"name":"option"},{"name":"u256"},{"generics":["bytes"],"name":"option"},{"name":"vec"}],"output":null}],[10,"trace_create","","Stores trace create info.",218,{"inputs":[{"name":"self"},{"generics":["create"],"name":"option"},{"name":"u256"},{"generics":["bytes"],"name":"option"},{"name":"address"},{"name":"vec"}],"output":null}],[10,"trace_failed_call","","Stores failed call trace.",218,{"inputs":[{"name":"self"},{"generics":["call"],"name":"option"},{"name":"vec"},{"name":"traceerror"}],"output":null}],[10,"trace_failed_create","","Stores failed create trace.",218,{"inputs":[{"name":"self"},{"generics":["create"],"name":"option"},{"name":"vec"},{"name":"traceerror"}],"output":null}],[10,"trace_suicide","","Stores suicide info.",218,{"inputs":[{"name":"self"},{"name":"address"},{"name":"u256"},{"name":"address"}],"output":null}],[10,"trace_reward","","Stores reward info.",218,{"inputs":[{"name":"self"},{"name":"address"},{"name":"u256"},{"name":"rewardtype"}],"output":null}],[10,"subtracer","","Spawn subtracer which will be used to trace deeper levels of execution.",218,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"drain","","Consumes self and returns all traces.",218,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[8,"VMTracer","","Used by executive to build VM traces.",null,null],[16,"Output","","Data returned when draining the VMTracer.",219,null],[11,"trace_next_instruction","","Trace the progression of interpreter to next instruction. If tracer returns `false` it won't be called again. @returns true if `trace_prepare_execute` and `trace_executed` should be called.",219,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"trace_prepare_execute","","Trace the preparation to execute a single valid instruction.",219,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"},{"name":"u256"}],"output":null}],[11,"trace_executed","","Trace the finalised execution of a single valid instruction.",219,null],[10,"prepare_subtrace","","Spawn subtracer which will be used to trace deeper levels of execution.",219,null],[10,"done_subtrace","","Finalize subtracer.",219,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[10,"drain","","Consumes self and returns the VM trace.",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"DatabaseExtras","","`DbExtras` provides an interface to query extra data which is not stored in tracesdb, but necessary to work correctly.",null,null],[10,"block_hash","","Returns hash of given block number.",220,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"generics":["h256"],"name":"option"}}],[10,"transaction_hash","","Returns hash of transaction at given position.",220,{"inputs":[{"name":"self"},{"name":"blocknumber"},{"name":"usize"}],"output":{"generics":["h256"],"name":"option"}}],[8,"Database","","Db provides an interface to query tracesdb.",null,null],[10,"tracing_enabled","","Returns true if tracing is enabled. Otherwise false.",221,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"import","","Imports new block traces.",221,{"inputs":[{"name":"self"},{"name":"dbtransaction"},{"name":"importrequest"}],"output":null}],[10,"trace","","Returns localized trace at given position.",221,{"inputs":[{"name":"self"},{"name":"blocknumber"},{"name":"usize"},{"generics":["usize"],"name":"vec"}],"output":{"generics":["localizedtrace"],"name":"option"}}],[10,"transaction_traces","","Returns localized traces created by a single transaction.",221,{"inputs":[{"name":"self"},{"name":"blocknumber"},{"name":"usize"}],"output":{"generics":["vec"],"name":"option"}}],[10,"block_traces","","Returns localized traces created in given block.",221,{"inputs":[{"name":"self"},{"name":"blocknumber"}],"output":{"generics":["vec"],"name":"option"}}],[10,"filter","","Filter traces matching given filter.",221,{"inputs":[{"name":"self"},{"name":"filter"}],"output":{"generics":["localizedtrace"],"name":"vec"}}],[0,"verification","ethcore","Block verification utilities.",null,null],[3,"QueueInfo","ethcore::verification","Verification queue status",null,null],[12,"unverified_queue_size","","Number of queued items pending verification",27,null],[12,"verified_queue_size","","Number of verified queued items pending import",27,null],[12,"verifying_queue_size","","Number of items being verified",27,null],[12,"max_queue_size","","Configured maximum number of items in the queue",27,null],[12,"max_mem_use","","Configured maximum number of bytes to use",27,null],[12,"mem_used","","Heap memory used in bytes",27,null],[3,"CanonVerifier","","A canonial verifier -- this does full verification.",null,null],[3,"NoopVerifier","","A no-op verifier -- this will verify everything it's given immediately.",null,null],[4,"VerifierType","","Verifier type.",null,null],[13,"Canon","","Verifies block normally.",222,null],[13,"CanonNoSeal","","Verifies block normallly, but skips seal verification.",222,null],[13,"Noop","","Does not verify block at all. Used in tests.",222,null],[5,"new","","Create a new verifier based on type.",null,{"inputs":[{"name":"verifiertype"}],"output":{"generics":["verifier"],"name":"box"}}],[0,"verification","","Block and transaction verification functions",null,null],[3,"PreverifiedBlock","ethcore::verification::verification","Preprocessed block data gathered in `verify_block_unordered` call",null,null],[12,"header","","Populated block header",223,null],[12,"transactions","","Populated block transactions",223,null],[12,"bytes","","Block bytes",223,null],[3,"FullFamilyParams","","Parameters for full verification of block family",null,null],[12,"block_bytes","","Serialized block bytes",224,null],[12,"transactions","","Signed transactions",224,null],[12,"block_provider","","Block provider to use during verification",224,null],[12,"client","","Engine client to use during verification",224,null],[5,"verify_block_basic","","Phase 1 quick block verification. Only does checks that are cheap. Operates on a single block",null,null],[5,"verify_block_unordered","","Phase 2 verification. Perform costly checks such as transaction signatures and block nonce for ethash. Still operates on a individual block Returns a `PreverifiedBlock` structure populated with transactions",null,{"inputs":[{"name":"header"},{"name":"bytes"},{"name":"ethengine"},{"name":"bool"}],"output":{"generics":["preverifiedblock","error"],"name":"result"}}],[5,"verify_block_family","","Phase 3 verification. Check block information against parent and uncles.",null,{"inputs":[{"name":"header"},{"name":"header"},{"name":"ethengine"},{"generics":["fullfamilyparams"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[5,"verify_block_final","","Phase 4 verification. Check block information against transaction enactment results,",null,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"generics":["error"],"name":"result"}}],[5,"verify_header_params","","Check basic header parameters.",null,{"inputs":[{"name":"header"},{"name":"ethengine"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"heap_size_of_children","","",223,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"verifier","ethcore::verification","A generic verifier trait.",null,null],[8,"Verifier","ethcore::verification::verifier","Should be used to verify blocks.",null,null],[10,"verify_block_family","","Verify a block relative to its parent and uncles.",225,{"inputs":[{"name":"self"},{"name":"header"},{"name":"header"},{"name":"ethengine"},{"generics":["fullfamilyparams"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[10,"verify_block_final","","Do a final verification check for an enacted header vs its expected counterpart.",225,{"inputs":[{"name":"self"},{"name":"header"},{"name":"header"}],"output":{"generics":["error"],"name":"result"}}],[10,"verify_block_external","","Verify a block, inspecing external state.",225,{"inputs":[{"name":"self"},{"name":"header"},{"name":"ethengine"}],"output":{"generics":["error"],"name":"result"}}],[0,"queue","ethcore::verification","A queue of blocks. Sits between network or other I/O and the `BlockChain`. Sorts them ready for blockchain insertion.",null,null],[3,"QueueInfo","ethcore::verification::queue","Verification queue status",null,null],[12,"unverified_queue_size","","Number of queued items pending verification",27,null],[12,"verified_queue_size","","Number of verified queued items pending import",27,null],[12,"verifying_queue_size","","Number of items being verified",27,null],[12,"max_queue_size","","Configured maximum number of items in the queue",27,null],[12,"max_mem_use","","Configured maximum number of bytes to use",27,null],[12,"mem_used","","Heap memory used in bytes",27,null],[3,"Config","","Verification queue configuration",null,null],[12,"max_queue_size","","Maximum number of items to keep in unverified queue. When the limit is reached, is_full returns true.",226,null],[12,"max_mem_use","","Maximum heap memory to use. When the limit is reached, is_full returns true.",226,null],[12,"verifier_settings","","Settings for the number of verifiers and adaptation strategy.",226,null],[3,"VerifierSettings","","Verifier settings.",null,null],[12,"scale_verifiers","","Whether to scale amount of verifiers according to load.",227,null],[12,"num_verifiers","","Beginning amount of verifiers.",227,null],[3,"Verifying","","An item which is in the process of being verified.",null,null],[3,"VerificationQueue","","A queue of items to be verified. Sits between network or other I/O and the `BlockChain`. Keeps them in the same order as inserted, minus invalid items.",null,null],[4,"Status","","Status of items in the queue.",null,null],[13,"Queued","","Currently queued.",228,null],[13,"Bad","","Known to be bad.",228,null],[13,"Unknown","","Unknown.",228,null],[0,"kind","","Definition of valid items for the verification queue.",null,null],[0,"blocks","ethcore::verification::queue::kind","The blocks verification module.",null,null],[3,"Blocks","ethcore::verification::queue::kind::blocks","A mode for verifying blocks.",null,null],[3,"Unverified","","An unverified block.",null,null],[11,"create","","",229,null],[11,"verify","","",229,null],[11,"from_rlp","","Create an `Unverified` from raw bytes.",230,{"inputs":[{"name":"bytes"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"heap_size_of_children","","",230,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"hash","","",230,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"parent_hash","","",230,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"difficulty","","",230,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"hash","ethcore::verification::verification","",223,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"parent_hash","","",223,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"difficulty","","",223,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[0,"headers","ethcore::verification::queue::kind","Verification for headers.",null,null],[3,"Headers","ethcore::verification::queue::kind::headers","A mode for verifying headers.",null,null],[11,"hash","ethcore::header","",133,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"parent_hash","","",133,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"difficulty","","",133,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"create","ethcore::verification::queue::kind::headers","",231,null],[11,"verify","","",231,null],[8,"BlockLike","ethcore::verification::queue::kind","Something which can produce a hash and a parent hash.",null,null],[10,"hash","","Get the hash of this item.",232,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[10,"parent_hash","","Get the hash of this item's parent.",232,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[10,"difficulty","","Get the difficulty of this item.",232,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[8,"Kind","","Defines transitions between stages of verification.",null,null],[16,"Input","","The first stage: completely unverified.",233,null],[16,"Unverified","","The second stage: partially verified.",233,null],[16,"Verified","","The third stage: completely verified.",233,null],[10,"create","","Attempt to create the `Unverified` item from the input.",233,null],[10,"verify","","Attempt to verify the `Unverified` item using the given engine.",233,null],[6,"BlockQueue","ethcore::verification::queue","Type alias for block queue convenience.",null,null],[6,"HeaderQueue","","Type alias for header queue convenience.",null,null],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",226,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"clone","","",226,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"default","","",226,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",227,{"inputs":[{"name":"self"},{"name":"verifiersettings"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"self"},{"name":"verifiersettings"}],"output":{"name":"bool"}}],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"verifiersettings"}}],[11,"default","","",227,{"inputs":[],"output":{"name":"self"}}],[11,"heap_size_of_children","","",234,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into","","",228,{"inputs":[{"name":"self"}],"output":{"name":"blockstatus"}}],[11,"new","","Creates a new queue instance.",235,{"inputs":[{"name":"config"},{"generics":["ethengine"],"name":"arc"},{"generics":["clientiomessage"],"name":"iochannel"},{"name":"bool"}],"output":{"name":"self"}}],[11,"clear","","Clear the queue and stop verification activity.",235,{"inputs":[{"name":"self"}],"output":null}],[11,"flush","","Wait for unverified queue to be empty",235,{"inputs":[{"name":"self"}],"output":null}],[11,"status","","Check if the item is currently in the queue",235,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"status"}}],[11,"import","","Add a block to the queue.",235,null],[11,"mark_as_bad","","Mark given item and all its children as bad. pauses verification until complete.",235,null],[11,"mark_as_good","","Mark given item as processed. Returns true if the queue becomes empty.",235,null],[11,"drain","","Removes up to `max` verified items from the queue",235,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"queue_info","","Get queue status.",235,{"inputs":[{"name":"self"}],"output":{"name":"queueinfo"}}],[11,"total_difficulty","","Get the total difficulty of all the blocks in the queue.",235,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"num_verifiers","","Get the current number of working verifiers.",235,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"collect_garbage","","Optimise memory footprint of the heap fields, and adjust the number of threads to better suit the workload.",235,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",235,{"inputs":[{"name":"self"}],"output":null}],[11,"verify_block_family","ethcore::verification","",236,{"inputs":[{"name":"self"},{"name":"header"},{"name":"header"},{"name":"ethengine"},{"generics":["fullfamilyparams"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"verify_block_final","","",236,{"inputs":[{"name":"self"},{"name":"header"},{"name":"header"}],"output":{"generics":["error"],"name":"result"}}],[11,"verify_block_external","","",236,{"inputs":[{"name":"self"},{"name":"header"},{"name":"ethengine"}],"output":{"generics":["error"],"name":"result"}}],[11,"verify_block_family","","",237,{"inputs":[{"name":"self"},{"name":"header"},{"name":"header"},{"name":"ethengine"},{"generics":["fullfamilyparams"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"verify_block_final","","",237,{"inputs":[{"name":"self"},{"name":"header"},{"name":"header"}],"output":{"generics":["error"],"name":"result"}}],[11,"verify_block_external","","",237,{"inputs":[{"name":"self"},{"name":"header"},{"name":"ethengine"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",222,{"inputs":[{"name":"self"},{"name":"verifiertype"}],"output":{"name":"bool"}}],[11,"clone","","",222,{"inputs":[{"name":"self"}],"output":{"name":"verifiertype"}}],[11,"verifying_seal","","Check if seal verification is enabled for this verifier type.",222,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","ethcore::client","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"total","","Total amount used by the cache.",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"self"}}],[11,"key","ethcore::blockchain::extras","",238,null],[0,"test_helpers","ethcore","Set of different helpers for client tests",null,null],[3,"TestNotify","ethcore::test_helpers","Test actor for chain events",null,null],[12,"messages","","Messages store",239,null],[5,"create_test_block","","Creates test block with corresponding header",null,{"inputs":[{"name":"header"}],"output":{"name":"bytes"}}],[5,"create_test_block_with_data","","Creates test block with corresponding header and data",null,null],[5,"generate_dummy_client","","Generates dummy client (not test client) with corresponding amount of blocks",null,{"inputs":[{"name":"u32"}],"output":{"generics":["client"],"name":"arc"}}],[5,"generate_dummy_client_with_data","","Generates dummy client (not test client) with corresponding amount of blocks and txs per every block",null,null],[5,"generate_dummy_client_with_spec_and_data","","Generates dummy client (not test client) with corresponding amount of blocks, txs per block and spec",null,null],[5,"generate_dummy_client_with_spec_and_accounts","","Generates dummy client (not test client) with corresponding spec and accounts",null,{"inputs":[{"name":"f"},{"generics":["arc"],"name":"option"}],"output":{"generics":["client"],"name":"arc"}}],[5,"generate_dummy_client_with_spec_accounts_and_data","","Generates dummy client (not test client) with corresponding blocks, accounts and spec",null,null],[5,"push_blocks_to_client","","Adds blocks to the client",null,{"inputs":[{"name":"arc"},{"name":"u64"},{"name":"usize"},{"name":"usize"}],"output":null}],[5,"push_block_with_transactions","","Adds one block with transactions",null,null],[5,"get_test_client_with_blocks","","Creates dummy client (not test client) with corresponding blocks",null,{"inputs":[{"generics":["bytes"],"name":"vec"}],"output":{"generics":["client"],"name":"arc"}}],[5,"new_db","","Creates new test instance of `BlockChainDB`",null,{"inputs":[],"output":{"generics":["blockchaindb"],"name":"arc"}}],[5,"restoration_db_handler","","Creates new instance of KeyValueDBHandler",null,{"inputs":[{"name":"databaseconfig"}],"output":{"generics":["blockchaindbhandler"],"name":"box"}}],[5,"generate_dummy_blockchain","","Generates dummy blockchain with corresponding amount of blocks",null,{"inputs":[{"name":"u32"}],"output":{"name":"blockchain"}}],[5,"generate_dummy_blockchain_with_extra","","Generates dummy blockchain with corresponding amount of blocks (using creation with extra method for blocks creation)",null,{"inputs":[{"name":"u32"}],"output":{"name":"blockchain"}}],[5,"generate_dummy_empty_blockchain","","Returns empty dummy blockchain",null,{"inputs":[],"output":{"name":"blockchain"}}],[5,"get_temp_state","","Returns temp state",null,{"inputs":[],"output":{"generics":["statedb"],"name":"state"}}],[5,"get_temp_state_with_factory","","Returns temp state using coresponding factory",null,{"inputs":[{"name":"evmfactory"}],"output":{"generics":["statedb"],"name":"state"}}],[5,"get_temp_state_db","","Returns temp state db",null,{"inputs":[],"output":{"name":"statedb"}}],[5,"get_good_dummy_block_seq","","Returns sequence of hashes of the dummy blocks",null,{"inputs":[{"name":"usize"}],"output":{"generics":["bytes"],"name":"vec"}}],[5,"get_good_dummy_block_fork_seq","","Returns sequence of hashes of the dummy blocks beginning from corresponding parent",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"h256"}],"output":{"generics":["bytes"],"name":"vec"}}],[5,"get_good_dummy_block_hash","","Returns hash and header of the correct dummy block",null,null],[5,"get_good_dummy_block","","Returns hash of the correct dummy block",null,{"inputs":[],"output":{"name":"bytes"}}],[5,"get_bad_state_dummy_block","","Returns hash of the dummy block with incorrect state root",null,{"inputs":[],"output":{"name":"bytes"}}],[11,"default","","",239,{"inputs":[],"output":{"name":"testnotify"}}],[11,"broadcast","","",239,{"inputs":[{"name":"self"},{"name":"chainmessagetype"}],"output":null}],[8,"BlockChainDB","ethcore","Database backing `BlockChain`.",null,null],[10,"key_value","","Generic key value store.",240,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[10,"blooms","","Header blooms database.",240,{"inputs":[{"name":"self"}],"output":{"name":"database"}}],[10,"trace_blooms","","Trace blooms database.",240,{"inputs":[{"name":"self"}],"output":{"name":"database"}}],[8,"BlockChainDBHandler","","Generic database handler. This trait contains one function `open`. When called, it opens database with a predefined config.",null,null],[10,"open","","Open the predefined key-value database.",241,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["arc"],"name":"result"}}],[14,"view","","",null,null],[11,"decode","ethcore::snapshot","",151,{"inputs":[{"name":"rlp"}],"output":{"generics":["basicaccount","decodererror"],"name":"result"}}],[11,"fmt","ethcore::client","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"callanalytics"}}],[11,"rlp_append","ethcore::snapshot","",151,null],[11,"eq","ethcore::client","",31,{"inputs":[{"name":"self"},{"name":"callanalytics"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"callanalytics"}],"output":{"name":"bool"}}],[11,"eq","ethcore::snapshot","",150,{"inputs":[{"name":"self"},{"name":"restorationstatus"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"self"},{"name":"restorationstatus"}],"output":{"name":"bool"}}],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"manifestdata"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"self"},{"name":"manifestdata"}],"output":{"name":"bool"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"basicaccount"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"basicaccount"}],"output":{"name":"bool"}}],[11,"eq","ethcore::client","",26,{"inputs":[{"name":"self"},{"name":"blockstatus"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"callanalytics"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"pruninginfo"}}],[11,"clone","ethcore::verification::queue","",27,{"inputs":[{"name":"self"}],"output":{"name":"verificationqueueinfo"}}],[11,"clone","ethcore::snapshot","",151,{"inputs":[{"name":"self"}],"output":{"name":"basicaccount"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"restorationstatus"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"manifestdata"}}],[11,"clone","ethcore::client","",25,{"inputs":[{"name":"self"}],"output":{"name":"blockchaininfo"}}],[11,"fmt","ethcore::verification::queue","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","ethcore::client","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","ethcore::snapshot","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","ethcore::client","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","ethcore::snapshot","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","ethcore::client","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","ethcore::snapshot","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","ethcore::spec","",171,{"inputs":[],"output":{"name":"optimizefor"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"optimizefor"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"optimizefor"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","ethcore::miner","",139,{"inputs":[{"name":"self"},{"name":"pendingordering"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"pendingordering"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"rlp_append_unsigned_transaction","ethcore::account_provider","Append object with a without signature into RLP stream",12,null],[11,"hash","","The message hash of the transaction.",12,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"option"}],"output":{"name":"h256"}}],[11,"sign","","Signs the transaction as coming from `sender`.",12,{"inputs":[{"name":"self"},{"name":"secret"},{"generics":["u64"],"name":"option"}],"output":{"name":"signedtransaction"}}],[11,"with_signature","","Signs the transaction with signature.",12,{"inputs":[{"name":"self"},{"name":"signature"},{"generics":["u64"],"name":"option"}],"output":{"name":"unverifiedtransaction"}}],[11,"fake_sign","","Specify the sender; this won't survive the serialize/deserialize process, but can be cloned.",12,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"name":"signedtransaction"}}],[11,"null_sign","","Add EIP-86 compatible empty signature.",12,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"signedtransaction"}}],[11,"gas_required_for","","Get the transaction cost in gas for the given params.",12,null],[11,"gas_required","","Get the transaction cost in gas for this transaction.",12,{"inputs":[{"name":"self"},{"name":"schedule"}],"output":{"name":"u64"}}],[11,"rlp_append","","",11,null],[11,"default","","",11,{"inputs":[],"output":{"name":"action"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"transaction"}}],[11,"heap_size_of_children","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"action"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"action"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"action"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"transaction"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"rlp"}],"output":{"generics":["action","decodererror"],"name":"result"}}],[11,"fmt","","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","","",242,null],[11,"from_str","","",242,{"inputs":[{"name":"str"}],"output":{"generics":["signature"],"name":"result"}}],[11,"fmt","","",242,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",242,null],[11,"from","","",242,{"inputs":[{"name":"h520"}],"output":{"name":"signature"}}],[11,"default","","",242,{"inputs":[],"output":{"name":"signature"}}],[11,"hash","","",242,null],[11,"eq","","",242,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"clone","","",242,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"deref_mut","","",242,null],[11,"into","","",242,null],[11,"fmt","ethcore::client","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"vmtype"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"vmtype"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vmtype"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",32,{"inputs":[{"name":"env"}],"output":{"name":"envinfo"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"envinfo"}}],[11,"eq","ethcore","",0,{"inputs":[{"name":"self"},{"name":"createcontractaddress"}],"output":{"name":"bool"}}],[11,"clone","ethcore::client","",32,{"inputs":[{"name":"self"}],"output":{"name":"envinfo"}}],[11,"clone","ethcore","",0,{"inputs":[{"name":"self"}],"output":{"name":"createcontractaddress"}}],[11,"fmt","ethcore::client","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","ethcore::account_provider","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",8,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",8,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",8,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"drop","","",243,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"keypath"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize","","",244,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from","","",244,{"inputs":[{"name":"t"}],"output":{"name":"opaquekeyfile"}}],[11,"eq","","",244,{"inputs":[{"name":"self"},{"name":"opaquekeyfile"}],"output":{"name":"bool"}}],[11,"ne","","",244,{"inputs":[{"name":"self"},{"name":"opaquekeyfile"}],"output":{"name":"bool"}}],[11,"fmt","","",244,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"r","","Get a slice into the 'r' portion of the data.",242,null],[11,"s","","Get a slice into the 's' portion of the data.",242,null],[11,"v","","Get the recovery byte.",242,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"into_electrum","","Encode the signature into RSV array (V altered to be in \"Electrum\" notation).",242,null],[11,"from_electrum","","Parse bytes as a signature encoded as RSV (V in \"Electrum\" notation). May return empty (invalid) signature if given data has invalid length.",242,null],[11,"from_rsv","","Create a signature object from the sig.",242,{"inputs":[{"name":"h256"},{"name":"h256"},{"name":"u8"}],"output":{"name":"signature"}}],[11,"is_low_s","","Check if this is a \"low\" signature.",242,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_valid","","Check if each component of the signature is in range.",242,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Hardware wallet constructor",243,{"inputs":[],"output":{"generics":["hardwarewalletmanager","error"],"name":"result"}}],[11,"set_key_path","","Select key derivation path for a chain. Currently, only one hard-coded keypath is supported It is managed by `ethcore/account_provider`",243,null],[11,"list_wallets","","List connected wallets. This only returns wallets that are ready to be used.",243,{"inputs":[{"name":"self"}],"output":{"generics":["walletinfo"],"name":"vec"}}],[11,"list_locked_wallets","","Return a list of paths to locked hardware wallets This is only applicable to Trezor because Ledger only appears as a device when it is unlocked",243,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"wallet_info","","Get connected wallet info.",243,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"generics":["walletinfo"],"name":"option"}}],[11,"sign_message","","Sign a message with the wallet (only supported by Ledger)",243,null],[11,"sign_transaction","","Sign transaction data with wallet managing `address`.",243,null],[11,"pin_matrix_ack","","Send a pin to a device at a certain path to unlock it This is only applicable to Trezor because Ledger only appears as a device when it is unlocked",243,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"security_level","ethcore::client","Determine the security model for the current state.",25,{"inputs":[{"name":"self"}],"output":{"name":"securitylevel"}}],[11,"total_queue_size","ethcore::verification::queue","The total size of the queues.",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"incomplete_queue_size","","The size of the unverified and verifying queues.",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Indicates that queue is full",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Indicates that queue is empty",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"all","ethcore::client","Return all possible VMs (Interpreter)",28,{"inputs":[],"output":{"generics":["vmtype"],"name":"vec"}}],[11,"fmt","ethcore::client::registry::events","",245,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",245,{"inputs":[{"name":"self"}],"output":{"name":"reverseremoved"}}],[11,"eq","","",245,{"inputs":[{"name":"self"},{"name":"reverseremoved"}],"output":{"name":"bool"}}],[11,"ne","","",245,{"inputs":[{"name":"self"},{"name":"reverseremoved"}],"output":{"name":"bool"}}],[11,"default","","",245,{"inputs":[],"output":{"name":"self"}}],[11,"parse_log","","Parses log.",245,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"generics":["reverseremoved"],"name":"result"}}],[11,"create_filter","","Creates topic filter.",245,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"}],"output":{"name":"topicfilter"}}],[11,"fmt","","",246,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",246,{"inputs":[{"name":"self"}],"output":{"name":"dropped"}}],[11,"eq","","",246,{"inputs":[{"name":"self"},{"name":"dropped"}],"output":{"name":"bool"}}],[11,"ne","","",246,{"inputs":[{"name":"self"},{"name":"dropped"}],"output":{"name":"bool"}}],[11,"default","","",246,{"inputs":[],"output":{"name":"self"}}],[11,"parse_log","","Parses log.",246,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"generics":["dropped"],"name":"result"}}],[11,"create_filter","","Creates topic filter.",246,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"}],"output":{"name":"topicfilter"}}],[11,"fmt","","",247,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",247,{"inputs":[{"name":"self"}],"output":{"name":"feechanged"}}],[11,"eq","","",247,{"inputs":[{"name":"self"},{"name":"feechanged"}],"output":{"name":"bool"}}],[11,"ne","","",247,{"inputs":[{"name":"self"},{"name":"feechanged"}],"output":{"name":"bool"}}],[11,"default","","",247,{"inputs":[],"output":{"name":"self"}}],[11,"parse_log","","Parses log.",247,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"generics":["feechanged"],"name":"result"}}],[11,"create_filter","","Creates topic filter.",247,{"inputs":[{"name":"self"}],"output":{"name":"topicfilter"}}],[11,"fmt","","",248,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",248,{"inputs":[{"name":"self"}],"output":{"name":"datachanged"}}],[11,"eq","","",248,{"inputs":[{"name":"self"},{"name":"datachanged"}],"output":{"name":"bool"}}],[11,"ne","","",248,{"inputs":[{"name":"self"},{"name":"datachanged"}],"output":{"name":"bool"}}],[11,"default","","",248,{"inputs":[],"output":{"name":"self"}}],[11,"parse_log","","Parses log.",248,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"generics":["datachanged"],"name":"result"}}],[11,"create_filter","","Creates topic filter.",248,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"},{"name":"t2"}],"output":{"name":"topicfilter"}}],[11,"fmt","","",249,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",249,{"inputs":[{"name":"self"}],"output":{"name":"reverseconfirmed"}}],[11,"eq","","",249,{"inputs":[{"name":"self"},{"name":"reverseconfirmed"}],"output":{"name":"bool"}}],[11,"ne","","",249,{"inputs":[{"name":"self"},{"name":"reverseconfirmed"}],"output":{"name":"bool"}}],[11,"default","","",249,{"inputs":[],"output":{"name":"self"}}],[11,"parse_log","","Parses log.",249,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"generics":["reverseconfirmed"],"name":"result"}}],[11,"create_filter","","Creates topic filter.",249,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"}],"output":{"name":"topicfilter"}}],[11,"fmt","","",250,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",250,{"inputs":[{"name":"self"}],"output":{"name":"reverseproposed"}}],[11,"eq","","",250,{"inputs":[{"name":"self"},{"name":"reverseproposed"}],"output":{"name":"bool"}}],[11,"ne","","",250,{"inputs":[{"name":"self"},{"name":"reverseproposed"}],"output":{"name":"bool"}}],[11,"default","","",250,{"inputs":[],"output":{"name":"self"}}],[11,"parse_log","","Parses log.",250,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"generics":["reverseproposed"],"name":"result"}}],[11,"create_filter","","Creates topic filter.",250,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"}],"output":{"name":"topicfilter"}}],[11,"fmt","","",251,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",251,{"inputs":[{"name":"self"}],"output":{"name":"transferred"}}],[11,"eq","","",251,{"inputs":[{"name":"self"},{"name":"transferred"}],"output":{"name":"bool"}}],[11,"ne","","",251,{"inputs":[{"name":"self"},{"name":"transferred"}],"output":{"name":"bool"}}],[11,"default","","",251,{"inputs":[],"output":{"name":"self"}}],[11,"parse_log","","Parses log.",251,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"generics":["transferred"],"name":"result"}}],[11,"create_filter","","Creates topic filter.",251,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"},{"name":"t2"}],"output":{"name":"topicfilter"}}],[11,"fmt","","",252,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",252,{"inputs":[{"name":"self"}],"output":{"name":"drained"}}],[11,"eq","","",252,{"inputs":[{"name":"self"},{"name":"drained"}],"output":{"name":"bool"}}],[11,"ne","","",252,{"inputs":[{"name":"self"},{"name":"drained"}],"output":{"name":"bool"}}],[11,"default","","",252,{"inputs":[],"output":{"name":"self"}}],[11,"parse_log","","Parses log.",252,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"generics":["drained"],"name":"result"}}],[11,"create_filter","","Creates topic filter.",252,{"inputs":[{"name":"self"}],"output":{"name":"topicfilter"}}],[11,"fmt","","",253,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",253,{"inputs":[{"name":"self"}],"output":{"name":"reserved"}}],[11,"eq","","",253,{"inputs":[{"name":"self"},{"name":"reserved"}],"output":{"name":"bool"}}],[11,"ne","","",253,{"inputs":[{"name":"self"},{"name":"reserved"}],"output":{"name":"bool"}}],[11,"default","","",253,{"inputs":[],"output":{"name":"self"}}],[11,"parse_log","","Parses log.",253,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"generics":["reserved"],"name":"result"}}],[11,"create_filter","","Creates topic filter.",253,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"}],"output":{"name":"topicfilter"}}],[11,"fmt","","",254,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",254,{"inputs":[{"name":"self"}],"output":{"name":"newowner"}}],[11,"eq","","",254,{"inputs":[{"name":"self"},{"name":"newowner"}],"output":{"name":"bool"}}],[11,"ne","","",254,{"inputs":[{"name":"self"},{"name":"newowner"}],"output":{"name":"bool"}}],[11,"default","","",254,{"inputs":[],"output":{"name":"self"}}],[11,"parse_log","","Parses log.",254,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"generics":["newowner"],"name":"result"}}],[11,"create_filter","","Creates topic filter.",254,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"}],"output":{"name":"topicfilter"}}],[11,"fmt","ethcore::client::registry::logs","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"reverseremoved"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"reverseremoved"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"reverseremoved"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"dropped"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"dropped"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"dropped"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"feechanged"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"feechanged"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"feechanged"}],"output":{"name":"bool"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"datachanged"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"datachanged"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"datachanged"}],"output":{"name":"bool"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"reverseconfirmed"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"reverseconfirmed"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"reverseconfirmed"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"reverseproposed"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"reverseproposed"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"reverseproposed"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"transferred"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"transferred"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"transferred"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"drained"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"drained"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"drained"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"reserved"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"reserved"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"reserved"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"newowner"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"newowner"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"newowner"}],"output":{"name":"bool"}}],[11,"fmt","ethcore::client::registry::functions","",255,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",255,{"inputs":[{"name":"self"}],"output":{"name":"setowner"}}],[11,"eq","","",255,{"inputs":[{"name":"self"},{"name":"setowner"}],"output":{"name":"bool"}}],[11,"ne","","",255,{"inputs":[{"name":"self"},{"name":"setowner"}],"output":{"name":"bool"}}],[11,"default","","",255,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",255,{"inputs":[{"name":"self"},{"name":"t0"}],"output":{"name":"bytes"}}],[11,"fmt","","",256,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",256,{"inputs":[{"name":"self"}],"output":{"name":"transfer"}}],[11,"eq","","",256,{"inputs":[{"name":"self"},{"name":"transfer"}],"output":{"name":"bool"}}],[11,"ne","","",256,{"inputs":[{"name":"self"},{"name":"transfer"}],"output":{"name":"bool"}}],[11,"default","","",256,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",256,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"}],"output":{"name":"bytes"}}],[11,"fmt","","",257,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",257,{"inputs":[{"name":"self"}],"output":{"name":"set"}}],[11,"eq","","",257,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"ne","","",257,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"default","","",257,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",257,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"},{"name":"t2"}],"output":{"name":"bytes"}}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",258,{"inputs":[{"name":"self"}],"output":{"name":"fee"}}],[11,"eq","","",258,{"inputs":[{"name":"self"},{"name":"fee"}],"output":{"name":"bool"}}],[11,"ne","","",258,{"inputs":[{"name":"self"},{"name":"fee"}],"output":{"name":"bool"}}],[11,"default","","",258,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",258,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"output","","",258,null],[11,"call","","",258,{"inputs":[{"name":"self"},{"name":"fn"}],"output":{"generics":["uint"],"name":"result"}}],[11,"fmt","","",259,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",259,{"inputs":[{"name":"self"}],"output":{"name":"getaddress"}}],[11,"eq","","",259,{"inputs":[{"name":"self"},{"name":"getaddress"}],"output":{"name":"bool"}}],[11,"ne","","",259,{"inputs":[{"name":"self"},{"name":"getaddress"}],"output":{"name":"bool"}}],[11,"default","","",259,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",259,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"}],"output":{"name":"bytes"}}],[11,"output","","",259,null],[11,"call","","",259,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"},{"name":"fn"}],"output":{"generics":["address"],"name":"result"}}],[11,"fmt","","",260,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",260,{"inputs":[{"name":"self"}],"output":{"name":"get"}}],[11,"eq","","",260,{"inputs":[{"name":"self"},{"name":"get"}],"output":{"name":"bool"}}],[11,"ne","","",260,{"inputs":[{"name":"self"},{"name":"get"}],"output":{"name":"bool"}}],[11,"default","","",260,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",260,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"}],"output":{"name":"bytes"}}],[11,"output","","",260,null],[11,"call","","",260,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"},{"name":"fn"}],"output":{"generics":["hash"],"name":"result"}}],[11,"fmt","","",261,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",261,{"inputs":[{"name":"self"}],"output":{"name":"proposereverse"}}],[11,"eq","","",261,{"inputs":[{"name":"self"},{"name":"proposereverse"}],"output":{"name":"bool"}}],[11,"ne","","",261,{"inputs":[{"name":"self"},{"name":"proposereverse"}],"output":{"name":"bool"}}],[11,"default","","",261,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",261,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"}],"output":{"name":"bytes"}}],[11,"fmt","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",262,{"inputs":[{"name":"self"}],"output":{"name":"owner"}}],[11,"eq","","",262,{"inputs":[{"name":"self"},{"name":"owner"}],"output":{"name":"bool"}}],[11,"ne","","",262,{"inputs":[{"name":"self"},{"name":"owner"}],"output":{"name":"bool"}}],[11,"default","","",262,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",262,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"output","","",262,null],[11,"call","","",262,{"inputs":[{"name":"self"},{"name":"fn"}],"output":{"generics":["address"],"name":"result"}}],[11,"fmt","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",263,{"inputs":[{"name":"self"}],"output":{"name":"setuint"}}],[11,"eq","","",263,{"inputs":[{"name":"self"},{"name":"setuint"}],"output":{"name":"bool"}}],[11,"ne","","",263,{"inputs":[{"name":"self"},{"name":"setuint"}],"output":{"name":"bool"}}],[11,"default","","",263,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",263,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"},{"name":"t2"}],"output":{"name":"bytes"}}],[11,"fmt","","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",264,{"inputs":[{"name":"self"}],"output":{"name":"reverse"}}],[11,"eq","","",264,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"ne","","",264,{"inputs":[{"name":"self"},{"name":"reverse"}],"output":{"name":"bool"}}],[11,"default","","",264,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",264,{"inputs":[{"name":"self"},{"name":"t0"}],"output":{"name":"bytes"}}],[11,"output","","",264,null],[11,"call","","",264,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"fn"}],"output":{"generics":["string"],"name":"result"}}],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",265,{"inputs":[{"name":"self"}],"output":{"name":"drop"}}],[11,"eq","","",265,{"inputs":[{"name":"self"},{"name":"drop"}],"output":{"name":"bool"}}],[11,"ne","","",265,{"inputs":[{"name":"self"},{"name":"drop"}],"output":{"name":"bool"}}],[11,"default","","",265,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",265,{"inputs":[{"name":"self"},{"name":"t0"}],"output":{"name":"bytes"}}],[11,"fmt","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",266,{"inputs":[{"name":"self"}],"output":{"name":"removereverse"}}],[11,"eq","","",266,{"inputs":[{"name":"self"},{"name":"removereverse"}],"output":{"name":"bool"}}],[11,"ne","","",266,{"inputs":[{"name":"self"},{"name":"removereverse"}],"output":{"name":"bool"}}],[11,"default","","",266,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",266,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"fmt","","",267,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",267,{"inputs":[{"name":"self"}],"output":{"name":"setaddress"}}],[11,"eq","","",267,{"inputs":[{"name":"self"},{"name":"setaddress"}],"output":{"name":"bool"}}],[11,"ne","","",267,{"inputs":[{"name":"self"},{"name":"setaddress"}],"output":{"name":"bool"}}],[11,"default","","",267,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",267,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"},{"name":"t2"}],"output":{"name":"bytes"}}],[11,"fmt","","",268,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",268,{"inputs":[{"name":"self"}],"output":{"name":"reserved"}}],[11,"eq","","",268,{"inputs":[{"name":"self"},{"name":"reserved"}],"output":{"name":"bool"}}],[11,"ne","","",268,{"inputs":[{"name":"self"},{"name":"reserved"}],"output":{"name":"bool"}}],[11,"default","","",268,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",268,{"inputs":[{"name":"self"},{"name":"t0"}],"output":{"name":"bytes"}}],[11,"output","","",268,null],[11,"call","","",268,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"fn"}],"output":{"generics":["bool"],"name":"result"}}],[11,"fmt","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",269,{"inputs":[{"name":"self"}],"output":{"name":"reserve"}}],[11,"eq","","",269,{"inputs":[{"name":"self"},{"name":"reserve"}],"output":{"name":"bool"}}],[11,"ne","","",269,{"inputs":[{"name":"self"},{"name":"reserve"}],"output":{"name":"bool"}}],[11,"default","","",269,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",269,{"inputs":[{"name":"self"},{"name":"t0"}],"output":{"name":"bytes"}}],[11,"fmt","","",270,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",270,{"inputs":[{"name":"self"}],"output":{"name":"setfee"}}],[11,"eq","","",270,{"inputs":[{"name":"self"},{"name":"setfee"}],"output":{"name":"bool"}}],[11,"ne","","",270,{"inputs":[{"name":"self"},{"name":"setfee"}],"output":{"name":"bool"}}],[11,"default","","",270,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",270,{"inputs":[{"name":"self"},{"name":"t0"}],"output":{"name":"bytes"}}],[11,"fmt","","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",271,{"inputs":[{"name":"self"}],"output":{"name":"confirmreverse"}}],[11,"eq","","",271,{"inputs":[{"name":"self"},{"name":"confirmreverse"}],"output":{"name":"bool"}}],[11,"ne","","",271,{"inputs":[{"name":"self"},{"name":"confirmreverse"}],"output":{"name":"bool"}}],[11,"default","","",271,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",271,{"inputs":[{"name":"self"},{"name":"t0"}],"output":{"name":"bytes"}}],[11,"fmt","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",272,{"inputs":[{"name":"self"}],"output":{"name":"getuint"}}],[11,"eq","","",272,{"inputs":[{"name":"self"},{"name":"getuint"}],"output":{"name":"bool"}}],[11,"ne","","",272,{"inputs":[{"name":"self"},{"name":"getuint"}],"output":{"name":"bool"}}],[11,"default","","",272,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",272,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"}],"output":{"name":"bytes"}}],[11,"output","","",272,null],[11,"call","","",272,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"},{"name":"fn"}],"output":{"generics":["uint"],"name":"result"}}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",273,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"eq","","",273,{"inputs":[{"name":"self"},{"name":"drain"}],"output":{"name":"bool"}}],[11,"ne","","",273,{"inputs":[{"name":"self"},{"name":"drain"}],"output":{"name":"bool"}}],[11,"default","","",273,{"inputs":[],"output":{"name":"self"}}],[11,"input","","",273,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"fmt","ethcore::client::registry","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",274,{"inputs":[],"output":{"name":"registry"}}],[11,"clone","","",274,{"inputs":[{"name":"self"}],"output":{"name":"registry"}}],[11,"eq","","",274,{"inputs":[{"name":"self"},{"name":"registry"}],"output":{"name":"bool"}}],[11,"fmt","","",275,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",275,{"inputs":[],"output":{"name":"registryevents"}}],[11,"clone","","",275,{"inputs":[{"name":"self"}],"output":{"name":"registryevents"}}],[11,"eq","","",275,{"inputs":[{"name":"self"},{"name":"registryevents"}],"output":{"name":"bool"}}],[11,"reverse_removed","","",275,{"inputs":[{"name":"self"}],"output":{"name":"reverseremoved"}}],[11,"dropped","","",275,{"inputs":[{"name":"self"}],"output":{"name":"dropped"}}],[11,"fee_changed","","",275,{"inputs":[{"name":"self"}],"output":{"name":"feechanged"}}],[11,"data_changed","","",275,{"inputs":[{"name":"self"}],"output":{"name":"datachanged"}}],[11,"reverse_confirmed","","",275,{"inputs":[{"name":"self"}],"output":{"name":"reverseconfirmed"}}],[11,"reverse_proposed","","",275,{"inputs":[{"name":"self"}],"output":{"name":"reverseproposed"}}],[11,"transferred","","",275,{"inputs":[{"name":"self"}],"output":{"name":"transferred"}}],[11,"drained","","",275,{"inputs":[{"name":"self"}],"output":{"name":"drained"}}],[11,"reserved","","",275,{"inputs":[{"name":"self"}],"output":{"name":"reserved"}}],[11,"new_owner","","",275,{"inputs":[{"name":"self"}],"output":{"name":"newowner"}}],[11,"events","","",274,{"inputs":[{"name":"self"}],"output":{"name":"registryevents"}}],[11,"fmt","","",276,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",276,{"inputs":[],"output":{"name":"registryfunctions"}}],[11,"clone","","",276,{"inputs":[{"name":"self"}],"output":{"name":"registryfunctions"}}],[11,"eq","","",276,{"inputs":[{"name":"self"},{"name":"registryfunctions"}],"output":{"name":"bool"}}],[11,"set_owner","","",276,{"inputs":[{"name":"self"}],"output":{"name":"setowner"}}],[11,"transfer","","",276,{"inputs":[{"name":"self"}],"output":{"name":"transfer"}}],[11,"set","","",276,{"inputs":[{"name":"self"}],"output":{"name":"set"}}],[11,"fee","","",276,{"inputs":[{"name":"self"}],"output":{"name":"fee"}}],[11,"get_address","","",276,{"inputs":[{"name":"self"}],"output":{"name":"getaddress"}}],[11,"get","","",276,{"inputs":[{"name":"self"}],"output":{"name":"get"}}],[11,"propose_reverse","","",276,{"inputs":[{"name":"self"}],"output":{"name":"proposereverse"}}],[11,"owner","","",276,{"inputs":[{"name":"self"}],"output":{"name":"owner"}}],[11,"set_uint","","",276,{"inputs":[{"name":"self"}],"output":{"name":"setuint"}}],[11,"reverse","","",276,{"inputs":[{"name":"self"}],"output":{"name":"reverse"}}],[11,"drop","","",276,{"inputs":[{"name":"self"}],"output":{"name":"drop"}}],[11,"remove_reverse","","",276,{"inputs":[{"name":"self"}],"output":{"name":"removereverse"}}],[11,"set_address","","",276,{"inputs":[{"name":"self"}],"output":{"name":"setaddress"}}],[11,"reserved","","",276,{"inputs":[{"name":"self"}],"output":{"name":"reserved"}}],[11,"reserve","","",276,{"inputs":[{"name":"self"}],"output":{"name":"reserve"}}],[11,"set_fee","","",276,{"inputs":[{"name":"self"}],"output":{"name":"setfee"}}],[11,"confirm_reverse","","",276,{"inputs":[{"name":"self"}],"output":{"name":"confirmreverse"}}],[11,"get_uint","","",276,{"inputs":[{"name":"self"}],"output":{"name":"getuint"}}],[11,"drain","","",276,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"functions","","",274,{"inputs":[{"name":"self"}],"output":{"name":"registryfunctions"}}],[11,"latest_nonce","ethcore::client","Get address nonce at the latest block's state.",62,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"u256"}}],[11,"latest_balance","","Get address balance at the latest block's state.",63,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"u256"}}],[11,"latest_code","","Get address code at the latest block's state.",78,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["bytes"],"name":"option"}}],[11,"latest_storage_at","","Get value of the storage at given position at the latest block's state.",78,{"inputs":[{"name":"self"},{"name":"address"},{"name":"h256"}],"output":{"name":"h256"}}],[11,"gas_price_corpus","","Sorted list of transaction gas prices from at least last sample_size blocks.",78,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u256"],"name":"corpus"}}],[11,"new_blocks","","fires when chain has new blocks.",61,{"inputs":[{"name":"self"},{"generics":["h256"],"name":"vec"},{"generics":["h256"],"name":"vec"},{"name":"chainroute"},{"generics":["h256"],"name":"vec"},{"generics":["bytes"],"name":"vec"},{"name":"duration"}],"output":null}],[11,"start","","fires when chain achieves active mode",61,{"inputs":[{"name":"self"}],"output":null}],[11,"stop","","fires when chain achieves passive mode",61,{"inputs":[{"name":"self"}],"output":null}],[11,"broadcast","","fires when chain broadcasts a message",61,{"inputs":[{"name":"self"},{"name":"chainmessagetype"}],"output":null}],[11,"transactions_received","","fires when new transactions are received from a peer",61,null],[11,"into_rlp","ethcore::snapshot","Encode the manifest data to rlp.",149,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from_rlp","","Try to restore manifest data from raw bytes, interpreted as RLP.",149,null],[11,"fmt","ethcore::trace::trace","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"callresult"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"callresult"}],"output":{"name":"bool"}}],[11,"ne","","",210,{"inputs":[{"name":"self"},{"name":"callresult"}],"output":{"name":"bool"}}],[11,"default","","",210,{"inputs":[],"output":{"name":"callresult"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"createresult"}}],[11,"eq","","",211,{"inputs":[{"name":"self"},{"name":"createresult"}],"output":{"name":"bool"}}],[11,"ne","","",211,{"inputs":[{"name":"self"},{"name":"createresult"}],"output":{"name":"bool"}}],[11,"bloom","","Returns bloom.",211,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"call"}}],[11,"eq","","",212,{"inputs":[{"name":"self"},{"name":"call"}],"output":{"name":"bool"}}],[11,"ne","","",212,{"inputs":[{"name":"self"},{"name":"call"}],"output":{"name":"bool"}}],[11,"from","","",212,{"inputs":[{"name":"actionparams"}],"output":{"name":"self"}}],[11,"bloom","","Returns call action bloom. The bloom contains from and to addresses.",212,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"create"}}],[11,"eq","","",213,{"inputs":[{"name":"self"},{"name":"create"}],"output":{"name":"bool"}}],[11,"ne","","",213,{"inputs":[{"name":"self"},{"name":"create"}],"output":{"name":"bool"}}],[11,"from","","",213,{"inputs":[{"name":"actionparams"}],"output":{"name":"self"}}],[11,"bloom","","Returns bloom create action bloom. The bloom contains only from address.",213,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"reward"}}],[11,"eq","","",214,{"inputs":[{"name":"self"},{"name":"reward"}],"output":{"name":"bool"}}],[11,"ne","","",214,{"inputs":[{"name":"self"},{"name":"reward"}],"output":{"name":"bool"}}],[11,"bloom","","Return reward action bloom.",214,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"rlp_append","","",214,{"inputs":[{"name":"self"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",214,{"inputs":[{"name":"rlp"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"suicide"}}],[11,"eq","","",215,{"inputs":[{"name":"self"},{"name":"suicide"}],"output":{"name":"bool"}}],[11,"ne","","",215,{"inputs":[{"name":"self"},{"name":"suicide"}],"output":{"name":"bool"}}],[11,"bloom","","Return suicide action bloom.",215,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"action"}}],[11,"eq","","",216,{"inputs":[{"name":"self"},{"name":"action"}],"output":{"name":"bool"}}],[11,"ne","","",216,{"inputs":[{"name":"self"},{"name":"action"}],"output":{"name":"bool"}}],[11,"rlp_append","","",216,{"inputs":[{"name":"self"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",216,{"inputs":[{"name":"rlp"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"bloom","","Returns action bloom.",216,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"res"}}],[11,"eq","","",217,{"inputs":[{"name":"self"},{"name":"res"}],"output":{"name":"bool"}}],[11,"ne","","",217,{"inputs":[{"name":"self"},{"name":"res"}],"output":{"name":"bool"}}],[11,"rlp_append","","",217,{"inputs":[{"name":"self"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",217,{"inputs":[{"name":"rlp"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"bloom","","Returns result bloom.",217,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"succeeded","","Did this call fail?",217,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[4,"CreateContractAddress"],[3,"ViewRlp"],[3,"BlockView"],[3,"BodyView"],[3,"HeaderView"],[3,"TransactionView"],[4,"Derivation"],[3,"IndexDerivation"],[4,"HardwareError"],[4,"KeyPath"],[3,"TransactionInfo"],[4,"Action"],[3,"Transaction"],[3,"AccountProviderSettings"],[4,"SignError"],[3,"DappId"],[3,"AccountProvider"],[3,"Block"],[3,"ExecutedBlock"],[8,"IsBlock"],[8,"Drain"],[3,"ClosedBlock"],[3,"LockedBlock"],[3,"OpenBlock"],[3,"SealedBlock"],[3,"BlockChainInfo"],[4,"BlockStatus"],[3,"QueueInfo"],[4,"VMType"],[3,"TraceFilter"],[3,"PruningInfo"],[3,"CallAnalytics"],[3,"EnvInfo"],[3,"BlockChainCacheSize"],[3,"ClientReport"],[3,"ClientConfig"],[3,"BlockChainConfig"],[3,"TestBlockChainClient"],[4,"Mode"],[4,"DatabaseCompactionProfile"],[4,"Error"],[4,"EvmTestError"],[4,"TransactResult"],[4,"ClientIoMessage"],[4,"EachBlockWith"],[4,"ChainRouteType"],[4,"ChainMessageType"],[4,"StateOrBlock"],[3,"Client"],[3,"EvmTestClient"],[3,"ReverseRemoved"],[3,"Dropped"],[3,"FeeChanged"],[3,"DataChanged"],[3,"ReverseConfirmed"],[3,"ReverseProposed"],[3,"Transferred"],[3,"Drained"],[3,"Reserved"],[3,"NewOwner"],[3,"ChainRoute"],[8,"ChainNotify"],[8,"Nonce"],[8,"Balance"],[8,"ChainInfo"],[8,"BlockInfo"],[8,"ReopenBlock"],[8,"PrepareOpenBlock"],[8,"CallContract"],[8,"TransactionInfo"],[8,"RegistryInfo"],[8,"ScheduleInfo"],[8,"ImportSealedBlock"],[8,"BroadcastProposalBlock"],[8,"ImportBlock"],[8,"StateClient"],[8,"Call"],[8,"EngineInfo"],[8,"BlockChainClient"],[8,"EngineClient"],[8,"ProvingBlockChainClient"],[8,"IoClient"],[4,"CacheUpdatePolicy"],[8,"Cache"],[8,"Key"],[8,"Writable"],[8,"Readable"],[3,"Header"],[3,"Body"],[3,"Block"],[4,"ForkChoice"],[4,"EngineError"],[4,"Seal"],[4,"Proof"],[4,"ConstructedVerifier"],[4,"EpochChange"],[3,"AuthorityRound"],[3,"BasicAuthority"],[3,"InstantSeal"],[3,"NullEngine"],[3,"Tendermint"],[4,"RewardKind"],[3,"Reward"],[3,"BlockReward"],[3,"BlockRewardFunctions"],[3,"BlockRewardContract"],[3,"Transition"],[3,"PendingTransition"],[8,"EpochVerifier"],[3,"NoOp"],[8,"StateDependentProof"],[8,"Engine"],[8,"EthEngine"],[3,"ImportError"],[3,"BlockImportError"],[3,"Error"],[4,"BlockError"],[4,"ImportErrorKind"],[4,"BlockImportErrorKind"],[4,"TransactionImportError"],[4,"ErrorKind"],[8,"ImportErrorResultExt"],[8,"BlockImportErrorResultExt"],[8,"ErrorResultExt"],[3,"Seal"],[3,"EthashParams"],[3,"Ethash"],[3,"Executed"],[4,"ExecutionError"],[4,"CallError"],[3,"TransactOptions"],[3,"Executive"],[3,"ExtendedHeader"],[3,"Header"],[3,"EthashExtensions"],[3,"AuxiliaryData"],[4,"AuxiliaryRequest"],[8,"WithRewards"],[3,"EthereumMachine"],[4,"PendingOrdering"],[3,"MinerOptions"],[3,"AuthoringParams"],[4,"Penalization"],[4,"PendingSet"],[3,"Miner"],[3,"NonceCache"],[3,"PoolClient"],[8,"MinerService"],[3,"PodState"],[3,"ManifestData"],[4,"RestorationStatus"],[3,"BasicAccount"],[3,"PowSnapshot"],[4,"Error"],[8,"SnapshotWriter"],[8,"SnapshotReader"],[3,"PackedWriter"],[3,"LooseWriter"],[3,"PackedReader"],[3,"LooseReader"],[3,"ServiceParams"],[8,"DatabaseRestore"],[3,"Service"],[3,"PoaSnapshot"],[3,"PowRebuilder"],[3,"Watcher"],[8,"SnapshotComponents"],[8,"Rebuilder"],[8,"SnapshotService"],[3,"Progress"],[3,"StateRebuilder"],[4,"OptimizeFor"],[3,"Genesis"],[3,"Spec"],[3,"SpecHardcodedSync"],[3,"SpecParams"],[3,"CommonParams"],[3,"Substate"],[3,"ApplyOutcome"],[4,"ProvedExecution"],[4,"CleanupMode"],[3,"Account"],[3,"Basic"],[8,"Backend"],[3,"ProofCheck"],[3,"Proving"],[8,"StateInfo"],[3,"State"],[3,"StateDB"],[3,"Config"],[3,"ImportRequest"],[3,"LocalizedTrace"],[3,"VMTrace"],[3,"VMOperation"],[3,"VMExecutedOperation"],[3,"MemoryDiff"],[3,"StorageDiff"],[3,"FlatTrace"],[3,"Filter"],[4,"Tracing"],[4,"TraceError"],[4,"RewardType"],[3,"TraceDB"],[3,"ExecutiveTracer"],[3,"ExecutiveVMTracer"],[3,"NoopTracer"],[3,"NoopVMTracer"],[3,"AddressesFilter"],[3,"FlatTransactionTraces"],[3,"FlatBlockTraces"],[3,"CallResult"],[3,"CreateResult"],[3,"Call"],[3,"Create"],[3,"Reward"],[3,"Suicide"],[4,"Action"],[4,"Res"],[8,"Tracer"],[8,"VMTracer"],[8,"DatabaseExtras"],[8,"Database"],[4,"VerifierType"],[3,"PreverifiedBlock"],[3,"FullFamilyParams"],[8,"Verifier"],[3,"Config"],[3,"VerifierSettings"],[4,"Status"],[3,"Blocks"],[3,"Unverified"],[3,"Headers"],[8,"BlockLike"],[8,"Kind"],[3,"Verifying"],[3,"VerificationQueue"],[3,"CanonVerifier"],[3,"NoopVerifier"],[6,"BlockNumber"],[3,"TestNotify"],[8,"BlockChainDB"],[8,"BlockChainDBHandler"],[3,"Signature"],[3,"HardwareWalletManager"],[3,"KeyFile"],[3,"ReverseRemoved"],[3,"Dropped"],[3,"FeeChanged"],[3,"DataChanged"],[3,"ReverseConfirmed"],[3,"ReverseProposed"],[3,"Transferred"],[3,"Drained"],[3,"Reserved"],[3,"NewOwner"],[3,"SetOwner"],[3,"Transfer"],[3,"Set"],[3,"Fee"],[3,"GetAddress"],[3,"Get"],[3,"ProposeReverse"],[3,"Owner"],[3,"SetUint"],[3,"Reverse"],[3,"Drop"],[3,"RemoveReverse"],[3,"SetAddress"],[3,"Reserved"],[3,"Reserve"],[3,"SetFee"],[3,"ConfirmReverse"],[3,"GetUint"],[3,"Drain"],[3,"Registry"],[3,"RegistryEvents"],[3,"RegistryFunctions"]]};
searchIndex["ethcore_bloom_journal"] = {"doc":"","items":[[3,"Bloom","ethcore_bloom_journal","Bloom filter structure",null,null],[3,"BloomJournal","","Bloom journal Returns the tuple of (bloom part index, bloom part value) where each one is representing an index of bloom parts that was updated since the last drain",null,null],[12,"hash_functions","","",0,null],[12,"entries","","",0,null],[11,"new","","Create a new bloom filter structure. bitmap_size is the size in bytes (not bits) that will be allocated in memory items_count is an estimation of the maximum number of items to store.",1,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"bloom"}}],[11,"from_parts","","Initializes bloom filter from saved state",1,null],[11,"new_for_fp_rate","","Create a new bloom filter structure. items_count is an estimation of the maximum number of items to store. fp_p is the wanted rate of false positives, in ]0.0, 1.0[",1,{"inputs":[{"name":"usize"},{"name":"f64"}],"output":{"name":"bloom"}}],[11,"compute_bitmap_size","","Compute a recommended bitmap size for items_count items and a fp_p rate of false positives. fp_p obviously has to be within the ]0.0, 1.0[ range.",1,{"inputs":[{"name":"usize"},{"name":"f64"}],"output":{"name":"usize"}}],[11,"set","","Records the presence of an item.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","Check if an item is present in the set. There can be false positives, but no false negatives.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"number_of_bits","","Return the number of bits in the filter",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"number_of_hash_functions","","Return the number of hash functions used for `check` and `set`",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"drain_journal","","Drains the bloom journal returning the updated bloom part",1,{"inputs":[{"name":"self"}],"output":{"name":"bloomjournal"}}],[11,"saturation","","Returns the ratio of set bits in the bloom filter to the total bits",1,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}]],"paths":[[3,"BloomJournal"],[3,"Bloom"]]};
searchIndex["ethcore_io"] = {"doc":"General IO module.","items":[[3,"IoContext","ethcore_io","IO access point. This is passed to all IO handlers and provides an interface to the IO subsystem.",null,null],[3,"IoService","","General IO Service. Starts an event loop and dispatches IO requests. 'Message' is a notification message type",null,null],[3,"IoChannel","","Allows sending messages into the event loop. All the IO handlers will get the message in the `message` callback.",null,null],[4,"IoError","","IO Error",null,null],[13,"StdIo","","Error concerning the Rust standard library's IO subsystem.",0,null],[11,"register_timer","","Register a new recurring IO timer. 'IoHandler::timeout' will be called with the token.",1,{"inputs":[{"name":"self"},{"name":"timertoken"},{"name":"duration"}],"output":{"generics":["ioerror"],"name":"result"}}],[11,"register_timer_once","","Register a new IO timer once. 'IoHandler::timeout' will be called with the token.",1,{"inputs":[{"name":"self"},{"name":"timertoken"},{"name":"duration"}],"output":{"generics":["ioerror"],"name":"result"}}],[11,"clear_timer","","Delete a timer.",1,{"inputs":[{"name":"self"},{"name":"timertoken"}],"output":{"generics":["ioerror"],"name":"result"}}],[11,"message","","Broadcast a message to other IO clients",1,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"generics":["ioerror"],"name":"result"}}],[11,"channel","","Get message channel",1,{"inputs":[{"name":"self"}],"output":{"name":"iochannel"}}],[11,"unregister_handler","","Unregister current IO handler.",1,{"inputs":[{"name":"self"}],"output":{"generics":["ioerror"],"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iochannel"}}],[11,"send","","Send a message through the channel",2,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"generics":["ioerror"],"name":"result"}}],[11,"send_sync","","Send a message through the channel and handle it synchronously",2,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"generics":["ioerror"],"name":"result"}}],[11,"disconnected","","Create a new channel disconnected from an event loop.",2,{"inputs":[],"output":{"name":"iochannel"}}],[11,"start","","Starts IO event loop",3,{"inputs":[],"output":{"generics":["ioservice","ioerror"],"name":"result"}}],[11,"stop","","Stops the IO service.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"register_handler","","Register an IO handler with the event loop.",3,{"inputs":[{"name":"self"},{"generics":["iohandler"],"name":"arc"}],"output":{"generics":["ioerror"],"name":"result"}}],[11,"send_message","","Send a message over the network. Normaly `HostIo::send` should be used. This can be used from non-io threads.",3,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"generics":["ioerror"],"name":"result"}}],[11,"channel","","Create a new message channel",3,{"inputs":[{"name":"self"}],"output":{"name":"iochannel"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[6,"TimerToken","","Timer ID",null,null],[17,"LOCAL_STACK_SIZE","","Stack size Should be modified if it is changed in Rust since it is no way to know or get it",null,null],[17,"TOKENS_PER_HANDLER","","Maximum number of tokens a handler can use",null,null],[8,"IoHandler","","Generic IO handler. All the handler function are called from within IO event loop. `Message` type is used as notification data",null,null],[11,"initialize","","Initialize the handler",4,{"inputs":[{"name":"self"},{"name":"iocontext"}],"output":null}],[11,"timeout","","Timer function called after a timeout created with `HandlerIo::timeout`.",4,{"inputs":[{"name":"self"},{"name":"iocontext"},{"name":"timertoken"}],"output":null}],[11,"message","","Called when a broadcasted message is received. The message can only be sent from a different IO handler.",4,{"inputs":[{"name":"self"},{"name":"iocontext"},{"name":"message"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"ioerror"}}]],"paths":[[4,"IoError"],[3,"IoContext"],[3,"IoChannel"],[3,"IoService"],[8,"IoHandler"]]};
searchIndex["ethcore_logger"] = {"doc":"Logger for parity executables","items":[[3,"RotatingLogger","ethcore_logger","Logger implementation that keeps up to `LOG_SIZE` log elements.",null,null],[3,"Config","","",null,null],[12,"mode","","",0,null],[12,"color","","",0,null],[12,"file","","",0,null],[5,"init_log","","Intialize log with default settings",null,{"inputs":[],"output":null}],[5,"setup_log","","Sets up the logger",null,{"inputs":[{"name":"config"}],"output":{"generics":["arc","string"],"name":"result"}}],[11,"new","","Creates new `RotatingLogger` with given levels. It does not enforce levels - it's just read only.",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"append","","Append new log entry",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"levels","","Return levels",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"logs","","Return logs",1,{"inputs":[{"name":"self"}],"output":{"generics":["arrayvec"],"name":"rwlockreadguard"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}]],"paths":[[3,"Config"],[3,"RotatingLogger"]]};
searchIndex["ethcore_miner"] = {"doc":"Miner module Keeps track of transactions and mined block.","items":[[0,"external","ethcore_miner","External Miner hashrate tracker.",null,null],[3,"ExternalMiner","ethcore_miner::external","External Miner.",null,null],[8,"ExternalMinerService","","External miner interface.",null,null],[10,"submit_hashrate","","Submit hashrate for given miner.",0,{"inputs":[{"name":"self"},{"name":"u256"},{"name":"h256"}],"output":null}],[10,"hashrate","","Total hashrate.",0,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates new external miner with prefilled hashrates.",1,{"inputs":[{"generics":["mutex"],"name":"arc"}],"output":{"name":"self"}}],[11,"submit_hashrate","","",1,{"inputs":[{"name":"self"},{"name":"u256"},{"name":"h256"}],"output":null}],[11,"hashrate","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[0,"gas_pricer","ethcore_miner","Auto-updates minimal gas price requirement.",null,null],[4,"GasPricer","ethcore_miner::gas_pricer","Struct to look after updating the acceptable gas price of a miner.",null,null],[13,"Fixed","","A fixed gas price in terms of Wei - always the argument given.",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"gaspricer"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"gaspricer"}],"output":{"name":"bool"}}],[11,"new_fixed","","Create a new Fixed `GasPricer`.",2,{"inputs":[{"name":"u256"}],"output":{"name":"gaspricer"}}],[11,"recalibrate","","Recalibrate current gas price.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[0,"pool","ethcore_miner","Transaction Pool",null,null],[8,"PoolVerifiedTransaction","ethcore_miner::pool","Already verified transaction that can be safely queued.",null,null],[16,"Hash","","Transaction hash type.",3,null],[16,"Sender","","Transaction sender type.",3,null],[10,"hash","","Transaction hash",3,null],[10,"mem_usage","","Memory usage",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"sender","","Transaction sender",3,null],[3,"Options","","Transaction Pool options.",null,null],[12,"max_count","","Maximal number of transactions in the pool.",4,null],[12,"max_per_sender","","Maximal number of transactions from single sender.",4,null],[12,"max_mem_usage","","Maximal memory usage.",4,null],[3,"TransactionQueue","","Ethereum Transaction Queue",null,null],[3,"QueueStatus","","Transaction queue status.",null,null],[12,"options","","Verifier options.",5,null],[12,"status","","Current status of the transaction pool.",5,null],[12,"limits","","Current limits of the transaction pool.",5,null],[3,"PendingSettings","","Pending set query settings",null,null],[12,"block_number","","Current block number (affects readiness of some transactions).",6,null],[12,"current_timestamp","","Current timestamp (affects readiness of some transactions).",6,null],[12,"nonce_cap","","Nonce cap (for dust protection; EIP-168)",6,null],[12,"max_len","","Maximal number of transactions in pending the set.",6,null],[12,"ordering","","Ordering of transactions.",6,null],[3,"VerifiedTransaction","","Verified transaction stored in the pool.",null,null],[4,"PrioritizationStrategy","","How to prioritize transactions in the pool",null,null],[13,"GasPriceOnly","","Simple gas-price based prioritization.",7,null],[4,"PendingOrdering","","Transaction ordering when requesting pending set.",null,null],[13,"Priority","","Get pending transactions ordered by their priority (potentially expensive)",8,null],[13,"Unordered","","Get pending transactions without any care of particular ordering (cheaper).",8,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create new queue with given pool limits and initial verification options.",9,{"inputs":[{"name":"options"},{"name":"options"},{"name":"prioritizationstrategy"}],"output":{"name":"self"}}],[11,"set_verifier_options","","Update verification options",9,{"inputs":[{"name":"self"},{"name":"options"}],"output":null}],[11,"import","","Import a set of transactions to the pool.",9,{"inputs":[{"name":"self"},{"name":"c"},{"generics":["transaction"],"name":"vec"}],"output":{"generics":["result"],"name":"vec"}}],[11,"all_transactions","","Returns all transactions in the queue without explicit ordering.",9,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"vec"}}],[11,"pending_hashes","","Computes unordered set of pending hashes.",9,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["h256"],"name":"btreeset"}}],[11,"pending","","Returns current pending transactions ordered by priority.",9,{"inputs":[{"name":"self"},{"name":"c"},{"name":"pendingsettings"}],"output":{"generics":["arc"],"name":"vec"}}],[11,"collect_pending","","Collect pending transactions.",9,{"inputs":[{"name":"self"},{"name":"c"},{"name":"u64"},{"name":"u64"},{"generics":["u256"],"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"cull","","Culls all stalled transactions from the pool.",9,{"inputs":[{"name":"self"},{"name":"c"}],"output":null}],[11,"next_nonce","","Returns next valid nonce for given sender or `None` if there are no pending transactions from that sender.",9,{"inputs":[{"name":"self"},{"name":"c"},{"name":"address"}],"output":{"generics":["u256"],"name":"option"}}],[11,"find","","Retrieve a transaction from the pool.",9,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["arc"],"name":"option"}}],[11,"remove","","Remove a set of transactions from the pool.",9,{"inputs":[{"name":"self"},{"name":"t"},{"name":"bool"}],"output":{"generics":["option"],"name":"vec"}}],[11,"clear","","Clear the entire pool.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"penalize","","Penalize given senders.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"current_worst_gas_price","","Returns gas price of currently the worst transaction in the pool.",9,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"status","","Returns a status of the queue.",9,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"has_local_pending_transactions","","Check if there are any local transactions in the pool.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"local_transactions","","Returns status of recently seen local transactions.",9,{"inputs":[{"name":"self"}],"output":{"generics":["h256","status"],"name":"btreemap"}}],[11,"add_listener","","Add a callback to be notified about all transactions entering the pool.",9,{"inputs":[{"name":"self"},{"generics":["fn"],"name":"box"}],"output":null}],[0,"client","","Transaction Pool state client.",null,null],[3,"AccountDetails","ethcore_miner::pool::client","Account Details",null,null],[12,"nonce","","Current account nonce",10,null],[12,"balance","","Current account balance",10,null],[12,"is_local","","Is this account a local account?",10,null],[4,"TransactionType","","Transaction type",null,null],[13,"Regular","","Regular transaction",11,null],[13,"Service","","Service transaction (allowed by a contract to have gas_price=0)",11,null],[8,"Client","","Verification client.",null,null],[10,"transaction_already_included","","Is transaction with given hash already in the blockchain?",12,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[10,"verify_transaction","","Structurarily verify given transaction.",12,{"inputs":[{"name":"self"},{"name":"unverifiedtransaction"}],"output":{"generics":["signedtransaction","error"],"name":"result"}}],[10,"required_gas","","Estimate minimal gas requirurement for given transaction.",12,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"u256"}}],[10,"account_details","","Fetch account details for given sender.",12,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"accountdetails"}}],[10,"transaction_type","","Classify transaction (check if transaction is filtered by some contracts).",12,{"inputs":[{"name":"self"},{"name":"signedtransaction"}],"output":{"name":"transactiontype"}}],[10,"decode_transaction","","Performs pre-validation of RLP decoded transaction",12,null],[8,"NonceClient","","State nonce client",null,null],[10,"account_nonce","","Fetch only account nonce for given sender.",13,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"u256"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"accountdetails"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"transactiontype"}],"output":{"name":"bool"}}],[0,"local_transactions","ethcore_miner::pool","Local Transactions List.",null,null],[3,"LocalTransactionsList","ethcore_miner::pool::local_transactions","Keeps track of local transactions that are in the queue or were mined/dropped recently.",null,null],[4,"Status","","Status of local transaction. Can indicate that the transaction is currently part of the queue (`Pending/Future`) or gives a reason why the transaction was removed.",null,null],[13,"Pending","","The transaction is currently in the transaction queue.",14,null],[13,"Mined","","Transaction is already mined.",14,null],[13,"Dropped","","Transaction is dropped because of limit",14,null],[13,"Replaced","","Replaced because of higher gas price of another transaction.",14,null],[12,"old","ethcore_miner::pool::local_transactions::Status","Replaced transaction",14,null],[12,"new","","Transaction that replaced this one.",14,null],[13,"Rejected","ethcore_miner::pool::local_transactions","Transaction was never accepted to the queue. It means that it was too cheap to replace any transaction already in the pool.",14,null],[13,"Invalid","","Transaction is invalid.",14,null],[13,"Canceled","","Transaction was canceled.",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a new list of local transactions.",15,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"contains","","Returns true if the transaction is already in local transactions.",15,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"all_transactions","","Return a map of all currently stored transactions.",15,{"inputs":[{"name":"self"}],"output":{"name":"linkedhashmap"}}],[11,"has_pending","","Returns true if there are pending local transactions.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"added","","",15,{"inputs":[{"name":"self"},{"name":"arc"},{"generics":["arc"],"name":"option"}],"output":null}],[11,"rejected","","",15,{"inputs":[{"name":"self"},{"name":"arc"},{"name":"errorkind"}],"output":null}],[11,"dropped","","",15,{"inputs":[{"name":"self"},{"name":"arc"},{"generics":["transaction"],"name":"option"}],"output":null}],[11,"invalid","","",15,{"inputs":[{"name":"self"},{"name":"arc"}],"output":null}],[11,"canceled","","",15,{"inputs":[{"name":"self"},{"name":"arc"}],"output":null}],[11,"mined","","The transaction has been mined.",15,{"inputs":[{"name":"self"},{"name":"arc"}],"output":null}],[0,"verifier","ethcore_miner::pool","Transaction Verifier",null,null],[3,"Options","ethcore_miner::pool::verifier","Verification options.",null,null],[12,"minimal_gas_price","","Minimal allowed gas price.",16,null],[12,"block_gas_limit","","Current block gas limit.",16,null],[12,"tx_gas_limit","","Maximal gas limit for a single transaction.",16,null],[3,"Verifier","","Transaction verifier.",null,null],[4,"Transaction","","Transaction to verify.",null,null],[13,"Unverified","","Fresh, never verified transaction.",17,null],[13,"Retracted","","Transaction from retracted block.",17,null],[13,"Local","","Locally signed or retracted transaction.",17,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"bool"}}],[11,"hash","","Return transaction hash",17,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"gas_price","","Return transaction gas price",17,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates new transaction verfier with specified options.",18,{"inputs":[{"name":"c"},{"name":"options"},{"generics":["atomicusize"],"name":"arc"},{"name":"option"}],"output":{"name":"self"}}],[11,"verify_transaction","","",18,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"result"}}],[11,"fmt","ethcore_miner::pool","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"prioritizationstrategy"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"prioritizationstrategy"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"pendingordering"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"pendingordering"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"pendingsettings"}}],[11,"all_prioritized","","Get all transactions (no cap or len limit) prioritized.",6,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"self"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"verifiedtransaction"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"verifiedtransaction"}],"output":{"name":"bool"}}],[11,"from_pending_block_transaction","","Create `VerifiedTransaction` directly from `SignedTransaction`.",19,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"self"}}],[11,"signed","","Gets wrapped `SignedTransaction`",19,{"inputs":[{"name":"self"}],"output":{"name":"signedtransaction"}}],[11,"pending","","Gets wrapped `PendingTransaction`",19,{"inputs":[{"name":"self"}],"output":{"name":"pendingtransaction"}}],[11,"hash","","",19,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"mem_usage","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"sender","","",19,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"options"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[8,"ExternalMinerService"],[3,"ExternalMiner"],[4,"GasPricer"],[8,"PoolVerifiedTransaction"],[3,"Options"],[3,"QueueStatus"],[3,"PendingSettings"],[4,"PrioritizationStrategy"],[4,"PendingOrdering"],[3,"TransactionQueue"],[3,"AccountDetails"],[4,"TransactionType"],[8,"Client"],[8,"NonceClient"],[4,"Status"],[3,"LocalTransactionsList"],[3,"Options"],[4,"Transaction"],[3,"Verifier"],[3,"VerifiedTransaction"]]};
searchIndex["ethcore_transaction"] = {"doc":"Ethereum Transactions","items":[[3,"Transaction","ethcore_transaction","A set of information describing an externally-originating message call or contract creation operation.",null,null],[12,"nonce","","Nonce.",0,null],[12,"gas_price","","Gas price.",0,null],[12,"gas","","Gas paid up front for transaction execution.",0,null],[12,"action","","Action, can be either call or contract create.",0,null],[12,"value","","Transfered value.",0,null],[12,"data","","Transaction data.",0,null],[3,"UnverifiedTransaction","","Signed transaction information without verified signature.",null,null],[3,"SignedTransaction","","A `UnverifiedTransaction` with successfully recovered `sender`.",null,null],[3,"LocalizedTransaction","","Signed Transaction that is a part of canon blockchain.",null,null],[12,"signed","","Signed part.",1,null],[12,"block_number","","Block number.",1,null],[12,"block_hash","","Block hash.",1,null],[12,"transaction_index","","Transaction index within block.",1,null],[12,"cached_sender","","Cached sender",1,null],[3,"PendingTransaction","","Queued transaction with additional information.",null,null],[12,"transaction","","Signed transaction data.",2,null],[12,"condition","","To be activated at this condition. `None` for immediately.",2,null],[4,"Error","","Errors concerning transaction processing.",null,null],[13,"AlreadyImported","","Transaction is already imported to the queue",3,null],[13,"Old","","Transaction is not valid anymore (state already has higher nonce)",3,null],[13,"TooCheapToReplace","","Transaction has too low fee (there is already a transaction with the same sender-nonce but higher gas price)",3,null],[13,"LimitReached","","Transaction was not imported to the queue because limit has been reached.",3,null],[13,"InsufficientGasPrice","","Transaction's gas price is below threshold.",3,null],[12,"minimal","ethcore_transaction::Error","Minimal expected gas price",3,null],[12,"got","","Transaction gas price",3,null],[13,"InsufficientGas","ethcore_transaction","Transaction's gas is below currently set minimal gas requirement.",3,null],[12,"minimal","ethcore_transaction::Error","Minimal expected gas",3,null],[12,"got","","Transaction gas",3,null],[13,"InsufficientBalance","ethcore_transaction","Sender doesn't have enough funds to pay for this transaction",3,null],[12,"balance","ethcore_transaction::Error","Senders balance",3,null],[12,"cost","","Transaction cost",3,null],[13,"GasLimitExceeded","ethcore_transaction","Transactions gas is higher then current gas limit",3,null],[12,"limit","ethcore_transaction::Error","Current gas limit",3,null],[12,"got","","Declared transaction gas",3,null],[13,"InvalidGasLimit","ethcore_transaction","Transaction's gas limit (aka gas) is invalid.",3,null],[13,"SenderBanned","","Transaction sender is banned.",3,null],[13,"RecipientBanned","","Transaction receipient is banned.",3,null],[13,"CodeBanned","","Contract creation code is banned.",3,null],[13,"InvalidChainId","","Invalid chain ID given.",3,null],[13,"NotAllowed","","Not enough permissions given by permission contract.",3,null],[13,"InvalidSignature","","Signature error",3,null],[13,"TooBig","","Transaction too big",3,null],[13,"InvalidRlp","","Invalid RLP encoding",3,null],[4,"Action","","Transaction action type.",null,null],[13,"Create","","Create creates new contract.",4,null],[13,"Call","","Calls contract at given address. In the case of a transfer, this is the receiver's address.'",4,null],[4,"Condition","","Transaction activation condition.",null,null],[13,"Number","","Valid at this block number or later.",5,null],[13,"Timestamp","","Valid at this unix time or later.",5,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"decodererror"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"action"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"action"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"action"}],"output":{"name":"bool"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"action"}}],[11,"decode","","",4,{"inputs":[{"name":"rlp"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"rlp_append","","",4,{"inputs":[{"name":"self"},{"name":"rlpstream"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"condition"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"condition"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"transaction"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"transaction"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"rlp_append_unsigned_transaction","","Append object with a without signature into RLP stream",0,{"inputs":[{"name":"self"},{"name":"rlpstream"},{"generics":["u64"],"name":"option"}],"output":null}],[11,"heap_size_of_children","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from","","",6,{"inputs":[{"name":"transaction"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"transaction"}],"output":{"name":"self"}}],[11,"hash","","The message hash of the transaction.",0,{"inputs":[{"name":"self"},{"generics":["u64"],"name":"option"}],"output":{"name":"h256"}}],[11,"sign","","Signs the transaction as coming from `sender`.",0,{"inputs":[{"name":"self"},{"name":"secret"},{"generics":["u64"],"name":"option"}],"output":{"name":"signedtransaction"}}],[11,"with_signature","","Signs the transaction with signature.",0,{"inputs":[{"name":"self"},{"name":"signature"},{"generics":["u64"],"name":"option"}],"output":{"name":"unverifiedtransaction"}}],[11,"fake_sign","","Specify the sender; this won't survive the serialize/deserialize process, but can be cloned.",0,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"signedtransaction"}}],[11,"null_sign","","Add EIP-86 compatible empty signature.",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"signedtransaction"}}],[11,"gas_required_for","","Get the transaction cost in gas for the given params.",0,null],[11,"gas_required","","Get the transaction cost in gas for this transaction.",0,{"inputs":[{"name":"self"},{"name":"schedule"}],"output":{"name":"u64"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unverifiedtransaction"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"unverifiedtransaction"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"unverifiedtransaction"}],"output":{"name":"bool"}}],[11,"deref","","",7,null],[11,"decode","","",7,{"inputs":[{"name":"rlp"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"rlp_append","","",7,{"inputs":[{"name":"self"},{"name":"rlpstream"}],"output":null}],[11,"is_unsigned","","Checks is signature is empty.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_unsigned","","Reference to unsigned part of this transaction.",7,{"inputs":[{"name":"self"}],"output":{"name":"transaction"}}],[11,"standard_v","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"original_v","","The `v` value that appears in the RLP.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"chain_id","","The chain ID, or `None` if this is a global transaction.",7,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"signature","","Construct a signature object from the sig.",7,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"check_low_s","","Checks whether the signature has a low 's' value.",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"hash","","Get the hash of this transaction (keccak of the RLP).",7,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"recover_public","","Recovers the public key of the sender.",7,{"inputs":[{"name":"self"}],"output":{"generics":["public","error"],"name":"result"}}],[11,"verify_basic","","Verify basic signature params. Does not attempt sender recovery.",7,{"inputs":[{"name":"self"},{"name":"bool"},{"generics":["u64"],"name":"option"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"signedtransaction"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"signedtransaction"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"signedtransaction"}],"output":{"name":"bool"}}],[11,"heap_size_of_children","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rlp_append","","",6,{"inputs":[{"name":"self"},{"name":"rlpstream"}],"output":null}],[11,"deref","","",6,null],[11,"from","","",7,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"self"}}],[11,"new","","Try to verify transaction and recover sender.",6,{"inputs":[{"name":"unverifiedtransaction"}],"output":{"generics":["error"],"name":"result"}}],[11,"sender","","Returns transaction sender.",6,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"public_key","","Returns a public key of the sender.",6,{"inputs":[{"name":"self"}],"output":{"generics":["public"],"name":"option"}}],[11,"is_unsigned","","Checks is signature is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deconstruct","","Deconstructs this transaction back into `UnverifiedTransaction`",6,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"localizedtransaction"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"localizedtransaction"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"localizedtransaction"}],"output":{"name":"bool"}}],[11,"sender","","Returns transaction sender. Panics if `LocalizedTransaction` is constructed using invalid `UnverifiedTransaction`.",1,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"deref","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"pendingtransaction"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"pendingtransaction"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"pendingtransaction"}],"output":{"name":"bool"}}],[11,"new","","Create a new pending transaction from signed transaction.",2,{"inputs":[{"name":"signedtransaction"},{"generics":["condition"],"name":"option"}],"output":{"name":"self"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"signedtransaction"}}],[11,"from","","",2,{"inputs":[{"name":"signedtransaction"}],"output":{"name":"self"}}],[0,"signature","","Replay protection logic for v part of transaction's signature",null,null],[5,"add_chain_replay_protection","ethcore_transaction::signature","Adds chain id into v",null,{"inputs":[{"name":"u64"},{"generics":["u64"],"name":"option"}],"output":{"name":"u64"}}],[5,"check_replay_protection","","Returns refined v 0 if `v` would have been 27 under \"Electrum\" notation, 1 if 28 or 4 if invalid.",null,{"inputs":[{"name":"u64"}],"output":{"name":"u8"}}],[17,"UNSIGNED_SENDER","ethcore_transaction","Fake address for unsigned transactions as defined by EIP-86.",null,null],[17,"SYSTEM_ADDRESS","","System sender address for internal state updates.",null,null]],"paths":[[3,"Transaction"],[3,"LocalizedTransaction"],[3,"PendingTransaction"],[4,"Error"],[4,"Action"],[4,"Condition"],[3,"SignedTransaction"],[3,"UnverifiedTransaction"]]};
searchIndex["ethereum_types"] = {"doc":"","items":[[3,"Bloom","ethereum_types","Unformatted binary data of fixed length.",null,null],[12,"0","","",0,null],[3,"BloomRef","","",null,null],[4,"BloomInput","","",null,null],[13,"Raw","","",1,null],[13,"Hash","","",1,null],[5,"clean_0x","","Return `s` without the `0x` at the beginning of it, if any.",null,{"inputs":[{"name":"str"}],"output":{"name":"str"}}],[3,"U64","","Little-endian large integer type",null,null],[12,"0","","",2,null],[3,"U128","","Little-endian large integer type",null,null],[12,"0","","",3,null],[3,"U256","","Little-endian large integer type",null,null],[12,"0","","",4,null],[3,"U512","","Little-endian large integer type",null,null],[12,"0","","",5,null],[3,"U1024","","Little-endian large integer type",null,null],[12,"0","","",6,null],[3,"H32","","Unformatted binary data of fixed length.",null,null],[12,"0","","",7,null],[3,"H64","","Unformatted binary data of fixed length.",null,null],[12,"0","","",8,null],[3,"H128","","Unformatted binary data of fixed length.",null,null],[12,"0","","",9,null],[3,"H160","","Unformatted binary data of fixed length.",null,null],[12,"0","","",10,null],[3,"H256","","Unformatted binary data of fixed length.",null,null],[12,"0","","",11,null],[3,"H264","","Unformatted binary data of fixed length.",null,null],[12,"0","","",12,null],[3,"H512","","Unformatted binary data of fixed length.",null,null],[12,"0","","",13,null],[3,"H520","","Unformatted binary data of fixed length.",null,null],[12,"0","","",14,null],[3,"H1024","","Unformatted binary data of fixed length.",null,null],[12,"0","","",15,null],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",10,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",12,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from","","",7,null],[11,"deref","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"as_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"deref_mut","","",7,null],[11,"new","","Create a new, zero-initialised, instance.",7,{"inputs":[],"output":{"name":"h32"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",7,{"inputs":[],"output":{"name":"h32"}}],[11,"len","","Get the size of this object in bytes.",7,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",7,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",7,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",7,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"random","","Create a new, cryptographically random, instance.",7,{"inputs":[],"output":{"name":"h32"}}],[11,"randomize","","Assign self have a cryptographically random value.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"h32"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"bitor","","",7,null],[11,"bitand","","",7,null],[11,"bitxor","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"u64"}],"output":{"name":"h32"}}],[11,"from","","",7,null],[11,"hex","","Get a hex representation.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rand","","",7,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"generics":["h32","fromhexerror"],"name":"result"}}],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"h32"}}],[11,"heap_size_of_children","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from","","",8,null],[11,"deref","","",8,null],[11,"as_ref","","",8,null],[11,"as_mut","","",8,null],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h64"}}],[11,"deref_mut","","",8,null],[11,"new","","Create a new, zero-initialised, instance.",8,{"inputs":[],"output":{"name":"h64"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",8,{"inputs":[],"output":{"name":"h64"}}],[11,"len","","Get the size of this object in bytes.",8,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",8,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",8,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",8,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"random","","Create a new, cryptographically random, instance.",8,{"inputs":[],"output":{"name":"h64"}}],[11,"randomize","","Assign self have a cryptographically random value.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"h64"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"bitor","","",8,null],[11,"bitand","","",8,null],[11,"bitxor","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"h64"}}],[11,"from","","",8,null],[11,"hex","","Get a hex representation.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rand","","",8,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"generics":["h64","fromhexerror"],"name":"result"}}],[11,"from","","",8,{"inputs":[{"name":"str"}],"output":{"name":"h64"}}],[11,"heap_size_of_children","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from","","",9,null],[11,"deref","","",9,null],[11,"as_ref","","",9,null],[11,"as_mut","","",9,null],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"h128"}}],[11,"deref_mut","","",9,null],[11,"new","","Create a new, zero-initialised, instance.",9,{"inputs":[],"output":{"name":"h128"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",9,{"inputs":[],"output":{"name":"h128"}}],[11,"len","","Get the size of this object in bytes.",9,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",9,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",9,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",9,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"random","","Create a new, cryptographically random, instance.",9,{"inputs":[],"output":{"name":"h128"}}],[11,"randomize","","Assign self have a cryptographically random value.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"h128"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"bitor","","",9,null],[11,"bitand","","",9,null],[11,"bitxor","","",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"u64"}],"output":{"name":"h128"}}],[11,"from","","",9,null],[11,"hex","","Get a hex representation.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["h128","fromhexerror"],"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"str"}],"output":{"name":"h128"}}],[11,"heap_size_of_children","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from","","",10,null],[11,"deref","","",10,null],[11,"as_ref","","",10,null],[11,"as_mut","","",10,null],[11,"as_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"deref_mut","","",10,null],[11,"new","","Create a new, zero-initialised, instance.",10,{"inputs":[],"output":{"name":"h160"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",10,{"inputs":[],"output":{"name":"h160"}}],[11,"len","","Get the size of this object in bytes.",10,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",10,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",10,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",10,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",10,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"random","","Create a new, cryptographically random, instance.",10,{"inputs":[],"output":{"name":"h160"}}],[11,"randomize","","Assign self have a cryptographically random value.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"h160"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",10,null],[11,"index_mut","","",10,null],[11,"index","","",10,null],[11,"index_mut","","",10,null],[11,"bitor","","",10,null],[11,"bitand","","",10,null],[11,"bitxor","","",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"u64"}],"output":{"name":"h160"}}],[11,"from","","",10,null],[11,"hex","","Get a hex representation.",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rand","","",10,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"generics":["h160","fromhexerror"],"name":"result"}}],[11,"from","","",10,{"inputs":[{"name":"str"}],"output":{"name":"h160"}}],[11,"heap_size_of_children","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from","","",11,null],[11,"deref","","",11,null],[11,"as_ref","","",11,null],[11,"as_mut","","",11,null],[11,"as_ref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"deref_mut","","",11,null],[11,"new","","Create a new, zero-initialised, instance.",11,{"inputs":[],"output":{"name":"h256"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",11,{"inputs":[],"output":{"name":"h256"}}],[11,"len","","Get the size of this object in bytes.",11,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",11,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",11,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",11,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",11,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"random","","Create a new, cryptographically random, instance.",11,{"inputs":[],"output":{"name":"h256"}}],[11,"randomize","","Assign self have a cryptographically random value.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"bitor","","",11,null],[11,"bitand","","",11,null],[11,"bitxor","","",11,null],[11,"default","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"u64"}],"output":{"name":"h256"}}],[11,"from","","",11,null],[11,"hex","","Get a hex representation.",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rand","","",11,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"generics":["h256","fromhexerror"],"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"heap_size_of_children","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from","","",12,null],[11,"deref","","",12,null],[11,"as_ref","","",12,null],[11,"as_mut","","",12,null],[11,"as_ref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"deref_mut","","",12,null],[11,"new","","Create a new, zero-initialised, instance.",12,{"inputs":[],"output":{"name":"h264"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",12,{"inputs":[],"output":{"name":"h264"}}],[11,"len","","Get the size of this object in bytes.",12,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",12,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",12,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",12,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"random","","Create a new, cryptographically random, instance.",12,{"inputs":[],"output":{"name":"h264"}}],[11,"randomize","","Assign self have a cryptographically random value.",12,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"h264"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",12,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"bitor","","",12,null],[11,"bitand","","",12,null],[11,"bitxor","","",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"u64"}],"output":{"name":"h264"}}],[11,"from","","",12,null],[11,"hex","","Get a hex representation.",12,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"generics":["h264","fromhexerror"],"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"str"}],"output":{"name":"h264"}}],[11,"heap_size_of_children","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from","","",13,null],[11,"deref","","",13,null],[11,"as_ref","","",13,null],[11,"as_mut","","",13,null],[11,"as_ref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"deref_mut","","",13,null],[11,"new","","Create a new, zero-initialised, instance.",13,{"inputs":[],"output":{"name":"h512"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",13,{"inputs":[],"output":{"name":"h512"}}],[11,"len","","Get the size of this object in bytes.",13,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",13,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",13,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",13,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"random","","Create a new, cryptographically random, instance.",13,{"inputs":[],"output":{"name":"h512"}}],[11,"randomize","","Assign self have a cryptographically random value.",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"h512"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",13,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"bitor","","",13,null],[11,"bitand","","",13,null],[11,"bitxor","","",13,null],[11,"default","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",13,{"inputs":[{"name":"u64"}],"output":{"name":"h512"}}],[11,"from","","",13,null],[11,"hex","","Get a hex representation.",13,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rand","","",13,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_str","","",13,{"inputs":[{"name":"str"}],"output":{"generics":["h512","fromhexerror"],"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"str"}],"output":{"name":"h512"}}],[11,"heap_size_of_children","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from","","",14,null],[11,"deref","","",14,null],[11,"as_ref","","",14,null],[11,"as_mut","","",14,null],[11,"as_ref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"deref_mut","","",14,null],[11,"new","","Create a new, zero-initialised, instance.",14,{"inputs":[],"output":{"name":"h520"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",14,{"inputs":[],"output":{"name":"h520"}}],[11,"len","","Get the size of this object in bytes.",14,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",14,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",14,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",14,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"random","","Create a new, cryptographically random, instance.",14,{"inputs":[],"output":{"name":"h520"}}],[11,"randomize","","Assign self have a cryptographically random value.",14,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",14,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"bitor","","",14,null],[11,"bitand","","",14,null],[11,"bitxor","","",14,null],[11,"default","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",14,{"inputs":[{"name":"u64"}],"output":{"name":"h520"}}],[11,"from","","",14,null],[11,"hex","","Get a hex representation.",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rand","","",14,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_str","","",14,{"inputs":[{"name":"str"}],"output":{"generics":["h520","fromhexerror"],"name":"result"}}],[11,"from","","",14,{"inputs":[{"name":"str"}],"output":{"name":"h520"}}],[11,"heap_size_of_children","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from","","",15,null],[11,"deref","","",15,null],[11,"as_ref","","",15,null],[11,"as_mut","","",15,null],[11,"as_ref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"h1024"}}],[11,"deref_mut","","",15,null],[11,"new","","Create a new, zero-initialised, instance.",15,{"inputs":[],"output":{"name":"h1024"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",15,{"inputs":[],"output":{"name":"h1024"}}],[11,"len","","Get the size of this object in bytes.",15,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",15,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",15,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",15,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"random","","Create a new, cryptographically random, instance.",15,{"inputs":[],"output":{"name":"h1024"}}],[11,"randomize","","Assign self have a cryptographically random value.",15,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"h1024"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",15,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"bitor","","",15,null],[11,"bitand","","",15,null],[11,"bitxor","","",15,null],[11,"default","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",15,{"inputs":[{"name":"u64"}],"output":{"name":"h1024"}}],[11,"from","","",15,null],[11,"hex","","Get a hex representation.",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rand","","",15,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"generics":["h1024","fromhexerror"],"name":"result"}}],[11,"from","","",15,{"inputs":[{"name":"str"}],"output":{"name":"h1024"}}],[11,"heap_size_of_children","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"h64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"h64"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"h128"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"h128"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"u256"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"u256"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"h256"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"h256"}],"output":{"name":"self"}}],[11,"from","","",13,{"inputs":[{"name":"u512"}],"output":{"name":"self"}}],[11,"from","","",13,{"inputs":[{"name":"u512"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"h512"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"h512"}],"output":{"name":"self"}}],[11,"from","","",15,{"inputs":[{"name":"u1024"}],"output":{"name":"self"}}],[11,"from","","",15,{"inputs":[{"name":"u1024"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"h1024"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"h1024"}],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"h256"}],"output":{"name":"h160"}}],[11,"from","","",8,{"inputs":[{"name":"h256"}],"output":{"name":"h64"}}],[11,"from","","",11,{"inputs":[{"name":"h160"}],"output":{"name":"h256"}}],[11,"from","","",11,{"inputs":[{"name":"h160"}],"output":{"name":"h256"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_dec_str","","Convert from a decimal string.",2,{"inputs":[{"name":"str"}],"output":{"generics":["fromdecstrerr"],"name":"result"}}],[11,"low_u32","","Conversion to u32",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","Conversion to u64",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","Whether this is zero.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","Return if specific bit is set.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of self.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of leading zeros in the binary representation of self.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"byte","","Return specific byte.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","Write to the slice in big-endian format.",2,null],[11,"to_little_endian","","Write to the slice in little-endian format.",2,null],[11,"exp10","","Create `10**n` as this type.",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","Zero (additive identity) of this type.",2,{"inputs":[],"output":{"name":"self"}}],[11,"one","","One (multiplicative identity) of this type.",2,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","The maximum value which can be inhabited by this type.",2,{"inputs":[],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",2,null],[11,"overflowing_add","","Optimized instructions",2,null],[11,"saturating_add","","Addition which saturates at the maximum value.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"checked_add","","Checked addition. Returns `None` if overflow occurred.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["u64"],"name":"option"}}],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",2,null],[11,"saturating_sub","","Subtraction which saturates at zero.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"checked_sub","","Checked subtraction. Returns `None` if overflow occurred.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["u64"],"name":"option"}}],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",2,null],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"checked_mul","","Checked multiplication. Returns `None` if overflow occurred.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["u64"],"name":"option"}}],[11,"overflowing_div","","Division with overflow",2,null],[11,"checked_div","","Checked division. Returns `None` if `other == 0`.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["u64"],"name":"option"}}],[11,"overflowing_rem","","Modulus with overflow.",2,null],[11,"checked_rem","","Checked modulus. Returns `None` if `other == 0`.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["u64"],"name":"option"}}],[11,"overflowing_neg","","Negation with overflow.",2,null],[11,"checked_neg","","Checked negation. Returns `None` unless `self == 0`.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"mul_u32","","Multiplication by u32",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"to_hex","","Convert to hex string.",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_big_endian","","Converts from big endian representation bytes in memory Can also be used as (&slice).into(), as it is default `From` slice implementation for U256",2,null],[11,"from_little_endian","","Converts from little endian representation bytes in memory",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"u64"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"u64"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"u64"}}],[11,"from","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"u64"}}],[11,"from","","",2,{"inputs":[{"name":"i8"}],"output":{"name":"u64"}}],[11,"from","","",2,{"inputs":[{"name":"i16"}],"output":{"name":"u64"}}],[11,"from","","",2,{"inputs":[{"name":"i32"}],"output":{"name":"u64"}}],[11,"from","","",2,{"inputs":[{"name":"isize"}],"output":{"name":"u64"}}],[11,"from","","",2,null],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"u64"}}],[11,"not","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["u64"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"from_dec_str","","Convert from a decimal string.",3,{"inputs":[{"name":"str"}],"output":{"generics":["fromdecstrerr"],"name":"result"}}],[11,"low_u32","","Conversion to u32",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","Conversion to u64",3,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",3,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","Whether this is zero.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","Return if specific bit is set.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of self.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of leading zeros in the binary representation of self.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"byte","","Return specific byte.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","Write to the slice in big-endian format.",3,null],[11,"to_little_endian","","Write to the slice in little-endian format.",3,null],[11,"exp10","","Create `10**n` as this type.",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","Zero (additive identity) of this type.",3,{"inputs":[],"output":{"name":"self"}}],[11,"one","","One (multiplicative identity) of this type.",3,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","The maximum value which can be inhabited by this type.",3,{"inputs":[],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",3,null],[11,"overflowing_add","","Optimized instructions",3,null],[11,"saturating_add","","Addition which saturates at the maximum value.",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"checked_add","","Checked addition. Returns `None` if overflow occurred.",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["u128"],"name":"option"}}],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",3,null],[11,"saturating_sub","","Subtraction which saturates at zero.",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"checked_sub","","Checked subtraction. Returns `None` if overflow occurred.",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["u128"],"name":"option"}}],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",3,null],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"checked_mul","","Checked multiplication. Returns `None` if overflow occurred.",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["u128"],"name":"option"}}],[11,"overflowing_div","","Division with overflow",3,null],[11,"checked_div","","Checked division. Returns `None` if `other == 0`.",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["u128"],"name":"option"}}],[11,"overflowing_rem","","Modulus with overflow.",3,null],[11,"checked_rem","","Checked modulus. Returns `None` if `other == 0`.",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["u128"],"name":"option"}}],[11,"overflowing_neg","","Negation with overflow.",3,null],[11,"checked_neg","","Checked negation. Returns `None` unless `self == 0`.",3,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[11,"mul_u32","","Multiplication by u32",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"to_hex","","Convert to hex string.",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_big_endian","","Converts from big endian representation bytes in memory Can also be used as (&slice).into(), as it is default `From` slice implementation for U256",3,null],[11,"from_little_endian","","Converts from little endian representation bytes in memory",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"u128"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"u128"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"u128"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"u128"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"u128"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"u128"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"u128"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"u128"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"u128"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"u128"}}],[11,"from","","",3,null],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitand","","",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitxor","","",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"bitor","","",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"not","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u128"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["u128"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"from_dec_str","","Convert from a decimal string.",4,{"inputs":[{"name":"str"}],"output":{"generics":["fromdecstrerr"],"name":"result"}}],[11,"low_u32","","Conversion to u32",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","Conversion to u64",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","Whether this is zero.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","Return if specific bit is set.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of self.",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of leading zeros in the binary representation of self.",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"byte","","Return specific byte.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","Write to the slice in big-endian format.",4,null],[11,"to_little_endian","","Write to the slice in little-endian format.",4,null],[11,"exp10","","Create `10**n` as this type.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","Zero (additive identity) of this type.",4,{"inputs":[],"output":{"name":"self"}}],[11,"one","","One (multiplicative identity) of this type.",4,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","The maximum value which can be inhabited by this type.",4,{"inputs":[],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",4,null],[11,"overflowing_add","","Optimized instructions",4,null],[11,"saturating_add","","Addition which saturates at the maximum value.",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"checked_add","","Checked addition. Returns `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"generics":["u256"],"name":"option"}}],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",4,null],[11,"saturating_sub","","Subtraction which saturates at zero.",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"checked_sub","","Checked subtraction. Returns `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"generics":["u256"],"name":"option"}}],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",4,null],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"checked_mul","","Checked multiplication. Returns `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"generics":["u256"],"name":"option"}}],[11,"overflowing_div","","Division with overflow",4,null],[11,"checked_div","","Checked division. Returns `None` if `other == 0`.",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"generics":["u256"],"name":"option"}}],[11,"overflowing_rem","","Modulus with overflow.",4,null],[11,"checked_rem","","Checked modulus. Returns `None` if `other == 0`.",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"generics":["u256"],"name":"option"}}],[11,"overflowing_neg","","Negation with overflow.",4,null],[11,"checked_neg","","Checked negation. Returns `None` unless `self == 0`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["u256"],"name":"option"}}],[11,"mul_u32","","Multiplication by u32",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"to_hex","","Convert to hex string.",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_big_endian","","Converts from big endian representation bytes in memory Can also be used as (&slice).into(), as it is default `From` slice implementation for U256",4,null],[11,"from_little_endian","","Converts from little endian representation bytes in memory",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"u256"}}],[11,"from","","",4,{"inputs":[{"name":"u8"}],"output":{"name":"u256"}}],[11,"from","","",4,{"inputs":[{"name":"u16"}],"output":{"name":"u256"}}],[11,"from","","",4,{"inputs":[{"name":"u32"}],"output":{"name":"u256"}}],[11,"from","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"u256"}}],[11,"from","","",4,{"inputs":[{"name":"i64"}],"output":{"name":"u256"}}],[11,"from","","",4,{"inputs":[{"name":"i8"}],"output":{"name":"u256"}}],[11,"from","","",4,{"inputs":[{"name":"i16"}],"output":{"name":"u256"}}],[11,"from","","",4,{"inputs":[{"name":"i32"}],"output":{"name":"u256"}}],[11,"from","","",4,{"inputs":[{"name":"isize"}],"output":{"name":"u256"}}],[11,"from","","",4,null],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u256"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"rem","","",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitand","","",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitxor","","",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"bitor","","",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u256"}}],[11,"not","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"shl","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"shr","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u256"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["u256"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u512"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"as_ref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u512"}}],[11,"from_dec_str","","Convert from a decimal string.",5,{"inputs":[{"name":"str"}],"output":{"generics":["fromdecstrerr"],"name":"result"}}],[11,"low_u32","","Conversion to u32",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","Conversion to u64",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","Whether this is zero.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","Return if specific bit is set.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of self.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of leading zeros in the binary representation of self.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"byte","","Return specific byte.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","Write to the slice in big-endian format.",5,null],[11,"to_little_endian","","Write to the slice in little-endian format.",5,null],[11,"exp10","","Create `10**n` as this type.",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","Zero (additive identity) of this type.",5,{"inputs":[],"output":{"name":"self"}}],[11,"one","","One (multiplicative identity) of this type.",5,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","The maximum value which can be inhabited by this type.",5,{"inputs":[],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",5,null],[11,"overflowing_add","","Optimized instructions",5,null],[11,"saturating_add","","Addition which saturates at the maximum value.",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"checked_add","","Checked addition. Returns `None` if overflow occurred.",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"generics":["u512"],"name":"option"}}],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",5,null],[11,"saturating_sub","","Subtraction which saturates at zero.",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"checked_sub","","Checked subtraction. Returns `None` if overflow occurred.",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"generics":["u512"],"name":"option"}}],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",5,null],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"checked_mul","","Checked multiplication. Returns `None` if overflow occurred.",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"generics":["u512"],"name":"option"}}],[11,"overflowing_div","","Division with overflow",5,null],[11,"checked_div","","Checked division. Returns `None` if `other == 0`.",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"generics":["u512"],"name":"option"}}],[11,"overflowing_rem","","Modulus with overflow.",5,null],[11,"checked_rem","","Checked modulus. Returns `None` if `other == 0`.",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"generics":["u512"],"name":"option"}}],[11,"overflowing_neg","","Negation with overflow.",5,null],[11,"checked_neg","","Checked negation. Returns `None` unless `self == 0`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u512"],"name":"option"}}],[11,"mul_u32","","Multiplication by u32",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"to_hex","","Convert to hex string.",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_big_endian","","Converts from big endian representation bytes in memory Can also be used as (&slice).into(), as it is default `From` slice implementation for U256",5,null],[11,"from_little_endian","","Converts from little endian representation bytes in memory",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"i8"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"i16"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"i32"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"isize"}],"output":{"name":"u512"}}],[11,"from","","",5,null],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u512"}}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"div","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"rem","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitand","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitxor","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"bitor","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"u512"}}],[11,"not","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u512"}}],[11,"shl","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u512"}}],[11,"shr","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u512"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"u512"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"generics":["u512"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u1024"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"as_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u1024"}}],[11,"from_dec_str","","Convert from a decimal string.",6,{"inputs":[{"name":"str"}],"output":{"generics":["fromdecstrerr"],"name":"result"}}],[11,"low_u32","","Conversion to u32",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"low_u64","","Conversion to u64",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_u32","","Conversion to u32 with overflow checking",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_u64","","Conversion to u64 with overflow checking",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_zero","","Whether this is zero.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","Return the least number of bits needed to represent the number",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bit","","Return if specific bit is set.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of self.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of leading zeros in the binary representation of self.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"byte","","Return specific byte.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"to_big_endian","","Write to the slice in big-endian format.",6,null],[11,"to_little_endian","","Write to the slice in little-endian format.",6,null],[11,"exp10","","Create `10**n` as this type.",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"zero","","Zero (additive identity) of this type.",6,{"inputs":[],"output":{"name":"self"}}],[11,"one","","One (multiplicative identity) of this type.",6,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","The maximum value which can be inhabited by this type.",6,{"inputs":[],"output":{"name":"self"}}],[11,"pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"overflowing_pow","","Fast exponentation by squaring https://en.wikipedia.org/wiki/Exponentiation_by_squaring",6,null],[11,"overflowing_add","","Optimized instructions",6,null],[11,"saturating_add","","Addition which saturates at the maximum value.",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"name":"u1024"}}],[11,"checked_add","","Checked addition. Returns `None` if overflow occurred.",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"generics":["u1024"],"name":"option"}}],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",6,null],[11,"saturating_sub","","Subtraction which saturates at zero.",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"name":"u1024"}}],[11,"checked_sub","","Checked subtraction. Returns `None` if overflow occurred.",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"generics":["u1024"],"name":"option"}}],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",6,null],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"name":"u1024"}}],[11,"checked_mul","","Checked multiplication. Returns `None` if overflow occurred.",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"generics":["u1024"],"name":"option"}}],[11,"overflowing_div","","Division with overflow",6,null],[11,"checked_div","","Checked division. Returns `None` if `other == 0`.",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"generics":["u1024"],"name":"option"}}],[11,"overflowing_rem","","Modulus with overflow.",6,null],[11,"checked_rem","","Checked modulus. Returns `None` if `other == 0`.",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"generics":["u1024"],"name":"option"}}],[11,"overflowing_neg","","Negation with overflow.",6,null],[11,"checked_neg","","Checked negation. Returns `None` unless `self == 0`.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u1024"],"name":"option"}}],[11,"mul_u32","","Multiplication by u32",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"to_hex","","Convert to hex string.",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_big_endian","","Converts from big endian representation bytes in memory Can also be used as (&slice).into(), as it is default `From` slice implementation for U256",6,null],[11,"from_little_endian","","Converts from little endian representation bytes in memory",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"u1024"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"u1024"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"u1024"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"u1024"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"u1024"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"u1024"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"u1024"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"u1024"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"u1024"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"u1024"}}],[11,"from","","",6,null],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"name":"u1024"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"name":"u1024"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u1024"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"name":"u1024"}}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"name":"u1024"}}],[11,"rem","","",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"name":"u1024"}}],[11,"bitand","","",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"name":"u1024"}}],[11,"bitxor","","",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"name":"u1024"}}],[11,"bitor","","",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"name":"u1024"}}],[11,"not","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u1024"}}],[11,"shl","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u1024"}}],[11,"shr","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u1024"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"u1024"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"generics":["u1024"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"heap_size_of_children","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"full_mul","","Multiplies two 256-bit integers to produce full 512-bit integer No overflow possible",4,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"u512"}}],[11,"from","","",5,{"inputs":[{"name":"u256"}],"output":{"name":"u512"}}],[11,"from","","",4,{"inputs":[{"name":"u512"}],"output":{"name":"u256"}}],[11,"from","","",5,{"inputs":[{"name":"u256"}],"output":{"name":"u512"}}],[11,"from","","",4,{"inputs":[{"name":"u512"}],"output":{"name":"u256"}}],[11,"from","","",3,{"inputs":[{"name":"u256"}],"output":{"name":"u128"}}],[11,"from","","",3,{"inputs":[{"name":"u512"}],"output":{"name":"u128"}}],[11,"from","","",5,{"inputs":[{"name":"u128"}],"output":{"name":"u512"}}],[11,"from","","",4,{"inputs":[{"name":"u128"}],"output":{"name":"u256"}}],[11,"from","","",4,null],[11,"from","","",4,null],[11,"from","","",3,null],[11,"from","","",3,null],[11,"from","","",5,null],[11,"from","","",5,null],[6,"Address","","",null,null],[6,"Secret","","",null,null],[6,"Public","","",null,null],[6,"Signature","","",null,null],[11,"is_empty","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_input","","",0,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"contains_bloom","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"accrue","","",0,null],[11,"accrue_bloom","","",0,null],[11,"data","","",0,null],[11,"new","","Create a new, zero-initialised, instance.",0,{"inputs":[],"output":{"name":"bloom"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",0,{"inputs":[],"output":{"name":"bloom"}}],[11,"len","","Get the size of this object in bytes.",0,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",0,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",0,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",0,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",0,{"inputs":[{"name":"self"},{"name":"bloom"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"random","","Create a new, cryptographically random, instance.",0,{"inputs":[],"output":{"name":"bloom"}}],[11,"randomize","","Assign self have a cryptographically random value.",0,null],[11,"hex","","Get a hex representation.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"bloom"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",0,null],[11,"index","","",0,null],[11,"deref","","",0,null],[11,"as_mut","","",0,null],[11,"bitxor","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"bloom"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"bloom"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["bloom","fromhexerror"],"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"generics":["bloom"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"bloom"}}],[11,"from","","",0,null],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"bloom"}}],[11,"from","","",0,null],[11,"from","","",0,{"inputs":[{"name":"input"}],"output":{"name":"bloom"}}],[11,"from","","",16,{"inputs":[{"name":"bloom"}],"output":{"name":"bloomref"}}],[11,"from","","",16,null],[11,"default","","",0,{"inputs":[],"output":{"name":"bloom"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitand","","",0,null],[11,"as_ref","","",0,null],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"hash","","",0,null],[11,"heap_size_of_children","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bloom"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bloomref"}],"output":{"name":"bool"}}],[11,"bitor","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bloomref"}}],[11,"deref_mut","","",0,null],[11,"index_mut","","",0,null],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"is_empty","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_input","","",16,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"contains_bloom","","",16,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"data","","",16,null]],"paths":[[3,"Bloom"],[4,"BloomInput"],[3,"U64"],[3,"U128"],[3,"U256"],[3,"U512"],[3,"U1024"],[3,"H32"],[3,"H64"],[3,"H128"],[3,"H160"],[3,"H256"],[3,"H264"],[3,"H512"],[3,"H520"],[3,"H1024"],[3,"BloomRef"]]};
searchIndex["ethereum_types_serialize"] = {"doc":"","items":[[4,"ExpectedLen","ethereum_types_serialize","Expected length of bytes vector.",null,null],[13,"Exact","","Exact length in bytes.",0,null],[13,"Between","","A bytes length between (min; slice.len()].",0,null],[5,"serialize","","Serializes a slice of bytes.",null,null],[5,"serialize_uint","","Serialize a slice of bytes as uint.",null,null],[5,"deserialize_check_len","","Deserialize into vector of bytes with additional size check. Returns number of bytes written.",null,{"inputs":[{"name":"d"},{"name":"expectedlen"}],"output":{"generics":["usize"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"expectedlen"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"expectedlen"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"ExpectedLen"]]};
searchIndex["ethjson"] = {"doc":"","items":[[0,"hash","ethjson","Lenient hash json deserialization for test json files.",null,null],[3,"H64","ethjson::hash","Lenient hash json deserialization for test json files.",null,null],[12,"0","","",0,null],[3,"Address","","Lenient hash json deserialization for test json files.",null,null],[12,"0","","",1,null],[3,"H256","","Lenient hash json deserialization for test json files.",null,null],[12,"0","","",2,null],[3,"H520","","Lenient hash json deserialization for test json files.",null,null],[12,"0","","",3,null],[3,"Bloom","","Lenient hash json deserialization for test json files.",null,null],[12,"0","","",4,null],[11,"default","","",0,{"inputs":[],"output":{"name":"h64"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"h64"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"h64"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"h64"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"h64"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"h64"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"h64"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"h64"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"h64"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"h64"}}],[11,"from","","",0,{"inputs":[{"name":"hash64"}],"output":{"name":"self"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"address"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"from","","",1,{"inputs":[{"name":"hash160"}],"output":{"name":"self"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"h256"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"ordering"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"from","","",2,{"inputs":[{"name":"hash256"}],"output":{"name":"self"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"h520"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"h520"}],"output":{"name":"ordering"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"h520"}}],[11,"from","","",3,{"inputs":[{"name":"hash520"}],"output":{"name":"self"}}],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"bloom"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"bloom"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"bloom"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"bloom"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"bloom"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"bloom"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"bloom"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"bloom"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"bloom"}],"output":{"name":"ordering"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bloom"}}],[11,"from","","",4,{"inputs":[{"name":"hash2048"}],"output":{"name":"self"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"uint","ethjson","Lenient uint json deserialization for test json files.",null,null],[3,"Uint","ethjson::uint","Lenient uint json deserialization for test json files.",null,null],[12,"0","","",5,null],[5,"validate_non_zero","","",null,{"inputs":[{"name":"d"}],"output":{"generics":["uint"],"name":"result"}}],[5,"validate_optional_non_zero","","",null,{"inputs":[{"name":"d"}],"output":{"generics":["option"],"name":"result"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"uint"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"ordering"}}],[11,"hash","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"uint"}}],[11,"into","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"into","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"into","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"bytes","ethjson","Lenient bytes json deserialization for test json files.",null,null],[3,"Bytes","ethjson::bytes","Lenient bytes json deserialization for test json files.",null,null],[11,"default","","",6,{"inputs":[],"output":{"name":"bytes"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"new","","Creates bytes struct.",6,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"deref","","",6,null],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"blockchain","ethjson","Blockchain test deserialization.",null,null],[0,"account","ethjson::blockchain","Blockchain test account deserializer.",null,null],[3,"Account","ethjson::blockchain::account","Blockchain test account deserializer.",null,null],[12,"balance","","Balance.",7,null],[12,"code","","Code.",7,null],[12,"nonce","","Nonce.",7,null],[12,"storage","","Storage.",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"account"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"account"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"account"}}],[0,"block","ethjson::blockchain","Blockchain test block deserializer.",null,null],[3,"Block","ethjson::blockchain::block","Blockchain test block deserializer.",null,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"rlp","","Returns block rlp.",8,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[0,"blockchain","ethjson::blockchain","Blockchain deserialization.",null,null],[3,"BlockChain","ethjson::blockchain::blockchain","Blockchain deserialization.",null,null],[12,"genesis_block","","Genesis block header.",9,null],[12,"genesis_rlp","","Genesis block rlp.",9,null],[12,"blocks","","Blocks.",9,null],[12,"post_state","","Post state.",9,null],[12,"pre_state","","Pre state.",9,null],[12,"best_block","","Hash of best block.",9,null],[12,"network","","Network.",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"blockchain"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"blockchain"}],"output":{"name":"bool"}}],[11,"blocks_rlp","","Returns blocks rlp.",9,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"vec"}}],[11,"genesis","","Returns spec compatible genesis struct.",9,{"inputs":[{"name":"self"}],"output":{"name":"genesis"}}],[0,"header","ethjson::blockchain","Blockchain test header deserializer.",null,null],[3,"Header","ethjson::blockchain::header","Blockchain test header deserializer.",null,null],[12,"bloom","","Blocks bloom.",10,null],[12,"author","","Blocks author.",10,null],[12,"difficulty","","Difficulty.",10,null],[12,"extra_data","","Extra data.",10,null],[12,"gas_limit","","Gas limit.",10,null],[12,"gas_used","","Gas used.",10,null],[12,"hash","","Hash.",10,null],[12,"mix_hash","","Mix hash.",10,null],[12,"nonce","","Seal nonce.",10,null],[12,"number","","Block number.",10,null],[12,"parent_hash","","Parent hash.",10,null],[12,"receipts_root","","Receipt root.",10,null],[12,"state_root","","State root.",10,null],[12,"timestamp","","Timestamp.",10,null],[12,"transactions_root","","Transactions root.",10,null],[12,"uncles_hash","","Uncles hash.",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[0,"state","ethjson::blockchain","Blockchain test state deserializer.",null,null],[3,"State","ethjson::blockchain::state","Blockchain test state deserializer.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"into_iter","","",11,null],[0,"transaction","ethjson::blockchain","Blockchain test transaction deserialization.",null,null],[3,"Transaction","ethjson::blockchain::transaction","Blockchain test transaction deserialization.",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"bool"}}],[0,"test","ethjson::blockchain","Blockchain test deserializer.",null,null],[3,"Test","ethjson::blockchain::test","Blockchain test deserializer.",null,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"test"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"test"}],"output":{"name":"bool"}}],[11,"into_iter","","",13,null],[11,"load","","Loads test from json.",13,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[0,"spec","ethjson","Spec deserialization.",null,null],[0,"account","ethjson::spec","Spec account deserialization.",null,null],[3,"Account","ethjson::spec::account","Spec account.",null,null],[12,"builtin","","Builtin contract.",14,null],[12,"balance","","Balance.",14,null],[12,"nonce","","Nonce.",14,null],[12,"code","","Code.",14,null],[12,"storage","","Storage.",14,null],[12,"constructor","","Constructor.",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"account"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"account"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if account does not have nonce, balance, code and storage.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"builtin","ethjson::spec","Spec builtin deserialization.",null,null],[3,"Linear","ethjson::spec::builtin","Linear pricing.",null,null],[12,"base","","Base price.",15,null],[12,"word","","Price for word.",15,null],[3,"Modexp","","Pricing for modular exponentiation.",null,null],[12,"divisor","","Price divisor.",16,null],[3,"AltBn128Pairing","","Pricing for alt_bn128_pairing.",null,null],[12,"base","","Base price.",17,null],[12,"pair","","Price per point pair.",17,null],[3,"Builtin","","Spec builtin.",null,null],[12,"name","","Builtin name.",18,null],[12,"pricing","","Builtin pricing.",18,null],[12,"activate_at","","Activation block.",18,null],[4,"Pricing","","Pricing variants.",null,null],[13,"Linear","","Linear pricing.",19,null],[13,"Modexp","","Pricing for modular exponentiation.",19,null],[13,"AltBn128Pairing","","Pricing for alt_bn128_pairing exponentiation.",19,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"linear"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"linear"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"linear"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"modexp"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"modexp"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"modexp"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"altbn128pairing"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"altbn128pairing"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"altbn128pairing"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"pricing"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"pricing"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"pricing"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"builtin"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"builtin"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"builtin"}}],[0,"genesis","ethjson::spec","Spec genesis deserialization.",null,null],[3,"Genesis","ethjson::spec::genesis","Spec genesis.",null,null],[12,"seal","","Seal.",20,null],[12,"difficulty","","Difficulty.",20,null],[12,"author","","Block author, defaults to 0.",20,null],[12,"timestamp","","Block timestamp, defaults to 0.",20,null],[12,"parent_hash","","Parent hash, defaults to 0.",20,null],[12,"gas_limit","","Gas limit.",20,null],[12,"transactions_root","","Transactions root.",20,null],[12,"receipts_root","","Receipts root.",20,null],[12,"state_root","","State root.",20,null],[12,"gas_used","","Gas used.",20,null],[12,"extra_data","","Extra data.",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"genesis"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"genesis"}],"output":{"name":"bool"}}],[0,"params","ethjson::spec","Spec params deserialization.",null,null],[3,"Params","ethjson::spec::params","Spec params.",null,null],[12,"account_start_nonce","","Account start nonce, defaults to 0.",21,null],[12,"maximum_extra_data_size","","Maximum size of extra data.",21,null],[12,"min_gas_limit","","Minimum gas limit.",21,null],[12,"network_id","","Network id.",21,null],[12,"chain_id","","Chain id.",21,null],[12,"subprotocol_name","","Name of the main (\"eth\") subprotocol.",21,null],[12,"fork_block","","Option fork block number to check.",21,null],[12,"fork_hash","","Expected fork block hash.",21,null],[12,"eip150_transition","","See main EthashParams docs.",21,null],[12,"eip160_transition","","See main EthashParams docs.",21,null],[12,"eip161abc_transition","","See main EthashParams docs.",21,null],[12,"eip161d_transition","","See main EthashParams docs.",21,null],[12,"eip98_transition","","See `CommonParams` docs.",21,null],[12,"eip155_transition","","See `CommonParams` docs.",21,null],[12,"validate_chain_id_transition","","See `CommonParams` docs.",21,null],[12,"validate_receipts_transition","","See `CommonParams` docs.",21,null],[12,"eip86_transition","","See `CommonParams` docs.",21,null],[12,"eip140_transition","","See `CommonParams` docs.",21,null],[12,"eip210_transition","","See `CommonParams` docs.",21,null],[12,"eip210_contract_address","","See `CommonParams` docs.",21,null],[12,"eip210_contract_code","","See `CommonParams` docs.",21,null],[12,"eip210_contract_gas","","See `CommonParams` docs.",21,null],[12,"eip211_transition","","See `CommonParams` docs.",21,null],[12,"eip145_transition","","See `CommonParams` docs.",21,null],[12,"eip214_transition","","See `CommonParams` docs.",21,null],[12,"eip658_transition","","See `CommonParams` docs.",21,null],[12,"dust_protection_transition","","See `CommonParams` docs.",21,null],[12,"nonce_cap_increment","","See `CommonParams` docs.",21,null],[12,"remove_dust_contracts","","See `CommonParams` docs.",21,null],[12,"gas_limit_bound_divisor","","See `CommonParams` docs.",21,null],[12,"registrar","","See `CommonParams` docs.",21,null],[12,"apply_reward","","Apply reward flag",21,null],[12,"node_permission_contract","","Node permission contract address.",21,null],[12,"max_code_size","","See main EthashParams docs.",21,null],[12,"max_transaction_size","","Maximum size of transaction RLP payload.",21,null],[12,"max_code_size_transition","","See main EthashParams docs.",21,null],[12,"transaction_permission_contract","","Transaction permission contract address.",21,null],[12,"wasm_activation_transition","","Wasm activation block height, if not activated from start",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"params"}],"output":{"name":"bool"}}],[0,"spec","ethjson::spec","Spec deserialization.",null,null],[3,"Spec","ethjson::spec::spec","Spec deserialization.",null,null],[12,"name","","Spec name.",22,null],[12,"data_dir","","Special fork name.",22,null],[12,"engine","","Engine.",22,null],[12,"params","","Spec params.",22,null],[12,"genesis","","Genesis header.",22,null],[12,"accounts","","Genesis state.",22,null],[12,"nodes","","Boot nodes.",22,null],[12,"hardcoded_sync","","Hardcoded synchronization for the light client.",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"spec"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"spec"}],"output":{"name":"bool"}}],[11,"load","","Loads test from json.",22,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[0,"seal","ethjson::spec","Spec seal deserialization.",null,null],[3,"Ethereum","ethjson::spec::seal","Ethereum seal.",null,null],[12,"nonce","","Seal nonce.",23,null],[12,"mix_hash","","Seal mix hash.",23,null],[3,"AuthorityRoundSeal","","AuthorityRound seal.",null,null],[12,"step","","Seal step.",24,null],[12,"signature","","Seal signature.",24,null],[3,"TendermintSeal","","Tendermint seal.",null,null],[12,"round","","Seal round.",25,null],[12,"proposal","","Proposal seal signature.",25,null],[12,"precommits","","Proposal seal signature.",25,null],[4,"Seal","","Seal variants.",null,null],[13,"Ethereum","","Ethereum seal.",26,null],[13,"AuthorityRound","","AuthorityRound seal.",26,null],[13,"Tendermint","","Tendermint seal.",26,null],[13,"Generic","","Generic seal.",26,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"ethereum"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"ethereum"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"authorityroundseal"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"authorityroundseal"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"tendermintseal"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"tendermintseal"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"seal"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"seal"}],"output":{"name":"bool"}}],[0,"engine","ethjson::spec","Engine deserialization.",null,null],[4,"Engine","ethjson::spec::engine","Engine deserialization.",null,null],[13,"Null","","Null engine.",27,null],[13,"InstantSeal","","Instantly sealing engine.",27,null],[13,"Ethash","","Ethash engine.",27,null],[13,"BasicAuthority","","BasicAuthority engine.",27,null],[13,"AuthorityRound","","AuthorityRound engine.",27,null],[13,"Tendermint","","Tendermint engine.",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"engine"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"engine"}],"output":{"name":"bool"}}],[0,"state","ethjson::spec","Blockchain test state deserializer.",null,null],[3,"State","ethjson::spec::state","Blockchain test state deserializer.",null,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"builtins","","Returns all builtins.",28,{"inputs":[{"name":"self"}],"output":{"generics":["address","builtin"],"name":"btreemap"}}],[11,"constructors","","Returns all constructors.",28,{"inputs":[{"name":"self"}],"output":{"generics":["address","bytes"],"name":"btreemap"}}],[11,"into_iter","","",28,null],[0,"ethash","ethjson::spec","Ethash params deserialization.",null,null],[3,"EthashParams","ethjson::spec::ethash","Deserializable doppelganger of EthashParams.",null,null],[12,"minimum_difficulty","","See main EthashParams docs.",29,null],[12,"difficulty_bound_divisor","","See main EthashParams docs.",29,null],[12,"difficulty_increment_divisor","","See main EthashParams docs.",29,null],[12,"metropolis_difficulty_increment_divisor","","See main EthashParams docs.",29,null],[12,"duration_limit","","See main EthashParams docs.",29,null],[12,"homestead_transition","","See main EthashParams docs.",29,null],[12,"block_reward","","Reward per block in wei.",29,null],[12,"dao_hardfork_transition","","See main EthashParams docs.",29,null],[12,"dao_hardfork_beneficiary","","See main EthashParams docs.",29,null],[12,"dao_hardfork_accounts","","See main EthashParams docs.",29,null],[12,"difficulty_hardfork_transition","","See main EthashParams docs.",29,null],[12,"difficulty_hardfork_bound_divisor","","See main EthashParams docs.",29,null],[12,"bomb_defuse_transition","","See main EthashParams docs.",29,null],[12,"eip100b_transition","","See main EthashParams docs.",29,null],[12,"ecip1010_pause_transition","","See main EthashParams docs.",29,null],[12,"ecip1010_continue_transition","","See main EthashParams docs.",29,null],[12,"ecip1017_era_rounds","","See main EthashParams docs.",29,null],[12,"mcip3_transition","","See main EthashParams docs.",29,null],[12,"mcip3_miner_reward","","See main EthashParams docs.",29,null],[12,"mcip3_ubi_reward","","See main EthashParams docs.",29,null],[12,"mcip3_ubi_contract","","See main EthashParams docs.",29,null],[12,"mcip3_dev_reward","","See main EthashParams docs.",29,null],[12,"mcip3_dev_contract","","See main EthashParams docs.",29,null],[12,"eip649_transition","","EIP-649 transition block.",29,null],[12,"eip649_delay","","EIP-649 bomb delay.",29,null],[12,"eip649_reward","","EIP-649 base reward.",29,null],[12,"expip2_transition","","EXPIP-2 block height",29,null],[12,"expip2_duration_limit","","EXPIP-2 duration limit",29,null],[3,"Ethash","","Ethash engine deserialization.",null,null],[12,"params","","Ethash params.",30,null],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"ethashparams"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"ethashparams"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"ethashparams"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"ethash"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"ethash"}],"output":{"name":"bool"}}],[0,"validator_set","ethjson::spec","Validator set deserialization.",null,null],[4,"ValidatorSet","ethjson::spec::validator_set","Different ways of specifying validators.",null,null],[13,"List","","A simple list of authorities.",31,null],[13,"SafeContract","","Address of a contract that indicates the list of authorities.",31,null],[13,"Contract","","Address of a contract that indicates the list of authorities and enables reporting of theor misbehaviour using transactions.",31,null],[13,"Multi","","A map of starting blocks for each validator set.",31,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"validatorset"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"validatorset"}],"output":{"name":"bool"}}],[0,"basic_authority","ethjson::spec","Authority params deserialization.",null,null],[3,"BasicAuthorityParams","ethjson::spec::basic_authority","Authority params deserialization.",null,null],[12,"duration_limit","","Block duration.",32,null],[12,"validators","","Valid authorities",32,null],[3,"BasicAuthority","","Authority engine deserialization.",null,null],[12,"params","","Ethash params.",33,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"basicauthorityparams"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"basicauthorityparams"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"basicauthority"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"basicauthority"}],"output":{"name":"bool"}}],[0,"authority_round","ethjson::spec","Authority params deserialization.",null,null],[3,"AuthorityRoundParams","ethjson::spec::authority_round","Authority params deserialization.",null,null],[12,"step_duration","","Block duration, in seconds.",34,null],[12,"validators","","Valid authorities",34,null],[12,"start_step","","Starting step. Determined automatically if not specified. To be used for testing only.",34,null],[12,"validate_score_transition","","Block at which score validation should start.",34,null],[12,"validate_step_transition","","Block from which monotonic steps start.",34,null],[12,"immediate_transitions","","Whether transitions should be immediate.",34,null],[12,"block_reward","","Reward per block in wei.",34,null],[12,"block_reward_contract_transition","","Block at which the block reward contract should start being used.",34,null],[12,"block_reward_contract_address","","Block reward contract address (setting the block reward contract overrides the static block reward definition).",34,null],[12,"maximum_uncle_count_transition","","Block at which maximum uncle count should be considered.",34,null],[12,"maximum_uncle_count","","Maximum number of accepted uncles.",34,null],[12,"empty_steps_transition","","Block at which empty step messages should start.",34,null],[12,"maximum_empty_steps","","Maximum number of accepted empty steps.",34,null],[3,"AuthorityRound","","Authority engine deserialization.",null,null],[12,"params","","Ethash params.",35,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"authorityroundparams"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"authorityroundparams"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"authorityround"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"authorityround"}],"output":{"name":"bool"}}],[0,"tendermint","ethjson::spec","Tendermint params deserialization.",null,null],[3,"TendermintParams","ethjson::spec::tendermint","Tendermint params deserialization.",null,null],[12,"validators","","Valid validators.",36,null],[12,"timeout_propose","","Propose step timeout in milliseconds.",36,null],[12,"timeout_prevote","","Prevote step timeout in milliseconds.",36,null],[12,"timeout_precommit","","Precommit step timeout in milliseconds.",36,null],[12,"timeout_commit","","Commit step timeout in milliseconds.",36,null],[12,"block_reward","","Reward per block.",36,null],[3,"Tendermint","","Tendermint engine deserialization.",null,null],[12,"params","","Ethash params.",37,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"tendermintparams"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"tendermintparams"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"tendermint"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"tendermint"}],"output":{"name":"bool"}}],[0,"null_engine","ethjson::spec","Null engine params deserialization.",null,null],[3,"NullEngineParams","ethjson::spec::null_engine","Authority params deserialization.",null,null],[12,"block_reward","","Block reward.",38,null],[3,"NullEngine","","Null engine descriptor",null,null],[12,"params","","Ethash params.",39,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"nullengineparams"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"nullengineparams"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"nullengine"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"nullengine"}],"output":{"name":"bool"}}],[0,"hardcoded_sync","ethjson::spec","Spec hardcoded synchronization deserialization for the light client.",null,null],[3,"HardcodedSync","ethjson::spec::hardcoded_sync","Spec hardcoded sync.",null,null],[12,"header","","Hexadecimal of the RLP encoding of the header of the block to start synchronization from.",40,null],[12,"total_difficulty","","Total difficulty including the block of `header`.",40,null],[12,"chts","","Ordered trie roots of blocks before and including `header`.",40,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"hardcodedsync"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"hardcodedsync"}],"output":{"name":"bool"}}],[0,"trie","ethjson","Trie test deserialization.",null,null],[3,"Input","ethjson::trie","Trie test input.",null,null],[12,"data","","Input params.",41,null],[3,"Trie","","Trie test deserialization.",null,null],[12,"input","","Trie test input.",42,null],[12,"root","","Trie root hash.",42,null],[3,"Test","","TransactionTest test deserializer.",null,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"deserialize","","",41,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"trie"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"trie"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"test"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"test"}],"output":{"name":"bool"}}],[11,"into_iter","","",43,null],[11,"load","","Loads test from json.",43,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[0,"vm","ethjson","Vm test loader.",null,null],[0,"env","ethjson::vm","Vm environment.",null,null],[3,"Env","ethjson::vm::env","Vm environment.",null,null],[12,"author","","Address.",44,null],[12,"difficulty","","Difficulty",44,null],[12,"gas_limit","","Gas limit.",44,null],[12,"number","","Number.",44,null],[12,"timestamp","","Timestamp.",44,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"env"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"env"}],"output":{"name":"bool"}}],[0,"transaction","ethjson::vm","Executed transaction.",null,null],[3,"Transaction","ethjson::vm::transaction","Executed transaction.",null,null],[12,"address","","Contract address.",45,null],[12,"sender","","Transaction sender.",45,null],[12,"code","","Contract code.",45,null],[12,"data","","Input data.",45,null],[12,"gas","","Gas.",45,null],[12,"gas_price","","Gas price.",45,null],[12,"origin","","Transaction origin.",45,null],[12,"value","","Sent value.",45,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"bool"}}],[0,"vm","ethjson::vm","Vm execution env.",null,null],[3,"Vm","ethjson::vm::vm","Represents vm execution environment before and after execution of transaction.",null,null],[12,"calls","","Contract calls made internaly by executed transaction.",46,null],[12,"env","","Env info.",46,null],[12,"transaction","","Executed transaction",46,null],[12,"gas_left","","Gas left after transaction execution.",46,null],[12,"logs","","Hash of logs created during execution of transaction.",46,null],[12,"output","","Transaction output.",46,null],[12,"post_state","","Post execution vm state.",46,null],[12,"pre_state","","Pre execution vm state.",46,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"vm"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"vm"}],"output":{"name":"bool"}}],[11,"out_of_gas","","Returns true if transaction execution run out of gas.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"call","ethjson::vm","Vm call deserialization.",null,null],[3,"Call","ethjson::vm::call","Vm call deserialization.",null,null],[12,"data","","Call data.",47,null],[12,"destination","","Call destination.",47,null],[12,"gas_limit","","Gas limit.",47,null],[12,"value","","Call value.",47,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"call"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"call"}],"output":{"name":"bool"}}],[0,"test","ethjson::vm","Vm test deserializer.",null,null],[3,"Test","ethjson::vm::test","Vm test deserializer.",null,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"test"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"test"}],"output":{"name":"bool"}}],[11,"into_iter","","",48,null],[11,"load","","Loads test from json.",48,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[0,"maybe","ethjson","Deserializer of empty string values into optionals.",null,null],[4,"MaybeEmpty","ethjson::maybe","Deserializer of empty string values into optionals.",null,null],[13,"Some","","Some.",49,null],[13,"None","","None.",49,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"maybeempty"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"maybeempty"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"maybeempty"}}],[11,"deserialize","","",49,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"into","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"state","ethjson","State test deserialization.",null,null],[0,"state","ethjson::state","State test deserialization.",null,null],[3,"State","ethjson::state::state","State test deserialization.",null,null],[12,"env","","Environment.",50,null],[12,"output","","Output.",50,null],[12,"pre_state","","Pre state.",50,null],[12,"post_state","","Post state.",50,null],[12,"post_state_root","","Post state root.",50,null],[12,"transaction","","Transaction.",50,null],[12,"logs","","Logs.",50,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[0,"transaction","ethjson::state","State test transaction deserialization.",null,null],[3,"Transaction","ethjson::state::transaction","State test transaction deserialization.",null,null],[12,"data","","Transaction data.",51,null],[12,"gas_limit","","Gas limit.",51,null],[12,"gas_price","","Gas price.",51,null],[12,"nonce","","Nonce.",51,null],[12,"secret","","Secret key.",51,null],[12,"to","","To.",51,null],[12,"value","","Value.",51,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"bool"}}],[0,"test","ethjson::state","General test deserialization.",null,null],[3,"Test","ethjson::state::test","State test deserializer.",null,null],[3,"State","","State test deserialization.",null,null],[12,"env","","Environment.",52,null],[12,"pre_state","","Pre state.",52,null],[12,"post_states","","Post state.",52,null],[12,"transaction","","Transaction.",52,null],[3,"MultiTransaction","","State test transaction deserialization.",null,null],[12,"data","","Transaction data set.",53,null],[12,"gas_limit","","Gas limit set.",53,null],[12,"gas_price","","Gas price.",53,null],[12,"nonce","","Nonce.",53,null],[12,"secret","","Secret key.",53,null],[12,"to","","To.",53,null],[12,"value","","Value set.",53,null],[3,"PostStateIndexes","","State test indexes deserialization.",null,null],[12,"data","","Index into transaction data set.",54,null],[12,"gas","","Index into transaction gas limit set.",54,null],[12,"value","","Index into transaction value set.",54,null],[3,"PostStateResult","","State test indexed state result deserialization.",null,null],[12,"hash","","Post state hash",55,null],[12,"indexes","","Indexes",55,null],[4,"ForkSpec","","State test transaction deserialization.",null,null],[13,"EIP150","","",56,null],[13,"EIP158","","",56,null],[13,"Frontier","","",56,null],[13,"Homestead","","",56,null],[13,"Byzantium","","",56,null],[13,"Constantinople","","",56,null],[13,"EIP158ToByzantiumAt5","","",56,null],[13,"FrontierToHomesteadAt5","","",56,null],[13,"HomesteadToDaoAt5","","",56,null],[13,"HomesteadToEIP150At5","","",56,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"test"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"test"}],"output":{"name":"bool"}}],[11,"into_iter","","",57,null],[11,"load","","Loads test from json.",57,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"multitransaction"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"multitransaction"}],"output":{"name":"bool"}}],[11,"select","","Build transaction with given indexes.",53,{"inputs":[{"name":"self"},{"name":"poststateindexes"}],"output":{"name":"transaction"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"forkspec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"forkspec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"forkspec"}],"output":{"name":"ordering"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"poststateindexes"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"poststateindexes"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"poststateresult"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"poststateresult"}],"output":{"name":"bool"}}],[0,"log","ethjson::state","State test log deserialization.",null,null],[3,"Log","ethjson::state::log","State test log deserialization.",null,null],[12,"address","","Address.",58,null],[12,"topics","","Topics.",58,null],[12,"data","","Data.",58,null],[12,"bloom","","Bloom.",58,null],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"log"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"log"}],"output":{"name":"bool"}}],[0,"transaction","ethjson","Transaction test deserialization.",null,null],[3,"Transaction","ethjson::transaction","Transaction test transaction deserialization.",null,null],[12,"data","","Transaction data.",59,null],[12,"gas_limit","","Gas limit.",59,null],[12,"gas_price","","Gas price.",59,null],[12,"nonce","","Nonce.",59,null],[12,"to","","To.",59,null],[12,"value","","Value.",59,null],[12,"r","","R.",59,null],[12,"s","","S.",59,null],[12,"v","","V.",59,null],[3,"TransactionTest","","Transaction test deserialization.",null,null],[12,"block_number","","Block number.",60,null],[12,"rlp","","Transaction rlp.",60,null],[12,"sender","","Transaction sender.",60,null],[12,"transaction","","Transaction",60,null],[3,"Test","","TransactionTest test deserializer.",null,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"transaction"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"transactiontest"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"transactiontest"}],"output":{"name":"bool"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"test"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"test"}],"output":{"name":"bool"}}],[11,"into_iter","","",61,null],[11,"load","","Loads test from json.",61,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[0,"misc","ethjson","Misc deserialization.",null,null],[3,"DappsSettings","ethjson::misc","Settings for specific dapp.",null,null],[12,"accounts","","A list of accounts this Dapp can see.",62,null],[12,"default","","Default account",62,null],[3,"DappsHistory","","History for specific dapp.",null,null],[12,"last_accessed","","Last accessed timestamp",63,null],[3,"AccountMeta","","Collected account metadata",null,null],[12,"name","","The name of the account.",64,null],[12,"meta","","The rest of the metadata of the account.",64,null],[12,"uuid","","The 128-bit Uuid of the account, if it has one (brain-wallets don't).",64,null],[4,"NewDappsPolicy","","Accounts policy for new dapps.",null,null],[13,"AllAccounts","","All accounts are exposed by default.",65,null],[12,"default","ethjson::misc::NewDappsPolicy","Default account, which should be returned as the first one.",65,null],[13,"Whitelist","ethjson::misc","Only accounts listed here are exposed by default for new dapps.",65,null],[11,"default","","",64,{"inputs":[],"output":{"name":"accountmeta"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"accountmeta"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"accountmeta"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"accountmeta"}],"output":{"name":"bool"}}],[11,"read","","Read a hash map of DappId -> $name",64,{"inputs":[{"name":"r"}],"output":{"generics":["hashmap","error"],"name":"result"}}],[11,"write","","Write a hash map of DappId -> $name",64,{"inputs":[{"name":"hashmap"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"dappssettings"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"dappssettings"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"dappssettings"}],"output":{"name":"bool"}}],[11,"read","","Read a hash map of DappId -> $name",62,{"inputs":[{"name":"r"}],"output":{"generics":["hashmap","error"],"name":"result"}}],[11,"write","","Write a hash map of DappId -> $name",62,{"inputs":[{"name":"hashmap"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"dappshistory"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"dappshistory"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"dappshistory"}],"output":{"name":"bool"}}],[11,"read","","Read a hash map of DappId -> $name",63,{"inputs":[{"name":"r"}],"output":{"generics":["hashmap","error"],"name":"result"}}],[11,"write","","Write a hash map of DappId -> $name",63,{"inputs":[{"name":"hashmap"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"newdappspolicy"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"newdappspolicy"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"newdappspolicy"}],"output":{"name":"bool"}}],[11,"read","","Read a hash map of DappId -> $name",65,{"inputs":[{"name":"r"}],"output":{"generics":["hashmap","error"],"name":"result"}}],[11,"write","","Write a hash map of DappId -> $name",65,{"inputs":[{"name":"hashmap"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[0,"test","ethjson","Additional test structures deserialization.",null,null],[3,"DifficultyTestCase","ethjson::test","Blockchain test header deserializer.",null,null],[12,"parent_timestamp","","Parent timestamp.",66,null],[12,"parent_difficulty","","Parent difficulty.",66,null],[12,"parent_uncles","","Parent uncle hash.",66,null],[12,"current_timestamp","","Current timestamp.",66,null],[12,"current_difficulty","","Current difficulty.",66,null],[12,"current_block_number","","Current block number.",66,null],[3,"DifficultyTest","","Blockchain test deserializer.",null,null],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"difficultytestcase"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"difficultytestcase"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"difficultytest"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"difficultytest"}],"output":{"name":"bool"}}],[11,"into_iter","","",67,null],[11,"load","","Loads test from json.",67,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[3,"H64"],[3,"Address"],[3,"H256"],[3,"H520"],[3,"Bloom"],[3,"Uint"],[3,"Bytes"],[3,"Account"],[3,"Block"],[3,"BlockChain"],[3,"Header"],[3,"State"],[3,"Transaction"],[3,"Test"],[3,"Account"],[3,"Linear"],[3,"Modexp"],[3,"AltBn128Pairing"],[3,"Builtin"],[4,"Pricing"],[3,"Genesis"],[3,"Params"],[3,"Spec"],[3,"Ethereum"],[3,"AuthorityRoundSeal"],[3,"TendermintSeal"],[4,"Seal"],[4,"Engine"],[3,"State"],[3,"EthashParams"],[3,"Ethash"],[4,"ValidatorSet"],[3,"BasicAuthorityParams"],[3,"BasicAuthority"],[3,"AuthorityRoundParams"],[3,"AuthorityRound"],[3,"TendermintParams"],[3,"Tendermint"],[3,"NullEngineParams"],[3,"NullEngine"],[3,"HardcodedSync"],[3,"Input"],[3,"Trie"],[3,"Test"],[3,"Env"],[3,"Transaction"],[3,"Vm"],[3,"Call"],[3,"Test"],[4,"MaybeEmpty"],[3,"State"],[3,"Transaction"],[3,"State"],[3,"MultiTransaction"],[3,"PostStateIndexes"],[3,"PostStateResult"],[4,"ForkSpec"],[3,"Test"],[3,"Log"],[3,"Transaction"],[3,"TransactionTest"],[3,"Test"],[3,"DappsSettings"],[3,"DappsHistory"],[3,"AccountMeta"],[4,"NewDappsPolicy"],[3,"DifficultyTestCase"],[3,"DifficultyTest"]]};
searchIndex["ethkey"] = {"doc":"","items":[[4,"WordlistError","ethkey","Phrase Validation Error",null,null],[13,"PhraseTooShort","","Phrase is shorter than it was expected.",0,null],[13,"WordNotFromDictionary","","Phrase contains a word that doesn't come from our dictionary.",0,null],[6,"Address","","",null,null],[6,"Public","","",null,null],[3,"Brain","","Simple brainwallet.",null,null],[3,"BrainPrefix","","Tries to find brain-seed keypair with address starting with given prefix.",null,null],[3,"KeyPair","","secp256k1 key pair",null,null],[3,"Password","","",null,null],[3,"Prefix","","Tries to find keypair with address starting with given prefix.",null,null],[3,"Random","","Randomly generates new keypair, instantiating the RNG each time.",null,null],[3,"Signature","","Signature encoded as RSV components",null,null],[3,"Secret","","",null,null],[3,"ExtendedPublic","","Extended public key, allows deterministic derivation of subsequent keys.",null,null],[3,"ExtendedSecret","","Extended secret key, allows deterministic derivation of subsequent keys.",null,null],[3,"ExtendedKeyPair","","",null,null],[3,"SECP256K1","","",null,null],[4,"Error","","Crypto error",null,null],[13,"InvalidSecret","","Invalid secret key",1,null],[13,"InvalidPublic","","Invalid public key",1,null],[13,"InvalidAddress","","Invalid address",1,null],[13,"InvalidSignature","","Invalid EC signature",1,null],[13,"InvalidMessage","","Invalid AES message",1,null],[13,"Io","","IO Error",1,null],[13,"Custom","","Custom",1,null],[4,"DerivationError","","",null,null],[13,"InvalidHardenedUse","","",2,null],[13,"InvalidPoint","","",2,null],[13,"MissingIndex","","",2,null],[13,"InvalidSeed","","",2,null],[4,"Derivation","","Key derivation over generic label `T`",null,null],[13,"Soft","","Soft key derivation (allow proof of parent)",3,null],[13,"Hard","","Hard key derivation (does not allow proof of parent)",3,null],[4,"Void","","Uninstantiatable error type for infallible generators.",null,null],[5,"public_to_address","","",null,{"inputs":[{"name":"public"}],"output":{"name":"address"}}],[5,"sign","","",null,{"inputs":[{"name":"secret"},{"name":"message"}],"output":{"generics":["signature","error"],"name":"result"}}],[5,"verify_public","","",null,{"inputs":[{"name":"public"},{"name":"signature"},{"name":"message"}],"output":{"generics":["bool","error"],"name":"result"}}],[5,"verify_address","","",null,{"inputs":[{"name":"address"},{"name":"signature"},{"name":"message"}],"output":{"generics":["bool","error"],"name":"result"}}],[5,"recover","","",null,{"inputs":[{"name":"signature"},{"name":"message"}],"output":{"generics":["public","error"],"name":"result"}}],[11,"new","","",4,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"validate_phrase","","",4,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["wordlisterror"],"name":"result"}}],[11,"generate","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["keypair"],"name":"result"}}],[11,"new","","",5,{"inputs":[{"generics":["u8"],"name":"vec"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"phrase","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"generate","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["keypair","error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"keypair"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"keypair"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"keypair"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_secret","","Create a pair from secret key",6,{"inputs":[{"name":"secret"}],"output":{"generics":["keypair","error"],"name":"result"}}],[11,"from_secret_slice","","",6,null],[11,"from_keypair","","",6,{"inputs":[{"name":"secretkey"},{"name":"publickey"}],"output":{"name":"self"}}],[11,"secret","","",6,{"inputs":[{"name":"self"}],"output":{"name":"secret"}}],[11,"public","","",6,{"inputs":[{"name":"self"}],"output":{"name":"public"}}],[11,"address","","",6,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"password"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"password"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"password"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_bytes","","",7,null],[11,"as_str","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",7,{"inputs":[{"name":"string"}],"output":{"name":"password"}}],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"password"}}],[11,"new","","",8,{"inputs":[{"generics":["u8"],"name":"vec"},{"name":"usize"}],"output":{"name":"self"}}],[11,"generate","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["keypair","error"],"name":"result"}}],[11,"generate","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["keypair"],"name":"result"}}],[11,"r","","Get a slice into the 'r' portion of the data.",10,null],[11,"s","","Get a slice into the 's' portion of the data.",10,null],[11,"v","","Get the recovery byte.",10,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"into_electrum","","Encode the signature into RSV array (V altered to be in \"Electrum\" notation).",10,null],[11,"from_electrum","","Parse bytes as a signature encoded as RSV (V in \"Electrum\" notation). May return empty (invalid) signature if given data has invalid length.",10,null],[11,"from_rsv","","Create a signature object from the sig.",10,{"inputs":[{"name":"h256"},{"name":"h256"},{"name":"u8"}],"output":{"name":"self"}}],[11,"is_low_s","","Check if this is a \"low\" signature.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_valid","","Check if each component of the signature is in range.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from","","",10,null],[11,"into","","",10,null],[11,"from","","",10,{"inputs":[{"name":"h520"}],"output":{"name":"self"}}],[11,"deref","","",10,null],[11,"deref_mut","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"secret"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"secret"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"secret"}],"output":{"name":"bool"}}],[11,"to_hex","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","Creates a `Secret` from the given slice, returning `None` if the slice length != 32.",11,null],[11,"zero","","Creates zero key, which is invalid for crypto operations, but valid for math operation.",11,{"inputs":[],"output":{"name":"self"}}],[11,"from_unsafe_slice","","Imports and validates the key.",11,null],[11,"check_validity","","Checks validity of this key.",11,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","","Inplace add one secret key to another (scalar + scalar)",11,{"inputs":[{"name":"self"},{"name":"secret"}],"output":{"generics":["error"],"name":"result"}}],[11,"sub","","Inplace subtract one secret key from another (scalar - scalar)",11,{"inputs":[{"name":"self"},{"name":"secret"}],"output":{"generics":["error"],"name":"result"}}],[11,"dec","","Inplace decrease secret key (scalar - 1)",11,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"mul","","Inplace multiply one secret key to another (scalar * scalar)",11,{"inputs":[{"name":"self"},{"name":"secret"}],"output":{"generics":["error"],"name":"result"}}],[11,"neg","","Inplace negate secret key (-scalar)",11,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"inv","","Inplace inverse secret key (1 / scalar)",11,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"pow","","Compute power of secret key inplace (secret ^ pow). This function is not intended to be used with large powers.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_secp256k1_secret","","Create `secp256k1::key::SecretKey` based on this secret",11,{"inputs":[{"name":"self"}],"output":{"generics":["secretkey","error"],"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",11,null],[11,"from","","",11,{"inputs":[{"name":"h256"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"name":"secretkey"}],"output":{"name":"self"}}],[11,"deref","","",11,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"with_code","","New extended key from given secret and chain code.",12,{"inputs":[{"name":"secret"},{"name":"h256"}],"output":{"name":"extendedsecret"}}],[11,"new_random","","New extended key from given secret with the random chain code.",12,{"inputs":[{"name":"secret"}],"output":{"name":"extendedsecret"}}],[11,"new","","New extended key from given secret. Chain code will be derived from the secret itself (in a deterministic way).",12,{"inputs":[{"name":"secret"}],"output":{"name":"extendedsecret"}}],[11,"derive","","Derive new private key",12,{"inputs":[{"name":"self"},{"name":"derivation"}],"output":{"name":"extendedsecret"}}],[11,"as_raw","","Private key component of the extended key.",12,{"inputs":[{"name":"self"}],"output":{"name":"secret"}}],[11,"new","","New extended public key from known parent and chain code",13,{"inputs":[{"name":"public"},{"name":"h256"}],"output":{"name":"self"}}],[11,"from_secret","","Create new extended public key from known secret",13,{"inputs":[{"name":"extendedsecret"}],"output":{"generics":["derivationerror"],"name":"result"}}],[11,"derive","","Derive new public key Operation is defined only for index belongs [0..2^31)",13,{"inputs":[{"name":"self"},{"name":"derivation"}],"output":{"generics":["derivationerror"],"name":"result"}}],[11,"public","","",13,{"inputs":[{"name":"self"}],"output":{"name":"public"}}],[11,"new","","",14,{"inputs":[{"name":"secret"}],"output":{"name":"self"}}],[11,"with_code","","",14,{"inputs":[{"name":"secret"},{"name":"public"},{"name":"h256"}],"output":{"name":"self"}}],[11,"with_secret","","",14,{"inputs":[{"name":"secret"},{"name":"h256"}],"output":{"name":"self"}}],[11,"with_seed","","",14,null],[11,"secret","","",14,{"inputs":[{"name":"self"}],"output":{"name":"extendedsecret"}}],[11,"public","","",14,{"inputs":[{"name":"self"}],"output":{"name":"extendedpublic"}}],[11,"derive","","",14,{"inputs":[{"name":"self"},{"name":"derivation"}],"output":{"generics":["derivationerror"],"name":"result"}}],[0,"brain_recover","","",null,null],[3,"PhrasesIterator","ethkey::brain_recover","Iterator over possible",null,null],[5,"brain_recover","","Tries to find a phrase for address, given the number of expected words and a partial phrase.",null,{"inputs":[{"name":"address"},{"name":"str"},{"name":"usize"}],"output":{"generics":["string"],"name":"option"}}],[11,"from_known_phrase","","",15,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"self"}}],[11,"new","","",15,{"inputs":[{"generics":["vec"],"name":"vec"}],"output":{"name":"self"}}],[11,"combinations","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[0,"crypto","ethkey","",null,null],[4,"Error","ethkey::crypto","",null,null],[13,"Secp","","",16,null],[13,"Io","","",16,null],[13,"InvalidMessage","","",16,null],[13,"Symm","","",16,null],[0,"ecdh","","ECDH functions",null,null],[5,"agree","ethkey::crypto::ecdh","Agree on a shared secret",null,{"inputs":[{"name":"secret"},{"name":"public"}],"output":{"generics":["secret","error"],"name":"result"}}],[0,"ecies","ethkey::crypto","ECIES function",null,null],[5,"encrypt","ethkey::crypto::ecies","Encrypt a message with a public key, writing an HMAC covering both the plaintext and authenticated data.",null,null],[5,"decrypt","","Decrypt a message with a secret key, checking HMAC for ciphertext and authenticated data validity.",null,null],[11,"fmt","ethkey::crypto","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",16,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"symmerror"}],"output":{"name":"error"}}],[0,"math","ethkey","",null,null],[5,"public_is_valid","ethkey::math","Whether the public key is valid.",null,{"inputs":[{"name":"public"}],"output":{"name":"bool"}}],[5,"public_mul_secret","","Inplace multiply public key by secret key (EC point * scalar)",null,{"inputs":[{"name":"public"},{"name":"secret"}],"output":{"generics":["error"],"name":"result"}}],[5,"public_add","","Inplace add one public key to another (EC point + EC point)",null,{"inputs":[{"name":"public"},{"name":"public"}],"output":{"generics":["error"],"name":"result"}}],[5,"public_sub","","Inplace sub one public key from another (EC point - EC point)",null,{"inputs":[{"name":"public"},{"name":"public"}],"output":{"generics":["error"],"name":"result"}}],[5,"public_negate","","Replace public key with its negation (EC point = - EC point)",null,{"inputs":[{"name":"public"}],"output":{"generics":["error"],"name":"result"}}],[5,"generation_point","","Return base point of secp256k1",null,{"inputs":[],"output":{"name":"public"}}],[5,"curve_order","","Return secp256k1 elliptic curve order",null,{"inputs":[],"output":{"name":"u256"}}],[6,"Message","ethkey","",null,null],[8,"Generator","","Generates new keypair.",null,null],[16,"Error","","",17,null],[10,"generate","","Should be called to generate new keypair.",17,{"inputs":[{"name":"self"}],"output":{"generics":["keypair"],"name":"result"}}],[11,"deref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"secp256k1"}}],[11,"initialize","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[4,"WordlistError"],[4,"Error"],[4,"DerivationError"],[4,"Derivation"],[3,"Brain"],[3,"BrainPrefix"],[3,"KeyPair"],[3,"Password"],[3,"Prefix"],[3,"Random"],[3,"Signature"],[3,"Secret"],[3,"ExtendedSecret"],[3,"ExtendedPublic"],[3,"ExtendedKeyPair"],[3,"PhrasesIterator"],[4,"Error"],[8,"Generator"],[3,"SECP256K1"],[4,"Void"]]};
searchIndex["ethstore"] = {"doc":"Ethereum key-management.","items":[[5,"random_phrase","ethstore","Generate a string which is a random phrase of a number of lowercase words.",null,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[3,"SafeAccount","","Account representation.",null,null],[12,"id","","Account ID",0,null],[12,"version","","Account version",0,null],[12,"address","","Account address",0,null],[12,"crypto","","Account private key derivation definition.",0,null],[12,"filename","","Account filename",0,null],[12,"name","","Account name",0,null],[12,"meta","","Account metadata",0,null],[3,"Crypto","","Encrypted data",null,null],[12,"cipher","","Encryption parameters",1,null],[12,"ciphertext","","Encrypted data buffer",1,null],[12,"kdf","","Key derivation function parameters",1,null],[12,"mac","","Message authentication code",1,null],[3,"EthStore","","Accounts store.",null,null],[3,"EthMultiStore","","Similar to `EthStore` but may store many accounts (with different passwords) for the same `Address`",null,null],[3,"KeyFile","","Public opaque type representing serializable `KeyFile`.",null,null],[3,"PresaleWallet","","Pre-sale wallet.",null,null],[3,"StoreAccountRef","","Stored account reference",null,null],[12,"address","","Account address",2,null],[12,"vault","","Vault reference",2,null],[3,"IndexDerivation","","Node in hierarchical derivation.",null,null],[12,"soft","","Node is soft (allows proof of parent from parent node).",3,null],[12,"index","","Index sequence of the node.",3,null],[3,"OpaqueSecret","","An opaque wrapper for secret.",null,null],[4,"Error","","Account-related errors.",null,null],[13,"Io","","IO error",4,null],[13,"InvalidPassword","","Invalid Password",4,null],[13,"InvalidSecret","","Account's secret is invalid.",4,null],[13,"InvalidCryptoMeta","","Invalid Vault Crypto meta.",4,null],[13,"InvalidAccount","","Invalid Account.",4,null],[13,"InvalidMessage","","Invalid Message.",4,null],[13,"InvalidKeyFile","","Invalid Key File",4,null],[13,"VaultsAreNotSupported","","Vaults are not supported.",4,null],[13,"UnsupportedVault","","Unsupported vault",4,null],[13,"InvalidVaultName","","Invalid vault name",4,null],[13,"VaultNotFound","","Vault not found",4,null],[13,"CreationFailed","","Account creation failed.",4,null],[13,"EthKey","","`EthKey` error",4,null],[13,"EthKeyCrypto","","`ethkey::crypto::Error`",4,null],[13,"EthCrypto","","`EthCrypto` error",4,null],[13,"Derivation","","Derivation error",4,null],[13,"Custom","","Custom error",4,null],[4,"SecretVaultRef","","Key directory reference",null,null],[13,"Root","","Reference to key in root directory",5,null],[13,"Vault","","Referenc to key in specific vault",5,null],[4,"Derivation","","Derivation scheme for keys",null,null],[13,"Hierarchical","","Hierarchical derivation",6,null],[13,"SoftHash","","Hash derivation, soft.",6,null],[13,"HardHash","","Hash derivation, hard.",6,null],[5,"import_account","","Import an account from a file.",null,{"inputs":[{"name":"path"},{"name":"keydirectory"}],"output":{"generics":["address","error"],"name":"result"}}],[5,"import_accounts","","Import all accounts from one directory to the other.",null,{"inputs":[{"name":"keydirectory"},{"name":"keydirectory"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"read_geth_accounts","","Provide a `HashSet` of all accounts available for import from the Geth keystore.",null,{"inputs":[{"name":"bool"}],"output":{"generics":["address"],"name":"vec"}}],[5,"random_string","","Generate a random string of given length.",null,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[0,"accounts_dir","","Accounts Directory",null,null],[3,"VaultKey","ethstore::accounts_dir","Vault key",null,null],[12,"password","","Vault password",7,null],[12,"iterations","","Number of iterations to produce a derived key from password",7,null],[3,"DiskKeyFileManager","","Keys file manager for root keys directory",null,null],[3,"MemoryDirectory","","Accounts in-memory storage.",null,null],[4,"SetKeyError","","`VaultKeyDirectory::set_key` error",null,null],[13,"Fatal","","Error is fatal and directory is probably in inconsistent state",8,null],[13,"NonFatalOld","","Error is non fatal, directory is reverted to pre-operation state",8,null],[13,"NonFatalNew","","Error is non fatal, directory is consistent with new key",8,null],[11,"read","","",9,{"inputs":[{"name":"self"},{"generics":["string"],"name":"option"},{"name":"t"}],"output":{"generics":["safeaccount","error"],"name":"result"}}],[11,"write","","",9,{"inputs":[{"name":"self"},{"name":"safeaccount"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"memorydirectory"}}],[11,"load","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"update","","",10,{"inputs":[{"name":"self"},{"name":"safeaccount"}],"output":{"generics":["safeaccount","error"],"name":"result"}}],[11,"insert","","",10,{"inputs":[{"name":"self"},{"name":"safeaccount"}],"output":{"generics":["safeaccount","error"],"name":"result"}}],[11,"remove","","",10,{"inputs":[{"name":"self"},{"name":"safeaccount"}],"output":{"generics":["error"],"name":"result"}}],[11,"unique_repr","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["u64","error"],"name":"result"}}],[6,"RootDiskDirectory","","Root keys directory implementation",null,null],[6,"VaultDiskDirectory","","Vault directory implementation",null,null],[8,"KeyDirectory","","Keys directory",null,null],[10,"load","","Read keys from directory",11,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"insert","","Insert new key to directory",11,{"inputs":[{"name":"self"},{"name":"safeaccount"}],"output":{"generics":["safeaccount","error"],"name":"result"}}],[10,"update","","Update key in the directory",11,{"inputs":[{"name":"self"},{"name":"safeaccount"}],"output":{"generics":["safeaccount","error"],"name":"result"}}],[10,"remove","","Remove key from directory",11,{"inputs":[{"name":"self"},{"name":"safeaccount"}],"output":{"generics":["error"],"name":"result"}}],[11,"path","","Get directory filesystem path, if available",11,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"option"}}],[11,"as_vault_provider","","Return vault provider, if available",11,{"inputs":[{"name":"self"}],"output":{"generics":["vaultkeydirectoryprovider"],"name":"option"}}],[10,"unique_repr","","Unique representation of directory account collection",11,{"inputs":[{"name":"self"}],"output":{"generics":["u64","error"],"name":"result"}}],[8,"VaultKeyDirectoryProvider","","Vaults provider",null,null],[10,"create","","Create new vault with given key",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"vaultkey"}],"output":{"generics":["box","error"],"name":"result"}}],[10,"open","","Open existing vault with given key",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"vaultkey"}],"output":{"generics":["box","error"],"name":"result"}}],[10,"list_vaults","","List all vaults",12,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"vault_meta","","Get vault meta",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[8,"VaultKeyDirectory","","Vault directory",null,null],[10,"as_key_directory","","Cast to `KeyDirectory`",13,{"inputs":[{"name":"self"}],"output":{"name":"keydirectory"}}],[10,"name","","Vault name",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"key","","Get vault key",13,{"inputs":[{"name":"self"}],"output":{"name":"vaultkey"}}],[10,"set_key","","Set new key for vault",13,{"inputs":[{"name":"self"},{"name":"vaultkey"}],"output":{"generics":["setkeyerror"],"name":"result"}}],[10,"meta","","Get vault meta",13,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"set_meta","","Set vault meta",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[8,"KeyFileManager","","Disk directory key file manager",null,null],[10,"read","","Read `SafeAccount` from given key file stream",14,{"inputs":[{"name":"self"},{"generics":["string"],"name":"option"},{"name":"t"}],"output":{"generics":["safeaccount","error"],"name":"result"}}],[10,"write","","Write `SafeAccount` to given key file stream",14,{"inputs":[{"name":"self"},{"name":"safeaccount"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vaultkey"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"vaultkey"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"vaultkey"}],"output":{"name":"bool"}}],[11,"new","","Create new vault key",7,{"inputs":[{"name":"password"},{"name":"u32"}],"output":{"name":"self"}}],[0,"ethkey","ethstore","ethkey reexport to make documentation look pretty.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"crypto"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"crypto"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"crypto"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_secret","","Encrypt account secret",1,{"inputs":[{"name":"secret"},{"name":"password"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"with_plain","","Encrypt custom plain data",1,null],[11,"secret","","Try to decrypt and convert result to account secret",1,{"inputs":[{"name":"self"},{"name":"password"}],"output":{"generics":["secret","error"],"name":"result"}}],[11,"decrypt","","Try to decrypt and return result as is",1,{"inputs":[{"name":"self"},{"name":"password"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"safeaccount"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"safeaccount"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"safeaccount"}}],[11,"create","","Create a new account",0,null],[11,"from_file","","Create a new `SafeAccount` from the given `json`; if it was read from a file, the `filename` should be `Some` name. If it is as yet anonymous, then it can be left `None`.",0,{"inputs":[{"name":"keyfile"},{"generics":["string"],"name":"option"}],"output":{"name":"self"}}],[11,"from_vault_file","","Create a new `SafeAccount` from the given vault `json`; if it was read from a file, the `filename` should be `Some` name. If it is as yet anonymous, then it can be left `None`.",0,{"inputs":[{"name":"password"},{"name":"vaultkeyfile"},{"generics":["string"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"into_vault_file","","Create a new `VaultKeyFile` from the given `self`",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"password"}],"output":{"generics":["vaultkeyfile","error"],"name":"result"}}],[11,"sign","","Sign a message.",0,{"inputs":[{"name":"self"},{"name":"password"},{"name":"message"}],"output":{"generics":["signature","error"],"name":"result"}}],[11,"decrypt","","Decrypt a message.",0,null],[11,"agree","","Agree on shared key.",0,{"inputs":[{"name":"self"},{"name":"password"},{"name":"public"}],"output":{"generics":["secret","error"],"name":"result"}}],[11,"public","","Derive public key.",0,{"inputs":[{"name":"self"},{"name":"password"}],"output":{"generics":["public","error"],"name":"result"}}],[11,"change_password","","Change account's password.",0,{"inputs":[{"name":"self"},{"name":"password"},{"name":"password"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"check_password","","Check if password matches the account.",0,{"inputs":[{"name":"self"},{"name":"password"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"opaquekeyfile"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"opaquekeyfile"}],"output":{"name":"bool"}}],[11,"serialize","","",15,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from","","",15,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"ioerror"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"ethkeyerror"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"ethcryptoerror"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"scrypterror"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"symmerror"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"derivationerror"}],"output":{"name":"self"}}],[11,"open","","Open a new accounts store with given key directory backend.",16,{"inputs":[{"generics":["keydirectory"],"name":"box"}],"output":{"generics":["error"],"name":"result"}}],[11,"open_with_iterations","","Open a new account store with given key directory backend and custom number of iterations.",16,{"inputs":[{"generics":["keydirectory"],"name":"box"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_refresh_time","","Modify account refresh timeout - how often they are re-read from `KeyDirectory`.",16,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"insert_account","","",16,{"inputs":[{"name":"self"},{"name":"secretvaultref"},{"name":"secret"},{"name":"password"}],"output":{"generics":["storeaccountref","error"],"name":"result"}}],[11,"insert_derived","","",16,{"inputs":[{"name":"self"},{"name":"secretvaultref"},{"name":"storeaccountref"},{"name":"password"},{"name":"derivation"}],"output":{"generics":["storeaccountref","error"],"name":"result"}}],[11,"generate_derived","","",16,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"},{"name":"derivation"}],"output":{"generics":["address","error"],"name":"result"}}],[11,"account_ref","","",16,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["storeaccountref","error"],"name":"result"}}],[11,"accounts","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"change_password","","",16,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"export_account","","",16,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"}],"output":{"generics":["opaquekeyfile","error"],"name":"result"}}],[11,"remove_account","","",16,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"sign","","",16,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"},{"name":"message"}],"output":{"generics":["signature","error"],"name":"result"}}],[11,"sign_derived","","",16,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"},{"name":"derivation"},{"name":"message"}],"output":{"generics":["signature","error"],"name":"result"}}],[11,"agree","","",16,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"},{"name":"public"}],"output":{"generics":["secret","error"],"name":"result"}}],[11,"decrypt","","",16,null],[11,"create_vault","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"open_vault","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"close_vault","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"list_vaults","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"list_opened_vaults","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"change_vault_password","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"change_account_vault","","",16,{"inputs":[{"name":"self"},{"name":"secretvaultref"},{"name":"storeaccountref"}],"output":{"generics":["storeaccountref","error"],"name":"result"}}],[11,"get_vault_meta","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"set_vault_meta","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"raw_secret","","",16,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"}],"output":{"generics":["opaquesecret","error"],"name":"result"}}],[11,"import_presale","","",16,null],[11,"import_wallet","","",16,null],[11,"test_password","","",16,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"copy_account","","",16,{"inputs":[{"name":"self"},{"name":"simplesecretstore"},{"name":"secretvaultref"},{"name":"storeaccountref"},{"name":"password"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"public","","",16,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"}],"output":{"generics":["public","error"],"name":"result"}}],[11,"uuid","","",16,{"inputs":[{"name":"self"},{"name":"storeaccountref"}],"output":{"generics":["uuid","error"],"name":"result"}}],[11,"name","","",16,{"inputs":[{"name":"self"},{"name":"storeaccountref"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"meta","","",16,{"inputs":[{"name":"self"},{"name":"storeaccountref"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"set_name","","",16,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"string"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_meta","","",16,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"string"}],"output":{"generics":["error"],"name":"result"}}],[11,"local_path","","",16,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"list_geth_accounts","","",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["address"],"name":"vec"}}],[11,"import_geth_accounts","","",16,{"inputs":[{"name":"self"},{"name":"secretvaultref"},{"generics":["address"],"name":"vec"},{"name":"bool"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"open","","Open new multi-accounts store with given key directory backend.",17,{"inputs":[{"generics":["keydirectory"],"name":"box"}],"output":{"generics":["error"],"name":"result"}}],[11,"open_with_iterations","","Open new multi-accounts store with given key directory backend and custom number of iterations for new keys.",17,{"inputs":[{"generics":["keydirectory"],"name":"box"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"set_refresh_time","","Modify account refresh timeout - how often they are re-read from `KeyDirectory`.",17,{"inputs":[{"name":"self"},{"name":"duration"}],"output":null}],[11,"insert_account","","",17,{"inputs":[{"name":"self"},{"name":"secretvaultref"},{"name":"secret"},{"name":"password"}],"output":{"generics":["storeaccountref","error"],"name":"result"}}],[11,"insert_derived","","",17,{"inputs":[{"name":"self"},{"name":"secretvaultref"},{"name":"storeaccountref"},{"name":"password"},{"name":"derivation"}],"output":{"generics":["storeaccountref","error"],"name":"result"}}],[11,"generate_derived","","",17,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"},{"name":"derivation"}],"output":{"generics":["address","error"],"name":"result"}}],[11,"sign_derived","","",17,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"},{"name":"derivation"},{"name":"message"}],"output":{"generics":["signature","error"],"name":"result"}}],[11,"account_ref","","",17,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["storeaccountref","error"],"name":"result"}}],[11,"accounts","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"remove_account","","",17,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"change_password","","",17,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"export_account","","",17,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"}],"output":{"generics":["opaquekeyfile","error"],"name":"result"}}],[11,"sign","","",17,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"},{"name":"message"}],"output":{"generics":["signature","error"],"name":"result"}}],[11,"decrypt","","",17,null],[11,"agree","","",17,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"},{"name":"public"}],"output":{"generics":["secret","error"],"name":"result"}}],[11,"create_vault","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"open_vault","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"close_vault","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"list_vaults","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"list_opened_vaults","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"change_vault_password","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[11,"change_account_vault","","",17,{"inputs":[{"name":"self"},{"name":"secretvaultref"},{"name":"storeaccountref"}],"output":{"generics":["storeaccountref","error"],"name":"result"}}],[11,"get_vault_meta","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"set_vault_meta","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"open","","Open a pre-sale wallet.",18,{"inputs":[{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[11,"decrypt","","Decrypt the wallet.",18,{"inputs":[{"name":"self"},{"name":"password"}],"output":{"generics":["keypair","error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"secretvaultref"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"secretvaultref"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"secretvaultref"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"secretvaultref"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"secretvaultref"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"secretvaultref"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"secretvaultref"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"secretvaultref"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"secretvaultref"}],"output":{"name":"ordering"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"storeaccountref"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"storeaccountref"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"storeaccountref"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"storeaccountref"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"storeaccountref"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"borrow","","",2,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"root","","Create reference to root account with given address",2,{"inputs":[{"name":"address"}],"output":{"name":"self"}}],[11,"vault","","Create reference to vault account with given address",2,{"inputs":[{"name":"str"},{"name":"address"}],"output":{"name":"self"}}],[11,"new","","Create new account reference",2,{"inputs":[{"name":"secretvaultref"},{"name":"address"}],"output":{"name":"self"}}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[8,"SimpleSecretStore","","Simple Secret Store API",null,null],[10,"insert_account","","Inserts new accounts to the store (or vault) with given password.",19,{"inputs":[{"name":"self"},{"name":"secretvaultref"},{"name":"secret"},{"name":"password"}],"output":{"generics":["storeaccountref","error"],"name":"result"}}],[10,"insert_derived","","Inserts new derived account to the store (or vault) with given password.",19,{"inputs":[{"name":"self"},{"name":"secretvaultref"},{"name":"storeaccountref"},{"name":"password"},{"name":"derivation"}],"output":{"generics":["storeaccountref","error"],"name":"result"}}],[10,"change_password","","Changes accounts password.",19,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[10,"export_account","","Exports key details for account.",19,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"}],"output":{"generics":["opaquekeyfile","error"],"name":"result"}}],[10,"remove_account","","Entirely removes account from the store and underlying storage.",19,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[10,"generate_derived","","Generates new derived account.",19,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"},{"name":"derivation"}],"output":{"generics":["address","error"],"name":"result"}}],[10,"sign","","Sign a message with given account.",19,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"},{"name":"message"}],"output":{"generics":["signature","error"],"name":"result"}}],[10,"sign_derived","","Sign a message with derived account.",19,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"},{"name":"derivation"},{"name":"message"}],"output":{"generics":["signature","error"],"name":"result"}}],[10,"decrypt","","Decrypt a messages with given account.",19,null],[10,"agree","","Agree on shared key.",19,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"},{"name":"public"}],"output":{"generics":["secret","error"],"name":"result"}}],[10,"accounts","","Returns all accounts in this secret store.",19,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"account_ref","","Get reference to some account with given address. This method could be removed if we will guarantee that there is max(1) account for given address.",19,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["storeaccountref","error"],"name":"result"}}],[10,"create_vault","","Create new vault with given password",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[10,"open_vault","","Open vault with given password",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[10,"close_vault","","Close vault",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"list_vaults","","List all vaults",19,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"list_opened_vaults","","List all currently opened vaults",19,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"change_vault_password","","Change vault password",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[10,"change_account_vault","","Cnage account' vault",19,{"inputs":[{"name":"self"},{"name":"secretvaultref"},{"name":"storeaccountref"}],"output":{"generics":["storeaccountref","error"],"name":"result"}}],[10,"get_vault_meta","","Get vault metadata string.",19,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[10,"set_vault_meta","","Set vault metadata string.",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[8,"SecretStore","","Secret Store API",null,null],[10,"raw_secret","","Returns a raw opaque Secret that can be later used to sign a message.",20,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"}],"output":{"generics":["opaquesecret","error"],"name":"result"}}],[11,"sign_with_secret","","Signs a message with raw secret.",20,{"inputs":[{"name":"self"},{"name":"opaquesecret"},{"name":"message"}],"output":{"generics":["signature","error"],"name":"result"}}],[10,"import_presale","","Imports presale wallet",20,null],[10,"import_wallet","","Imports existing JSON wallet",20,null],[10,"copy_account","","Copies account between stores and vaults.",20,{"inputs":[{"name":"self"},{"name":"simplesecretstore"},{"name":"secretvaultref"},{"name":"storeaccountref"},{"name":"password"},{"name":"password"}],"output":{"generics":["error"],"name":"result"}}],[10,"test_password","","Checks if password matches given account.",20,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"}],"output":{"generics":["bool","error"],"name":"result"}}],[10,"public","","Returns a public key for given account.",20,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"password"}],"output":{"generics":["public","error"],"name":"result"}}],[10,"uuid","","Returns uuid of an account.",20,{"inputs":[{"name":"self"},{"name":"storeaccountref"}],"output":{"generics":["uuid","error"],"name":"result"}}],[10,"name","","Returns account's name.",20,{"inputs":[{"name":"self"},{"name":"storeaccountref"}],"output":{"generics":["string","error"],"name":"result"}}],[10,"meta","","Returns account's metadata.",20,{"inputs":[{"name":"self"},{"name":"storeaccountref"}],"output":{"generics":["string","error"],"name":"result"}}],[10,"set_name","","Modifies account metadata.",20,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"string"}],"output":{"generics":["error"],"name":"result"}}],[10,"set_meta","","Modifies account name.",20,{"inputs":[{"name":"self"},{"name":"storeaccountref"},{"name":"string"}],"output":{"generics":["error"],"name":"result"}}],[10,"local_path","","Returns local path of the store.",20,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[10,"list_geth_accounts","","Lists all found geth accounts.",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["address"],"name":"vec"}}],[10,"import_geth_accounts","","Imports geth accounts to the store/vault.",20,{"inputs":[{"name":"self"},{"name":"secretvaultref"},{"generics":["address"],"name":"vec"},{"name":"bool"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"as_key_directory","ethstore::accounts_dir","",21,{"inputs":[{"name":"self"}],"output":{"name":"keydirectory"}}],[11,"name","","",21,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"key","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vaultkey"}}],[11,"set_key","","",21,{"inputs":[{"name":"self"},{"name":"vaultkey"}],"output":{"generics":["setkeyerror"],"name":"result"}}],[11,"meta","","",21,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"set_meta","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"sign_with_secret","ethstore","Signs a message with raw secret.",20,{"inputs":[{"name":"self"},{"name":"opaquesecret"},{"name":"message"}],"output":{"generics":["signature","error"],"name":"result"}}]],"paths":[[3,"SafeAccount"],[3,"Crypto"],[3,"StoreAccountRef"],[3,"IndexDerivation"],[4,"Error"],[4,"SecretVaultRef"],[4,"Derivation"],[3,"VaultKey"],[4,"SetKeyError"],[3,"DiskKeyFileManager"],[3,"MemoryDirectory"],[8,"KeyDirectory"],[8,"VaultKeyDirectoryProvider"],[8,"VaultKeyDirectory"],[8,"KeyFileManager"],[3,"KeyFile"],[3,"EthStore"],[3,"EthMultiStore"],[3,"PresaleWallet"],[8,"SimpleSecretStore"],[8,"SecretStore"],[6,"VaultDiskDirectory"]]};
searchIndex["evm"] = {"doc":"Ethereum virtual machine.","items":[[3,"Schedule","evm","Definition of the cost schedule and other parameterisations for the EVM.",null,null],[12,"exceptional_failed_code_deposit","","Does it support exceptional failed code deposit",0,null],[12,"have_delegate_call","","Does it have a delegate cal",0,null],[12,"have_create2","","Does it have a CREATE_P2SH instruction",0,null],[12,"have_revert","","Does it have a REVERT instruction",0,null],[12,"stack_limit","","VM stack limit",0,null],[12,"max_depth","","Max number of nested calls/creates",0,null],[12,"tier_step_gas","","Gas prices for instructions in all tiers",0,null],[12,"exp_gas","","Gas price for `EXP` opcode",0,null],[12,"exp_byte_gas","","Additional gas for `EXP` opcode for each byte of exponent",0,null],[12,"sha3_gas","","Gas price for `SHA3` opcode",0,null],[12,"sha3_word_gas","","Additional gas for `SHA3` opcode for each word of hashed memory",0,null],[12,"sload_gas","","Gas price for loading from storage",0,null],[12,"sstore_set_gas","","Gas price for setting new value to storage (`storage==0`, `new!=0`)",0,null],[12,"sstore_reset_gas","","Gas price for altering value in storage",0,null],[12,"sstore_refund_gas","","Gas refund for `SSTORE` clearing (when `storage!=0`, `new==0`)",0,null],[12,"jumpdest_gas","","Gas price for `JUMPDEST` opcode",0,null],[12,"log_gas","","Gas price for `LOG*`",0,null],[12,"log_data_gas","","Additional gas for data in `LOG*`",0,null],[12,"log_topic_gas","","Additional gas for each topic in `LOG*`",0,null],[12,"create_gas","","Gas price for `CREATE` opcode",0,null],[12,"call_gas","","Gas price for `*CALL*` opcodes",0,null],[12,"call_stipend","","Stipend for transfer for `CALL|CALLCODE` opcode when `value>0`",0,null],[12,"call_value_transfer_gas","","Additional gas required for value transfer (`CALL|CALLCODE`)",0,null],[12,"call_new_account_gas","","Additional gas for creating new account (`CALL|CALLCODE`)",0,null],[12,"suicide_refund_gas","","Refund for SUICIDE",0,null],[12,"memory_gas","","Gas for used memory",0,null],[12,"quad_coeff_div","","Coefficient used to convert memory size to gas price for memory",0,null],[12,"create_data_gas","","Cost for contract length when executing `CREATE`",0,null],[12,"create_data_limit","","Maximum code size when creating a contract.",0,null],[12,"tx_gas","","Transaction cost",0,null],[12,"tx_create_gas","","`CREATE` transaction cost",0,null],[12,"tx_data_zero_gas","","Additional cost for empty data transaction",0,null],[12,"tx_data_non_zero_gas","","Aditional cost for non-empty data transaction",0,null],[12,"copy_gas","","Gas price for copying memory",0,null],[12,"extcodesize_gas","","Price of EXTCODESIZE",0,null],[12,"extcodecopy_base_gas","","Base price of EXTCODECOPY",0,null],[12,"balance_gas","","Price of BALANCE",0,null],[12,"suicide_gas","","Price of SUICIDE",0,null],[12,"suicide_to_new_account_cost","","Amount of additional gas to pay when SUICIDE credits a non-existant account",0,null],[12,"sub_gas_cap_divisor","","If Some(x): let limit = GAS * (x - 1) / x; let CALL's gas = min(requested, limit). let CREATE's gas = limit. If None: let CALL's gas = (requested > GAS ? [OOG] : GAS). let CREATE's gas = GAS",0,null],[12,"no_empty","","Don't ever make empty accounts; contracts start with nonce=1. Also, don't charge 25k when sending/suicide zero-value.",0,null],[12,"kill_empty","","Kill empty accounts if touched.",0,null],[12,"blockhash_gas","","Blockhash instruction gas cost.",0,null],[12,"have_static_call","","Static Call opcode enabled.",0,null],[12,"have_return_data","","RETURNDATA and RETURNDATASIZE opcodes enabled.",0,null],[12,"have_bitwise_shifting","","SHL, SHR, SAR opcodes enabled.",0,null],[12,"kill_dust","","Kill basic accounts below this balance if touched.",0,null],[12,"eip86","","Enable EIP-86 rules",0,null],[12,"wasm","","Wasm extra schedule settings, if wasm activated",0,null],[4,"CleanDustMode","","Dust accounts cleanup mode.",null,null],[13,"Off","","Dust cleanup is disabled.",1,null],[13,"BasicOnly","","Basic dust accounts will be removed.",1,null],[13,"WithCodeAndStorage","","Basic and contract dust accounts will be removed.",1,null],[3,"EnvInfo","","Information concerning the execution environment for a message-call/contract-creation.",null,null],[12,"number","","The block number.",2,null],[12,"author","","The block author.",2,null],[12,"timestamp","","The block timestamp.",2,null],[12,"difficulty","","The block difficulty.",2,null],[12,"gas_limit","","The block gas limit.",2,null],[12,"last_hashes","","The last 256 block hashes.",2,null],[12,"gas_used","","The gas used.",2,null],[4,"CallType","","The type of the call-like instruction.",null,null],[13,"None","","Not a CALL.",3,null],[13,"Call","","CALL.",3,null],[13,"CallCode","","CALLCODE.",3,null],[13,"DelegateCall","","DELEGATECALL.",3,null],[13,"StaticCall","","STATICCALL",3,null],[3,"ActionParams","","Action (call/create) input params. Everything else should be specified in Externalities.",null,null],[12,"code_address","","Address of currently executed code.",4,null],[12,"code_hash","","Hash of currently executed code.",4,null],[12,"address","","Receive address. Usually equal to code_address, except when called using CALLCODE.",4,null],[12,"sender","","Sender of current part of the transaction.",4,null],[12,"origin","","Transaction initiator.",4,null],[12,"gas","","Gas paid up front for transaction execution",4,null],[12,"gas_price","","Gas price.",4,null],[12,"value","","Transaction value.",4,null],[12,"code","","Code being executed.",4,null],[12,"data","","Input data.",4,null],[12,"call_type","","Type of call",4,null],[12,"params_type","","Param types encoding",4,null],[8,"Ext","","Externalities interface for EVMs",null,null],[10,"storage_at","","Returns a value for given key.",5,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["h256","error"],"name":"result"}}],[10,"set_storage","","Stores a value for given key.",5,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"h256"}],"output":{"generics":["error"],"name":"result"}}],[10,"exists","","Determine whether an account exists.",5,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"generics":["bool","error"],"name":"result"}}],[10,"exists_and_not_null","","Determine whether an account exists and is not null (zero balance/nonce, no code).",5,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"generics":["bool","error"],"name":"result"}}],[10,"origin_balance","","Balance of the origin account.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u256","error"],"name":"result"}}],[10,"balance","","Returns address balance.",5,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"generics":["u256","error"],"name":"result"}}],[10,"blockhash","","Returns the hash of one of the 256 most recent complete blocks.",5,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"h256"}}],[10,"create","","Creates new contract.",5,null],[10,"call","","Message call.",5,null],[10,"extcode","","Returns code at given address",5,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"generics":["arc","error"],"name":"result"}}],[10,"extcodesize","","Returns code size at given address",5,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"generics":["usize","error"],"name":"result"}}],[10,"log","","Creates log entry with given topics and data",5,null],[10,"ret","","Should be called when transaction calls `RETURN` opcode. Returns gas_left if cost of returning the data is not too high.",5,{"inputs":[{"name":"self"},{"name":"u256"},{"name":"returndata"},{"name":"bool"}],"output":{"generics":["u256","error"],"name":"result"}}],[10,"suicide","","Should be called when contract commits suicide. Address to which funds should be refunded.",5,{"inputs":[{"name":"self"},{"name":"h160"}],"output":{"generics":["error"],"name":"result"}}],[10,"schedule","","Returns schedule.",5,{"inputs":[{"name":"self"}],"output":{"name":"schedule"}}],[10,"env_info","","Returns environment info.",5,{"inputs":[{"name":"self"}],"output":{"name":"envinfo"}}],[10,"depth","","Returns current depth of execution.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"inc_sstore_clears","","Increments sstore refunds count by 1.",5,null],[11,"trace_next_instruction","","Decide if any more operations should be traced. Passthrough for the VM trace.",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"trace_prepare_execute","","Prepare to trace an operation. Passthrough for the VM trace.",5,null],[11,"trace_executed","","Trace the finalised execution of a single instruction.",5,null],[10,"is_static","","Check if running in static context.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[4,"ContractCreateResult","","Result of externalities create function.",null,null],[13,"Created","","Returned when creation was successfull. Contains an address of newly created contract and gas left.",6,null],[13,"Failed","","Returned when contract creation failed. VM doesn't have to know the reason.",6,null],[13,"Reverted","","Reverted with REVERT.",6,null],[4,"MessageCallResult","","Result of externalities call function.",null,null],[13,"Success","","Returned when message call was successfull. Contains gas left and output data.",7,null],[13,"Failed","","Returned when message call failed. VM doesn't have to know the reason.",7,null],[13,"Reverted","","Returned when message call was reverted. Contains gas left and output data.",7,null],[4,"CreateContractAddress","","Specifies how an address is calculated for a new contract.",null,null],[13,"FromSenderAndNonce","","Address is calculated from nonce and sender. Pre EIP-86 (Metropolis)",8,null],[13,"FromCodeHash","","Address is calculated from code hash. Default since EIP-86",8,null],[13,"FromSenderAndCodeHash","","Address is calculated from code hash and sender. Used by CREATE_P2SH instruction.",8,null],[4,"GasLeft","","Gas Left: either it is a known value, or it needs to be computed by processing a return instruction.",null,null],[13,"Known","","Known gas left",9,null],[13,"NeedsReturn","","Return or Revert instruction must be processed.",9,null],[12,"gas_left","evm::GasLeft","Amount of gas left.",9,null],[12,"data","","Return data buffer.",9,null],[12,"apply_state","","Apply or revert state changes on revert.",9,null],[3,"ReturnData","evm","Return data buffer. Holds memory from a previous call and a slice into that memory.",null,null],[3,"InstructionInfo","","EVM instruction information.",null,null],[12,"name","","Mnemonic name.",10,null],[12,"args","","Number of stack arguments.",10,null],[12,"ret","","Number of returned stack items.",10,null],[12,"tier","","Gas price tier.",10,null],[4,"Instruction","","Virtual machine bytecode instruction.",null,null],[13,"STOP","","halts execution",11,null],[13,"ADD","","addition operation",11,null],[13,"MUL","","mulitplication operation",11,null],[13,"SUB","","subtraction operation",11,null],[13,"DIV","","integer division operation",11,null],[13,"SDIV","","signed integer division operation",11,null],[13,"MOD","","modulo remainder operation",11,null],[13,"SMOD","","signed modulo remainder operation",11,null],[13,"ADDMOD","","unsigned modular addition",11,null],[13,"MULMOD","","unsigned modular multiplication",11,null],[13,"EXP","","exponential operation",11,null],[13,"SIGNEXTEND","","extend length of signed integer",11,null],[13,"LT","","less-than comparision",11,null],[13,"GT","","greater-than comparision",11,null],[13,"SLT","","signed less-than comparision",11,null],[13,"SGT","","signed greater-than comparision",11,null],[13,"EQ","","equality comparision",11,null],[13,"ISZERO","","simple not operator",11,null],[13,"AND","","bitwise AND operation",11,null],[13,"OR","","bitwise OR operation",11,null],[13,"XOR","","bitwise XOR operation",11,null],[13,"NOT","","bitwise NOT opertation",11,null],[13,"BYTE","","retrieve single byte from word",11,null],[13,"SHL","","shift left operation",11,null],[13,"SHR","","logical shift right operation",11,null],[13,"SAR","","arithmetic shift right operation",11,null],[13,"SHA3","","compute SHA3-256 hash",11,null],[13,"ADDRESS","","get address of currently executing account",11,null],[13,"BALANCE","","get balance of the given account",11,null],[13,"ORIGIN","","get execution origination address",11,null],[13,"CALLER","","get caller address",11,null],[13,"CALLVALUE","","get deposited value by the instruction/transaction responsible for this execution",11,null],[13,"CALLDATALOAD","","get input data of current environment",11,null],[13,"CALLDATASIZE","","get size of input data in current environment",11,null],[13,"CALLDATACOPY","","copy input data in current environment to memory",11,null],[13,"CODESIZE","","get size of code running in current environment",11,null],[13,"CODECOPY","","copy code running in current environment to memory",11,null],[13,"GASPRICE","","get price of gas in current environment",11,null],[13,"EXTCODESIZE","","get external code size (from another contract)",11,null],[13,"EXTCODECOPY","","copy external code (from another contract)",11,null],[13,"RETURNDATASIZE","","get the size of the return data buffer for the last call",11,null],[13,"RETURNDATACOPY","","copy return data buffer to memory",11,null],[13,"BLOCKHASH","","get hash of most recent complete block",11,null],[13,"COINBASE","","get the block's coinbase address",11,null],[13,"TIMESTAMP","","get the block's timestamp",11,null],[13,"NUMBER","","get the block's number",11,null],[13,"DIFFICULTY","","get the block's difficulty",11,null],[13,"GASLIMIT","","get the block's gas limit",11,null],[13,"POP","","remove item from stack",11,null],[13,"MLOAD","","load word from memory",11,null],[13,"MSTORE","","save word to memory",11,null],[13,"MSTORE8","","save byte to memory",11,null],[13,"SLOAD","","load word from storage",11,null],[13,"SSTORE","","save word to storage",11,null],[13,"JUMP","","alter the program counter",11,null],[13,"JUMPI","","conditionally alter the program counter",11,null],[13,"PC","","get the program counter",11,null],[13,"MSIZE","","get the size of active memory",11,null],[13,"GAS","","get the amount of available gas",11,null],[13,"JUMPDEST","","set a potential jump destination",11,null],[13,"PUSH1","","place 1 byte item on stack",11,null],[13,"PUSH2","","place 2 byte item on stack",11,null],[13,"PUSH3","","place 3 byte item on stack",11,null],[13,"PUSH4","","place 4 byte item on stack",11,null],[13,"PUSH5","","place 5 byte item on stack",11,null],[13,"PUSH6","","place 6 byte item on stack",11,null],[13,"PUSH7","","place 7 byte item on stack",11,null],[13,"PUSH8","","place 8 byte item on stack",11,null],[13,"PUSH9","","place 9 byte item on stack",11,null],[13,"PUSH10","","place 10 byte item on stack",11,null],[13,"PUSH11","","place 11 byte item on stack",11,null],[13,"PUSH12","","place 12 byte item on stack",11,null],[13,"PUSH13","","place 13 byte item on stack",11,null],[13,"PUSH14","","place 14 byte item on stack",11,null],[13,"PUSH15","","place 15 byte item on stack",11,null],[13,"PUSH16","","place 16 byte item on stack",11,null],[13,"PUSH17","","place 17 byte item on stack",11,null],[13,"PUSH18","","place 18 byte item on stack",11,null],[13,"PUSH19","","place 19 byte item on stack",11,null],[13,"PUSH20","","place 20 byte item on stack",11,null],[13,"PUSH21","","place 21 byte item on stack",11,null],[13,"PUSH22","","place 22 byte item on stack",11,null],[13,"PUSH23","","place 23 byte item on stack",11,null],[13,"PUSH24","","place 24 byte item on stack",11,null],[13,"PUSH25","","place 25 byte item on stack",11,null],[13,"PUSH26","","place 26 byte item on stack",11,null],[13,"PUSH27","","place 27 byte item on stack",11,null],[13,"PUSH28","","place 28 byte item on stack",11,null],[13,"PUSH29","","place 29 byte item on stack",11,null],[13,"PUSH30","","place 30 byte item on stack",11,null],[13,"PUSH31","","place 31 byte item on stack",11,null],[13,"PUSH32","","place 32 byte item on stack",11,null],[13,"DUP1","","copies the highest item in the stack to the top of the stack",11,null],[13,"DUP2","","copies the second highest item in the stack to the top of the stack",11,null],[13,"DUP3","","copies the third highest item in the stack to the top of the stack",11,null],[13,"DUP4","","copies the 4th highest item in the stack to the top of the stack",11,null],[13,"DUP5","","copies the 5th highest item in the stack to the top of the stack",11,null],[13,"DUP6","","copies the 6th highest item in the stack to the top of the stack",11,null],[13,"DUP7","","copies the 7th highest item in the stack to the top of the stack",11,null],[13,"DUP8","","copies the 8th highest item in the stack to the top of the stack",11,null],[13,"DUP9","","copies the 9th highest item in the stack to the top of the stack",11,null],[13,"DUP10","","copies the 10th highest item in the stack to the top of the stack",11,null],[13,"DUP11","","copies the 11th highest item in the stack to the top of the stack",11,null],[13,"DUP12","","copies the 12th highest item in the stack to the top of the stack",11,null],[13,"DUP13","","copies the 13th highest item in the stack to the top of the stack",11,null],[13,"DUP14","","copies the 14th highest item in the stack to the top of the stack",11,null],[13,"DUP15","","copies the 15th highest item in the stack to the top of the stack",11,null],[13,"DUP16","","copies the 16th highest item in the stack to the top of the stack",11,null],[13,"SWAP1","","swaps the highest and second highest value on the stack",11,null],[13,"SWAP2","","swaps the highest and third highest value on the stack",11,null],[13,"SWAP3","","swaps the highest and 4th highest value on the stack",11,null],[13,"SWAP4","","swaps the highest and 5th highest value on the stack",11,null],[13,"SWAP5","","swaps the highest and 6th highest value on the stack",11,null],[13,"SWAP6","","swaps the highest and 7th highest value on the stack",11,null],[13,"SWAP7","","swaps the highest and 8th highest value on the stack",11,null],[13,"SWAP8","","swaps the highest and 9th highest value on the stack",11,null],[13,"SWAP9","","swaps the highest and 10th highest value on the stack",11,null],[13,"SWAP10","","swaps the highest and 11th highest value on the stack",11,null],[13,"SWAP11","","swaps the highest and 12th highest value on the stack",11,null],[13,"SWAP12","","swaps the highest and 13th highest value on the stack",11,null],[13,"SWAP13","","swaps the highest and 14th highest value on the stack",11,null],[13,"SWAP14","","swaps the highest and 15th highest value on the stack",11,null],[13,"SWAP15","","swaps the highest and 16th highest value on the stack",11,null],[13,"SWAP16","","swaps the highest and 17th highest value on the stack",11,null],[13,"LOG0","","Makes a log entry, no topics.",11,null],[13,"LOG1","","Makes a log entry, 1 topic.",11,null],[13,"LOG2","","Makes a log entry, 2 topics.",11,null],[13,"LOG3","","Makes a log entry, 3 topics.",11,null],[13,"LOG4","","Makes a log entry, 4 topics.",11,null],[13,"CREATE","","create a new account with associated code",11,null],[13,"CALL","","message-call into an account",11,null],[13,"CALLCODE","","message-call with another account's code only",11,null],[13,"RETURN","","halt execution returning output data",11,null],[13,"DELEGATECALL","","like CALLCODE but keeps caller's value and sender",11,null],[13,"CREATE2","","create a new account and set creation address to sha3(sender + sha3(init code)) % 2**160",11,null],[13,"REVERT","","stop execution and revert state changes. Return output data.",11,null],[13,"STATICCALL","","like CALL but it does not take value, nor modify the state",11,null],[13,"SUICIDE","","halt execution and register account for later deletion",11,null],[4,"VMType","","Type of EVM to use.",null,null],[13,"Interpreter","","RUST EVM",12,null],[0,"evm","","Evm interface.",null,null],[3,"FinalizationResult","evm::evm","Finalization result. Gas Left: either it is a known value, or it needs to be computed by processing a return instruction.",null,null],[12,"gas_left","","Final amount of gas left.",13,null],[12,"apply_state","","Apply execution state changes or revert them.",13,null],[12,"return_data","","Return data buffer.",13,null],[8,"Finalize","","Types that can be \"finalized\" using an EVM.",null,null],[10,"finalize","","Consume the externalities, call return if necessary, and produce call result.",14,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"generics":["finalizationresult"],"name":"result"}}],[8,"CostType","","Cost calculation type. For low-gas usage we calculate costs using usize instead of U256",null,null],[10,"as_u256","","Converts this cost into `U256`",15,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[10,"from_u256","","Tries to fit `U256` into this `Cost` type",15,{"inputs":[{"name":"u256"}],"output":{"name":"result"}}],[10,"as_usize","","Convert to usize (may panic)",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"overflow_add","","Add with overflow",15,null],[10,"overflow_mul","","Multiple with overflow",15,null],[10,"overflow_mul_shr","","Single-step full multiplication and shift: `(self*other) >> shr` Should not overflow on intermediate steps",15,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"interpreter","evm","Rust VM implementation",null,null],[3,"SharedCache","evm::interpreter","Global cache for EVM interpreter",null,null],[3,"Interpreter","","Intepreter EVM implementation",null,null],[11,"new","","Create a jump destinations cache with a maximum size in bytes to cache.",16,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"jump_destinations","","Get jump destinations bitmap for a contract.",16,null],[11,"default","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"exec","","",17,{"inputs":[{"name":"self"},{"name":"actionparams"},{"name":"ext"}],"output":{"generics":["gasleft"],"name":"result"}}],[11,"new","","Create a new `Interpreter` instance with shared cache.",17,{"inputs":[{"generics":["sharedcache"],"name":"arc"}],"output":{"name":"interpreter"}}],[0,"factory","evm","Evm factory.",null,null],[3,"Factory","evm::factory","Evm factory. Creates appropriate Evm.",null,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"factory"}}],[11,"create","","Create fresh instance of VM Might choose implementation depending on supplied gas.",18,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"generics":["vm"],"name":"box"}}],[11,"new","","Create new instance of specific `VMType` factory, with a size in bytes for caching jump destinations.",18,{"inputs":[{"name":"vmtype"},{"name":"usize"}],"output":{"name":"self"}}],[11,"default","","Returns native rust evm factory",18,{"inputs":[],"output":{"name":"factory"}}],[11,"fmt","evm","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"vmtype"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"vmtype"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"all","","Return all possible VMs (Interpreter)",12,{"inputs":[],"output":{"generics":["vmtype"],"name":"vec"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Convert from u8 to the given enum",11,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"is_push","","Returns true if given instruction is `PUSHN` instruction.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push_bytes","","Returns number of bytes to read for `PUSHN` instruction PUSH1 -> 1",11,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"dup_position","","Returns stack position of item to duplicate DUP1 -> 0",11,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"swap_position","","Returns stack position of item to SWAP top with SWAP1 -> 1",11,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"log_topics","","Returns number of topics to take from stack LOG0 -> 0",11,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"info","","Returns the instruction info.",11,{"inputs":[{"name":"self"}],"output":{"name":"instructioninfo"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"instructioninfo"}}],[11,"new","","Create new instruction info.",10,{"inputs":[{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"gaspricetier"}],"output":{"name":"self"}}],[14,"evm_test","","Create tests by injecting different VM factories",null,null],[14,"evm_test_ignore","","Create ignored tests by injecting different VM factories",null,null],[11,"new_frontier","","Schedule for the Frontier-era of the Ethereum main net.",0,{"inputs":[],"output":{"name":"schedule"}}],[11,"new_homestead","","Schedule for the Homestead-era of the Ethereum main net.",0,{"inputs":[],"output":{"name":"schedule"}}],[11,"new_post_eip150","","Schedule for the post-EIP-150-era of the Ethereum main net.",0,{"inputs":[{"name":"usize"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"schedule"}}],[11,"new_byzantium","","Schedule for the Byzantium fork of the Ethereum main net.",0,{"inputs":[],"output":{"name":"schedule"}}],[11,"new_constantinople","","Schedule for the Constantinople fork of the Ethereum main net.",0,{"inputs":[],"output":{"name":"schedule"}}],[11,"wasm","","Returns wasm schedule",0,{"inputs":[{"name":"self"}],"output":{"name":"wasmcosts"}}],[11,"deref","","",19,null],[11,"decode","","",3,{"inputs":[{"name":"rlp"}],"output":{"generics":["calltype","decodererror"],"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"transaction"}],"output":{"name":"actionparams"}}],[11,"from","","",2,{"inputs":[{"name":"env"}],"output":{"name":"envinfo"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"schedule"}}],[11,"default","","Returns default ActionParams initialized with zeros",4,{"inputs":[],"output":{"name":"actionparams"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"envinfo"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"createcontractaddress"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"calltype"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"cleandustmode"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"calltype"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"envinfo"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"createcontractaddress"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"actionparams"}}],[11,"rlp_append","","",3,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"empty","","Create empty `ReturnData`.",19,{"inputs":[],"output":{"name":"returndata"}}],[11,"new","","Create `ReturnData` from give buffer and slice.",19,{"inputs":[{"generics":["u8"],"name":"vec"},{"name":"usize"},{"name":"usize"}],"output":{"name":"returndata"}}]],"paths":[[3,"Schedule"],[4,"CleanDustMode"],[3,"EnvInfo"],[4,"CallType"],[3,"ActionParams"],[8,"Ext"],[4,"ContractCreateResult"],[4,"MessageCallResult"],[4,"CreateContractAddress"],[4,"GasLeft"],[3,"InstructionInfo"],[4,"Instruction"],[4,"VMType"],[3,"FinalizationResult"],[8,"Finalize"],[8,"CostType"],[3,"SharedCache"],[3,"Interpreter"],[3,"Factory"],[3,"ReturnData"]]};
searchIndex["failure"] = {"doc":"An experimental new error-handling library.","items":[[3,"Backtrace","failure","A `Backtrace`.",null,null],[3,"Compat","","A compatibility wrapper around an error type from this crate.",null,null],[3,"Context","","An error with context around it.",null,null],[3,"SyncFailure","","Wrapper for `std` errors to make them `Sync`.",null,null],[3,"Error","","The `Error` type, which can contain any failure.",null,null],[3,"Causes","","A iterator over the causes of a `Fail`",null,null],[5,"err_msg","","Constructs a `Fail` type from a string.",null,{"inputs":[{"name":"d"}],"output":{"name":"error"}}],[11,"new","","Constructs a new backtrace. This will only create a real backtrace if the crate is compiled in std mode and the `RUST_BACKTRACE` environmental variable is activated.",0,{"inputs":[],"output":{"name":"backtrace"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"backtrace"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"compat"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"compat"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"compat"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"compat"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Unwraps this into the inner error.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Creates a new context without an underlying error message.",2,{"inputs":[{"name":"d"}],"output":{"name":"context"}}],[11,"get_context","","Returns a reference to the context provided with this error.",2,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"d"}],"output":{"name":"context"}}],[11,"new","","Wraps a non-`Sync` `Error` in order to make it implement `Fail`.",3,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"f"}],"output":{"name":"error"}}],[11,"cause","","Returns a reference to the underlying cause of this `Error`. Unlike the method on `Fail`, this does not return an `Option`. The `Error` type always has an underlying failure.",4,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",4,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"context","","Provides context for this `Error`.",4,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"context"}}],[11,"compat","","Wraps `Error` in a compatibility type.",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"compat"}}],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail` type.",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"root_cause","","Returns the \"root cause\" of this error - the last value in the cause chain which does not return an underlying `cause`.",4,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail` type by reference.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail` type by mutable reference.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"causes","","Returns a iterator over the causes of the `Error`, beginning with the failure returned by the `cause` method and ending with the failure returned by `root_cause`.",4,{"inputs":[{"name":"self"}],"output":{"name":"causes"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"ResultExt","","Extension methods for `Result`.",null,null],[10,"compat","","Wraps the error in `Compat` to make it compatible with older error handling APIs that expect `std::error::Error`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["compat"],"name":"result"}}],[10,"context","","Wraps the error type in a context type.",5,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"generics":["context"],"name":"result"}}],[10,"with_context","","Wraps the error type in a context type generated by looking at the error value.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["context"],"name":"result"}}],[8,"Fail","","The `Fail` trait.",null,null],[11,"cause","","Returns a reference to the underlying cause of this failure, if it is an error that wraps other errors.",6,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","Returns a reference to the `Backtrace` carried by this failure, if it carries one.",6,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"context","","Provides context for this failure.",6,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"context"}}],[11,"compat","","Wraps this failure in a compatibility wrapper that implements `std::error::Error`.",6,{"inputs":[{"name":"self"}],"output":{"name":"compat"}}],[11,"causes","","Returns a iterator over the causes of this `Fail` with itself as the first item and the `root_cause` as the final item.",6,{"inputs":[{"name":"self"}],"output":{"name":"causes"}}],[11,"root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"downcast_ref","","Attempts to downcast this failure to a concrete type by reference.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Attempts to downcast this failure to a concrete type by mutable reference.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"causes","","Returns a iterator over the causes of this `Fail` with itself as the first item and the `root_cause` as the final item.",6,{"inputs":[{"name":"self"}],"output":{"name":"causes"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[14,"bail","","Exits a function early with an `Error`.",null,null],[14,"ensure","","Exits a function early with an `Error` if the condition is not satisfied.",null,null],[14,"format_err","","Constructs an `Error` using the standard string interpolation syntax.",null,null]],"paths":[[3,"Backtrace"],[3,"Compat"],[3,"Context"],[3,"SyncFailure"],[3,"Error"],[8,"ResultExt"],[8,"Fail"],[3,"Causes"]]};
searchIndex["failure_derive"] = {"doc":"","items":[[5,"Fail","failure_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["fixed_hash"] = {"doc":"","items":[[5,"clean_0x","fixed_hash","Return `s` without the `0x` at the beginning of it, if any.",null,{"inputs":[{"name":"str"}],"output":{"name":"str"}}],[14,"construct_hash","","",null,null]],"paths":[]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["fs_swap"] = {"doc":"Cross-platform implementation of path swap.","items":[[5,"swap","fs_swap","Swaps the content of paths `a` and `b`.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"result"}}],[5,"swap_nonatomic","","Nonatomic swap.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"result"}}]],"paths":[]};
searchIndex["futures"] = {"doc":"Zero-cost Futures in Rust","items":[[4,"Async","futures","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",0,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",0,null],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",null,null],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",1,null],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",1,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"map","","Change the success value of this `Async` with the closure provided",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"asyncsink"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"asyncsink"}}],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"future","","Futures",null,null],[3,"Empty","futures::future","A future which is never resolved.",null,null],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",null,null],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",null,null],[4,"Loop","","The status of a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",2,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",2,null],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",null,null],[13,"A","","First branch of the type",3,null],[13,"B","","Second branch of the type",3,null],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",null,null],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",4,null],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",4,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"loopfn"}}],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",null,{"inputs":[{"name":"i"}],"output":{"name":"joinall"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectok"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"futureresult"}}],[11,"poll","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"from","","",8,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",10,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",11,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_done","","Returns whether the underlying future has finished or not.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"poll","","",13,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",16,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",17,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",18,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",19,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",21,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",23,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",24,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",25,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",26,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","Splits out the homogeneous type from an either of tuples.",3,null],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",27,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",28,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",29,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",30,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",31,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",32,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"poll","","",32,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"shareditem"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sharederror"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",35,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",35,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",35,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Block the current thread until this future is resolved.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",35,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",35,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",35,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",35,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",35,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",35,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",35,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",36,null],[16,"Item","","The item that the future may resolve with.",36,null],[16,"Error","","The error that the future may resolve with.",36,null],[10,"into_future","","Consumes this object and produces a future.",36,null],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",null,null],[16,"Future","","The future for the conversion.",37,null],[16,"Error","","Possible errors during conversion.",37,null],[10,"future_from","","Consume the given value, beginning the conversion.",37,null],[8,"Executor","","A trait for types which can spawn fresh futures.",null,null],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"executeerrorkind"}],"output":{"name":"bool"}}],[11,"new","","Create a new `ExecuteError`",39,{"inputs":[{"name":"executeerrorkind"},{"name":"f"}],"output":{"name":"executeerror"}}],[11,"kind","","Returns the associated reason for the error",39,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"into_future","","Consumes self and returns the original future that was spawned.",39,{"inputs":[{"name":"self"}],"output":{"name":"f"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stream","futures","Asynchronous streams",null,null],[3,"Iter","futures::stream","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"FromErr","","A stream combinator to change the error type of a stream.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"Inspect","","Do something with the items of a stream, passing it on.",null,null],[3,"InspectErr","","Do something with the error of a stream, passing it on.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"Merge","","An adapter for merging the output of two streams.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[3,"PollFn","","A stream which adapts a function returning `Poll`.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",null,null],[12,"0","","",40,null],[12,"1","","",40,null],[3,"FuturesOrdered","","An unbounded queue of futures.",null,null],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",null,null],[13,"First","","An item from the first stream",41,null],[13,"Second","","An item from the second stream",41,null],[13,"Both","","Items from both streams",41,null],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iter"}}],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"i"}],"output":{"name":"iterok"}}],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iterresult"}}],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"empty","","Creates a stream which contains no elements.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates a stream of single element",null,{"inputs":[{"name":"result"}],"output":{"name":"once"}}],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresordered"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresunordered"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",46,null],[11,"poll_complete","","",46,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",46,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"poll","","",48,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"poll","","",49,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",51,null],[11,"poll_complete","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",52,null],[11,"poll_complete","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",53,null],[11,"poll_complete","","",53,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",53,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",54,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",56,null],[11,"poll_complete","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",57,null],[11,"poll_complete","","",57,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",57,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll","","",58,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",59,null],[11,"poll_complete","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",60,null],[11,"poll_complete","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",61,null],[11,"poll_complete","","",61,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",61,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",62,null],[11,"poll_complete","","",62,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",62,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",65,null],[11,"poll_complete","","",65,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",65,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",66,null],[11,"poll_complete","","",66,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",66,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",66,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",69,null],[11,"poll_complete","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",70,null],[11,"poll_complete","","",70,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",70,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",71,null],[11,"poll_complete","","",71,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",71,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",72,null],[11,"poll_complete","","",72,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",72,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",73,null],[11,"poll_complete","","",73,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",73,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll","","",76,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",77,null],[11,"poll_complete","","",77,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",77,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",78,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",78,null],[11,"poll_complete","","",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",79,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",80,null],[11,"poll_complete","","",80,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",80,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",81,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"poll"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"next","","",82,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",83,{"inputs":[{"name":"self"},{"name":"splitsink"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"poll","","",83,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",84,{"inputs":[{"name":"self"},{"name":"splitstream"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"start_send","","",84,null],[11,"poll_complete","","",84,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",84,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",40,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"futures_unordered","","An unbounded set of futures.",null,null],[3,"FuturesUnordered","futures::stream::futures_unordered","An unbounded set of futures.",null,null],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",null,null],[11,"new","","Constructs a new, empty `FuturesUnordered`",85,{"inputs":[],"output":{"name":"futuresunordered"}}],[11,"len","","Returns the number of futures contained in the set.",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no futures",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the set.",85,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",85,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"poll","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"from_iter","","",85,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"new","futures::stream","Constructs a new, empty `FuturesOrdered`",87,{"inputs":[],"output":{"name":"futuresordered"}}],[11,"len","","Returns the number of futures contained in the queue.",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no futures",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the queue.",87,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"poll","","",87,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",87,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Stream","","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",88,null],[16,"Error","","The type of error this stream may generate.",88,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",88,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",88,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",88,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",88,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",88,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",88,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",88,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",88,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",88,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",88,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",88,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",88,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",88,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",88,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",88,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",88,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[0,"sink","futures","Asynchronous sinks",null,null],[3,"Buffer","futures::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",null,null],[3,"Wait","","A sink combinator which converts an asynchronous sink to a blocking sink.",null,null],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",null,null],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",null,null],[3,"Flush","","Future for the `Sink::flush` combinator, which polls the sink until all data has been flushed.",null,null],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",null,null],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",null,null],[3,"SinkFromErr","","A sink combinator to change the error type of a sink.",null,null],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",null,null],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"with"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"get_ref","","Get a shared reference to the inner sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",89,null],[11,"poll_complete","","",89,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",89,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",90,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",90,null],[11,"poll_complete","","",90,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",90,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",91,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",91,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consume the `Flush` and return the inner sink.",91,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",91,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"sinkfromerr"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",92,null],[11,"poll_complete","","",92,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",92,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",93,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",93,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",93,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",94,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"sinkmaperr"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",95,null],[11,"poll_complete","","",95,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",95,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",95,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"start_send","","",96,null],[11,"poll_complete","","",96,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",96,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",97,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",97,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",97,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",97,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",97,null],[11,"poll_complete","","",97,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",97,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Sends a value to this sink, blocking the current thread until it's able to do so.",98,null],[11,"flush","","Flushes any buffered data in this sink, blocking the current thread until it's entirely flushed.",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","Close this sink, blocking the current thread until it's entirely closed.",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"BoxSink","","A type alias for `Box<Sink + Send>`",null,null],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",99,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",99,null],[10,"start_send","","Begin the process of sending a value to the sink.",99,null],[10,"poll_complete","","Flush all output from this sink, if necessary.",99,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",99,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Creates a new object which will produce a synchronous sink.",99,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"with","","Composes a function in front of the sink.",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sinkmaperr"}}],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",99,{"inputs":[{"name":"self"}],"output":{"name":"sinkfromerr"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"fanout","","Fanout items to multiple sinks.",99,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"fanout"}}],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",99,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",99,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",99,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[0,"task","futures","Tasks used to drive a future computation",null,null],[3,"Task","futures::task","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",null,null],[3,"AtomicTask","","A synchronization primitive for task notification.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",null,null],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",null,{"inputs":[],"output":{"name":"task"}}],[5,"init","","Initialize the `futures` task system.",null,null],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",null,{"inputs":[{"name":"unparkevent"},{"name":"f"}],"output":{"name":"r"}}],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",null,null],[10,"insert","","Insert the given ID into the set",100,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[0,"executor","futures","Executors",null,null],[3,"Run","futures::executor","Units of work submitted to an `Executor`, currently only created internally.",null,null],[3,"Spawn","","Representation of a spawned future/stream.",null,null],[3,"NotifyHandle","","A `NotifyHandle` is the core value through which notifications are routed in the `futures` crate.",null,null],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",null,{"inputs":[{"name":"t"}],"output":{"name":"spawn"}}],[5,"with_notify","","Sets the `NotifyHandle` of the current task for the duration of the provided closure.",null,{"inputs":[{"name":"t"},{"name":"usize"},{"name":"f"}],"output":{"name":"r"}}],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",101,{"inputs":[{"name":"self"}],"output":null}],[8,"Executor","","A trait representing requests to poll futures.",null,null],[10,"execute","","Requests that `Run` is executed soon on the given executor.",102,{"inputs":[{"name":"self"},{"name":"run"}],"output":null}],[8,"Notify","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"notify","","Indicates that an associated future and/or task are ready to make progress.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[8,"UnsafeNotify","","An unsafe trait for implementing custom forms of memory management behind a `Task`.",null,null],[10,"clone_raw","","Creates a new `NotifyHandle` from this instance of `UnsafeNotify`.",104,{"inputs":[{"name":"self"}],"output":{"name":"notifyhandle"}}],[10,"drop_raw","","Drops this instance of `UnsafeNotify`, deallocating resources associated with it.",104,{"inputs":[{"name":"self"}],"output":null}],[0,"sync","futures","Future-aware synchronization",null,null],[3,"BiLock","futures::sync","A type of futures-powered synchronization primitive which is a mutex between two possible owners.",null,null],[3,"BiLockGuard","","Returned RAII guard from the `poll_lock` method.",null,null],[3,"BiLockAcquire","","Future returned by `BiLock::lock` which will resolve when the lock is acquired.",null,null],[3,"BiLockAcquired","","Resolved value of the `BiLockAcquire<T>` future.",null,null],[0,"oneshot","","A one-shot, futures-aware channel",null,null],[3,"Receiver","futures::sync::oneshot","A future representing the completion of a computation happening elsewhere in memory.",null,null],[3,"Sender","","Represents the completion half of a oneshot through which the result of a computation is signaled.",null,null],[3,"Canceled","","Error returned from a `Receiver<T>` whenever the corresponding `Sender<T>` is dropped.",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Execute` instances below must be able to spawn.",null,null],[5,"channel","","Creates a new futures-aware, one-shot channel.",null,null],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Completes this oneshot with a successful result.",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",106,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"canceled"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"canceled"}],"output":{"name":"bool"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",105,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",105,{"inputs":[{"name":"self"}],"output":{"generics":["canceled"],"name":"poll"}}],[11,"drop","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",108,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",108,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",108,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",109,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",109,{"inputs":[{"name":"self"}],"output":null}],[0,"mpsc","futures::sync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.",null,null],[3,"Sender","futures::sync::mpsc","The transmission end of a channel which is used to send values.",null,null],[3,"UnboundedSender","","The transmission end of a channel which is used to send values.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"UnboundedReceiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",null,null],[3,"TrySendError","","Error type returned from `try_send`",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",null,null],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",null,null],[5,"unbounded","","Creates an in-memory channel implementation of the `Stream` trait with unbounded capacity.",null,null],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",null,{"inputs":[{"name":"s"},{"name":"e"},{"name":"usize"}],"output":{"name":"spawnhandle"}}],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",null,{"inputs":[{"name":"s"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"trysenderror"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_full","","Returns true if this error is a result of the channel being full",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",115,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"try_send","","Attempts to send a message on this `Sender<T>` without blocking.",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["trysenderror"],"name":"result"}}],[11,"poll_ready","","Polls the channel to determine if there is guaranteed to be capacity to send at least one item without waiting.",110,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"start_send","","",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",110,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",110,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"unbounded_send","","Sends the provided message along this channel.",111,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"start_send","","",111,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",111,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",111,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"unboundedsender"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"drop","","",110,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half",112,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",112,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"drop","","",112,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half",113,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",113,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"poll","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",117,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","futures::sync","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BiLock` protecting the provided data.",118,null],[11,"poll_lock","","Attempt to acquire this lock, returning `NotReady` if it can't be acquired.",118,{"inputs":[{"name":"self"}],"output":{"generics":["bilockguard"],"name":"async"}}],[11,"lock","","Perform a \"blocking lock\" of this lock, consuming this lock handle and returning a future to the acquired lock.",118,{"inputs":[{"name":"self"}],"output":{"name":"bilockacquire"}}],[11,"reunite","","Attempts to put the two \"halves\" of a `BiLock<T>` back together and recover the original value. Succeeds only if the two `BiLock<T>`s originated from the same call to `BiLock::new`.",118,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",119,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",120,{"inputs":[{"name":"self"}],"output":{"generics":["bilockacquired"],"name":"poll"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock","","Recovers the original `BiLock<T>`, unlocking this lock.",121,{"inputs":[{"name":"self"}],"output":{"name":"bilock"}}],[11,"deref","","",121,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",121,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",121,{"inputs":[{"name":"self"}],"output":null}],[0,"unsync","futures","Future-aware single-threaded synchronization",null,null],[0,"mpsc","futures::unsync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure, for use communicating between tasks on the same thread.",null,null],[3,"Sender","futures::unsync::mpsc","The transmission end of a channel.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"UnboundedSender","","The transmission end of an unbounded channel.",null,null],[3,"UnboundedReceiver","","The receiving end of an unbounded channel.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",null,null],[5,"channel","","Creates a bounded in-memory channel with buffered storage.",null,null],[5,"unbounded","","Creates an unbounded in-memory channel with buffered storage.",null,null],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",null,{"inputs":[{"name":"s"},{"name":"e"},{"name":"usize"}],"output":{"name":"spawnhandle"}}],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",null,{"inputs":[{"name":"s"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_send","","",122,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"drop","","",122,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","Closes the receiving half",123,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",123,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"drop","","",123,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_send","","",124,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",124,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",124,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"unbounded_send","","Sends the provided message along this channel.",124,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","Closes the receiving half",125,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",125,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",126,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",126,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",127,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",128,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"oneshot","futures::unsync","A one-shot, futures-aware channel",null,null],[3,"Sender","futures::unsync::oneshot","Represents the completion half of a oneshot through which the result of a computation is signaled.",null,null],[3,"Receiver","","A future representing the completion of a computation happening elsewhere in memory.",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Spawn` instances below must be able to spawn.",null,null],[5,"channel","","Creates a new futures-aware, one-shot channel.",null,null],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Completes this oneshot with a successful result.",129,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",129,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",130,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",130,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",130,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",131,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",131,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",132,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"prelude","futures","A \"prelude\" for crates using the `futures` crate.",null,null],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[6,"StartSend","","Return type of the `Sink::start_send` method, indicating the outcome of a send attempt. See `AsyncSink` for more details.",null,null],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",null,null],[14,"task_local","","A macro to create a `static` of type `LocalKey`",null,null],[11,"new","futures::task","Create an `AtomicTask` initialized with the given `Task`",133,{"inputs":[],"output":{"name":"atomictask"}}],[11,"register","","Registers the current task to be notified on calls to `notify`.",133,{"inputs":[{"name":"self"}],"output":null}],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",133,{"inputs":[{"name":"self"},{"name":"task"}],"output":null}],[11,"notify","","Notifies the task that last called `register`.",133,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",133,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",134,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"poll_future","futures::executor","Polls the internal future, scheduling notifications to be sent to the `unpark` argument.",135,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"execute","","A specialized function to request running a future to completion on the specified executor.",135,{"inputs":[{"name":"self"},{"generics":["executor"],"name":"arc"}],"output":null}],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",135,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"generics":["option"],"name":"poll"}}],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",135,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"start_send","","Invokes the underlying `start_send` method with this task in place.",135,null],[11,"poll_flush","","Invokes the underlying `poll_complete` method with this task in place.",135,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",135,null],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",136,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","futures::task","",137,{"inputs":[{"name":"self"}],"output":{"name":"unparkevent"}}],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",137,{"inputs":[{"generics":["eventset"],"name":"arc"},{"name":"usize"}],"output":{"name":"unparkevent"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","futures::executor","",138,{"inputs":[{"name":"arc"}],"output":{"name":"notifyhandle"}}],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","futures::task","",139,{"inputs":[{"name":"self"}],"output":{"name":"task"}}],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",139,{"inputs":[{"name":"self"}],"output":null}],[11,"is_current","","Returns `true` when called from within the context of the task.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","futures::executor","Get a shared reference to the object the Spawn is wrapping.",135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consume the Spawn, returning its inner object",135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",135,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",135,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",135,null],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",135,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",135,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `NotifyHandle` directly.",138,null],[11,"notify","","Invokes the underlying instance of `Notify` with the provided `id`.",138,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",138,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",138,{"inputs":[{"name":"t"}],"output":{"name":"notifyhandle"}}]],"paths":[[4,"Async"],[4,"AsyncSink"],[4,"Loop"],[4,"Either"],[4,"ExecuteErrorKind"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"FutureResult"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"FromErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Select2"],[3,"Then"],[3,"Inspect"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[3,"ExecuteError"],[3,"ReuniteError"],[4,"MergedItem"],[3,"Iter"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Concat2"],[3,"Concat"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"FromErr"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"InspectErr"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"PollFn"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"Wait"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[3,"IterMut"],[3,"FuturesOrdered"],[8,"Stream"],[3,"With"],[3,"WithFlatMap"],[3,"Flush"],[3,"SinkFromErr"],[3,"Send"],[3,"SendAll"],[3,"SinkMapErr"],[3,"Fanout"],[3,"Buffer"],[3,"Wait"],[8,"Sink"],[8,"EventSet"],[8,"Unpark"],[8,"Executor"],[8,"Notify"],[8,"UnsafeNotify"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"BiLock"],[3,"BiLockGuard"],[3,"BiLockAcquire"],[3,"BiLockAcquired"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"Receiver"],[3,"SpawnHandle"],[3,"Execute"],[3,"AtomicTask"],[3,"LocalKey"],[3,"Spawn"],[3,"Run"],[3,"UnparkEvent"],[3,"NotifyHandle"],[3,"Task"]]};
searchIndex["futures_cpupool"] = {"doc":"A simple crate for executing work on a thread pool, and getting back a future.","items":[[3,"CpuPool","futures_cpupool","A thread pool intended to run CPU intensive work.",null,null],[3,"Builder","","Thread pool configuration object",null,null],[3,"CpuFuture","","The type of future returned from the `CpuPool::spawn` function, which proxies the futures running on the thread pool.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new thread pool with `size` worker threads associated with it.",0,{"inputs":[{"name":"usize"}],"output":{"name":"cpupool"}}],[11,"new_num_cpus","","Creates a new thread pool with a number of workers equal to the number of CPUs on the host.",0,{"inputs":[],"output":{"name":"cpupool"}}],[11,"spawn","","Spawns a future to run on this thread pool, returning a future representing the produced value.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"cpufuture"}}],[11,"spawn_fn","","Spawns a closure on this thread pool.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"cpufuture"}}],[11,"execute","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"cpupool"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","Create a builder a number of workers equal to the number of CPUs on the host.",1,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Set size of a future CpuPool",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"stack_size","","Set stack size of threads in the pool.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"name_prefix","","Set thread name prefix of a future CpuPool",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"after_start","","Execute function `f` right after each thread is started but before running any jobs on it.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"before_stop","","Execute function `f` before each worker thread stops.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"create","","Create CpuPool with configured parameters",1,{"inputs":[{"name":"self"}],"output":{"name":"cpupool"}}]],"paths":[[3,"CpuPool"],[3,"Builder"],[3,"CpuFuture"]]};
searchIndex["hamming"] = {"doc":"A crate to count ones and xor bytes, fast (aka popcount, hamming weight and hamming distance).","items":[[5,"weight","hamming","Computes the Hamming weight of `x`, that is, the population count, or number of ones.",null,null],[5,"distance","","Computes the bitwise Hamming distance between `x` and `y`, that is, the number of bits where `x` and `y` differ, or, the number of set bits in the xor of `x` and `y`.",null,null],[5,"distance_fast","","Computes the bitwise Hamming distance between `x` and `y`, that is, the number of bits where `x` and `y` differ, or, the number of set bits in the xor of `x` and `y`.",null,null]],"paths":[]};
searchIndex["hardware_wallet"] = {"doc":"Hardware wallet management.","items":[[3,"Device","hardware_wallet","`HardwareWallet` device",null,null],[3,"TransactionInfo","","This is the transaction info we need to supply to Trezor message. It's more or less a duplicate of `ethcore::transaction::Transaction`, but we can't import ethcore here as that would be a circular dependency.",null,null],[12,"nonce","","Nonce",0,null],[12,"gas_price","","Gas price",0,null],[12,"gas_limit","","Gas limit",0,null],[12,"to","","Receiver",0,null],[12,"value","","Value",0,null],[12,"data","","Data",0,null],[12,"chain_id","","Chain ID",0,null],[3,"WalletInfo","","Hardware wallet information.",null,null],[12,"name","","Wallet device name.",1,null],[12,"manufacturer","","Wallet device manufacturer.",1,null],[12,"serial","","Wallet device serial number.",1,null],[12,"address","","Ethereum address.",1,null],[3,"HardwareWalletManager","","Hardware wallet management interface.",null,null],[4,"Error","","Hardware wallet error.",null,null],[13,"LedgerDevice","","Ledger device error.",2,null],[13,"TrezorDevice","","Trezor device error",2,null],[13,"Usb","","USB error.",2,null],[13,"Hid","","HID error",2,null],[13,"KeyNotFound","","Hardware wallet not found for specified key.",2,null],[4,"KeyPath","","Key derivation paths used on hardware wallets.",null,null],[13,"Ethereum","","Ethereum.",3,null],[13,"EthereumClassic","","Ethereum classic.",3,null],[4,"DeviceDirection","","Specifies the direction of the `HardwareWallet` i.e, whether it arrived or left",null,null],[13,"Arrived","","Device arrived",4,null],[13,"Left","","Device left",4,null],[8,"Wallet","","`Wallet` trait",null,null],[16,"Error","","Error",5,null],[16,"Transaction","","Transaction data format",5,null],[10,"sign_transaction","","Sign transaction data with wallet managing `address`.",5,null],[10,"set_key_path","","Set key derivation path for a chain.",5,{"inputs":[{"name":"self"},{"name":"keypath"}],"output":null}],[10,"update_devices","","Re-populate device list Note, this assumes all devices are iterated over and updated",5,{"inputs":[{"name":"self"},{"name":"devicedirection"}],"output":{"generics":["usize"],"name":"result"}}],[10,"read_device","","Read device info",5,{"inputs":[{"name":"self"},{"name":"hidapi"},{"name":"hiddeviceinfo"}],"output":{"generics":["device"],"name":"result"}}],[10,"list_devices","","List connected and acknowledged wallets",5,{"inputs":[{"name":"self"}],"output":{"generics":["walletinfo"],"name":"vec"}}],[10,"list_locked_devices","","List locked wallets This may be moved if it is the wrong assumption, for example this is not supported by Ledger Then this method return a empty vector",5,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"vec"}}],[10,"get_wallet","","Get wallet info.",5,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["walletinfo"],"name":"option"}}],[10,"get_address","","Generate ethereum address for a Wallet",5,{"inputs":[{"name":"self"},{"name":"hiddevice"}],"output":{"generics":["option"],"name":"result"}}],[10,"open_path","","Open a device using `device path` Note, f - is a closure that borrows HidResult HidDevice is in turn a type alias for a `c_void function pointer` For further information see:   * https://github.com/paritytech/hidapi-rs     * https://github.com/rust-lang/libc",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"walletinfo"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"keypath"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"devicedirection"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Hardware wallet constructor",7,{"inputs":[],"output":{"generics":["error"],"name":"result"}}],[11,"set_key_path","","Select key derivation path for a chain. Currently, only one hard-coded keypath is supported It is managed by `ethcore/account_provider`",7,{"inputs":[{"name":"self"},{"name":"keypath"}],"output":null}],[11,"list_wallets","","List connected wallets. This only returns wallets that are ready to be used.",7,{"inputs":[{"name":"self"}],"output":{"generics":["walletinfo"],"name":"vec"}}],[11,"list_locked_wallets","","Return a list of paths to locked hardware wallets This is only applicable to Trezor because Ledger only appears as a device when it is unlocked",7,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"wallet_info","","Get connected wallet info.",7,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["walletinfo"],"name":"option"}}],[11,"sign_message","","Sign a message with the wallet (only supported by Ledger)",7,null],[11,"sign_transaction","","Sign transaction data with wallet managing `address`.",7,null],[11,"pin_matrix_ack","","Send a pin to a device at a certain path to unlock it This is only applicable to Trezor because Ledger only appears as a device when it is unlocked",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"TransactionInfo"],[3,"WalletInfo"],[4,"Error"],[4,"KeyPath"],[4,"DeviceDirection"],[8,"Wallet"],[3,"Device"],[3,"HardwareWalletManager"]]};
searchIndex["hashdb"] = {"doc":"Database of byte-slices keyed to their hash.","items":[[6,"DBValue","hashdb","`HashDB` value type.",null,null],[8,"Hasher","","Trait describing an object that can hash a slice of bytes. Used to abstract other types over the hashing algorithm. Defines a single `hash` method and an `Out` associated type with the necessary bounds.",null,null],[16,"Out","","The output type of the `Hasher`",0,null],[16,"StdHasher","","What to use to build `HashMap`s with this `Hasher`",0,null],[18,"LENGTH","","The length in bytes of the `Hasher` output",0,null],[10,"hash","","Compute the hash of the provided slice of bytes returning the `Out` type of the `Hasher`",0,null],[8,"HashDB","","Trait modelling datastore keyed by a hash defined by the `Hasher`.",null,null],[10,"keys","","Get the keys in the database together with number of underlying references.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"hashmap"}}],[10,"get","","Look up a given hash into the bytes that hash to it, returning None if the hash is not known.",1,null],[10,"contains","","Check for the existance of a hash-key.",1,null],[10,"insert","","Insert a datum item into the DB and return the datum's hash for a later lookup. Insertions are counted and the equivalent number of `remove()`s must be performed before the data is considered dead.",1,null],[10,"emplace","","Like `insert()`, except you provide the key and the data is all moved.",1,null],[10,"remove","","Remove a datum previously inserted. Insertions can be \"owed\" such that the same number of `insert()`s may happen without the data being eventually being inserted into the DB. It can be \"owed\" more than once.",1,null],[8,"AsHashDB","","Upcast trait.",null,null],[10,"as_hashdb","","Perform upcast to HashDB for anything that derives from HashDB.",2,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[10,"as_hashdb_mut","","Perform mutable upcast to HashDB for anything that derives from HashDB.",2,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}]],"paths":[[8,"Hasher"],[8,"HashDB"],[8,"AsHashDB"]]};
searchIndex["heapsize"] = {"doc":"Data structure measurement.","items":[[5,"heap_size_of","heapsize","Get the size of a heap block.",null,null],[8,"HeapSizeOf","","",null,null],[10,"heap_size_of_children","","Measure the size of any heap-allocated structures that hang off this value, but not the space taken up by the value itself (i.e. what size_of:: measures, more or less); that space is handled by the implementation of HeapSizeOf for Box below.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[14,"known_heap_size","","For use on types defined in external crates with known heap sizes.",null,null]],"paths":[[8,"HeapSizeOf"]]};
searchIndex["heck"] = {"doc":"heck is a case conversion library.","items":[[8,"CamelCase","heck","This trait defines a camel case conversion.",null,null],[10,"to_camel_case","","Convert this type to camel case.",0,null],[8,"KebabCase","","This trait defines a kebab case conversion.",null,null],[10,"to_kebab_case","","Convert this type to kebab case.",1,null],[8,"MixedCase","","This trait defines a mixed case conversion.",null,null],[10,"to_mixed_case","","Convert this type to mixed case.",2,null],[8,"ShoutySnakeCase","","This trait defines a shouty snake case conversion.",null,null],[10,"to_shouty_snake_case","","Convert this type to shouty snake case.",3,null],[8,"ShoutySnekCase","","Oh heck, ShoutySnekCase is an alias for ShoutySnakeCase. See ShoutySnakeCase for more documentation.",null,null],[10,"TO_SHOUTY_SNEK_CASE","","CONVERT THIS TYPE TO SNEK CASE.",4,null],[8,"SnakeCase","","This trait defines a camel case conversion.",null,null],[10,"to_snake_case","","Convert this type to snake case.",5,null],[8,"SnekCase","","Oh heck, SnekCase is an alias for SnakeCase. See SnakeCase for more documentation.",null,null],[10,"to_snek_case","","Convert this type to snek case.",6,null],[8,"TitleCase","","This trait defines a title case conversion.",null,null],[10,"to_title_case","","Convert this type to title case.",7,null]],"paths":[[8,"CamelCase"],[8,"KebabCase"],[8,"MixedCase"],[8,"ShoutySnakeCase"],[8,"ShoutySnekCase"],[8,"SnakeCase"],[8,"SnekCase"],[8,"TitleCase"]]};
searchIndex["hidapi"] = {"doc":"This crate provides a rust abstraction over the features of the C library hidapi by signal11.","items":[[3,"HidApi","hidapi","Object for handling hidapi context and implementing RAII for it. Only one instance can exist at a time.",null,null],[3,"HidDeviceInfo","","Storage for device related information",null,null],[12,"path","","",0,null],[12,"vendor_id","","",0,null],[12,"product_id","","",0,null],[12,"serial_number","","",0,null],[12,"release_number","","",0,null],[12,"manufacturer_string","","",0,null],[12,"product_string","","",0,null],[12,"usage_page","","",0,null],[12,"usage","","",0,null],[12,"interface_number","","",0,null],[3,"HidDevice","","Object for accessing HID device",null,null],[6,"HidError","","",null,null],[6,"HidResult","","",null,null],[11,"new","","Initializes the HID",1,{"inputs":[],"output":{"name":"hidresult"}}],[11,"refresh_devices","","Refresh devices list and information about them (to access them use `devices()` method)",1,{"inputs":[{"name":"self"}],"output":null}],[11,"devices","","Returns list of objects containing information about connected devices",1,{"inputs":[{"name":"self"}],"output":{"generics":["hiddeviceinfo"],"name":"vec"}}],[11,"open","","Open a HID device using a Vendor ID (VID) and Product ID (PID)",1,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"generics":["hiddevice"],"name":"hidresult"}}],[11,"open_serial","","Open a HID device using a Vendor ID (VID), Product ID (PID) and a serial number.",1,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"},{"name":"str"}],"output":{"generics":["hiddevice"],"name":"hidresult"}}],[11,"open_path","","The path name be determined by calling hid_enumerate(), or a platform-specific path name can be used (eg: /dev/hidraw0 on Linux).",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["hiddevice"],"name":"hidresult"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"hiddeviceinfo"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"check_error","","Get a string describing the last error which occurred.",2,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"hidresult"}}],[11,"write","","The first byte of `data` must contain the Report ID. For devices which only support a single report, this must be set to 0x0. The remaining bytes contain the report data. Since the Report ID is mandatory, calls to `write()` will always contain one more byte than the report contains. For example, if a hid report is 16 bytes long, 17 bytes must be passed to `write()`, the Report ID (or 0x0, for devices with a single report), followed by the report data (16 bytes). In this example, the length passed in would be 17. `write()` will send the data on the first OUT endpoint, if one exists. If it does not, it will send the data through the Control Endpoint (Endpoint 0).",2,null],[11,"read","","Input reports are returned to the host through the 'INTERRUPT IN' endpoint. The first byte will contain the Report number if the device uses numbered reports.",2,null],[11,"read_timeout","","Input reports are returned to the host through the 'INTERRUPT IN' endpoint. The first byte will contain the Report number if the device uses numbered reports. Timeout measured in milliseconds, set -1 for blocking wait.",2,null],[11,"send_feature_report","","Send a Feature report to the device. Feature reports are sent over the Control endpoint as a Set_Report transfer.  The first byte of `data` must contain the 'Report ID'. For devices which only support a single report, this must be set to 0x0. The remaining bytes contain the report data. Since the 'Report ID' is mandatory, calls to `send_feature_report()` will always contain one more byte than the report contains. For example, if a hid report is 16 bytes long, 17 bytes must be passed to `send_feature_report()`: 'the Report ID' (or 0x0, for devices which do not use numbered reports), followed by the report data (16 bytes). In this example, the length passed in would be 17.",2,null],[11,"get_feature_report","","Set the first byte of `data` to the 'Report ID' of the report to be read. Upon return, the first byte will still contain the Report ID, and the report data will start in data[1].",2,null],[11,"set_blocking_mode","","Set the device handle to be in blocking or in non-blocking mode. In non-blocking mode calls to `read()` will return immediately with an empty slice if there is no data to be read. In blocking mode, `read()` will wait (block) until there is data to read before returning. Modes can be changed at any time.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"hidresult"}}],[11,"get_manufacturer_string","","Get The Manufacturer String from a HID device.",2,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"hidresult"}}],[11,"get_product_string","","Get The Manufacturer String from a HID device.",2,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"hidresult"}}],[11,"get_serial_number_string","","Get The Serial Number String from a HID device.",2,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"hidresult"}}],[11,"get_indexed_string","","Get a string from a HID device, based on its string index.",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["string"],"name":"hidresult"}}]],"paths":[[3,"HidDeviceInfo"],[3,"HidApi"],[3,"HidDevice"]]};
searchIndex["interleaved_ordered"] = {"doc":"Interleave two ordered iterators to create a new ordered iterator.","items":[[3,"InterleaveOrdered","interleaved_ordered","Iterator that encapsulates two other ordered iterators to yield their results in order.",null,null],[5,"interleave_ordered","","Interleave two ordered iterators, yielding a new iterator whose items are also ordered.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"interleaveordered"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"InterleaveOrdered"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[4,"Diff","","A type returned by the `diff_with` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",null,null],[13,"NoElements","","Empty iterator",2,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,null],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",null,null],[13,"First","","This is the first element.",3,null],[13,"Middle","","This is neither the first nor the last element.",3,null],[13,"Last","","This is the last element.",3,null],[13,"Only","","This is the only element.",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`. Contains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted, only yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted, only yielding a value from the parameter iterator.",4,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",5,null],[13,"Done","","Fold is complete and will return this value",5,null],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",null,{"inputs":[{"name":"i"}],"output":{"name":"constuples"}}],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"generics":["diff"],"name":"option"}}],[5,"kmerge_by","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"kmergeby"}}],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",null,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"repeatn"}}],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",null,{"inputs":[{"name":"f"}],"output":{"name":"repeatcall"}}],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"iterate"}}],[5,"multizip","","An iterator that generalizes .zip() and allows running multiple iterators in lockstep.",null,{"inputs":[{"name":"u"}],"output":{"name":"zip"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"put_back","","Create an iterator where you can put back a single item",null,{"inputs":[{"name":"i"}],"output":{"name":"putback"}}],[5,"put_back_n","","Create an iterator where you can put back multiple values to the front of the iteration.",null,{"inputs":[{"name":"i"}],"output":{"name":"putbackn"}}],[5,"multipeek","","An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.",null,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators using the ordering function.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"rciter","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",null,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[5,"enumerate","","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"cloned","","Create an iterator that clones each element from &T to T",null,{"inputs":[{"name":"i"}],"output":{"name":"cloned"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[5,"equal","","Return `true` if both iterators produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same semantics as equal(a, b).",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[0,"structs","","The concrete iterator types.",null,null],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",null,null],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","See `multipeek()` for more information.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",null,null],[3,"Combinations","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"IntoChunks","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupBy","","`GroupBy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order. If all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"KMergeBy","","An iterator adaptor that merges an abitrary number of base iterators according to an ordering function.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",null,null],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",null,null],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",6,null],[3,"RepeatN","","An iterator that produces n repetitions of an element.",null,null],[3,"RepeatCall","","See `repeat_call` for more information.",null,null],[3,"Unfold","","See `unfold` for more information.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",7,null],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"TupleBuffer","","An iterator over a incomplete tuple.",null,null],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",null,null],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",null,null],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","See `multizip` for more information.",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"multipeek"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reset_peek","","Reset the peeking “cursor”",8,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn't advance itself. `.peek()` can be called multiple times, to peek further ahead.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"interleave"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"interleaveshortest"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"putback"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_value","","put back value `value` (builder method)",11,null],[11,"into_parts","","Split the `PutBack` into its parts.",11,null],[11,"put_back","","Put back a single value to the front of the iterator.",11,null],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"all","","",11,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"bool"}}],[11,"fold","","",11,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"putbackn"}}],[11,"put_back","","Puts x in front of the iterator. The values are yielded in order of the most recently put back values first.",12,null],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"batching"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"step"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"fold","","",19,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"uniqueby"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"intersperse"}}],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"kmerge"}}],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"clone","itertools","",2,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools::structs","",38,{"inputs":[{"name":"self"}],"output":{"name":"padusing"}}],[11,"next","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peeking_next","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"peeking_next","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"rciter"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",40,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"next_back","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unfold"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"iterate"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next","","",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"next","","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"next","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",45,{"inputs":[{"name":"self"}],"output":{"name":"tuplebuffer"}}],[11,"next","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools","",3,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"into_inner","","Return the inner value.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","itertools::structs","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"zipeq"}}],[11,"next","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ziplongest"}}],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools","",4,{"inputs":[{"name":"self"}],"output":{"name":"eitherorboth"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","itertools::structs","",50,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"new","","Deprecated: renamed to multizip",50,{"inputs":[{"name":"u"}],"output":{"name":"zip"}}],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"from","","",50,null],[11,"next","","",50,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",null,null],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both run out.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",52,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"zipeq"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Return an iterable that can group iterator elements. Consecutive elements that map to the same key (“runs”), are assigned to the same group.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"group_by_lazy","","",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"chunks","","Return an iterable that can chunk the iterator.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"intochunks"}}],[11,"chunks_lazy","","",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"intochunks"}}],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",52,{"inputs":[{"name":"self"}],"output":{"name":"tuplewindows"}}],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",52,{"inputs":[{"name":"self"}],"output":{"name":"tuples"}}],[11,"tee","","Split into an iterator pair that both yield all elements from the original iterator.",52,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"step"}}],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mapresults"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",52,{"inputs":[{"name":"self"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by merging them in ascending order.",52,{"inputs":[{"name":"self"}],"output":{"name":"kmerge"}}],[11,"kmerge_by","","Return an iterator adaptor that flattens an iterator of iterators by merging them according to the given closure.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"kmergeby"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"product"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",52,{"inputs":[{"name":"self"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration. Duplicates are detected using hash and equality.",52,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and  takes items while the closure `accept` returns `true`.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"peekingtakewhile"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",52,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",52,{"inputs":[{"name":"self"}],"output":{"name":"tuplecombinations"}}],[11,"combinations","","Return an iterator adaptor that iterates over the `n`-length combinations of the elements from an iterator.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"combinations"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",52,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",52,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",52,{"inputs":[{"name":"self"}],"output":{"name":"withposition"}}],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",52,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",52,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`, for convenience.",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",52,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"format"}}],[11,"format_default","","",52,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"format"}}],[11,"format_with","","Format all iterator elements, separated by `sep`.",52,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"formatwith"}}],[11,"fold_results","","Fold `Result` values from an iterator.",52,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",52,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",52,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"vec"}}],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",52,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",52,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",52,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip","","Create an iterator running multiple iterators in lockstep.",null,null],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"either"}}],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",0,null],[11,"read_to_end","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"extend","","",0,null],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fill_buf","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"consume","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"deref_mut","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"RcIter"],[3,"Unfold"],[3,"MultiPeek"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Combinations"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"MapResults"],[3,"ConsTuples"],[3,"Format"],[3,"FormatWith"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"KMerge"],[3,"KMergeBy"],[3,"PadUsing"],[3,"PeekingTakeWhile"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","Write integer to an `io::Write`.",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"generics":["usize"],"name":"result"}}],[5,"fmt","","Write integer to an `fmt::Write`.",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","An integer that can be formatted by `itoa::write` and `itoa::fmt`.",null,null]],"paths":[]};
searchIndex["journaldb"] = {"doc":"`JournalDB` interface and implementation.","items":[[4,"Algorithm","journaldb","Journal database operating strategy.",null,null],[13,"Archive","","Keep all keys forever.",0,null],[13,"EarlyMerge","","Ancient and recent history maintained separately; recent history lasts for particular number of blocks.",0,null],[13,"OverlayRecent","","Ancient and recent history maintained separately; recent history lasts for particular number of blocks.",0,null],[13,"RefCounted","","Ancient and recent history maintained separately; recent history lasts for particular number of blocks.",0,null],[5,"new","","Create a new `JournalDB` trait object over a generic key-value database.",null,{"inputs":[{"generics":["keyvaluedb"],"name":"arc"},{"name":"algorithm"},{"generics":["u32"],"name":"option"}],"output":{"generics":["journaldb"],"name":"box"}}],[0,"overlaydb","","Disk-backed `HashDB` implementation.",null,null],[3,"OverlayDB","journaldb::overlaydb","Implementation of the `HashDB` trait for a disk-backed database with a memory overlay.",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"overlaydb"}}],[11,"new","","Create a new instance of OverlayDB given a `backing` database.",1,{"inputs":[{"generics":["keyvaluedb"],"name":"arc"},{"generics":["u32"],"name":"option"}],"output":{"name":"overlaydb"}}],[11,"commit_to_batch","","Commit all operations to given batch.",1,{"inputs":[{"name":"self"},{"name":"dbtransaction"}],"output":{"generics":["u32"],"name":"result"}}],[11,"revert","","Revert all operations on this object (i.e. `insert()`s and `remove()`s) since the last `commit()`.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"commit_refs","","Get the number of references that would be committed.",1,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"i32"}}],[11,"keys","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["h256","i32"],"name":"hashmap"}}],[11,"get","","",1,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["dbvalue"],"name":"option"}}],[11,"contains","","",1,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"insert","","",1,null],[11,"emplace","","",1,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"dbvalue"}],"output":null}],[11,"remove","","",1,{"inputs":[{"name":"self"},{"name":"h256"}],"output":null}],[8,"JournalDB","journaldb","A `HashDB` which can manage a short-term journal potentially containing many forks of mutually exclusive actions.",null,null],[10,"boxed_clone","","Return a copy of ourself, in a box.",2,{"inputs":[{"name":"self"}],"output":{"generics":["journaldb"],"name":"box"}}],[10,"mem_used","","Returns heap memory size used",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"journal_size","","Returns the size of journalled state in memory. This function has a considerable speed requirement -- it must be fast enough to call several times per block imported.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"is_empty","","Check if this database has any commits",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"earliest_era","","Get the earliest era in the DB. None if there isn't yet any data in there.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[10,"latest_era","","Get the latest era in the DB. None if there isn't yet any data in there.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[10,"journal_under","","Journal recent database operations as being associated with a given era and id.",2,{"inputs":[{"name":"self"},{"name":"dbtransaction"},{"name":"u64"},{"name":"h256"}],"output":{"generics":["u32"],"name":"result"}}],[10,"mark_canonical","","Mark a given block as canonical, indicating that competing blocks' states may be pruned out.",2,{"inputs":[{"name":"self"},{"name":"dbtransaction"},{"name":"u64"},{"name":"h256"}],"output":{"generics":["u32"],"name":"result"}}],[10,"inject","","Commit all queued insert and delete operations without affecting any journalling -- this requires that all insertions and deletions are indeed canonical and will likely lead to an invalid database if that assumption is violated.",2,{"inputs":[{"name":"self"},{"name":"dbtransaction"}],"output":{"generics":["u32"],"name":"result"}}],[10,"state","","State data query",2,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["bytes"],"name":"option"}}],[11,"is_pruned","","Whether this database is pruned.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"backing","","Get backing database.",2,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"flush","","Clear internal strucutres. This should called after changes have been written to the backing strage",2,{"inputs":[{"name":"self"}],"output":null}],[10,"consolidate","","Consolidate all the insertions and deletions in the given memory overlay.",2,{"inputs":[{"name":"self"},{"generics":["keccakhasher"],"name":"memorydb"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"algorithm"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"algorithm"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"as_str","","Returns static str describing journal database algorithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_internal_name_str","","Returns static str describing journal database algorithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_stable","","Returns true if pruning strategy is stable",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"all_types","","Returns all algorithm types.",0,{"inputs":[],"output":{"generics":["algorithm"],"name":"vec"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"journal_size","","Returns the size of journalled state in memory. This function has a considerable speed requirement -- it must be fast enough to call several times per block imported.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"earliest_era","","Get the earliest era in the DB. None if there isn't yet any data in there.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"is_pruned","","Whether this database is pruned.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"flush","","Clear internal strucutres. This should called after changes have been written to the backing strage",2,{"inputs":[{"name":"self"}],"output":null}],[11,"as_hashdb","journaldb::overlaydb","",1,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"as_hashdb_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}]],"paths":[[4,"Algorithm"],[3,"OverlayDB"],[8,"JournalDB"]]};
searchIndex["keccak_hash"] = {"doc":"","items":[[3,"H256","keccak_hash","Unformatted binary data of fixed length.",null,null],[12,"0","","",0,null],[5,"keccak","","",null,{"inputs":[{"name":"t"}],"output":{"name":"h256"}}],[5,"keccak_256_unchecked","","",null,null],[5,"keccak_512_unchecked","","",null,null],[5,"keccak_256","","",null,null],[5,"keccak_512","","",null,null],[5,"write_keccak","","",null,null],[5,"keccak_pipe","","",null,{"inputs":[{"name":"bufread"},{"name":"write"}],"output":{"generics":["h256","error"],"name":"result"}}],[5,"keccak_buffer","","",null,{"inputs":[{"name":"bufread"}],"output":{"generics":["h256","error"],"name":"result"}}],[17,"KECCAK_EMPTY","","Get the KECCAK (i.e. Keccak) hash of the empty bytes string.",null,null],[17,"KECCAK_NULL_RLP","","The KECCAK of the RLP encoding of empty data.",null,null],[17,"KECCAK_EMPTY_LIST_RLP","","The KECCAK of the RLP encoding of empty list.",null,null],[11,"new","","Create a new, zero-initialised, instance.",0,{"inputs":[],"output":{"name":"h256"}}],[11,"zero","","Synonym for `new()`. Prefer to new as it's more readable.",0,{"inputs":[],"output":{"name":"h256"}}],[11,"len","","Get the size of this object in bytes.",0,{"inputs":[],"output":{"name":"usize"}}],[11,"clone_from_slice","","Assign self to be of the same value as a slice of bytes of length `len()`.",0,null],[11,"from_slice","","Convert a slice of bytes of length `len()` to an instance of this type.",0,null],[11,"copy_to","","Copy the data of this object into some mutable slice of length `len()`.",0,null],[11,"contains","","Returns `true` if all bits set in `b` are also set in `self`.",0,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"is_zero","","Returns `true` if no bits are set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"low_u64","","Returns the lowest 8 bytes interpreted as a BigEndian integer.",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"random","","Create a new, cryptographically random, instance.",0,{"inputs":[],"output":{"name":"h256"}}],[11,"randomize","","Assign self have a cryptographically random value.",0,null],[11,"hex","","Get a hex representation.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_mut","","",0,null],[11,"bitxor","","",0,null],[11,"deref","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"heap_size_of_children","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"h256"}}],[11,"bitand","","",0,null],[11,"as_ref","","",0,null],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"deref_mut","","",0,null],[11,"index_mut","","",0,null],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",0,null],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"h256"}}],[11,"index","","",0,null],[11,"index","","",0,null],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["h256","fromhexerror"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"h256"}}],[11,"from","","",0,null],[11,"from","","",0,{"inputs":[{"name":"h160"}],"output":{"name":"h256"}}],[11,"from","","",0,{"inputs":[{"name":"u256"}],"output":{"name":"h256"}}],[11,"from","","",0,{"inputs":[{"name":"u256"}],"output":{"name":"h256"}}],[11,"from","","",0,null],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"h256"}}],[11,"from","","",0,{"inputs":[{"name":"h160"}],"output":{"name":"h256"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"hash","","",0,null],[11,"bitor","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"generics":["h256"],"name":"result"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}]],"paths":[[3,"H256"]]};
searchIndex["keccak_hasher"] = {"doc":"Hasher implementation for the Keccak-256 hash","items":[[3,"KeccakHasher","keccak_hasher","Concrete `Hasher` impl for the Keccak-256 hash",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"keccakhasher"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"keccakhasher"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"keccakhasher"}],"output":{"name":"bool"}}],[11,"hash","","",0,null]],"paths":[[3,"KeccakHasher"]]};
searchIndex["kvdb"] = {"doc":"Key-Value store abstraction with `RocksDB` backend.","items":[[3,"DBTransaction","kvdb","Write transaction. Batches a sequence of put/delete operations for efficiency.",null,null],[12,"ops","","Database operations.",0,null],[4,"DBOp","","Database operation.",null,null],[13,"Insert","","",1,null],[12,"col","kvdb::DBOp","",1,null],[12,"key","","",1,null],[12,"value","","",1,null],[13,"Delete","kvdb","",1,null],[12,"col","kvdb::DBOp","",1,null],[12,"key","","",1,null],[6,"DBValue","kvdb","Database value.",null,null],[17,"PREFIX_LEN","","Required length of prefixes.",null,null],[8,"KeyValueDB","","Generic key-value database.",null,null],[11,"transaction","","Helper to create a new transaction.",2,{"inputs":[{"name":"self"}],"output":{"name":"dbtransaction"}}],[10,"get","","Get a value by key.",2,null],[10,"get_by_prefix","","Get a value by partial key. Only works for flushed data.",2,null],[10,"write_buffered","","Write a transaction of changes to the buffer.",2,{"inputs":[{"name":"self"},{"name":"dbtransaction"}],"output":null}],[11,"write","","Write a transaction of changes to the backing store.",2,{"inputs":[{"name":"self"},{"name":"dbtransaction"}],"output":{"name":"result"}}],[10,"flush","","Flush all buffered data.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"iter","","Iterate over flushed data for a given column.",2,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"generics":["iterator"],"name":"box"}}],[10,"iter_from_prefix","","Iterate over flushed data for a given column, starting from a given prefix.",2,null],[10,"restore","","Attempt to replace this database with a new one located at the given path.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[8,"KeyValueDBHandler","","Generic key-value database handler. This trait contains one function `open`. When called, it opens database with a predefined config.",null,null],[10,"open","","Open the predefined key-value database.",3,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"generics":["arc"],"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"dbtransaction"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"dbtransaction"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"dbtransaction"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"dbtransaction"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"dbop"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"dbop"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"dbop"}],"output":{"name":"bool"}}],[11,"key","","Returns the key associated with this operation.",1,null],[11,"col","","Returns the column associated with this operation.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"new","","Create new transaction.",0,{"inputs":[],"output":{"name":"dbtransaction"}}],[11,"with_capacity","","Create new transaction with capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dbtransaction"}}],[11,"put","","Insert a key-value pair in the transaction. Any existing value will be overwritten upon write.",0,null],[11,"put_vec","","Insert a key-value pair in the transaction. Any existing value will be overwritten upon write.",0,null],[11,"delete","","Delete value by key.",0,null]],"paths":[[3,"DBTransaction"],[4,"DBOp"],[8,"KeyValueDB"],[8,"KeyValueDBHandler"]]};
searchIndex["kvdb_memorydb"] = {"doc":"","items":[[3,"InMemory","kvdb_memorydb","A key-value database fulfilling the `KeyValueDB` trait, living in memory. This is generally intended for tests and is not particularly optimized.",null,null],[5,"create","","Create an in-memory database with the given number of columns. Columns will be indexable by 0..`num_cols`",null,{"inputs":[{"name":"u32"}],"output":{"name":"inmemory"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"inmemory"}}],[11,"get","","",0,null],[11,"get_by_prefix","","",0,null],[11,"write_buffered","","",0,{"inputs":[{"name":"self"},{"name":"dbtransaction"}],"output":null}],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"iter","","",0,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"iter_from_prefix","","",0,null],[11,"restore","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"InMemory"]]};
searchIndex["kvdb_rocksdb"] = {"doc":"","items":[[3,"CompactionProfile","kvdb_rocksdb","Compaction profile for the database settings",null,null],[12,"initial_file_size","","L0-L1 target file size",0,null],[12,"block_size","","block size",0,null],[12,"write_rate_limit","","rate limiter for background flushes and compactions, bytes/sec, if any",0,null],[3,"DatabaseConfig","","Database configuration",null,null],[12,"max_open_files","","Max number of open files.",1,null],[12,"memory_budget","","Memory budget (in MiB) used for setting block cache size, write buffer size.",1,null],[12,"compaction","","Compaction profile",1,null],[12,"columns","","Set number of columns",1,null],[3,"DatabaseIterator","","Database iterator (for flushed data only)",null,null],[3,"Database","","Key-Value database.",null,null],[5,"rotational_from_df_output","","Given output of df command return Linux rotational flag file path.",null,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"generics":["pathbuf"],"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"compactionprofile"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"compactionprofile"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"compactionprofile"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Default profile suitable for most storage",0,{"inputs":[],"output":{"name":"compactionprofile"}}],[11,"auto","","Attempt to determine the best profile automatically, only Linux for now.",0,{"inputs":[{"name":"path"}],"output":{"name":"compactionprofile"}}],[11,"ssd","","Default profile suitable for SSD storage",0,{"inputs":[],"output":{"name":"compactionprofile"}}],[11,"hdd","","Slow HDD compaction profile",0,{"inputs":[],"output":{"name":"compactionprofile"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"databaseconfig"}}],[11,"with_columns","","Create new `DatabaseConfig` with default parameters and specified set of columns. Note that cache sizes must be explicitly set.",1,{"inputs":[{"generics":["u32"],"name":"option"}],"output":{"name":"self"}}],[11,"memory_budget","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"memory_budget_per_col","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"databaseconfig"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"open_default","","Open database with default settings.",3,{"inputs":[{"name":"str"}],"output":{"generics":["database"],"name":"result"}}],[11,"open","","Open database file. Creates if it does not exist.",3,{"inputs":[{"name":"databaseconfig"},{"name":"str"}],"output":{"generics":["database"],"name":"result"}}],[11,"transaction","","Helper to create new transaction for this database.",3,{"inputs":[{"name":"self"}],"output":{"name":"dbtransaction"}}],[11,"write_buffered","","Commit transaction to database.",3,{"inputs":[{"name":"self"},{"name":"dbtransaction"}],"output":null}],[11,"flush","","Commit buffered changes to database.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","Commit transaction to database.",3,{"inputs":[{"name":"self"},{"name":"dbtransaction"}],"output":{"name":"result"}}],[11,"get","","Get value by key.",3,null],[11,"get_by_prefix","","Get value by partial key. Prefix size should match configured prefix size. Only searches flushed values.",3,null],[11,"iter","","Get database iterator for flushed data.",3,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"generics":["databaseiterator"],"name":"option"}}],[11,"restore","","Restore the database from a copy at given path.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"num_columns","","The number of non-default column families.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"drop_column","","Drop a column family.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add_column","","Add a column family.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get","","",3,null],[11,"get_by_prefix","","",3,null],[11,"write_buffered","","",3,{"inputs":[{"name":"self"},{"name":"dbtransaction"}],"output":null}],[11,"write","","",3,{"inputs":[{"name":"self"},{"name":"dbtransaction"}],"output":{"name":"result"}}],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"iter","","",3,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"iter_from_prefix","","",3,null],[11,"restore","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"CompactionProfile"],[3,"DatabaseConfig"],[3,"DatabaseIterator"],[3,"Database"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"__lazy_static_create","","",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"in_pktinfo","","",null,null],[12,"ipi_ifindex","","",35,null],[12,"ipi_spec_dst","","",35,null],[12,"ipi_addr","","",35,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",36,null],[12,"ifa_name","","",36,null],[12,"ifa_flags","","",36,null],[12,"ifa_addr","","",36,null],[12,"ifa_netmask","","",36,null],[12,"ifa_ifu","","",36,null],[12,"ifa_data","","",36,null],[3,"in6_rtmsg","","",null,null],[3,"dirent","","",null,null],[12,"d_ino","","",37,null],[12,"d_off","","",37,null],[12,"d_reclen","","",37,null],[12,"d_type","","",37,null],[12,"d_name","","",37,null],[3,"dirent64","","",null,null],[12,"d_ino","","",38,null],[12,"d_off","","",38,null],[12,"d_reclen","","",38,null],[12,"d_type","","",38,null],[12,"d_name","","",38,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",39,null],[12,"rlim_max","","",39,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",41,null],[12,"pw_passwd","","",41,null],[12,"pw_uid","","",41,null],[12,"pw_gid","","",41,null],[12,"pw_gecos","","",41,null],[12,"pw_dir","","",41,null],[12,"pw_shell","","",41,null],[3,"spwd","","",null,null],[12,"sp_namp","","",42,null],[12,"sp_pwdp","","",42,null],[12,"sp_lstchg","","",42,null],[12,"sp_min","","",42,null],[12,"sp_max","","",42,null],[12,"sp_warn","","",42,null],[12,"sp_inact","","",42,null],[12,"sp_expire","","",42,null],[12,"sp_flag","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"ucred","","",null,null],[12,"pid","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",69,null],[12,"mnt_dir","","",69,null],[12,"mnt_type","","",69,null],[12,"mnt_opts","","",69,null],[12,"mnt_freq","","",69,null],[12,"mnt_passno","","",69,null],[3,"posix_spawn_file_actions_t","","",null,null],[3,"posix_spawnattr_t","","",null,null],[3,"genlmsghdr","","",null,null],[12,"cmd","","",70,null],[12,"version","","",70,null],[12,"reserved","","",70,null],[3,"in6_pktinfo","","",null,null],[12,"ipi6_addr","","",71,null],[12,"ipi6_ifindex","","",71,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",72,null],[12,"aio_lio_opcode","","",72,null],[12,"aio_reqprio","","",72,null],[12,"aio_buf","","",72,null],[12,"aio_nbytes","","",72,null],[12,"aio_sigevent","","",72,null],[12,"aio_offset","","",72,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",73,null],[12,"e_exit","","",73,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",74,null],[12,"tv_usec","","",74,null],[3,"utmpx","","",null,null],[12,"ut_type","","",75,null],[12,"ut_pid","","",75,null],[12,"ut_line","","",75,null],[12,"ut_id","","",75,null],[12,"ut_user","","",75,null],[12,"ut_host","","",75,null],[12,"ut_exit","","",75,null],[12,"ut_session","","",75,null],[12,"ut_tv","","",75,null],[12,"ut_addr_v6","","",75,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",76,null],[12,"sa_mask","","",76,null],[12,"sa_flags","","",76,null],[12,"sa_restorer","","",76,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",77,null],[12,"ss_flags","","",77,null],[12,"ss_size","","",77,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",78,null],[12,"si_errno","","",78,null],[12,"si_code","","",78,null],[12,"_pad","","",78,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",79,null],[12,"gl_pathv","","",79,null],[12,"gl_offs","","",79,null],[12,"gl_flags","","",79,null],[3,"statfs","","",null,null],[12,"f_type","","",80,null],[12,"f_bsize","","",80,null],[12,"f_blocks","","",80,null],[12,"f_bfree","","",80,null],[12,"f_bavail","","",80,null],[12,"f_files","","",80,null],[12,"f_ffree","","",80,null],[12,"f_fsid","","",80,null],[12,"f_namelen","","",80,null],[12,"f_frsize","","",80,null],[3,"msghdr","","",null,null],[12,"msg_name","","",81,null],[12,"msg_namelen","","",81,null],[12,"msg_iov","","",81,null],[12,"msg_iovlen","","",81,null],[12,"msg_control","","",81,null],[12,"msg_controllen","","",81,null],[12,"msg_flags","","",81,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",82,null],[12,"cmsg_level","","",82,null],[12,"cmsg_type","","",82,null],[3,"termios","","",null,null],[12,"c_iflag","","",83,null],[12,"c_oflag","","",83,null],[12,"c_cflag","","",83,null],[12,"c_lflag","","",83,null],[12,"c_line","","",83,null],[12,"c_cc","","",83,null],[12,"c_ispeed","","",83,null],[12,"c_ospeed","","",83,null],[3,"flock","","",null,null],[12,"l_type","","",84,null],[12,"l_whence","","",84,null],[12,"l_start","","",84,null],[12,"l_len","","",84,null],[12,"l_pid","","",84,null],[3,"sem_t","","",null,null],[3,"mallinfo","","",null,null],[12,"arena","","",85,null],[12,"ordblks","","",85,null],[12,"smblks","","",85,null],[12,"hblks","","",85,null],[12,"hblkhd","","",85,null],[12,"usmblks","","",85,null],[12,"fsmblks","","",85,null],[12,"uordblks","","",85,null],[12,"fordblks","","",85,null],[12,"keepcost","","",85,null],[3,"nlmsghdr","","",null,null],[12,"nlmsg_len","","",86,null],[12,"nlmsg_type","","",86,null],[12,"nlmsg_flags","","",86,null],[12,"nlmsg_seq","","",86,null],[12,"nlmsg_pid","","",86,null],[3,"nlmsgerr","","",null,null],[12,"error","","",87,null],[12,"msg","","",87,null],[3,"nl_pktinfo","","",null,null],[12,"group","","",88,null],[3,"nl_mmap_req","","",null,null],[12,"nm_block_size","","",89,null],[12,"nm_block_nr","","",89,null],[12,"nm_frame_size","","",89,null],[12,"nm_frame_nr","","",89,null],[3,"nl_mmap_hdr","","",null,null],[12,"nm_status","","",90,null],[12,"nm_len","","",90,null],[12,"nm_group","","",90,null],[12,"nm_pid","","",90,null],[12,"nm_uid","","",90,null],[12,"nm_gid","","",90,null],[3,"nlattr","","",null,null],[12,"nla_len","","",91,null],[12,"nla_type","","",91,null],[3,"rtentry","","",null,null],[12,"rt_pad1","","",92,null],[12,"rt_dst","","",92,null],[12,"rt_gateway","","",92,null],[12,"rt_genmask","","",92,null],[12,"rt_flags","","",92,null],[12,"rt_pad2","","",92,null],[12,"rt_pad3","","",92,null],[12,"rt_tos","","",92,null],[12,"rt_class","","",92,null],[12,"rt_pad4","","",92,null],[12,"rt_metric","","",92,null],[12,"rt_dev","","",92,null],[12,"rt_mtu","","",92,null],[12,"rt_window","","",92,null],[12,"rt_irtt","","",92,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",93,null],[12,"loads","","",93,null],[12,"totalram","","",93,null],[12,"freeram","","",93,null],[12,"sharedram","","",93,null],[12,"bufferram","","",93,null],[12,"totalswap","","",93,null],[12,"freeswap","","",93,null],[12,"procs","","",93,null],[12,"pad","","",93,null],[12,"totalhigh","","",93,null],[12,"freehigh","","",93,null],[12,"mem_unit","","",93,null],[12,"_f","","",93,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",94,null],[12,"msg_stime","","",94,null],[12,"msg_rtime","","",94,null],[12,"msg_ctime","","",94,null],[12,"msg_qnum","","",94,null],[12,"msg_qbytes","","",94,null],[12,"msg_lspid","","",94,null],[12,"msg_lrpid","","",94,null],[3,"stat","","",null,null],[12,"st_dev","","",95,null],[12,"st_ino","","",95,null],[12,"st_nlink","","",95,null],[12,"st_mode","","",95,null],[12,"st_uid","","",95,null],[12,"st_gid","","",95,null],[12,"st_rdev","","",95,null],[12,"st_size","","",95,null],[12,"st_blksize","","",95,null],[12,"st_blocks","","",95,null],[12,"st_atime","","",95,null],[12,"st_atime_nsec","","",95,null],[12,"st_mtime","","",95,null],[12,"st_mtime_nsec","","",95,null],[12,"st_ctime","","",95,null],[12,"st_ctime_nsec","","",95,null],[3,"stat64","","",null,null],[12,"st_dev","","",96,null],[12,"st_ino","","",96,null],[12,"st_nlink","","",96,null],[12,"st_mode","","",96,null],[12,"st_uid","","",96,null],[12,"st_gid","","",96,null],[12,"st_rdev","","",96,null],[12,"st_size","","",96,null],[12,"st_blksize","","",96,null],[12,"st_blocks","","",96,null],[12,"st_atime","","",96,null],[12,"st_atime_nsec","","",96,null],[12,"st_mtime","","",96,null],[12,"st_mtime_nsec","","",96,null],[12,"st_ctime","","",96,null],[12,"st_ctime_nsec","","",96,null],[3,"statfs64","","",null,null],[12,"f_type","","",97,null],[12,"f_bsize","","",97,null],[12,"f_blocks","","",97,null],[12,"f_bfree","","",97,null],[12,"f_bavail","","",97,null],[12,"f_files","","",97,null],[12,"f_ffree","","",97,null],[12,"f_fsid","","",97,null],[12,"f_namelen","","",97,null],[12,"f_frsize","","",97,null],[12,"f_flags","","",97,null],[12,"f_spare","","",97,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",98,null],[12,"f_frsize","","",98,null],[12,"f_blocks","","",98,null],[12,"f_bfree","","",98,null],[12,"f_bavail","","",98,null],[12,"f_files","","",98,null],[12,"f_ffree","","",98,null],[12,"f_favail","","",98,null],[12,"f_fsid","","",98,null],[12,"f_flag","","",98,null],[12,"f_namemax","","",98,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",99,null],[12,"exponent","","",99,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",100,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",101,null],[12,"swd","","",101,null],[12,"ftw","","",101,null],[12,"fop","","",101,null],[12,"rip","","",101,null],[12,"rdp","","",101,null],[12,"mxcsr","","",101,null],[12,"mxcr_mask","","",101,null],[12,"_st","","",101,null],[12,"_xmm","","",101,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",102,null],[12,"swd","","",102,null],[12,"ftw","","",102,null],[12,"fop","","",102,null],[12,"rip","","",102,null],[12,"rdp","","",102,null],[12,"mxcsr","","",102,null],[12,"mxcr_mask","","",102,null],[12,"st_space","","",102,null],[12,"xmm_space","","",102,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",103,null],[12,"r14","","",103,null],[12,"r13","","",103,null],[12,"r12","","",103,null],[12,"rbp","","",103,null],[12,"rbx","","",103,null],[12,"r11","","",103,null],[12,"r10","","",103,null],[12,"r9","","",103,null],[12,"r8","","",103,null],[12,"rax","","",103,null],[12,"rcx","","",103,null],[12,"rdx","","",103,null],[12,"rsi","","",103,null],[12,"rdi","","",103,null],[12,"orig_rax","","",103,null],[12,"rip","","",103,null],[12,"cs","","",103,null],[12,"eflags","","",103,null],[12,"rsp","","",103,null],[12,"ss","","",103,null],[12,"fs_base","","",103,null],[12,"gs_base","","",103,null],[12,"ds","","",103,null],[12,"es","","",103,null],[12,"fs","","",103,null],[12,"gs","","",103,null],[3,"user","","",null,null],[12,"regs","","",104,null],[12,"u_fpvalid","","",104,null],[12,"i387","","",104,null],[12,"u_tsize","","",104,null],[12,"u_dsize","","",104,null],[12,"u_ssize","","",104,null],[12,"start_code","","",104,null],[12,"start_stack","","",104,null],[12,"signal","","",104,null],[12,"u_ar0","","",104,null],[12,"u_fpstate","","",104,null],[12,"magic","","",104,null],[12,"u_comm","","",104,null],[12,"u_debugreg","","",104,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",105,null],[12,"fpregs","","",105,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",106,null],[12,"uc_link","","",106,null],[12,"uc_stack","","",106,null],[12,"uc_mcontext","","",106,null],[12,"uc_sigmask","","",106,null],[3,"ipc_perm","","",null,null],[12,"__key","","",107,null],[12,"uid","","",107,null],[12,"gid","","",107,null],[12,"cuid","","",107,null],[12,"cgid","","",107,null],[12,"mode","","",107,null],[12,"__seq","","",107,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",108,null],[12,"shm_segsz","","",108,null],[12,"shm_atime","","",108,null],[12,"shm_dtime","","",108,null],[12,"shm_ctime","","",108,null],[12,"shm_cpid","","",108,null],[12,"shm_lpid","","",108,null],[12,"shm_nattch","","",108,null],[3,"termios2","","",null,null],[12,"c_iflag","","",109,null],[12,"c_oflag","","",109,null],[12,"c_cflag","","",109,null],[12,"c_lflag","","",109,null],[12,"c_line","","",109,null],[12,"c_cc","","",109,null],[12,"c_ispeed","","",109,null],[12,"c_ospeed","","",109,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",110,null],[12,"f_frsize","","",110,null],[12,"f_blocks","","",110,null],[12,"f_bfree","","",110,null],[12,"f_bavail","","",110,null],[12,"f_files","","",110,null],[12,"f_ffree","","",110,null],[12,"f_favail","","",110,null],[12,"f_fsid","","",110,null],[12,"f_flag","","",110,null],[12,"f_namemax","","",110,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"IPOPT_COPIED","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"IPOPT_CLASS","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"IPOPT_NUMBER","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"IPTOS_TOS","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"IPTOS_PREC","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"RT_TOS","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"RT_ADDRCLASS","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"RT_LOCALADDR","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"bool"}}],[5,"NLA_ALIGN","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"remap_file_pages","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sem_getvalue","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawnattr_getschedpolicy","","",null,null],[5,"posix_spawnattr_setschedpolicy","","",null,null],[5,"posix_spawnattr_getschedparam","","",null,null],[5,"posix_spawnattr_setschedparam","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[5,"fread_unlocked","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"mallinfo","","",null,null],[5,"malloc_usable_size","","",null,null],[5,"getauxval","","",null,null],[5,"getpwent_r","","",null,null],[5,"getgrent_r","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"termios2"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"mallinfo"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"nlmsghdr"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"nlmsgerr"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"nl_pktinfo"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"nl_mmap_req"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"nl_mmap_hdr"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"nlattr"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"rtentry"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"dl_phdr_info"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"elf32_phdr"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"elf64_phdr"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"mntent"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"posix_spawn_file_actions_t"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"posix_spawnattr_t"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"genlmsghdr"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"in6_pktinfo"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"in_pktinfo"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"in6_rtmsg"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_PKTINFO","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"IPV6_RECVPKTINFO","","",null,null],[17,"IPV6_PKTINFO","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"IPTOS_LOWDELAY","","",null,null],[17,"IPTOS_THROUGHPUT","","",null,null],[17,"IPTOS_RELIABILITY","","",null,null],[17,"IPTOS_MINCOST","","",null,null],[17,"IPTOS_PREC_NETCONTROL","","",null,null],[17,"IPTOS_PREC_INTERNETCONTROL","","",null,null],[17,"IPTOS_PREC_CRITIC_ECP","","",null,null],[17,"IPTOS_PREC_FLASHOVERRIDE","","",null,null],[17,"IPTOS_PREC_FLASH","","",null,null],[17,"IPTOS_PREC_IMMEDIATE","","",null,null],[17,"IPTOS_PREC_PRIORITY","","",null,null],[17,"IPTOS_PREC_ROUTINE","","",null,null],[17,"IPOPT_COPY","","",null,null],[17,"IPOPT_CLASS_MASK","","",null,null],[17,"IPOPT_NUMBER_MASK","","",null,null],[17,"IPOPT_CONTROL","","",null,null],[17,"IPOPT_RESERVED1","","",null,null],[17,"IPOPT_MEASUREMENT","","",null,null],[17,"IPOPT_RESERVED2","","",null,null],[17,"IPOPT_END","","",null,null],[17,"IPOPT_NOOP","","",null,null],[17,"IPOPT_SEC","","",null,null],[17,"IPOPT_LSRR","","",null,null],[17,"IPOPT_TIMESTAMP","","",null,null],[17,"IPOPT_RR","","",null,null],[17,"IPOPT_SID","","",null,null],[17,"IPOPT_SSRR","","",null,null],[17,"IPOPT_RA","","",null,null],[17,"IPVERSION","","",null,null],[17,"MAXTTL","","",null,null],[17,"IPDEFTTL","","",null,null],[17,"IPOPT_OPTVAL","","",null,null],[17,"IPOPT_OLEN","","",null,null],[17,"IPOPT_OFFSET","","",null,null],[17,"IPOPT_MINOFF","","",null,null],[17,"MAX_IPOPTLEN","","",null,null],[17,"IPOPT_NOP","","",null,null],[17,"IPOPT_EOL","","",null,null],[17,"IPOPT_TS","","",null,null],[17,"IPOPT_TS_TSONLY","","",null,null],[17,"IPOPT_TS_TSANDADDR","","",null,null],[17,"IPOPT_TS_PRESPEC","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",null,null],[17,"POSIX_SPAWN_SETSCHEDULER","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"GENL_NAMSIZ","","",null,null],[17,"GENL_MIN_ID","","",null,null],[17,"GENL_MAX_ID","","",null,null],[17,"GENL_ADMIN_PERM","","",null,null],[17,"GENL_CMD_CAP_DO","","",null,null],[17,"GENL_CMD_CAP_DUMP","","",null,null],[17,"GENL_CMD_CAP_HASPOL","","",null,null],[17,"GENL_ID_CTRL","","",null,null],[17,"CTRL_CMD_UNSPEC","","",null,null],[17,"CTRL_CMD_NEWFAMILY","","",null,null],[17,"CTRL_CMD_DELFAMILY","","",null,null],[17,"CTRL_CMD_GETFAMILY","","",null,null],[17,"CTRL_CMD_NEWOPS","","",null,null],[17,"CTRL_CMD_DELOPS","","",null,null],[17,"CTRL_CMD_GETOPS","","",null,null],[17,"CTRL_CMD_NEWMCAST_GRP","","",null,null],[17,"CTRL_CMD_DELMCAST_GRP","","",null,null],[17,"CTRL_CMD_GETMCAST_GRP","","",null,null],[17,"CTRL_ATTR_UNSPEC","","",null,null],[17,"CTRL_ATTR_FAMILY_ID","","",null,null],[17,"CTRL_ATTR_FAMILY_NAME","","",null,null],[17,"CTRL_ATTR_VERSION","","",null,null],[17,"CTRL_ATTR_HDRSIZE","","",null,null],[17,"CTRL_ATTR_MAXATTR","","",null,null],[17,"CTRL_ATTR_OPS","","",null,null],[17,"CTRL_ATTR_MCAST_GROUPS","","",null,null],[17,"CTRL_ATTR_OP_UNSPEC","","",null,null],[17,"CTRL_ATTR_OP_ID","","",null,null],[17,"CTRL_ATTR_OP_FLAGS","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_ID","","",null,null],[17,"NF_DROP","","",null,null],[17,"NF_ACCEPT","","",null,null],[17,"NF_STOLEN","","",null,null],[17,"NF_QUEUE","","",null,null],[17,"NF_REPEAT","","",null,null],[17,"NF_STOP","","",null,null],[17,"NF_MAX_VERDICT","","",null,null],[17,"NF_VERDICT_MASK","","",null,null],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",null,null],[17,"NF_VERDICT_QMASK","","",null,null],[17,"NF_VERDICT_QBITS","","",null,null],[17,"NF_VERDICT_BITS","","",null,null],[17,"NF_INET_PRE_ROUTING","","",null,null],[17,"NF_INET_LOCAL_IN","","",null,null],[17,"NF_INET_FORWARD","","",null,null],[17,"NF_INET_LOCAL_OUT","","",null,null],[17,"NF_INET_POST_ROUTING","","",null,null],[17,"NF_INET_NUMHOOKS","","",null,null],[17,"NFPROTO_UNSPEC","","",null,null],[17,"NFPROTO_IPV4","","",null,null],[17,"NFPROTO_ARP","","",null,null],[17,"NFPROTO_BRIDGE","","",null,null],[17,"NFPROTO_IPV6","","",null,null],[17,"NFPROTO_DECNET","","",null,null],[17,"NFPROTO_NUMPROTO","","",null,null],[17,"NF_IP_PRE_ROUTING","","",null,null],[17,"NF_IP_LOCAL_IN","","",null,null],[17,"NF_IP_FORWARD","","",null,null],[17,"NF_IP_LOCAL_OUT","","",null,null],[17,"NF_IP_POST_ROUTING","","",null,null],[17,"NF_IP_NUMHOOKS","","",null,null],[17,"NF_IP_PRI_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP_PRI_RAW","","",null,null],[17,"NF_IP_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK","","",null,null],[17,"NF_IP_PRI_MANGLE","","",null,null],[17,"NF_IP_PRI_NAT_DST","","",null,null],[17,"NF_IP_PRI_FILTER","","",null,null],[17,"NF_IP_PRI_SECURITY","","",null,null],[17,"NF_IP_PRI_NAT_SRC","","",null,null],[17,"NF_IP_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",null,null],[17,"NF_IP_PRI_LAST","","",null,null],[17,"NF_IP6_PRE_ROUTING","","",null,null],[17,"NF_IP6_LOCAL_IN","","",null,null],[17,"NF_IP6_FORWARD","","",null,null],[17,"NF_IP6_LOCAL_OUT","","",null,null],[17,"NF_IP6_POST_ROUTING","","",null,null],[17,"NF_IP6_NUMHOOKS","","",null,null],[17,"NF_IP6_PRI_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP6_PRI_RAW","","",null,null],[17,"NF_IP6_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK","","",null,null],[17,"NF_IP6_PRI_MANGLE","","",null,null],[17,"NF_IP6_PRI_NAT_DST","","",null,null],[17,"NF_IP6_PRI_FILTER","","",null,null],[17,"NF_IP6_PRI_SECURITY","","",null,null],[17,"NF_IP6_PRI_NAT_SRC","","",null,null],[17,"NF_IP6_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP6_PRI_LAST","","",null,null],[17,"SIOCADDRT","","",null,null],[17,"SIOCDELRT","","",null,null],[17,"SIOCGIFNAME","","",null,null],[17,"SIOCSIFLINK","","",null,null],[17,"SIOCGIFCONF","","",null,null],[17,"SIOCGIFFLAGS","","",null,null],[17,"SIOCSIFFLAGS","","",null,null],[17,"SIOCGIFADDR","","",null,null],[17,"SIOCSIFADDR","","",null,null],[17,"SIOCGIFDSTADDR","","",null,null],[17,"SIOCSIFDSTADDR","","",null,null],[17,"SIOCGIFBRDADDR","","",null,null],[17,"SIOCSIFBRDADDR","","",null,null],[17,"SIOCGIFNETMASK","","",null,null],[17,"SIOCSIFNETMASK","","",null,null],[17,"SIOCGIFMETRIC","","",null,null],[17,"SIOCSIFMETRIC","","",null,null],[17,"SIOCGIFMEM","","",null,null],[17,"SIOCSIFMEM","","",null,null],[17,"SIOCGIFMTU","","",null,null],[17,"SIOCSIFMTU","","",null,null],[17,"SIOCSIFHWADDR","","",null,null],[17,"SIOCGIFENCAP","","",null,null],[17,"SIOCSIFENCAP","","",null,null],[17,"SIOCGIFHWADDR","","",null,null],[17,"SIOCGIFSLAVE","","",null,null],[17,"SIOCSIFSLAVE","","",null,null],[17,"SIOCADDMULTI","","",null,null],[17,"SIOCDELMULTI","","",null,null],[17,"SIOCDARP","","",null,null],[17,"SIOCGARP","","",null,null],[17,"SIOCSARP","","",null,null],[17,"SIOCDRARP","","",null,null],[17,"SIOCGRARP","","",null,null],[17,"SIOCSRARP","","",null,null],[17,"SIOCGIFMAP","","",null,null],[17,"SIOCSIFMAP","","",null,null],[17,"IPTOS_TOS_MASK","","",null,null],[17,"IPTOS_PREC_MASK","","",null,null],[17,"RTF_UP","","",null,null],[17,"RTF_GATEWAY","","",null,null],[17,"RTF_HOST","","",null,null],[17,"RTF_REINSTATE","","",null,null],[17,"RTF_DYNAMIC","","",null,null],[17,"RTF_MODIFIED","","",null,null],[17,"RTF_MTU","","",null,null],[17,"RTF_MSS","","",null,null],[17,"RTF_WINDOW","","",null,null],[17,"RTF_IRTT","","",null,null],[17,"RTF_REJECT","","",null,null],[17,"RTF_STATIC","","",null,null],[17,"RTF_XRESOLVE","","",null,null],[17,"RTF_NOFORWARD","","",null,null],[17,"RTF_THROW","","",null,null],[17,"RTF_NOPMTUDISC","","",null,null],[17,"RTF_DEFAULT","","",null,null],[17,"RTF_ALLONLINK","","",null,null],[17,"RTF_ADDRCONF","","",null,null],[17,"RTF_LINKRT","","",null,null],[17,"RTF_NONEXTHOP","","",null,null],[17,"RTF_CACHE","","",null,null],[17,"RTF_FLOW","","",null,null],[17,"RTF_POLICY","","",null,null],[17,"RTCF_VALVE","","",null,null],[17,"RTCF_MASQ","","",null,null],[17,"RTCF_NAT","","",null,null],[17,"RTCF_DOREDIRECT","","",null,null],[17,"RTCF_LOG","","",null,null],[17,"RTCF_DIRECTSRC","","",null,null],[17,"RTF_LOCAL","","",null,null],[17,"RTF_INTERFACE","","",null,null],[17,"RTF_MULTICAST","","",null,null],[17,"RTF_BROADCAST","","",null,null],[17,"RTF_NAT","","",null,null],[17,"RTF_ADDRCLASSMASK","","",null,null],[17,"RT_CLASS_UNSPEC","","",null,null],[17,"RT_CLASS_DEFAULT","","",null,null],[17,"RT_CLASS_MAIN","","",null,null],[17,"RT_CLASS_LOCAL","","",null,null],[17,"RT_CLASS_MAX","","",null,null],[17,"RTMSG_OVERRUN","","",null,null],[17,"RTMSG_NEWDEVICE","","",null,null],[17,"RTMSG_DELDEVICE","","",null,null],[17,"RTMSG_NEWROUTE","","",null,null],[17,"RTMSG_DELROUTE","","",null,null],[17,"RTMSG_NEWRULE","","",null,null],[17,"RTMSG_DELRULE","","",null,null],[17,"RTMSG_CONTROL","","",null,null],[17,"RTMSG_AR_FAILED","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"NLA_ALIGNTO","","",null,null],[17,"GENL_UNS_ADMIN_PERM","","",null,null],[17,"GENL_ID_VFS_DQUOT","","",null,null],[17,"GENL_ID_PMCRAID","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"NF_NETDEV_INGRESS","","",null,null],[17,"NF_NETDEV_NUMHOOKS","","",null,null],[17,"NFPROTO_INET","","",null,null],[17,"NFPROTO_NETDEV","","",null,null],[17,"NFT_TABLE_MAXNAMELEN","","",null,null],[17,"NFT_CHAIN_MAXNAMELEN","","",null,null],[17,"NFT_SET_MAXNAMELEN","","",null,null],[17,"NFT_OBJ_MAXNAMELEN","","",null,null],[17,"NFT_USERDATA_MAXLEN","","",null,null],[17,"NFT_REG_VERDICT","","",null,null],[17,"NFT_REG_1","","",null,null],[17,"NFT_REG_2","","",null,null],[17,"NFT_REG_3","","",null,null],[17,"NFT_REG_4","","",null,null],[17,"__NFT_REG_MAX","","",null,null],[17,"NFT_REG32_00","","",null,null],[17,"NFT_REG32_01","","",null,null],[17,"NFT_REG32_02","","",null,null],[17,"NFT_REG32_03","","",null,null],[17,"NFT_REG32_04","","",null,null],[17,"NFT_REG32_05","","",null,null],[17,"NFT_REG32_06","","",null,null],[17,"NFT_REG32_07","","",null,null],[17,"NFT_REG32_08","","",null,null],[17,"NFT_REG32_09","","",null,null],[17,"NFT_REG32_10","","",null,null],[17,"NFT_REG32_11","","",null,null],[17,"NFT_REG32_12","","",null,null],[17,"NFT_REG32_13","","",null,null],[17,"NFT_REG32_14","","",null,null],[17,"NFT_REG32_15","","",null,null],[17,"NFT_REG_SIZE","","",null,null],[17,"NFT_REG32_SIZE","","",null,null],[17,"NFT_CONTINUE","","",null,null],[17,"NFT_BREAK","","",null,null],[17,"NFT_JUMP","","",null,null],[17,"NFT_GOTO","","",null,null],[17,"NFT_RETURN","","",null,null],[17,"NFT_MSG_NEWTABLE","","",null,null],[17,"NFT_MSG_GETTABLE","","",null,null],[17,"NFT_MSG_DELTABLE","","",null,null],[17,"NFT_MSG_NEWCHAIN","","",null,null],[17,"NFT_MSG_GETCHAIN","","",null,null],[17,"NFT_MSG_DELCHAIN","","",null,null],[17,"NFT_MSG_NEWRULE","","",null,null],[17,"NFT_MSG_GETRULE","","",null,null],[17,"NFT_MSG_DELRULE","","",null,null],[17,"NFT_MSG_NEWSET","","",null,null],[17,"NFT_MSG_GETSET","","",null,null],[17,"NFT_MSG_DELSET","","",null,null],[17,"NFT_MSG_NEWSETELEM","","",null,null],[17,"NFT_MSG_GETSETELEM","","",null,null],[17,"NFT_MSG_DELSETELEM","","",null,null],[17,"NFT_MSG_NEWGEN","","",null,null],[17,"NFT_MSG_GETGEN","","",null,null],[17,"NFT_MSG_TRACE","","",null,null],[17,"NFT_MSG_NEWOBJ","","",null,null],[17,"NFT_MSG_GETOBJ","","",null,null],[17,"NFT_MSG_DELOBJ","","",null,null],[17,"NFT_MSG_GETOBJ_RESET","","",null,null],[17,"NFT_MSG_MAX","","",null,null],[17,"NFT_SET_ANONYMOUS","","",null,null],[17,"NFT_SET_CONSTANT","","",null,null],[17,"NFT_SET_INTERVAL","","",null,null],[17,"NFT_SET_MAP","","",null,null],[17,"NFT_SET_TIMEOUT","","",null,null],[17,"NFT_SET_EVAL","","",null,null],[17,"NFT_SET_POL_PERFORMANCE","","",null,null],[17,"NFT_SET_POL_MEMORY","","",null,null],[17,"NFT_SET_ELEM_INTERVAL_END","","",null,null],[17,"NFT_DATA_VALUE","","",null,null],[17,"NFT_DATA_VERDICT","","",null,null],[17,"NFT_DATA_RESERVED_MASK","","",null,null],[17,"NFT_DATA_VALUE_MAXLEN","","",null,null],[17,"NFT_BYTEORDER_NTOH","","",null,null],[17,"NFT_BYTEORDER_HTON","","",null,null],[17,"NFT_CMP_EQ","","",null,null],[17,"NFT_CMP_NEQ","","",null,null],[17,"NFT_CMP_LT","","",null,null],[17,"NFT_CMP_LTE","","",null,null],[17,"NFT_CMP_GT","","",null,null],[17,"NFT_CMP_GTE","","",null,null],[17,"NFT_RANGE_EQ","","",null,null],[17,"NFT_RANGE_NEQ","","",null,null],[17,"NFT_LOOKUP_F_INV","","",null,null],[17,"NFT_DYNSET_OP_ADD","","",null,null],[17,"NFT_DYNSET_OP_UPDATE","","",null,null],[17,"NFT_DYNSET_F_INV","","",null,null],[17,"NFT_PAYLOAD_LL_HEADER","","",null,null],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",null,null],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",null,null],[17,"NFT_PAYLOAD_CSUM_NONE","","",null,null],[17,"NFT_PAYLOAD_CSUM_INET","","",null,null],[17,"NFT_META_LEN","","",null,null],[17,"NFT_META_PROTOCOL","","",null,null],[17,"NFT_META_PRIORITY","","",null,null],[17,"NFT_META_MARK","","",null,null],[17,"NFT_META_IIF","","",null,null],[17,"NFT_META_OIF","","",null,null],[17,"NFT_META_IIFNAME","","",null,null],[17,"NFT_META_OIFNAME","","",null,null],[17,"NFT_META_IIFTYPE","","",null,null],[17,"NFT_META_OIFTYPE","","",null,null],[17,"NFT_META_SKUID","","",null,null],[17,"NFT_META_SKGID","","",null,null],[17,"NFT_META_NFTRACE","","",null,null],[17,"NFT_META_RTCLASSID","","",null,null],[17,"NFT_META_SECMARK","","",null,null],[17,"NFT_META_NFPROTO","","",null,null],[17,"NFT_META_L4PROTO","","",null,null],[17,"NFT_META_BRI_IIFNAME","","",null,null],[17,"NFT_META_BRI_OIFNAME","","",null,null],[17,"NFT_META_PKTTYPE","","",null,null],[17,"NFT_META_CPU","","",null,null],[17,"NFT_META_IIFGROUP","","",null,null],[17,"NFT_META_OIFGROUP","","",null,null],[17,"NFT_META_CGROUP","","",null,null],[17,"NFT_META_PRANDOM","","",null,null],[17,"NFT_CT_STATE","","",null,null],[17,"NFT_CT_DIRECTION","","",null,null],[17,"NFT_CT_STATUS","","",null,null],[17,"NFT_CT_MARK","","",null,null],[17,"NFT_CT_SECMARK","","",null,null],[17,"NFT_CT_EXPIRATION","","",null,null],[17,"NFT_CT_HELPER","","",null,null],[17,"NFT_CT_L3PROTOCOL","","",null,null],[17,"NFT_CT_SRC","","",null,null],[17,"NFT_CT_DST","","",null,null],[17,"NFT_CT_PROTOCOL","","",null,null],[17,"NFT_CT_PROTO_SRC","","",null,null],[17,"NFT_CT_PROTO_DST","","",null,null],[17,"NFT_CT_LABELS","","",null,null],[17,"NFT_CT_PKTS","","",null,null],[17,"NFT_CT_BYTES","","",null,null],[17,"NFT_LIMIT_PKTS","","",null,null],[17,"NFT_LIMIT_PKT_BYTES","","",null,null],[17,"NFT_LIMIT_F_INV","","",null,null],[17,"NFT_QUEUE_FLAG_BYPASS","","",null,null],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",null,null],[17,"NFT_QUEUE_FLAG_MASK","","",null,null],[17,"NFT_QUOTA_F_INV","","",null,null],[17,"NFT_REJECT_ICMP_UNREACH","","",null,null],[17,"NFT_REJECT_TCP_RST","","",null,null],[17,"NFT_REJECT_ICMPX_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",null,null],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",null,null],[17,"NFT_NAT_SNAT","","",null,null],[17,"NFT_NAT_DNAT","","",null,null],[17,"NFT_TRACETYPE_UNSPEC","","",null,null],[17,"NFT_TRACETYPE_POLICY","","",null,null],[17,"NFT_TRACETYPE_RETURN","","",null,null],[17,"NFT_TRACETYPE_RULE","","",null,null],[17,"NFT_NG_INCREMENTAL","","",null,null],[17,"NFT_NG_RANDOM","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"F_RDLCK","","",null,null],[17,"F_WRLCK","","",null,null],[17,"F_UNLCK","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"],[3,"in6_rtmsg"]]};
searchIndex["libusb"] = {"doc":"This crate provides a safe wrapper around the native `libusb` library.","items":[[3,"LibraryVersion","libusb","A structure that describes the version of the underlying `libusb` library.",null,null],[3,"Context","","A `libusb` context.",null,null],[3,"DeviceList","","A list of detected USB devices.",null,null],[3,"Devices","","Iterator over detected USB devices.",null,null],[3,"Device","","A reference to a USB device.",null,null],[3,"DeviceHandle","","A handle to an open USB device.",null,null],[3,"Version","","A three-part version consisting of major, minor, and sub minor components.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[12,"2","","",0,null],[3,"DeviceDescriptor","","Describes a device.",null,null],[3,"ConfigDescriptor","","Describes a configuration.",null,null],[3,"Interfaces","","Iterator over a configuration's interfaces.",null,null],[3,"Interface","","A device interface.",null,null],[3,"InterfaceDescriptors","","Iterator over an interface's descriptors.",null,null],[3,"InterfaceDescriptor","","Describes an alternate setting for an interface.",null,null],[3,"EndpointDescriptors","","Iterator over an interface's endpoint descriptors.",null,null],[3,"EndpointDescriptor","","Describes an endpoint.",null,null],[3,"Language","","A language used to read string descriptors from USB devices.",null,null],[4,"Error","","Errors returned by the `libusb` library.",null,null],[13,"Success","","Success (no error).",1,null],[13,"Io","","Input/output error.",1,null],[13,"InvalidParam","","Invalid parameter.",1,null],[13,"Access","","Access denied (insufficient permissions).",1,null],[13,"NoDevice","","No such device (it may have been disconnected).",1,null],[13,"NotFound","","Entity not found.",1,null],[13,"Busy","","Resource busy.",1,null],[13,"Timeout","","Operation timed out.",1,null],[13,"Overflow","","Overflow.",1,null],[13,"Pipe","","Pipe error.",1,null],[13,"Interrupted","","System call interrupted (perhaps due to signal).",1,null],[13,"NoMem","","Insufficient memory.",1,null],[13,"NotSupported","","Operation not supported or unimplemented on this platform.",1,null],[13,"Other","","Other error.",1,null],[4,"LogLevel","","Library logging levels.",null,null],[13,"None","","No messages are printed by `libusb` (default).",2,null],[13,"Error","","Error messages printed to `stderr`.",2,null],[13,"Warning","","Warning and error messages are printed to `stderr`.",2,null],[13,"Info","","Informational messages are printed to `stdout`. Warnings and error messages are printed to `stderr`.",2,null],[13,"Debug","","Debug and informational messages are printed to `stdout`. Warnings and error messages are printed to `stderr`.",2,null],[4,"Speed","","Device speeds. Indicates the speed at which a device is operating.",null,null],[13,"Unknown","","The operating system doesn't know the device speed.",3,null],[13,"Low","","The device is operating at low speed (1.5MBps).",3,null],[13,"Full","","The device is operating at full speed (12MBps).",3,null],[13,"High","","The device is operating at high speed (480Mps).",3,null],[13,"Super","","The device is operating at super speed (5000Mbps).",3,null],[4,"TransferType","","An endpoint's transfer type.",null,null],[13,"Control","","Control endpoint.",4,null],[13,"Isochronous","","Isochronous endpoint.",4,null],[13,"Bulk","","Bulk endpoint.",4,null],[13,"Interrupt","","Interrupt endpoint.",4,null],[4,"SyncType","","Isochronous synchronization mode.",null,null],[13,"NoSync","","No synchronisation.",5,null],[13,"Asynchronous","","Asynchronous.",5,null],[13,"Adaptive","","Adaptive.",5,null],[13,"Synchronous","","Synchronous.",5,null],[4,"UsageType","","Isochronous usage type.",null,null],[13,"Data","","Data endpoint.",6,null],[13,"Feedback","","Feedback endpoint.",6,null],[13,"FeedbackData","","Explicit feedback data endpoint.",6,null],[13,"Reserved","","Reserved.",6,null],[4,"Direction","","Transfer and endpoint directions.",null,null],[13,"In","","Direction for read (device to host) transfers.",7,null],[13,"Out","","Direction for write (host to device) transfers.",7,null],[4,"RequestType","","Types of control transfers.",null,null],[13,"Standard","","Requests that are defined by the USB standard.",8,null],[13,"Class","","Requests that are defined by a device class, e.g., HID.",8,null],[13,"Vendor","","Vendor-specific requests.",8,null],[13,"Reserved","","Reserved for future use.",8,null],[4,"Recipient","","Recipients of control transfers.",null,null],[13,"Device","","The recipient is a device.",9,null],[13,"Interface","","The recipient is an interface.",9,null],[13,"Endpoint","","The recipient is an endpoint.",9,null],[13,"Other","","Other.",9,null],[4,"PrimaryLanguage","","Primary language families.",null,null],[13,"Afrikaans","","",10,null],[13,"Albanian","","",10,null],[13,"Arabic","","",10,null],[13,"Armenian","","",10,null],[13,"Assamese","","",10,null],[13,"Azeri","","",10,null],[13,"Basque","","",10,null],[13,"Belarussian","","",10,null],[13,"Bengali","","",10,null],[13,"Bulgarian","","",10,null],[13,"Burmese","","",10,null],[13,"Catalan","","",10,null],[13,"Chinese","","",10,null],[13,"Croatian","","",10,null],[13,"Czech","","",10,null],[13,"Danish","","",10,null],[13,"Dutch","","",10,null],[13,"English","","",10,null],[13,"Estonian","","",10,null],[13,"Faeroese","","",10,null],[13,"Farsi","","",10,null],[13,"Finnish","","",10,null],[13,"French","","",10,null],[13,"Georgian","","",10,null],[13,"German","","",10,null],[13,"Greek","","",10,null],[13,"Gujarati","","",10,null],[13,"Hebrew","","",10,null],[13,"Hindi","","",10,null],[13,"Hungarian","","",10,null],[13,"Icelandic","","",10,null],[13,"Indonesian","","",10,null],[13,"Italian","","",10,null],[13,"Japanese","","",10,null],[13,"Kannada","","",10,null],[13,"Kashmiri","","",10,null],[13,"Kazakh","","",10,null],[13,"Konkani","","",10,null],[13,"Korean","","",10,null],[13,"Latvian","","",10,null],[13,"Lithuanian","","",10,null],[13,"Macedonian","","",10,null],[13,"Malay","","",10,null],[13,"Malayalam","","",10,null],[13,"Manipuri","","",10,null],[13,"Marathi","","",10,null],[13,"Nepali","","",10,null],[13,"Norwegian","","",10,null],[13,"Oriya","","",10,null],[13,"Polish","","",10,null],[13,"Portuguese","","",10,null],[13,"Punjabi","","",10,null],[13,"Romanian","","",10,null],[13,"Russian","","",10,null],[13,"Sanskrit","","",10,null],[13,"Serbian","","",10,null],[13,"Sindhi","","",10,null],[13,"Slovak","","",10,null],[13,"Slovenian","","",10,null],[13,"Spanish","","",10,null],[13,"Sutu","","",10,null],[13,"Swahili","","",10,null],[13,"Swedish","","",10,null],[13,"Tamil","","",10,null],[13,"Tatar","","",10,null],[13,"Telugu","","",10,null],[13,"Thai","","",10,null],[13,"Turkish","","",10,null],[13,"Ukrainian","","",10,null],[13,"Urdu","","",10,null],[13,"Uzbek","","",10,null],[13,"Vietnamese","","",10,null],[13,"HID","","",10,null],[13,"Other","","",10,null],[4,"SubLanguage","","Language dialects and writing systems.",null,null],[13,"Standard","","",11,null],[13,"Classic","","",11,null],[13,"Traditional","","",11,null],[13,"Modern","","",11,null],[13,"Algeria","","",11,null],[13,"Argentina","","",11,null],[13,"Australia","","",11,null],[13,"Austria","","",11,null],[13,"Bahrain","","",11,null],[13,"Belgium","","",11,null],[13,"Belize","","",11,null],[13,"Bokmal","","",11,null],[13,"Bolivia","","",11,null],[13,"Brazil","","",11,null],[13,"BruneiDarussalam","","",11,null],[13,"Canada","","",11,null],[13,"Caribbean","","",11,null],[13,"Chile","","",11,null],[13,"China","","",11,null],[13,"Colombia","","",11,null],[13,"CostaRica","","",11,null],[13,"Cyrillic","","",11,null],[13,"DominicanRepublic","","",11,null],[13,"Ecuador","","",11,null],[13,"Egypt","","",11,null],[13,"ElSalvador","","",11,null],[13,"Finland","","",11,null],[13,"Guatemala","","",11,null],[13,"Honduras","","",11,null],[13,"HongKong","","",11,null],[13,"India","","",11,null],[13,"Iraq","","",11,null],[13,"Ireland","","",11,null],[13,"Jamaica","","",11,null],[13,"Johab","","",11,null],[13,"Jordan","","",11,null],[13,"Kuwait","","",11,null],[13,"Latin","","",11,null],[13,"Lebanon","","",11,null],[13,"Libya","","",11,null],[13,"Liechtenstein","","",11,null],[13,"Luxembourg","","",11,null],[13,"Macau","","",11,null],[13,"Malaysia","","",11,null],[13,"Mexico","","",11,null],[13,"Monaco","","",11,null],[13,"Morocco","","",11,null],[13,"Netherlands","","",11,null],[13,"NewZealand","","",11,null],[13,"Nicaragua","","",11,null],[13,"Nynorsk","","",11,null],[13,"Oman","","",11,null],[13,"Pakistan","","",11,null],[13,"Panama","","",11,null],[13,"Paraguay","","",11,null],[13,"Peru","","",11,null],[13,"Philippines","","",11,null],[13,"PuertoRico","","",11,null],[13,"Qatar","","",11,null],[13,"SaudiArabia","","",11,null],[13,"Singapore","","",11,null],[13,"SouthAfrica","","",11,null],[13,"Switzerland","","",11,null],[13,"Syria","","",11,null],[13,"Taiwan","","",11,null],[13,"Trinidad","","",11,null],[13,"Tunisia","","",11,null],[13,"UnitedArabEmirates","","",11,null],[13,"UnitedKingdom","","",11,null],[13,"UnitedStates","","",11,null],[13,"Uruguay","","",11,null],[13,"Venezuela","","",11,null],[13,"Yemen","","",11,null],[13,"Zimbabwe","","",11,null],[13,"UsageDataDescriptor","","",11,null],[13,"VendorDefined1","","",11,null],[13,"VendorDefined2","","",11,null],[13,"VendorDefined3","","",11,null],[13,"VendorDefined4","","",11,null],[13,"Other","","",11,null],[5,"version","","Returns a structure with the version of the running libusb library.",null,{"inputs":[],"output":{"name":"libraryversion"}}],[5,"request_type","","Builds a value for the `bmRequestType` field of a control transfer setup packet.",null,{"inputs":[{"name":"direction"},{"name":"requesttype"},{"name":"recipient"}],"output":{"name":"u8"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"strerror","","Returns a description of an error suitable for display to an end user.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"stdresult"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"major","","Library major version.",12,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"minor","","Library minor version.",12,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"micro","","Library micro version.",12,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"nano","","Library nano version.",12,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"rc","","Library release candidate suffix string, e.g., `\"-rc4\"`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","Closes the `libusb` context.",13,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Opens a new `libusb` context.",13,{"inputs":[],"output":{"name":"result"}}],[11,"set_log_level","","Sets the log level of a `libusb` context.",13,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":null}],[11,"has_capability","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_hotplug","","Tests whether the running `libusb` library supports hotplug.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_hid_access","","Tests whether the running `libusb` library has HID access.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"supports_detach_kernel_driver","","Tests whether the running `libusb` library supports detaching the kernel driver.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"devices","","Returns a list of the current USB devices. The context must outlive the device list.",13,{"inputs":[{"name":"self"}],"output":{"generics":["devicelist"],"name":"result"}}],[11,"open_device_with_vid_pid","","Convenience function to open a device by its vendor ID and product ID.",13,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":{"generics":["devicehandle"],"name":"option"}}],[11,"register_callback","","",13,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"option"},{"generics":["u16"],"name":"option"},{"generics":["u8"],"name":"option"},{"generics":["hotplug"],"name":"box"}],"output":{"generics":["registration"],"name":"result"}}],[11,"unregister_callback","","",13,{"inputs":[{"name":"self"},{"name":"registration"}],"output":null}],[11,"handle_events","","",13,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"drop","","Frees the device list.",14,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Returns the number of devices in the list.",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over the devices in the list.",14,{"inputs":[{"name":"self"}],"output":{"name":"devices"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["device"],"name":"option"}}],[11,"size_hint","","",15,null],[11,"drop","","Releases the device reference.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"device_descriptor","","Reads the device descriptor.",16,{"inputs":[{"name":"self"}],"output":{"generics":["devicedescriptor"],"name":"result"}}],[11,"config_descriptor","","Reads a configuration descriptor.",16,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["configdescriptor"],"name":"result"}}],[11,"active_config_descriptor","","Reads the configuration descriptor for the current configuration.",16,{"inputs":[{"name":"self"}],"output":{"generics":["configdescriptor"],"name":"result"}}],[11,"bus_number","","Returns the number of the bus that the device is connected to.",16,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"address","","Returns the device's address on the bus that it's connected to.",16,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"speed","","Returns the device's connection speed.",16,{"inputs":[{"name":"self"}],"output":{"name":"speed"}}],[11,"open","","Opens the device.",16,{"inputs":[{"name":"self"}],"output":{"generics":["devicehandle"],"name":"result"}}],[11,"drop","","Closes the device.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"active_configuration","","Returns the active configuration number.",17,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"set_active_configuration","","Sets the device's active configuration.",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"unconfigure","","Puts the device in an unconfigured state.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reset","","Resets the device.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"kernel_driver_active","","Indicates whether the device has an attached kernel driver.",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["bool"],"name":"result"}}],[11,"detach_kernel_driver","","Detaches an attached kernel driver from the device.",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"attach_kernel_driver","","Attaches a kernel driver to the device.",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"claim_interface","","Claims one of the device's interfaces.",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"release_interface","","Releases a claimed interface.",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"set_alternate_setting","","Sets an interface's active setting.",17,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"result"}}],[11,"read_interrupt","","Reads from an interrupt endpoint.",17,null],[11,"write_interrupt","","Writes to an interrupt endpoint.",17,null],[11,"read_bulk","","Reads from a bulk endpoint.",17,null],[11,"write_bulk","","Writes to a bulk endpoint.",17,null],[11,"read_control","","Reads data using a control transfer.",17,null],[11,"write_control","","Writes data using a control transfer.",17,null],[11,"read_languages","","Reads the languages supported by the device's string descriptors.",17,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["vec"],"name":"result"}}],[11,"read_string_descriptor","","Reads a string descriptor from the device.",17,{"inputs":[{"name":"self"},{"name":"language"},{"name":"u8"},{"name":"duration"}],"output":{"generics":["string"],"name":"result"}}],[11,"read_manufacturer_string","","Reads the device's manufacturer string descriptor.",17,{"inputs":[{"name":"self"},{"name":"language"},{"name":"devicedescriptor"},{"name":"duration"}],"output":{"generics":["string"],"name":"result"}}],[11,"read_product_string","","Reads the device's product string descriptor.",17,{"inputs":[{"name":"self"},{"name":"language"},{"name":"devicedescriptor"},{"name":"duration"}],"output":{"generics":["string"],"name":"result"}}],[11,"read_serial_number_string","","Reads the device's serial number string descriptor.",17,{"inputs":[{"name":"self"},{"name":"language"},{"name":"devicedescriptor"},{"name":"duration"}],"output":{"generics":["string"],"name":"result"}}],[11,"read_configuration_string","","Reads the string descriptor for a configuration's description.",17,{"inputs":[{"name":"self"},{"name":"language"},{"name":"configdescriptor"},{"name":"duration"}],"output":{"generics":["string"],"name":"result"}}],[11,"read_interface_string","","Reads the string descriptor for a interface's description.",17,{"inputs":[{"name":"self"},{"name":"language"},{"name":"interfacedescriptor"},{"name":"duration"}],"output":{"generics":["string"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"speed"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"speed"}}],[11,"hash","","",3,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"hash","","",7,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"transfertype"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"transfertype"}}],[11,"hash","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"synctype"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"synctype"}}],[11,"hash","","",5,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"usagetype"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usagetype"}}],[11,"hash","","",6,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"requesttype"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"requesttype"}}],[11,"hash","","",8,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"recipient"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"recipient"}}],[11,"hash","","",9,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"hash","","",0,null],[11,"from_bcd","","Extracts a version from a binary coded decimal (BCD) field. BCD fields exist in USB descriptors as 16-bit integers encoding a version as `0xJJMN`, where `JJ` is the major version, `M` is the minor version, and `N` is the sub minor version. For example, 2.0 is endoded as `0x0200` and 1.1 is encoded as `0x0110`.",0,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"major","","Returns the major version.",0,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"minor","","Returns the minor version.",0,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"sub_minor","","Returns the sub minor version.",0,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"usb_version","","Returns the device's maximum supported USB version.",18,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"device_version","","Returns the manufacturer's version of the device.",18,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"manufacturer_string_index","","Returns the index of the string descriptor that contains the manufacturer name.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"product_string_index","","Returns the index of the string descriptor that contains the product name.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"serial_number_string_index","","Returns the index of the string descriptor that contains the device's serial number.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"class_code","","Returns the device's class code.",18,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"sub_class_code","","Returns the device's sub class code.",18,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"protocol_code","","Returns the device's protocol code.",18,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"vendor_id","","Returns the device's vendor ID.",18,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"product_id","","Returns the device's product ID.",18,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"max_packet_size","","Returns the maximum packet size of the device's first endpoint.",18,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"num_configurations","","Returns the number of config descriptors available for the device.",18,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"number","","Returns the configuration number.",19,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"max_power","","Returns the device's maximum power consumption (in milliwatts) in this configuration.",19,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"self_powered","","Indicates if the device is self-powered in this configuration.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remote_wakeup","","Indicates if the device has remote wakeup capability in this configuration.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"description_string_index","","Returns the index of the string descriptor that describes the configuration.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"num_interfaces","","Returns the number of interfaces for this configuration.",19,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"interfaces","","Returns a collection of the configuration's interfaces.",19,{"inputs":[{"name":"self"}],"output":{"name":"interfaces"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["interface"],"name":"option"}}],[11,"size_hint","","",20,null],[11,"number","","Returns the interface's number.",21,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"descriptors","","Returns an iterator over the interface's descriptors.",21,{"inputs":[{"name":"self"}],"output":{"name":"interfacedescriptors"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["interfacedescriptor"],"name":"option"}}],[11,"size_hint","","",22,null],[11,"interface_number","","Returns the interface's number.",23,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"setting_number","","Returns the alternate setting number.",23,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"class_code","","Returns the interface's class code.",23,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"sub_class_code","","Returns the interface's sub class code.",23,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"protocol_code","","Returns the interface's protocol code.",23,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"description_string_index","","Returns the index of the string descriptor that describes the interface.",23,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"num_endpoints","","Returns the number of endpoints belonging to this interface.",23,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"endpoint_descriptors","","Returns an iterator over the interface's endpoint descriptors.",23,{"inputs":[{"name":"self"}],"output":{"name":"endpointdescriptors"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["endpointdescriptor"],"name":"option"}}],[11,"size_hint","","",24,null],[11,"address","","Returns the endpoint's address.",25,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"number","","Returns the endpoint number.",25,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"direction","","Returns the endpoint's direction.",25,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"transfer_type","","Returns the endpoint's transfer type.",25,{"inputs":[{"name":"self"}],"output":{"name":"transfertype"}}],[11,"sync_type","","Returns the endpoint's synchronisation mode.",25,{"inputs":[{"name":"self"}],"output":{"name":"synctype"}}],[11,"usage_type","","Returns the endpoint's usage type.",25,{"inputs":[{"name":"self"}],"output":{"name":"usagetype"}}],[11,"max_packet_size","","Returns the endpoint's maximum packet size.",25,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"interval","","Returns the endpoint's polling interval.",25,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"language"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"language"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"language"}],"output":{"name":"bool"}}],[11,"lang_id","","Returns the language's 16-bit `LANGID`.",26,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"primary_language","","Returns the primary language.",26,{"inputs":[{"name":"self"}],"output":{"name":"primarylanguage"}}],[11,"sub_language","","Returns the sub language.",26,{"inputs":[{"name":"self"}],"output":{"name":"sublanguage"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"primarylanguage"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"primarylanguage"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"primarylanguage"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"sublanguage"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"sublanguage"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"sublanguage"}],"output":{"name":"bool"}}],[6,"Result","","A result of a function that may return a `Error`.",null,null],[6,"Registration","","",null,null],[8,"Hotplug","","",null,null],[10,"device_arrived","","",27,{"inputs":[{"name":"self"},{"name":"device"}],"output":null}],[10,"device_left","","",27,{"inputs":[{"name":"self"},{"name":"device"}],"output":null}]],"paths":[[3,"Version"],[4,"Error"],[4,"LogLevel"],[4,"Speed"],[4,"TransferType"],[4,"SyncType"],[4,"UsageType"],[4,"Direction"],[4,"RequestType"],[4,"Recipient"],[4,"PrimaryLanguage"],[4,"SubLanguage"],[3,"LibraryVersion"],[3,"Context"],[3,"DeviceList"],[3,"Devices"],[3,"Device"],[3,"DeviceHandle"],[3,"DeviceDescriptor"],[3,"ConfigDescriptor"],[3,"Interfaces"],[3,"Interface"],[3,"InterfaceDescriptors"],[3,"InterfaceDescriptor"],[3,"EndpointDescriptors"],[3,"EndpointDescriptor"],[3,"Language"],[8,"Hotplug"]]};
searchIndex["libusb_sys"] = {"doc":"","items":[[3,"libusb_context","libusb_sys","",null,null],[3,"libusb_device","","",null,null],[3,"libusb_device_handle","","",null,null],[3,"libusb_version","","",null,null],[12,"major","","",0,null],[12,"minor","","",0,null],[12,"micro","","",0,null],[12,"nano","","",0,null],[12,"rc","","",0,null],[12,"describe","","",0,null],[3,"libusb_device_descriptor","","",null,null],[12,"bLength","","",1,null],[12,"bDescriptorType","","",1,null],[12,"bcdUSB","","",1,null],[12,"bDeviceClass","","",1,null],[12,"bDeviceSubClass","","",1,null],[12,"bDeviceProtocol","","",1,null],[12,"bMaxPacketSize0","","",1,null],[12,"idVendor","","",1,null],[12,"idProduct","","",1,null],[12,"bcdDevice","","",1,null],[12,"iManufacturer","","",1,null],[12,"iProduct","","",1,null],[12,"iSerialNumber","","",1,null],[12,"bNumConfigurations","","",1,null],[3,"libusb_config_descriptor","","",null,null],[12,"bLength","","",2,null],[12,"bDescriptorType","","",2,null],[12,"wTotalLength","","",2,null],[12,"bNumInterfaces","","",2,null],[12,"bConfigurationValue","","",2,null],[12,"iConfiguration","","",2,null],[12,"bmAttributes","","",2,null],[12,"bMaxPower","","",2,null],[12,"interface","","",2,null],[12,"extra","","",2,null],[12,"extra_length","","",2,null],[3,"libusb_interface","","",null,null],[12,"altsetting","","",3,null],[12,"num_altsetting","","",3,null],[3,"libusb_interface_descriptor","","",null,null],[12,"bLength","","",4,null],[12,"bDescriptorType","","",4,null],[12,"bInterfaceNumber","","",4,null],[12,"bAlternateSetting","","",4,null],[12,"bNumEndpoints","","",4,null],[12,"bInterfaceClass","","",4,null],[12,"bInterfaceSubClass","","",4,null],[12,"bInterfaceProtocol","","",4,null],[12,"iInterface","","",4,null],[12,"endpoint","","",4,null],[12,"extra","","",4,null],[12,"extra_length","","",4,null],[3,"libusb_endpoint_descriptor","","",null,null],[12,"bLength","","",5,null],[12,"bDescriptorType","","",5,null],[12,"bEndpointAddress","","",5,null],[12,"bmAttributes","","",5,null],[12,"wMaxPacketSize","","",5,null],[12,"bInterval","","",5,null],[12,"bRefresh","","",5,null],[12,"bSynchAddress","","",5,null],[12,"extra","","",5,null],[12,"extra_length","","",5,null],[3,"libusb_iso_packet_descriptor","","",null,null],[12,"length","","",6,null],[12,"actual_length","","",6,null],[12,"status","","",6,null],[3,"libusb_ss_endpoint_companion_descriptor","","",null,null],[12,"bLength","","",7,null],[12,"bDescriptorType","","",7,null],[12,"bMaxBurst","","",7,null],[12,"bmAttributes","","",7,null],[12,"wBytesPerInterval","","",7,null],[3,"libusb_bos_dev_capability_descriptor","","",null,null],[12,"bLength","","",8,null],[12,"bDescriptorType","","",8,null],[12,"bDevCapabilityType","","",8,null],[3,"libusb_bos_descriptor","","",null,null],[12,"bLength","","",9,null],[12,"bDescriptorType","","",9,null],[12,"wTotalLength","","",9,null],[12,"bNumDeviceCaps","","",9,null],[3,"libusb_usb_2_0_extension_descriptor","","",null,null],[12,"bLength","","",10,null],[12,"bDescriptorType","","",10,null],[12,"bDevCapabilityType","","",10,null],[12,"bmAttributes","","",10,null],[3,"libusb_ss_usb_device_capability_descriptor","","",null,null],[12,"bLength","","",11,null],[12,"bDescriptorType","","",11,null],[12,"bDevCapabilityType","","",11,null],[12,"bmAttributes","","",11,null],[12,"wSpeedSupported","","",11,null],[12,"bFunctionalitySupport","","",11,null],[12,"bU1DevExitLat","","",11,null],[12,"bU2DevExitLat","","",11,null],[3,"libusb_container_id_descriptor","","",null,null],[12,"bLength","","",12,null],[12,"bDescriptorType","","",12,null],[12,"bDevCapabilityType","","",12,null],[12,"bReserved","","",12,null],[12,"ContainerId","","",12,null],[3,"libusb_transfer","","",null,null],[12,"dev_handle","","",13,null],[12,"flags","","",13,null],[12,"endpoint","","",13,null],[12,"transfer_type","","",13,null],[12,"timeout","","",13,null],[12,"status","","",13,null],[12,"length","","",13,null],[12,"actual_length","","",13,null],[12,"callback","","",13,null],[12,"user_data","","",13,null],[12,"buffer","","",13,null],[12,"num_iso_packets","","",13,null],[12,"iso_packet_desc","","",13,null],[3,"libusb_pollfd","","",null,null],[12,"fd","","",14,null],[12,"events","","",14,null],[5,"libusb_get_string_descriptor","","",null,null],[5,"libusb_get_version","","",null,null],[5,"libusb_has_capability","","",null,null],[5,"libusb_error_name","","",null,null],[5,"libusb_setlocale","","",null,null],[5,"libusb_strerror","","",null,null],[5,"libusb_init","","",null,null],[5,"libusb_exit","","",null,null],[5,"libusb_set_debug","","",null,null],[5,"libusb_get_device_list","","",null,null],[5,"libusb_free_device_list","","",null,null],[5,"libusb_get_parent","","",null,null],[5,"libusb_get_device","","",null,null],[5,"libusb_ref_device","","",null,null],[5,"libusb_unref_device","","",null,null],[5,"libusb_get_device_descriptor","","",null,null],[5,"libusb_get_config_descriptor","","",null,null],[5,"libusb_get_active_config_descriptor","","",null,null],[5,"libusb_get_config_descriptor_by_value","","",null,null],[5,"libusb_free_config_descriptor","","",null,null],[5,"libusb_get_bus_number","","",null,null],[5,"libusb_get_port_number","","",null,null],[5,"libusb_get_port_numbers","","",null,null],[5,"libusb_get_device_address","","",null,null],[5,"libusb_get_device_speed","","",null,null],[5,"libusb_get_max_packet_size","","",null,null],[5,"libusb_get_max_iso_packet_size","","",null,null],[5,"libusb_open","","",null,null],[5,"libusb_close","","",null,null],[5,"libusb_open_device_with_vid_pid","","",null,null],[5,"libusb_reset_device","","",null,null],[5,"libusb_clear_halt","","",null,null],[5,"libusb_alloc_streams","","",null,null],[5,"libusb_free_streams","","",null,null],[5,"libusb_get_string_descriptor_ascii","","",null,null],[5,"libusb_get_configuration","","",null,null],[5,"libusb_set_configuration","","",null,null],[5,"libusb_get_ss_endpoint_companion_descriptor","","",null,null],[5,"libusb_free_ss_endpoint_companion_descriptor","","",null,null],[5,"libusb_get_bos_descriptor","","",null,null],[5,"libusb_free_bos_descriptor","","",null,null],[5,"libusb_get_usb_2_0_extension_descriptor","","",null,null],[5,"libusb_free_usb_2_0_extension_descriptor","","",null,null],[5,"libusb_get_ss_usb_device_capability_descriptor","","",null,null],[5,"libusb_free_ss_usb_device_capability_descriptor","","",null,null],[5,"libusb_get_container_id_descriptor","","",null,null],[5,"libusb_free_container_id_descriptor","","",null,null],[5,"libusb_set_auto_detach_kernel_driver","","",null,null],[5,"libusb_kernel_driver_active","","",null,null],[5,"libusb_detach_kernel_driver","","",null,null],[5,"libusb_attach_kernel_driver","","",null,null],[5,"libusb_claim_interface","","",null,null],[5,"libusb_release_interface","","",null,null],[5,"libusb_set_interface_alt_setting","","",null,null],[5,"libusb_interrupt_transfer","","",null,null],[5,"libusb_bulk_transfer","","",null,null],[5,"libusb_control_transfer","","",null,null],[5,"libusb_alloc_transfer","","",null,null],[5,"libusb_submit_transfer","","",null,null],[5,"libusb_cancel_transfer","","",null,null],[5,"libusb_free_transfer","","",null,null],[5,"libusb_transfer_set_stream_id","","",null,null],[5,"libusb_transfer_get_stream_id","","",null,null],[5,"libusb_handle_events","","",null,null],[5,"libusb_handle_events_timeout","","",null,null],[5,"libusb_handle_events_completed","","",null,null],[5,"libusb_handle_events_timeout_completed","","",null,null],[5,"libusb_handle_events_locked","","",null,null],[5,"libusb_try_lock_events","","",null,null],[5,"libusb_lock_events","","",null,null],[5,"libusb_unlock_events","","",null,null],[5,"libusb_event_handling_ok","","",null,null],[5,"libusb_event_handler_active","","",null,null],[5,"libusb_lock_event_waiters","","",null,null],[5,"libusb_unlock_event_waiters","","",null,null],[5,"libusb_wait_for_event","","",null,null],[5,"libusb_pollfds_handle_timeouts","","",null,null],[5,"libusb_get_next_timeout","","",null,null],[5,"libusb_get_pollfds","","",null,null],[5,"libusb_set_pollfd_notifiers","","",null,null],[5,"libusb_hotplug_register_callback","","",null,null],[5,"libusb_hotplug_deregister_callback","","",null,null],[6,"libusb_transfer_cb_fn","","",null,null],[6,"libusb_pollfd_added_cb","","",null,null],[6,"libusb_pollfd_removed_cb","","",null,null],[6,"libusb_hotplug_callback_handle","","",null,null],[6,"libusb_hotplug_callback_fn","","",null,null],[6,"libusb_hotplug_flag","","",null,null],[6,"libusb_hotplug_event","","",null,null],[17,"LIBUSB_SUCCESS","","",null,null],[17,"LIBUSB_ERROR_IO","","",null,null],[17,"LIBUSB_ERROR_INVALID_PARAM","","",null,null],[17,"LIBUSB_ERROR_ACCESS","","",null,null],[17,"LIBUSB_ERROR_NO_DEVICE","","",null,null],[17,"LIBUSB_ERROR_NOT_FOUND","","",null,null],[17,"LIBUSB_ERROR_BUSY","","",null,null],[17,"LIBUSB_ERROR_TIMEOUT","","",null,null],[17,"LIBUSB_ERROR_OVERFLOW","","",null,null],[17,"LIBUSB_ERROR_PIPE","","",null,null],[17,"LIBUSB_ERROR_INTERRUPTED","","",null,null],[17,"LIBUSB_ERROR_NO_MEM","","",null,null],[17,"LIBUSB_ERROR_NOT_SUPPORTED","","",null,null],[17,"LIBUSB_ERROR_OTHER","","",null,null],[17,"LIBUSB_TRANSFER_COMPLETED","","",null,null],[17,"LIBUSB_TRANSFER_ERROR","","",null,null],[17,"LIBUSB_TRANSFER_TIMED_OUT","","",null,null],[17,"LIBUSB_TRANSFER_CANCELLED","","",null,null],[17,"LIBUSB_TRANSFER_STALL","","",null,null],[17,"LIBUSB_TRANSFER_NO_DEVICE","","",null,null],[17,"LIBUSB_TRANSFER_OVERFLOW","","",null,null],[17,"LIBUSB_TRANSFER_SHORT_NOT_OK","","",null,null],[17,"LIBUSB_TRANSFER_FREE_BUFFER","","",null,null],[17,"LIBUSB_TRANSFER_FREE_TRANSFER","","",null,null],[17,"LIBUSB_TRANSFER_ADD_ZERO_PACKET","","",null,null],[17,"LIBUSB_CAP_HAS_CAPABILITY","","",null,null],[17,"LIBUSB_CAP_HAS_HOTPLUG","","",null,null],[17,"LIBUSB_CAP_HAS_HID_ACCESS","","",null,null],[17,"LIBUSB_CAP_SUPPORTS_DETACH_KERNEL_DRIVER","","",null,null],[17,"LIBUSB_LOG_LEVEL_NONE","","",null,null],[17,"LIBUSB_LOG_LEVEL_ERROR","","",null,null],[17,"LIBUSB_LOG_LEVEL_WARNING","","",null,null],[17,"LIBUSB_LOG_LEVEL_INFO","","",null,null],[17,"LIBUSB_LOG_LEVEL_DEBUG","","",null,null],[17,"LIBUSB_CLASS_PER_INTERFACE","","",null,null],[17,"LIBUSB_CLASS_AUDIO","","",null,null],[17,"LIBUSB_CLASS_COMM","","",null,null],[17,"LIBUSB_CLASS_HID","","",null,null],[17,"LIBUSB_CLASS_PHYSICAL","","",null,null],[17,"LIBUSB_CLASS_PRINTER","","",null,null],[17,"LIBUSB_CLASS_IMAGE","","",null,null],[17,"LIBUSB_CLASS_MASS_STORAGE","","",null,null],[17,"LIBUSB_CLASS_HUB","","",null,null],[17,"LIBUSB_CLASS_DATA","","",null,null],[17,"LIBUSB_CLASS_SMART_CARD","","",null,null],[17,"LIBUSB_CLASS_CONTENT_SECURITY","","",null,null],[17,"LIBUSB_CLASS_VIDEO","","",null,null],[17,"LIBUSB_CLASS_PERSONAL_HEALTHCARE","","",null,null],[17,"LIBUSB_CLASS_DIAGNOSTIC_DEVICE","","",null,null],[17,"LIBUSB_CLASS_WIRELESS","","",null,null],[17,"LIBUSB_CLASS_APPLICATION","","",null,null],[17,"LIBUSB_CLASS_VENDOR_SPEC","","",null,null],[17,"LIBUSB_SPEED_UNKNOWN","","",null,null],[17,"LIBUSB_SPEED_LOW","","",null,null],[17,"LIBUSB_SPEED_FULL","","",null,null],[17,"LIBUSB_SPEED_HIGH","","",null,null],[17,"LIBUSB_SPEED_SUPER","","",null,null],[17,"LIBUSB_DT_DEVICE","","",null,null],[17,"LIBUSB_DT_CONFIG","","",null,null],[17,"LIBUSB_DT_STRING","","",null,null],[17,"LIBUSB_DT_INTERFACE","","",null,null],[17,"LIBUSB_DT_ENDPOINT","","",null,null],[17,"LIBUSB_DT_BOS","","",null,null],[17,"LIBUSB_DT_DEVICE_CAPABILITY","","",null,null],[17,"LIBUSB_DT_HID","","",null,null],[17,"LIBUSB_DT_REPORT","","",null,null],[17,"LIBUSB_DT_PHYSICAL","","",null,null],[17,"LIBUSB_DT_HUB","","",null,null],[17,"LIBUSB_DT_SUPERSPEED_HUB","","",null,null],[17,"LIBUSB_DT_SS_ENDPOINT_COMPANION","","",null,null],[17,"LIBUSB_ENDPOINT_ADDRESS_MASK","","",null,null],[17,"LIBUSB_ENDPOINT_DIR_MASK","","",null,null],[17,"LIBUSB_ENDPOINT_IN","","",null,null],[17,"LIBUSB_ENDPOINT_OUT","","",null,null],[17,"LIBUSB_TRANSFER_TYPE_MASK","","",null,null],[17,"LIBUSB_TRANSFER_TYPE_CONTROL","","",null,null],[17,"LIBUSB_TRANSFER_TYPE_ISOCHRONOUS","","",null,null],[17,"LIBUSB_TRANSFER_TYPE_BULK","","",null,null],[17,"LIBUSB_TRANSFER_TYPE_INTERRUPT","","",null,null],[17,"LIBUSB_TRANSFER_TYPE_BULK_STREAM","","",null,null],[17,"LIBUSB_ISO_SYNC_TYPE_MASK","","",null,null],[17,"LIBUSB_ISO_SYNC_TYPE_NONE","","",null,null],[17,"LIBUSB_ISO_SYNC_TYPE_ASYNC","","",null,null],[17,"LIBUSB_ISO_SYNC_TYPE_ADAPTIVE","","",null,null],[17,"LIBUSB_ISO_SYNC_TYPE_SYNC","","",null,null],[17,"LIBUSB_ISO_USAGE_TYPE_MASK","","",null,null],[17,"LIBUSB_ISO_USAGE_TYPE_DATA","","",null,null],[17,"LIBUSB_ISO_USAGE_TYPE_FEEDBACK","","",null,null],[17,"LIBUSB_ISO_USAGE_TYPE_IMPLICIT","","",null,null],[17,"LIBUSB_REQUEST_TYPE_STANDARD","","",null,null],[17,"LIBUSB_REQUEST_TYPE_CLASS","","",null,null],[17,"LIBUSB_REQUEST_TYPE_VENDOR","","",null,null],[17,"LIBUSB_REQUEST_TYPE_RESERVED","","",null,null],[17,"LIBUSB_RECIPIENT_DEVICE","","",null,null],[17,"LIBUSB_RECIPIENT_INTERFACE","","",null,null],[17,"LIBUSB_RECIPIENT_ENDPOINT","","",null,null],[17,"LIBUSB_RECIPIENT_OTHER","","",null,null],[17,"LIBUSB_REQUEST_GET_STATUS","","",null,null],[17,"LIBUSB_REQUEST_CLEAR_FEATURE","","",null,null],[17,"LIBUSB_REQUEST_SET_FEATURE","","",null,null],[17,"LIBUSB_REQUEST_SET_ADDRESS","","",null,null],[17,"LIBUSB_REQUEST_GET_DESCRIPTOR","","",null,null],[17,"LIBUSB_REQUEST_SET_DESCRIPTOR","","",null,null],[17,"LIBUSB_REQUEST_GET_CONFIGURATION","","",null,null],[17,"LIBUSB_REQUEST_SET_CONFIGURATION","","",null,null],[17,"LIBUSB_REQUEST_GET_INTERFACE","","",null,null],[17,"LIBUSB_REQUEST_SET_INTERFACE","","",null,null],[17,"LIBUSB_REQUEST_SYNCH_FRAME","","",null,null],[17,"LIBUSB_REQUEST_SET_SEL","","",null,null],[17,"LIBUSB_SET_ISOCH_DELAY","","",null,null],[17,"LIBUSB_HOTPLUG_NO_FLAGS","","",null,null],[17,"LIBUSB_HOTPLUG_ENUMERATE","","",null,null],[17,"LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED","","",null,null],[17,"LIBUSB_HOTPLUG_EVENT_DEVICE_LEFT","","",null,null],[17,"LIBUSB_HOTPLUG_MATCH_ANY","","",null,null]],"paths":[[3,"libusb_version"],[3,"libusb_device_descriptor"],[3,"libusb_config_descriptor"],[3,"libusb_interface"],[3,"libusb_interface_descriptor"],[3,"libusb_endpoint_descriptor"],[3,"libusb_iso_packet_descriptor"],[3,"libusb_ss_endpoint_companion_descriptor"],[3,"libusb_bos_dev_capability_descriptor"],[3,"libusb_bos_descriptor"],[3,"libusb_usb_2_0_extension_descriptor"],[3,"libusb_ss_usb_device_capability_descriptor"],[3,"libusb_container_id_descriptor"],[3,"libusb_transfer"],[3,"libusb_pollfd"]]};
searchIndex["linked_hash_map"] = {"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",null,null],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",null,null],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",null,null],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`'s entries.",null,null],[3,"Entries","","An insertion-order iterator over a `LinkedHashMap`'s entries represented as an `OccupiedEntry`.",null,null],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",null,null],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a `LinkedHashMap`.",null,null],[3,"VacantEntry","","A view into a single empty location in a `LinkedHashMap`.",null,null],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",0,null],[13,"Vacant","","A vacant Entry.",0,null],[11,"new","","Creates a linked hash map.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",1,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",1,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"entries","","Returns an iterator visiting all entries in insertion order. Iterator element type is `OccupiedEntry<K, V, S>`. Allows for removal as well as replacing the entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",1,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"contains_key","","Checks if the map contains the given key.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns the value corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_refresh","","Returns the value corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","Removes and returns the value corresponding to the key from the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pop_front","","Removes the first entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front","","Gets the first entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_back","","Removes the last entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Gets the last entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Returns the number of key-value pairs in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the map is currently empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hasher","","Returns a reference to the map's hasher.",1,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"clear","","Clears the map of all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["occupiedentry"],"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"key","","Returns the entry key",0,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the entry key",8,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"get","","Gets a reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the entry key",9,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}]],"paths":[[4,"Entry"],[3,"LinkedHashMap"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["local_encoding"] = {"doc":"Rust library for encoding/decoding string with local charset. It usefull for work with ANSI strings on Windows.","items":[[4,"Encoding","local_encoding","Text convertation encoding.",null,null],[13,"ANSI","","Use CP_ACP codepage on Windows and UTF-8 on other systems.",0,null],[13,"OEM","","Use CP_OEM codepage on Windows and UTF-8 on other systems.",0,null],[0,"posix","","UTF-8 string converting for non-Windows systems.",null,null],[3,"EncoderUtf8","local_encoding::posix","Convert UTF-8 bytes to String.",null,null],[11,"to_string","","Convert UTF-8 to String.",1,null],[11,"to_bytes","","Convert String to UTF-8.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["vec"],"name":"result"}}],[8,"Encoder","local_encoding","Converter between string and multibyte encoding.",null,null],[10,"to_string","","Convert from bytes to string.",2,null],[10,"to_bytes","","Convert from string to bytes.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["vec"],"name":"result"}}],[11,"to_string","","Convert from bytes to string.",0,null],[11,"to_bytes","","Convert from bytes to string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["vec"],"name":"result"}}]],"paths":[[4,"Encoding"],[3,"EncoderUtf8"],[8,"Encoder"]]};
searchIndex["lock_api"] = {"doc":"This library provides type-safe and fully-featured `Mutex` and `RwLock` types which wrap a simple raw mutex or rwlock type. This has several benefits: not only does it eliminate a large portion of the work in implementing custom lock types, it also allows users to write code which is generic with regards to different lock implementations.","items":[[3,"GuardSend","lock_api","Marker type which indicates that the Guard type for a lock is `Send`.",null,null],[3,"GuardNoSend","","Marker type which indicates that the Guard type for a lock is not `Send`.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"MappedMutexGuard","","An RAII mutex guard returned by `MutexGuard::map`, which can point to a subfield of the protected data.",null,null],[3,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",null,null],[3,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"MappedReentrantMutexGuard","","An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a subfield of the protected data.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",null,null],[3,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access of a lock when dropped.",null,null],[3,"MappedRwLockReadGuard","","An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a subfield of the protected data.",null,null],[3,"MappedRwLockWriteGuard","","An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a subfield of the protected data.",null,null],[11,"new","","Creates a new mutex in an unlocked state ready for use.",0,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",0,{"inputs":[{"name":"self"}],"output":{"name":"mutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",0,{"inputs":[{"name":"self"}],"output":{"generics":["mutexguard"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"force_unlock","","Forcibly unlocks the mutex.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"raw","","Returns the underlying raw mutex object.",0,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"force_unlock_fair","","Forcibly unlocks the mutex using a fair unlock procotol.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",0,null],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"mutex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mutex","","Returns a reference to the original `Mutex` object.",1,{"inputs":[{"name":"self"}],"output":{"name":"mutex"}}],[11,"map","","Makes a new `MappedMutexGuard` for a component of the locked data.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mappedmutexguard"}}],[11,"unlocked","","Temporarily unlocks the mutex to execute the given function.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"unlocked_fair","","Temporarily unlocks the mutex to execute the given function.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"map","","Makes a new `MappedMutexGuard` for a component of the locked data.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mappedmutexguard"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new reentrant mutex in an unlocked state ready for use.",3,{"inputs":[{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Acquires a reentrant mutex, blocking the current thread until it is able to do so.",3,{"inputs":[{"name":"self"}],"output":{"name":"reentrantmutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",3,{"inputs":[{"name":"self"}],"output":{"generics":["reentrantmutexguard"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"force_unlock","","Forcibly unlocks the mutex.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"raw","","Returns the underlying raw mutex object.",3,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"force_unlock_fair","","Forcibly unlocks the mutex using a fair unlock procotol.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",3,null],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"reentrantmutex"}}],[11,"from","","",3,{"inputs":[{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"remutex","","Returns a reference to the original `ReentrantMutex` object.",4,{"inputs":[{"name":"self"}],"output":{"name":"reentrantmutex"}}],[11,"map","","Makes a new `MappedReentrantMutexGuard` for a component of the locked data.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mappedreentrantmutexguard"}}],[11,"unlocked","","Temporarily unlocks the mutex to execute the given function.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"unlocked_fair","","Temporarily unlocks the mutex to execute the given function.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"map","","Makes a new `MappedReentrantMutexGuard` for a component of the locked data.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mappedreentrantmutexguard"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",6,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read","","Locks this `RwLock` with shared read access, blocking the current thread until it can be acquired.",6,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read","","Attempts to acquire this `RwLock` with shared read access.",6,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"write","","Locks this `RwLock` with exclusive write access, blocking the current thread until it can be acquired.",6,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_write","","Attempts to lock this `RwLock` with exclusive write access.",6,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockwriteguard"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"force_unlock_read","","Forcibly unlocks a read lock.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"force_unlock_write","","Forcibly unlocks a write lock.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"raw","","Returns the underlying raw reader-writer lock object.",6,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"force_unlock_read_fair","","Forcibly unlocks a read lock using a fair unlock procotol.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"force_unlock_write_fair","","Forcibly unlocks a write lock using a fair unlock procotol.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"try_read_for","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,null],[11,"try_read_until","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,null],[11,"try_write_for","","Attempts to acquire this `RwLock` with exclusive write access until a timeout is reached.",6,null],[11,"try_write_until","","Attempts to acquire this `RwLock` with exclusive write access until a timeout is reached.",6,null],[11,"read_recursive","","Locks this `RwLock` with shared read access, blocking the current thread until it can be acquired.",6,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read_recursive","","Attempts to acquire this `RwLock` with shared read access.",6,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockreadguard"],"name":"option"}}],[11,"try_read_recursive_for","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,null],[11,"try_read_recursive_until","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,null],[11,"upgradable_read","","Locks this `RwLock` with upgradable read access, blocking the current thread until it can be acquired.",6,{"inputs":[{"name":"self"}],"output":{"name":"rwlockupgradablereadguard"}}],[11,"try_upgradable_read","","Attempts to acquire this `RwLock` with upgradable read access.",6,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockupgradablereadguard"],"name":"option"}}],[11,"try_upgradable_read_for","","Attempts to acquire this `RwLock` with upgradable read access until a timeout is reached.",6,null],[11,"try_upgradable_read_until","","Attempts to acquire this `RwLock` with upgradable read access until a timeout is reached.",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"rwlock"}}],[11,"from","","",6,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",7,{"inputs":[{"name":"self"}],"output":{"name":"rwlock"}}],[11,"map","","Make a new `MappedRwLockReadGuard` for a component of the locked data.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mappedrwlockreadguard"}}],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",8,{"inputs":[{"name":"self"}],"output":{"name":"rwlock"}}],[11,"map","","Make a new `MappedRwLockWriteGuard` for a component of the locked data.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mappedrwlockwriteguard"}}],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",8,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"downgrade_to_upgradable","","Atomically downgrades a write lock into an upgradable read lock without allowing any writers to take exclusive access of the lock in the meantime.",8,{"inputs":[{"name":"self"}],"output":{"name":"rwlockupgradablereadguard"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",9,{"inputs":[{"name":"self"}],"output":{"name":"rwlock"}}],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"upgrade","","Atomically upgrades an upgradable read lock lock into a exclusive write lock, blocking the current thread until it can be aquired.",9,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_upgrade","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock.",9,{"inputs":[{"name":"self"}],"output":{"generics":["rwlockwriteguard"],"name":"result"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"downgrade","","Atomically downgrades an upgradable read lock lock into a shared read lock without allowing any writers to take exclusive access of the lock in the meantime.",9,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_upgrade_for","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",9,null],[11,"try_upgrade_until","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",9,null],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"map","","Make a new `MappedRwLockReadGuard` for a component of the locked data.",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mappedrwlockreadguard"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"map","","Make a new `MappedRwLockWriteGuard` for a component of the locked data.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mappedrwlockwriteguard"}}],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",11,{"inputs":[{"name":"self"}],"output":{"name":"mappedrwlockreadguard"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",11,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[8,"RawMutex","","Basic operations for a mutex.",null,null],[18,"INIT","","Initial value for an unlocked mutex.",12,null],[16,"GuardMarker","","Marker type which determines whether a lock guard should be `Send`. Use one of the `GuardSend` or `GuardNoSend` helper types here.",12,null],[10,"lock","","Acquires this mutex, blocking the current thread until it is able to do so.",12,{"inputs":[{"name":"self"}],"output":null}],[10,"try_lock","","Attempts to acquire this mutex without blocking.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"unlock","","Unlocks this mutex.",12,{"inputs":[{"name":"self"}],"output":null}],[8,"RawMutexFair","","Additional methods for mutexes which support fair unlocking.",null,null],[10,"unlock_fair","","Unlocks this mutex using a fair unlock protocol.",13,{"inputs":[{"name":"self"}],"output":null}],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",13,{"inputs":[{"name":"self"}],"output":null}],[8,"RawMutexTimed","","Additional methods for mutexes which support locking with timeouts.",null,null],[16,"Duration","","Duration type used for `try_lock_for`.",14,null],[16,"Instant","","Instant type used for `try_lock_until`.",14,null],[10,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",14,null],[10,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",14,null],[8,"GetThreadId","","Helper trait which returns a non-zero thread ID.",null,null],[18,"INIT","","Initial value.",15,null],[10,"nonzero_thread_id","","Returns a non-zero thread ID which identifies the current thread of execution.",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"RawRwLock","","Basic operations for a reader-writer lock.",null,null],[18,"INIT","","Initial value for an unlocked `RwLock`.",16,null],[16,"GuardMarker","","Marker type which determines whether a lock guard should be `Send`. Use one of the `GuardSend` or `GuardNoSend` helper types here.",16,null],[10,"lock_shared","","Acquires a shared lock, blocking the current thread until it is able to do so.",16,{"inputs":[{"name":"self"}],"output":null}],[10,"try_lock_shared","","Attempts to acquire a shared lock without blocking.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"unlock_shared","","Releases a shared lock.",16,{"inputs":[{"name":"self"}],"output":null}],[10,"lock_exclusive","","Acquires an exclusive lock, blocking the current thread until it is able to do so.",16,{"inputs":[{"name":"self"}],"output":null}],[10,"try_lock_exclusive","","Attempts to acquire an exclusive lock without blocking.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"unlock_exclusive","","Releases an exclusive lock.",16,{"inputs":[{"name":"self"}],"output":null}],[8,"RawRwLockFair","","Additional methods for RwLocks which support fair unlocking.",null,null],[10,"unlock_shared_fair","","Releases a shared lock using a fair unlock protocol.",17,{"inputs":[{"name":"self"}],"output":null}],[10,"unlock_exclusive_fair","","Releases an exclusive lock using a fair unlock protocol.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"bump_shared","","Temporarily yields a shared lock to a waiting thread if there is one.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"bump_exclusive","","Temporarily yields an exclusive lock to a waiting thread if there is one.",17,{"inputs":[{"name":"self"}],"output":null}],[8,"RawRwLockDowngrade","","Additional methods for RwLocks which support atomically downgrading an exclusive lock to a shared lock.",null,null],[10,"downgrade","","Atomically downgrades an exclusive lock into a shared lock without allowing any thread to take an exclusive lock in the meantime.",18,{"inputs":[{"name":"self"}],"output":null}],[8,"RawRwLockTimed","","Additional methods for RwLocks which support locking with timeouts.",null,null],[16,"Duration","","Duration type used for `try_lock_for`.",19,null],[16,"Instant","","Instant type used for `try_lock_until`.",19,null],[10,"try_lock_shared_for","","Attempts to acquire a shared lock until a timeout is reached.",19,null],[10,"try_lock_shared_until","","Attempts to acquire a shared lock until a timeout is reached.",19,null],[10,"try_lock_exclusive_for","","Attempts to acquire an exclusive lock until a timeout is reached.",19,null],[10,"try_lock_exclusive_until","","Attempts to acquire an exclusive lock until a timeout is reached.",19,null],[8,"RawRwLockRecursive","","Additional methods for RwLocks which support recursive read locks.",null,null],[10,"lock_shared_recursive","","Acquires a shared lock without deadlocking in case of a recursive lock.",20,{"inputs":[{"name":"self"}],"output":null}],[10,"try_lock_shared_recursive","","Attempts to acquire a shared lock without deadlocking in case of a recursive lock.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"RawRwLockRecursiveTimed","","Additional methods for RwLocks which support recursive read locks and timeouts.",null,null],[10,"try_lock_shared_recursive_for","","Attempts to acquire a shared lock until a timeout is reached, without deadlocking in case of a recursive lock.",21,null],[10,"try_lock_shared_recursive_until","","Attempts to acquire a shared lock until a timeout is reached, without deadlocking in case of a recursive lock.",21,null],[8,"RawRwLockUpgrade","","Additional methods for RwLocks which support atomically upgrading a shared lock to an exclusive lock.",null,null],[10,"lock_upgradable","","Acquires an upgradable lock, blocking the current thread until it is able to do so.",22,{"inputs":[{"name":"self"}],"output":null}],[10,"try_lock_upgradable","","Attempts to acquire an upgradable lock without blocking.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"unlock_upgradable","","Releases an upgradable lock.",22,{"inputs":[{"name":"self"}],"output":null}],[10,"upgrade","","Upgrades an upgradable lock to an exclusive lock.",22,{"inputs":[{"name":"self"}],"output":null}],[10,"try_upgrade","","Attempts to upgrade an upgradable lock to an exclusive lock without blocking.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"RawRwLockUpgradeFair","","Additional methods for RwLocks which support upgradable locks and fair unlocking.",null,null],[10,"unlock_upgradable_fair","","Releases an upgradable lock using a fair unlock protocol.",23,{"inputs":[{"name":"self"}],"output":null}],[11,"bump_upgradable","","Temporarily yields an upgradable lock to a waiting thread if there is one.",23,{"inputs":[{"name":"self"}],"output":null}],[8,"RawRwLockUpgradeDowngrade","","Additional methods for RwLocks which support upgradable locks and lock downgrading.",null,null],[10,"downgrade_upgradable","","Downgrades an upgradable lock to a shared lock.",24,{"inputs":[{"name":"self"}],"output":null}],[10,"downgrade_to_upgradable","","Downgrades an exclusive lock to an upgradable lock.",24,{"inputs":[{"name":"self"}],"output":null}],[8,"RawRwLockUpgradeTimed","","Additional methods for RwLocks which support upgradable locks and locking with timeouts.",null,null],[10,"try_lock_upgradable_for","","Attempts to acquire an upgradable lock until a timeout is reached.",25,null],[10,"try_lock_upgradable_until","","Attempts to acquire an upgradable lock until a timeout is reached.",25,null],[10,"try_upgrade_for","","Attempts to upgrade an upgradable lock to an exclusive lock until a timeout is reached.",25,null],[10,"try_upgrade_until","","Attempts to upgrade an upgradable lock to an exclusive lock until a timeout is reached.",25,null],[18,"INIT","","Initial value for an unlocked mutex.",12,null],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",13,{"inputs":[{"name":"self"}],"output":null}],[18,"INIT","","Initial value.",15,null],[18,"INIT","","Initial value for an unlocked `RwLock`.",16,null],[11,"bump_shared","","Temporarily yields a shared lock to a waiting thread if there is one.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"bump_exclusive","","Temporarily yields an exclusive lock to a waiting thread if there is one.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"bump_upgradable","","Temporarily yields an upgradable lock to a waiting thread if there is one.",23,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"MappedMutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"MappedReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableReadGuard"],[3,"MappedRwLockReadGuard"],[3,"MappedRwLockWriteGuard"],[8,"RawMutex"],[8,"RawMutexFair"],[8,"RawMutexTimed"],[8,"GetThreadId"],[8,"RawRwLock"],[8,"RawRwLockFair"],[8,"RawRwLockDowngrade"],[8,"RawRwLockTimed"],[8,"RawRwLockRecursive"],[8,"RawRwLockRecursiveTimed"],[8,"RawRwLockUpgrade"],[8,"RawRwLockUpgradeFair"],[8,"RawRwLockUpgradeDowngrade"],[8,"RawRwLockUpgradeTimed"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["box","shutdownloggererror"],"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["shutdownloggererror"],"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["loglevel"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["loglevelfilter"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["loglevel"],"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["lru_cache"] = {"doc":"A cache that holds a limited number of key-value pairs. When the capacity of the cache is exceeded, the least-recently-used (where \"used\" means a look-up or putting the pair into the cache) pair is automatically removed.","items":[[3,"LruCache","lru_cache","An LRU cache.",null,null],[3,"IntoIter","","An iterator over a cache's key-value pairs in least- to most-recently-used order.",null,null],[3,"Iter","","An iterator over a cache's key-value pairs in least- to most-recently-used order.",null,null],[3,"IterMut","","An iterator over a cache's key-value pairs in least- to most-recently-used order with mutable references to the values.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"lrucache"}}],[11,"new","","Creates an empty cache that can hold at most `capacity` items.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hasher","","Creates an empty cache that can hold at most `capacity` items with the given hash builder.",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"contains_key","","Checks if the map contains the given key.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"insert","","Inserts a key-value pair into the cache. If the key already existed, the old value is returned.",0,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the given key in the cache, if any.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","Removes the given key from the cache and returns its corresponding value.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the cache can hold.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_capacity","","Sets the number of key-value pairs the cache can hold. Removes least-recently-used key-value pairs if necessary.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remove_lru","","Removes and returns the least recently used key-value pair as a tuple.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Returns the number of key-value pairs in the cache.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the cache contains no key-value pairs.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Removes all key-value pairs from the cache.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Returns an iterator over the cache's key-value pairs in least- to most-recently-used order.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator over the cache's key-value pairs in least- to most-recently-used order, with mutable references to the values.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[3,"LruCache"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["macros"] = {"doc":"Utils common types and macros global reexport.","items":[[14,"vec_into","macros","",null,null],[14,"slice_into","","",null,null],[14,"hash_map","","",null,null],[14,"hash_map_into","","",null,null],[14,"map","","",null,null],[14,"map_into","","",null,null],[14,"flush","","",null,null],[14,"flushln","","",null,null]],"paths":[]};
searchIndex["mem"] = {"doc":"","items":[[3,"Memzero","mem","Wrapper to zero out memory when dropped.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"memzero"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"memzero"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"memzero"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"memzero"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"memzero"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"memzero"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"memzero"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"memzero"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"memzero"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"memzero"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null]],"paths":[[3,"Memzero"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",null,null],[3,"Memchr2","","An iterator for Memchr2",null,null],[3,"Memchr3","","An iterator for Memchr3",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,null],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,null],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",2,null]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["memmap"] = {"doc":"A cross-platform Rust API for memory mapped buffers.","items":[[3,"MmapOptions","memmap","A memory map builder, providing advanced options and flags for specifying memory map behavior.",null,null],[3,"Mmap","","An immutable memory mapped buffer.",null,null],[3,"MmapMut","","A mutable memory mapped buffer.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mmapoptions"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"mmapoptions"}}],[11,"new","","Creates a new set of options for configuring and creating a memory map.",0,{"inputs":[],"output":{"name":"mmapoptions"}}],[11,"offset","","Configures the memory map to start at byte `offset` from the beginning of the file.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"len","","Configures the created memory mapped buffer to be `len` bytes long.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"stack","","Configures the anonymous memory map to be suitable for a process or thread stack.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"map","","Creates a read-only memory map backed by a file.",0,{"inputs":[{"name":"self"},{"name":"file"}],"output":{"generics":["mmap"],"name":"result"}}],[11,"map_exec","","Creates a readable and executable memory map backed by a file.",0,{"inputs":[{"name":"self"},{"name":"file"}],"output":{"generics":["mmap"],"name":"result"}}],[11,"map_mut","","Creates a writeable memory map backed by a file.",0,{"inputs":[{"name":"self"},{"name":"file"}],"output":{"generics":["mmapmut"],"name":"result"}}],[11,"map_copy","","Creates a copy-on-write memory map backed by a file.",0,{"inputs":[{"name":"self"},{"name":"file"}],"output":{"generics":["mmapmut"],"name":"result"}}],[11,"map_anon","","Creates an anonymous memory map.",0,{"inputs":[{"name":"self"}],"output":{"generics":["mmapmut"],"name":"result"}}],[11,"map","","Creates a read-only memory map backed by a file.",1,{"inputs":[{"name":"file"}],"output":{"generics":["mmap"],"name":"result"}}],[11,"make_mut","","Transition the memory map to be writable.",1,{"inputs":[{"name":"self"}],"output":{"generics":["mmapmut"],"name":"result"}}],[11,"deref","","",1,null],[11,"as_ref","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"map_mut","","Creates a writeable memory map backed by a file.",2,{"inputs":[{"name":"file"}],"output":{"generics":["mmapmut"],"name":"result"}}],[11,"map_anon","","Creates an anonymous memory map.",2,{"inputs":[{"name":"usize"}],"output":{"generics":["mmapmut"],"name":"result"}}],[11,"flush","","Flushes outstanding memory map modifications to disk.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map modifications to disk.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_range","","Flushes outstanding memory map modifications in the range to disk.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush_async_range","","Asynchronously flushes outstanding memory map modifications in the range to disk.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"make_read_only","","Returns an immutable version of this memory mapped buffer.",2,{"inputs":[{"name":"self"}],"output":{"generics":["mmap"],"name":"result"}}],[11,"make_exec","","Transition the memory map to be readable and executable.",2,{"inputs":[{"name":"self"}],"output":{"generics":["mmap"],"name":"result"}}],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"as_ref","","",2,null],[11,"as_mut","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"MmapOptions"],[3,"Mmap"],[3,"MmapMut"]]};
searchIndex["memoffset"] = {"doc":"A crate used for calculating offsets of struct members and their spans.","items":[[14,"offset_of","memoffset","Calculates the offset of the specified field from the start of the struct. This macro supports arbitrary amount of subscripts and recursive member-accesses.",null,null],[14,"span_of","","Produces a range instance representing the sub-slice containing the specified member.",null,null]],"paths":[]};
searchIndex["memory_cache"] = {"doc":"Lru-cache related utilities as quick-and-dirty wrappers around the lru-cache crate.","items":[[3,"MemoryLruCache","memory_cache","An LRU-cache which operates on memory used.",null,null],[11,"new","","Create a new cache with a maximum size in bytes.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"insert","","Insert an item.",0,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"get_mut","","Get a reference to an item in the cache. It is a logic error for its heap size to be altered while borrowed.",0,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"current_size","","Currently-used size of values in bytes.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[3,"MemoryLruCache"]]};
searchIndex["memory_units"] = {"doc":"Crate for safe conversion between units of memory.","items":[[3,"Bytes","memory_units","Memory size specified in bytes.",null,null],[12,"0","","",0,null],[5,"size_of","","Returns the size of a type in [`Bytes`].",null,{"inputs":[],"output":{"name":"bytes"}}],[0,"wasm32","","WebAssembly-specific sizes and units.",null,null],[3,"Words","memory_units::wasm32","Memory size specified in `wasm32` words.",null,null],[12,"0","","",1,null],[3,"Pages","","Memory size specified in WebAssembly [memory pages][memory page].",null,null],[12,"0","","",2,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"words"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"words"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"words"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"words"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"words"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"words"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"words"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"words"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"words"}],"output":{"name":"ordering"}}],[11,"byte_size","","",1,{"inputs":[],"output":{"name":"bytes"}}],[11,"from","memory_units","",0,{"inputs":[{"name":"words"}],"output":{"name":"bytes"}}],[11,"add","memory_units::wasm32","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"pages"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"name":"ordering"}}],[11,"byte_size","","",2,{"inputs":[],"output":{"name":"bytes"}}],[11,"from","memory_units","",0,{"inputs":[{"name":"pages"}],"output":{"name":"bytes"}}],[11,"add","memory_units::wasm32","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[0,"target","memory_units","Sizes and units for the current compilation target.",null,null],[3,"Words","memory_units::target","Memory size specified in words.",null,null],[12,"0","","",3,null],[3,"Pages","","Memory size specified in [memory pages][memory page].",null,null],[12,"0","","",4,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"words"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"words"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"words"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"words"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"words"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"words"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"words"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"words"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"words"}],"output":{"name":"ordering"}}],[11,"byte_size","","",3,{"inputs":[],"output":{"name":"bytes"}}],[11,"from","memory_units","",0,{"inputs":[{"name":"words"}],"output":{"name":"bytes"}}],[11,"add","memory_units::target","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"pages"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"name":"ordering"}}],[11,"byte_size","","",4,{"inputs":[],"output":{"name":"bytes"}}],[11,"from","memory_units","",0,{"inputs":[{"name":"pages"}],"output":{"name":"bytes"}}],[11,"add","memory_units::target","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[8,"RoundUpTo","memory_units","A trait defining round up conversion between various memory units.",null,null],[10,"round_up_to","","Returns minimum number of `T` to fit amount of space occupied by `self`.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ByteSize","","A trait defining the size, in bytes, of one unit of `Self`.",null,null],[10,"byte_size","","The size, in bytes, of a single unit of `Self`.",6,{"inputs":[],"output":{"name":"bytes"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"byte_size","","",0,{"inputs":[],"output":{"name":"bytes"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}]],"paths":[[3,"Bytes"],[3,"Words"],[3,"Pages"],[3,"Words"],[3,"Pages"],[8,"RoundUpTo"],[8,"ByteSize"]]};
searchIndex["memorydb"] = {"doc":"Reference-counted memory-based `HashDB` implementation.","items":[[3,"MemoryDB","memorydb","Reference-counted memory-based `HashDB` implementation.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"memorydb"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"memorydb"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"memorydb"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a new instance of the memory DB.",0,{"inputs":[],"output":{"name":"memorydb"}}],[11,"clear","","Clear all data from the database.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"purge","","Purge all zero-referenced data from the database.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"drain","","Return the internal map of hashes to data, clearing the current state.",0,{"inputs":[{"name":"self"}],"output":{"generics":["buildhasherdefault"],"name":"hashmap"}}],[11,"raw","","Grab the raw information associated with a key. Returns None if the key doesn't exist.",0,null],[11,"mem_used","","Returns the size of allocated heap memory",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"remove_and_purge","","Remove an element and delete it from storage if reference count reaches zero. If the value was purged, return the old value.",0,null],[11,"consolidate","","Consolidate all the entries of `other` into `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"keys","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"hashmap"}}],[11,"get","","",0,null],[11,"contains","","",0,null],[11,"insert","","",0,null],[11,"emplace","","",0,null],[11,"remove","","",0,null],[11,"as_hashdb","","",0,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"as_hashdb_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}]],"paths":[[3,"MemoryDB"]]};
searchIndex["nan_preserving_float"] = {"doc":"","items":[[3,"F32","nan_preserving_float","",null,null],[3,"F64","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_bits","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"to_bits","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_float","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"to_float","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"is_nan","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fract","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"min","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"max","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"rem","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_bits","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"to_bits","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_float","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"to_float","","",1,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"is_nan","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abs","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fract","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"min","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"max","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[11,"neg","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}]],"paths":[[3,"F32"],[3,"F64"]]};
searchIndex["nodrop"] = {"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",null,null],[11,"new","","Create a new NoDrop.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",1,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",1,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",12,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",12,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",12,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",12,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"i128"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"u128"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"i128"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"u128"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"pow","num","",null,null],[8,"Pow","num::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",17,null],[10,"pow","","Returns `self` to the power `rhs`.",17,null],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"bigint","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[11,"new","","Creates and initializes a BigInt.",18,{"inputs":[{"name":"sign"},{"generics":["u32"],"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",18,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",18,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",18,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",18,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",18,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",18,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",18,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",18,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",18,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",18,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",18,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",18,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",18,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",18,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",18,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",18,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",18,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_div","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_div","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_bigint","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_bigint","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"bitxor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"to_i64","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"to_i64","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"div_assign","","",19,null],[11,"abs","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"checked_add","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_i64","","",19,{"inputs":[{"name":"i64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_u64","","",19,{"inputs":[{"name":"u64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_f64","","",19,{"inputs":[{"name":"f64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_i64","","",18,{"inputs":[{"name":"i64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_u64","","",18,{"inputs":[{"name":"u64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_f64","","",18,{"inputs":[{"name":"f64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"bitxor_assign","","",19,null],[11,"bitxor_assign","","",19,null],[11,"bitor_assign","","",19,null],[11,"bitor_assign","","",19,null],[11,"default","","",19,{"inputs":[],"output":{"name":"biguint"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"bigint"}}],[11,"shl_assign","","",19,null],[11,"bitand","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_mul","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"neg","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"neg","","",19,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"sub","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"shr","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"rem_assign","","",19,null],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"mul","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div_rem","","",18,null],[11,"div_floor","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",18,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"div_rem","","",19,null],[11,"div_floor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",19,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"cmp","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"one","","",19,{"inputs":[],"output":{"name":"biguint"}}],[11,"one","","",18,{"inputs":[],"output":{"name":"bigint"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"to_biguint","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"to_biguint","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_sub","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_sub","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"add_assign","","",19,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"shl","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",19,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"zero","","",19,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",18,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"sub_assign","","",19,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",18,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",19,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"bitand_assign","","",19,null],[11,"bitand_assign","","",19,null],[11,"hash","","",19,null],[11,"hash","","",18,null],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"shr_assign","","",19,null],[11,"bitor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"generics":["bigint"],"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"generics":["biguint"],"name":"result"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Creates and initializes a `BigUint`.",19,{"inputs":[{"generics":["u32"],"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",19,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",19,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",19,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",19,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",19,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",19,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",19,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",19,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}]],"paths":[[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[3,"BigInt"],[3,"BigUint"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"generics":["biguint"],"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"zero","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"neg","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"checked_add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"div_rem","","",2,null],[11,"div_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_f64","","",2,{"inputs":[{"name":"f64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",2,{"inputs":[{"generics":["bigdigit"],"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",2,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",2,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"generics":["sign"],"name":"result"}}],[11,"neg","","Negate Sign value.",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"generics":["bigint"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"div_rem","","",3,null],[11,"div_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_bigint","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_biguint","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"sign"},{"generics":["bigdigit"],"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",3,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",3,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",3,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",3,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",3,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[11,"add","num_bigint::big_digit","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[6,"BigDigit"],[6,"DoubleBigDigit"]]};
searchIndex["num_cpus"] = {"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current system.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"t"}}],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",2,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}]],"paths":[[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"inv","num_traits::ops","",null,null],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",null,null],[16,"Output","","The result after applying the operator.",17,null],[10,"inv","","Returns the multiplicative inverse of `self`.",17,null],[0,"mul_add","num_traits::ops","",null,null],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",18,null],[10,"mul_add","","Performs the fused multiply-add operation.",18,null],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",19,{"inputs":[{"name":"self"},{"name":"a"},{"name":"b"}],"output":null}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",20,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",20,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with `no_std`.",null,null],[10,"infinity","","Returns positive infinity.",21,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns negative infinity.",21,{"inputs":[],"output":{"name":"self"}}],[10,"nan","","Returns NaN.",21,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",21,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",21,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",21,{"inputs":[],"output":{"name":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",21,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",21,{"inputs":[],"output":{"name":"self"}}],[11,"is_nan","","Returns `true` if the number is NaN.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Returns `true` if the number is infinite.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",21,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[11,"floor","","Returns the largest integer less than or equal to a number.",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"trunc","","Return the integer part of a number.",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fract","","Returns the fractional part of a number.",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"signum","","Returns a number that represents the sign of `self`.",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"min","","Returns the minimum of the two numbers.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"max","","Returns the maximum of the two numbers.",21,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"powi","","Raise a number to an integer power.",21,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",21,null],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",22,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",22,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",22,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",22,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",22,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",22,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",22,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",22,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",22,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",22,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",22,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",22,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",22,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",22,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",22,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",22,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",22,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",22,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",22,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",22,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",23,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",23,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",23,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",23,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",23,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",23,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",23,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",23,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",23,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",23,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",23,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",23,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",23,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",23,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",23,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",23,{"inputs":[],"output":{"name":"self"}}],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,{"inputs":[],"output":{"name":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",24,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",24,{"inputs":[],"output":{"name":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",24,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",24,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a real number power.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_degrees","","Converts radians to degrees.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_radians","","Converts degrees to radians.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_i128","","Converts the value of `self` to an `i128`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i128"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_u128","","Converts the value of `self` to an `u128`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u128"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",26,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"inputs":[{"name":"i128"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"inputs":[{"name":"u128"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",26,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",27,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",28,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",29,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",29,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",29,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",29,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",29,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",29,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",29,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",30,null],[10,"pow","","Returns `self` to the power `rhs`.",30,null],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",31,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",31,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Bounded"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Real"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"PrimInt"],[8,"Pow"],[8,"Num"]]};
searchIndex["owning_ref"] = {"doc":"An owning reference.","items":[[8,"StableAddress","owning_ref","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null],[3,"OwningRef","","An owning reference.",null,null],[3,"OwningRefMut","","An mutable owning reference.",null,null],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent object.",null,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",null,null],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",null,null],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",null,null],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",null,null],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",null,null],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",null,null],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",null,null],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,null],[10,"into_erased","","Perform the type erasure.",0,null],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",null,null],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",1,null],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a handle to be encapsulated by the `OwningHandle`.",1,null],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",null,null],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",2,null],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a mutable handle to be encapsulated by the `OwningHandle`.",2,null],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"try_map","","Tries to convert `self` into a new owning reference that points at something reachable from the previous one.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["owningref"],"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",3,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"owningref"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",3,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"owner","","A getter for the underlying owner.",3,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",3,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new shared owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_mut","","Converts `self` into a new mutable owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"try_map","","Tries to convert `self` into a new shared owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["owningref"],"name":"result"}}],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning reference that points at something reachable from the previous one.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["owningrefmut"],"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningrefmut"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"owningrefmut"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",4,{"inputs":[{"name":"self"}],"output":{"name":"owningrefmut"}}],[11,"owner","","A getter for the underlying owner.",4,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",4,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts a callback to perform the conversion.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",5,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"self"}}],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"result"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",3,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"owningrefmut"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}]],"paths":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["parables_build"] = {"doc":"","items":[[4,"Error","parables_build","",null,null],[13,"Io","","",0,null],[13,"Message","","",0,null],[5,"compile","","Compiles all solidity files in given directory.",null,{"inputs":[{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}]],"paths":[[4,"Error"]]};
searchIndex["parables_example"] = {"doc":"","items":[[5,"new_context","parables_example","",null,{"inputs":[],"output":{"name":"contractcontext"}}],[0,"simple_ledger","","",null,null],[0,"simple_ledger","parables_example::simple_ledger","",null,null],[3,"Constructor","parables_example::simple_ledger::simple_ledger","",null,null],[3,"Contract","","",null,null],[12,"address","","",0,null],[5,"constructor","","",null,{"inputs":[],"output":{"name":"constructor"}}],[5,"contract","","",null,{"inputs":[{"name":"vm"},{"name":"address"},{"name":"call"}],"output":{"name":"contract"}}],[0,"outputs","","Contract functions (for decoding output)",null,null],[5,"get","parables_example::simple_ledger::simple_ledger::outputs","Returns the decoded output for this contract function",null,null],[5,"add","","Returns the decoded output for this contract function",null,null],[0,"functions","parables_example::simple_ledger::simple_ledger","",null,null],[3,"Get","parables_example::simple_ledger::simple_ledger::functions","",null,null],[3,"Add","","",null,null],[3,"GetWithInput","","Contract function with already defined input values",null,null],[3,"AddWithInput","","Contract function with already defined input values",null,null],[5,"get","","Sets the input (arguments) for this contract function",null,{"inputs":[{"name":"t0"}],"output":{"name":"getwithinput"}}],[5,"add","","Sets the input (arguments) for this contract function",null,{"inputs":[{"name":"t0"}],"output":{"name":"addwithinput"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"get"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"get"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"get"}],"output":{"name":"bool"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"decode_output","","",1,null],[11,"encode_input","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"add"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"add"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"add"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"decode_output","","",2,null],[11,"encode_input","","",2,null],[11,"encoded","","",3,{"inputs":[{"name":"self"},{"name":"linker"}],"output":{"generics":["bytes","error"],"name":"result"}}],[11,"output","","",3,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["error"],"name":"result"}}],[11,"encoded","","",4,{"inputs":[{"name":"self"},{"name":"linker"}],"output":{"generics":["bytes","error"],"name":"result"}}],[11,"output","","",4,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","parables_example::simple_ledger::simple_ledger","",5,{"inputs":[{"generics":["token"],"name":"vec"}],"output":{"name":"self"}}],[11,"encoded","","",5,{"inputs":[{"name":"self"},{"name":"linker"}],"output":{"generics":["bytes","error"],"name":"result"}}],[11,"output","","",5,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["address","error"],"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"get","","Sets the input (arguments) for this contract function",0,{"inputs":[{"name":"self"},{"name":"t0"}],"output":{"generics":["calloutput","callerror"],"name":"result"}}],[11,"add","","Sets the input (arguments) for this contract function",0,{"inputs":[{"name":"self"},{"name":"t0"}],"output":{"generics":["calloutput","callerror"],"name":"result"}}],[11,"call","","Modify the call for the contract.",0,{"inputs":[{"name":"self"},{"name":"call"}],"output":{"name":"self"}}],[11,"sender","","Modify the default sender for the contract.",0,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"self"}}],[11,"value","","Modify the default value for a copy of the current contract.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"self"}}],[0,"simple_lib","parables_example","",null,null],[0,"simple_lib","parables_example::simple_lib","",null,null],[3,"Constructor","parables_example::simple_lib::simple_lib","",null,null],[3,"Contract","","",null,null],[12,"address","","",6,null],[5,"constructor","","",null,{"inputs":[],"output":{"name":"constructor"}}],[5,"contract","","",null,{"inputs":[{"name":"vm"},{"name":"address"},{"name":"call"}],"output":{"name":"contract"}}],[0,"outputs","","Contract functions (for decoding output)",null,null],[5,"add","parables_example::simple_lib::simple_lib::outputs","Returns the decoded output for this contract function",null,null],[0,"functions","parables_example::simple_lib::simple_lib","",null,null],[3,"Add","parables_example::simple_lib::simple_lib::functions","",null,null],[3,"AddWithInput","","Contract function with already defined input values",null,null],[5,"add","","Sets the input (arguments) for this contract function",null,{"inputs":[{"name":"t0"},{"name":"t1"}],"output":{"name":"addwithinput"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"add"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"add"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"add"}],"output":{"name":"bool"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"decode_output","","",7,null],[11,"encode_input","","",7,null],[11,"encoded","","",8,{"inputs":[{"name":"self"},{"name":"linker"}],"output":{"generics":["bytes","error"],"name":"result"}}],[11,"output","","",8,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","parables_example::simple_lib::simple_lib","",9,{"inputs":[{"generics":["token"],"name":"vec"}],"output":{"name":"self"}}],[11,"encoded","","",9,{"inputs":[{"name":"self"},{"name":"linker"}],"output":{"generics":["bytes","error"],"name":"result"}}],[11,"output","","",9,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["address","error"],"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","Sets the input (arguments) for this contract function",6,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"}],"output":{"generics":["calloutput","callerror"],"name":"result"}}],[11,"call","","Modify the call for the contract.",6,{"inputs":[{"name":"self"},{"name":"call"}],"output":{"name":"self"}}],[11,"sender","","Modify the default sender for the contract.",6,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"self"}}],[11,"value","","Modify the default value for a copy of the current contract.",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"self"}}],[0,"simple_contract","parables_example","",null,null],[0,"simple_contract","parables_example::simple_contract","",null,null],[3,"Constructor","parables_example::simple_contract::simple_contract","",null,null],[3,"Contract","","",null,null],[12,"address","","",10,null],[5,"constructor","","",null,{"inputs":[{"name":"t0"}],"output":{"name":"constructor"}}],[5,"contract","","",null,{"inputs":[{"name":"vm"},{"name":"address"},{"name":"call"}],"output":{"name":"contract"}}],[0,"events","","",null,null],[3,"ValueUpdated","parables_example::simple_contract::simple_contract::events","",null,null],[5,"value_updated","","",null,{"inputs":[],"output":{"name":"valueupdated"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"valueupdated"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"valueupdated"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"valueupdated"}],"output":{"name":"bool"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"parse_log","","Parses log.",11,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"generics":["error"],"name":"result"}}],[11,"wildcard_filter","","Create a default topic filter that matches any messages.",11,{"inputs":[{"name":"self"}],"output":{"name":"topicfilter"}}],[11,"filter","","Creates topic filter.",11,{"inputs":[{"name":"self"},{"name":"t0"}],"output":{"name":"topicfilter"}}],[0,"logs","parables_example::simple_contract::simple_contract","",null,null],[3,"ValueUpdated","parables_example::simple_contract::simple_contract::logs","",null,null],[12,"value","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"valueupdated"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"valueupdated"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"valueupdated"}],"output":{"name":"bool"}}],[0,"outputs","parables_example::simple_contract::simple_contract","Contract functions (for decoding output)",null,null],[5,"test_add","parables_example::simple_contract::simple_contract::outputs","Returns the decoded output for this contract function",null,null],[5,"get_value","","Returns the decoded output for this contract function",null,null],[5,"set_value","","Returns the decoded output for this contract function",null,null],[0,"functions","parables_example::simple_contract::simple_contract","",null,null],[3,"TestAdd","parables_example::simple_contract::simple_contract::functions","",null,null],[3,"GetValue","","",null,null],[3,"SetValue","","",null,null],[3,"TestAddWithInput","","Contract function with already defined input values",null,null],[3,"GetValueWithInput","","Contract function with already defined input values",null,null],[3,"SetValueWithInput","","Contract function with already defined input values",null,null],[5,"test_add","","Sets the input (arguments) for this contract function",null,{"inputs":[{"name":"t0"},{"name":"t1"}],"output":{"name":"testaddwithinput"}}],[5,"get_value","","Sets the input (arguments) for this contract function",null,{"inputs":[],"output":{"name":"getvaluewithinput"}}],[5,"set_value","","Sets the input (arguments) for this contract function",null,{"inputs":[{"name":"t0"}],"output":{"name":"setvaluewithinput"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"testadd"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"testadd"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"testadd"}],"output":{"name":"bool"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"decode_output","","",13,null],[11,"encode_input","","",13,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"getvalue"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"getvalue"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"getvalue"}],"output":{"name":"bool"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"decode_output","","",14,null],[11,"encode_input","","",14,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"setvalue"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"setvalue"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"setvalue"}],"output":{"name":"bool"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"decode_output","","",15,null],[11,"encode_input","","",15,null],[11,"encoded","","",16,{"inputs":[{"name":"self"},{"name":"linker"}],"output":{"generics":["bytes","error"],"name":"result"}}],[11,"output","","",16,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["error"],"name":"result"}}],[11,"encoded","","",17,{"inputs":[{"name":"self"},{"name":"linker"}],"output":{"generics":["bytes","error"],"name":"result"}}],[11,"output","","",17,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["error"],"name":"result"}}],[11,"encoded","","",18,{"inputs":[{"name":"self"},{"name":"linker"}],"output":{"generics":["bytes","error"],"name":"result"}}],[11,"output","","",18,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","parables_example::simple_contract::simple_contract","",19,{"inputs":[{"generics":["token"],"name":"vec"}],"output":{"name":"self"}}],[11,"encoded","","",19,{"inputs":[{"name":"self"},{"name":"linker"}],"output":{"generics":["bytes","error"],"name":"result"}}],[11,"output","","",19,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["address","error"],"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"test_add","","Sets the input (arguments) for this contract function",10,{"inputs":[{"name":"self"},{"name":"t0"},{"name":"t1"}],"output":{"generics":["calloutput","callerror"],"name":"result"}}],[11,"get_value","","Sets the input (arguments) for this contract function",10,{"inputs":[{"name":"self"}],"output":{"generics":["calloutput","callerror"],"name":"result"}}],[11,"set_value","","Sets the input (arguments) for this contract function",10,{"inputs":[{"name":"self"},{"name":"t0"}],"output":{"generics":["calloutput","callerror"],"name":"result"}}],[11,"call","","Modify the call for the contract.",10,{"inputs":[{"name":"self"},{"name":"call"}],"output":{"name":"self"}}],[11,"sender","","Modify the default sender for the contract.",10,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"self"}}],[11,"value","","Modify the default value for a copy of the current contract.",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"self"}}]],"paths":[[3,"Contract"],[3,"Get"],[3,"Add"],[3,"GetWithInput"],[3,"AddWithInput"],[3,"Constructor"],[3,"Contract"],[3,"Add"],[3,"AddWithInput"],[3,"Constructor"],[3,"Contract"],[3,"ValueUpdated"],[3,"ValueUpdated"],[3,"TestAdd"],[3,"GetValue"],[3,"SetValue"],[3,"TestAddWithInput"],[3,"GetValueWithInput"],[3,"SetValueWithInput"],[3,"Constructor"]]};
searchIndex["parables_testing"] = {"doc":"","items":[[0,"abi","parables_testing","Contract ABI helpers.",null,null],[3,"ContractContext","parables_testing::abi","Context for all loaded contracts.",null,null],[12,"source_list","","List of sources, as indexed by a source map.",0,null],[8,"ContractFunction","","Contract functions generated by parables_build.",null,null],[16,"Output","","Output types of the function.",1,null],[10,"encoded","","Encodes the input for the function.",1,{"inputs":[{"name":"self"},{"name":"linker"}],"output":{"generics":["bytes","error"],"name":"result"}}],[10,"output","","Decodes the given bytes output for the contract function.",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["error"],"name":"result"}}],[8,"LogFilter","","Helpers for building log filters.",null,null],[10,"wildcard_filter","","",2,{"inputs":[{"name":"self"}],"output":{"name":"topicfilter"}}],[8,"ParseLog","","Log parsing implementation.",null,null],[16,"Log","","Type of the parsed log.",3,null],[10,"parse_log","","Function to parse log.",3,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"generics":["error"],"name":"result"}}],[8,"Constructor","","",null,null],[18,"ITEM","","Name of the constructor item, used for linking.",4,null],[18,"BIN","","Access the code to deploy for this constructor.",4,null],[18,"SOURCE_MAP","","Access the source map for the type this constructor is associated with.",4,null],[18,"RUNTIME_BIN","","Access the runtime code being deployed.",4,null],[18,"RUNTIME_SOURCE_MAP","","Access the runtime source map for the type this constructor is associated with.",4,null],[8,"Vm","","Virtual machine abstraction.",null,null],[10,"call","","Perform a call against the given contract function.",5,{"inputs":[{"name":"self"},{"name":"address"},{"name":"f"},{"name":"call"}],"output":{"generics":["calloutput","callerror"],"name":"result"}}],[0,"account","parables_testing","",null,null],[3,"Account","parables_testing::account","",null,null],[12,"address","","",6,null],[3,"Signer","","",null,null],[3,"Signature","","",null,null],[4,"Error","","",null,null],[13,"DerivePublicKeyError","","",7,null],[13,"SignError","","",7,null],[13,"MessageError","","",7,null],[13,"BorrowError","","",7,null],[8,"Digestable","","Trait for things which can be digested.",null,null],[10,"digest","","Digest the given type.",8,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new address with the give rng implementation.",6,{"inputs":[{"name":"refcell"}],"output":{"generics":["account","error"],"name":"result"}}],[11,"sign","","Create a new signer.",6,{"inputs":[{"name":"self"}],"output":{"name":"signer"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"account"}],"output":{"name":"self"}}],[11,"input","","Input the given set of bytes.",9,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"self"}}],[11,"finish","","Finish the signature.",9,{"inputs":[{"name":"self"}],"output":{"generics":["signature","error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"call","parables_testing","",null,null],[3,"Call","parables_testing::call","",null,null],[12,"sender","","The sender of the call.",11,null],[12,"gas","","The amount of gas to include in the call.",11,null],[12,"gas_price","","The price willing to pay for gas during the call (in WEI).",11,null],[12,"value","","The amount of ethereum attached to the call (in WEI).",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"call"}}],[11,"new","","Build a new call with the given sender.",11,{"inputs":[{"name":"address"}],"output":{"name":"self"}}],[11,"sender","","Modify sender of call.",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"gas","","Set the call to have the specified amount of gas.",11,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"self"}}],[11,"gas_price","","Set the call to have the specified gas price.",11,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"self"}}],[11,"value","","Set the call to have the specified value.",11,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"self"}}],[0,"error","parables_testing","",null,null],[3,"DecodingError","parables_testing::error","Error when we fail to decode input.",null,null],[3,"NonceError","","Error when we fail to build a transaction nonce.",null,null],[3,"BalanceError","","Error when we fail to build a transaction nonce.",null,null],[4,"Error","","",null,null],[13,"NoLinkerItem","","",12,null],[12,"item","parables_testing::error::Error","",12,null],[13,"NoLinkerPath","parables_testing::error","",12,null],[12,"path","parables_testing::error::Error","",12,null],[13,"BadInputPos","parables_testing::error","",12,null],[12,"position","parables_testing::error::Error","",12,null],[12,"message","","",12,null],[13,"Call","parables_testing::error","",12,null],[12,"message","parables_testing::error::Error","",12,null],[13,"Other","parables_testing::error","",12,null],[12,"message","parables_testing::error::Error","",12,null],[4,"CallError","parables_testing::error","An error occurred during a call.",null,null],[13,"Reverted","","",13,null],[12,"execution","parables_testing::error::CallError","",13,null],[12,"error_info","","",13,null],[13,"Errored","parables_testing::error","",13,null],[12,"execution","parables_testing::error::CallError","",13,null],[12,"error_info","","",13,null],[13,"Status","parables_testing::error","",13,null],[12,"execution","parables_testing::error::CallError","",13,null],[12,"status","","",13,null],[13,"SyncLogs","parables_testing::error","",13,null],[12,"execution","parables_testing::error::CallError","",13,null],[12,"message","","",13,null],[13,"Other","parables_testing::error","",13,null],[12,"message","parables_testing::error::CallError","",13,null],[8,"ResultCallErrorExt","parables_testing::error","Information known about all call errors.",null,null],[11,"is_reverted","","Check if the result is errored because of an revert.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"ResultExt","","",null,null],[10,"gas_used","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["u256"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"decodingerror"}],"output":{"name":"self"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"callerror"}],"output":{"name":"self"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"callerror"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"callerror"}],"output":{"name":"bool"}}],[11,"cause","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",13,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",13,{"inputs":[{"name":"nonceerror"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"balanceerror"}],"output":{"name":"self"}}],[0,"evm","parables_testing","",null,null],[3,"CallResult","parables_testing::evm","The result of executing a call transaction.",null,null],[12,"gas_used","","Gas used to perform call.",16,null],[12,"gas_price","","The price payed for each gas.",16,null],[12,"sender","","The sender of the transaction.",16,null],[3,"CreateResult","","The result of executing a create transaction.",null,null],[12,"address","","Address the code was created on.",17,null],[12,"gas_used","","Gas used to create contract.",17,null],[12,"gas_price","","The price payed for each gas.",17,null],[12,"sender","","The sender of the transaction.",17,null],[3,"CallOutput","","Decoded output and call result in one.",null,null],[12,"output","","",18,null],[12,"result","","",18,null],[3,"Evm","","",null,null],[3,"LogDrainer","","",null,null],[5,"extract_this_topic","","Extract the exact topic or fail.",null,{"inputs":[{"name":"topic"}],"output":{"generics":["hash","error"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"callresult"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"callresult"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"callresult"}],"output":{"name":"bool"}}],[11,"gas_total","","Access the total amount of gas used.",16,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"createresult"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"createresult"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"createresult"}],"output":{"name":"bool"}}],[11,"gas_total","","Access the total amount of gas used.",17,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"calloutput"}}],[11,"gas_total","","Access the total amount of gas used.",18,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"evm"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new ethereum virtual machine abstraction.",19,{"inputs":[{"name":"spec"},{"name":"contractcontext"}],"output":{"generics":["error"],"name":"result"}}],[11,"account","","Create a new account.",19,{"inputs":[{"name":"self"}],"output":{"generics":["account","error"],"name":"result"}}],[11,"get_block_number","","Get the current block number.",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_block_number","","Set the current block number.",19,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"env_info","","Create a static info structure of the environment.",19,{"inputs":[{"name":"address"}],"output":{"name":"envinfo"}}],[11,"deploy","","Deploy the contract with the given code.",19,{"inputs":[{"name":"self"},{"name":"c"},{"name":"call"}],"output":{"generics":["createresult","callerror"],"name":"result"}}],[11,"deploy_code","","Deploy the contract with the given code.",19,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"},{"name":"call"},{"generics":["arc"],"name":"option"},{"name":"linker"}],"output":{"generics":["createresult","callerror"],"name":"result"}}],[11,"call_default","","Perform a call against the given address' fallback function.",19,{"inputs":[{"name":"self"},{"name":"address"},{"name":"call"}],"output":{"generics":["callresult","callerror"],"name":"result"}}],[11,"logs","","Setup a log drainer that drains the specified logs.",19,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"logdrainer"}}],[11,"raw_logs","","Access raw underlying logs.",19,{"inputs":[{"name":"self"}],"output":{"generics":["ref","error"],"name":"result"}}],[11,"has_logs","","Check if we still have unclaimed logs.",19,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"balance","","Query the balance of the given account.",19,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["u256","error"],"name":"result"}}],[11,"add_balance","","Add the given number of wei to the provided account.",19,{"inputs":[{"name":"self"},{"name":"address"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[11,"call","","",19,{"inputs":[{"name":"self"},{"name":"address"},{"name":"f"},{"name":"call"}],"output":{"generics":["calloutput","callerror"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",20,{"inputs":[{"name":"evm"},{"name":"p"}],"output":{"name":"self"}}],[11,"filter","","Modify the current drainer with a new filter.",20,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[11,"iter","","Consumer the drainer and build an interator out of it.",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","Consumer the drainer without processing elements.",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"drain","","Drain logs matching the given filter that has been registered so far.",20,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"drain_with_sender","","Drain logs matching the given filter that has been registered so far.",20,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[0,"ledger","parables_testing","A ledger is used to keep track of the books for multiple accounts.",null,null],[3,"Ledger","parables_testing::ledger","",null,null],[8,"LedgerState","","A state that can be verified with a virtual machine.",null,null],[16,"Instance","","",21,null],[10,"new_instance","","Construct a new instance.",21,null],[10,"verify","","Verify the given state.",21,null],[10,"sync","","Synchronize the given state.",21,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Construct a new empty ledger that doesn't have any specialized state.",22,{"inputs":[{"name":"evm"}],"output":{"name":"ledger"}}],[11,"new","","Construct a new ledger.",22,{"inputs":[{"name":"evm"},{"name":"s"}],"output":{"name":"ledger"}}],[11,"sync","","Synchronize the ledger against the current state of the virtual machine.",22,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["error"],"name":"result"}}],[11,"verify","","Go through each registered account, and verify their invariants.",22,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","","Add to the balance for the given address.",22,{"inputs":[{"name":"self"},{"name":"address"},{"name":"v"}],"output":null}],[11,"sub","","Subtract from the balance for the given address.",22,{"inputs":[{"name":"self"},{"name":"address"},{"name":"v"}],"output":null}],[11,"state","","Access the mutable state for the given address.",22,null],[0,"linker","parables_testing","",null,null],[3,"Source","parables_testing::linker","All necessary source information to perform tracing.",null,null],[12,"source_map","","The source map for the given source.",23,null],[12,"offsets","","The decoded offsets for the given source, from program counter to instruction offset.",23,null],[3,"Linker","","A solidity bytecode linker.",null,null],[3,"Decoder","","",null,null],[3,"BadHex","","",null,null],[3,"HexDecode","","",null,null],[4,"Push","","",null,null],[13,"Bytes","","",24,null],[13,"Unlinked","","",24,null],[4,"Section","","",null,null],[13,"BadInstruction","","A bad instruction.",25,null],[13,"Instruction","","A regular instruction.",25,null],[13,"Push","","A push instruction.",25,null],[13,"SwarmHash","","Swarm hash as seen at end of contract.",25,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"linker"}}],[11,"new","","Construct a new linker.",26,{"inputs":[],"output":{"name":"self"}}],[11,"register_source_list","","",26,{"inputs":[{"name":"self"},{"generics":["pathbuf"],"name":"vec"}],"output":null}],[11,"register_source","","Register a runtime source.",26,{"inputs":[{"name":"self"},{"name":"string"},{"name":"source"}],"output":null}],[11,"find_source","","Find a corresponding source map for the given address.",26,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["arc"],"name":"option"}}],[11,"register_runtime_source","","Register a runtime source.",26,{"inputs":[{"name":"self"},{"name":"string"},{"name":"source"}],"output":null}],[11,"find_runtime_source","","Find a corresponding runtime source map for the given address.",26,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["arc"],"name":"option"}}],[11,"find_file","","Find the corresponding file to an index.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["path"],"name":"option"}}],[11,"register_item","","Register an address for an item.",26,{"inputs":[{"name":"self"},{"name":"string"},{"name":"address"}],"output":null}],[11,"register_path","","Register an address for a path.",26,{"inputs":[{"name":"self"},{"name":"string"},{"name":"address"}],"output":null}],[11,"source","","Construct source information for the given code and source map.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["source","error"],"name":"result"}}],[11,"decode_offsets","","Decoded the given code into instruction offsets.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["hashmap","error"],"name":"result"}}],[11,"link","","Decode and link the given bytecode.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"badhex"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"hexdecode"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"prelude","parables_testing","",null,null],[0,"param_type","parables_testing::prelude::ethabi","Function and event param types.",null,null],[4,"ParamModifier","parables_testing::prelude::ethabi::param_type","Modifier for parameter types.",null,null],[13,"Storage","","The storage modifier associated with parameter types.",30,null],[3,"Writer","","Output formatter for param type.",null,null],[4,"ParamType","","Function and event param types.",null,null],[13,"Address","","Address.",31,null],[13,"Bytes","","Bytes.",31,null],[13,"Int","","Signed integer.",31,null],[13,"Uint","","Unisgned integer.",31,null],[13,"Bool","","Boolean.",31,null],[13,"String","","String.",31,null],[13,"Array","","Array of unknown size.",31,null],[13,"FixedBytes","","Vector of bytes with fixed size.",31,null],[13,"FixedArray","","Array with fixed size.",31,null],[3,"Reader","","Used to convert param type represented as a string to rust structure.",null,null],[0,"token","parables_testing::prelude::ethabi","ABI param and parsing for it.",null,null],[8,"Tokenizer","parables_testing::prelude::ethabi::token","This trait should be used to parse string values as tokens.",null,null],[11,"tokenize","","Tries to parse a string as a token of given type.",32,{"inputs":[{"name":"paramtype"},{"name":"str"}],"output":{"generics":["token","error"],"name":"result"}}],[11,"tokenize_fixed_array","","Tries to parse a value as a vector of tokens of fixed size.",32,{"inputs":[{"name":"str"},{"name":"paramtype"},{"name":"usize"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"tokenize_array","","Tries to parse a value as a vector of tokens.",32,{"inputs":[{"name":"str"},{"name":"paramtype"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"tokenize_address","","Tries to parse a value as an address.",32,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"tokenize_string","","Tries to parse a value as a string.",32,{"inputs":[{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[10,"tokenize_bool","","Tries to parse a value as a bool.",32,{"inputs":[{"name":"str"}],"output":{"generics":["bool","error"],"name":"result"}}],[10,"tokenize_bytes","","Tries to parse a value as bytes.",32,{"inputs":[{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"tokenize_fixed_bytes","","Tries to parse a value as bytes.",32,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["vec","error"],"name":"result"}}],[10,"tokenize_uint","","Tries to parse a value as unsigned integer.",32,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[10,"tokenize_int","","Tries to parse a value as signed integer.",32,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[3,"LenientTokenizer","","Tries to parse string as a token. Does not require string to clearly represent the value.",null,null],[4,"Token","","Ethereum ABI params.",null,null],[13,"Address","","Address.",33,null],[13,"FixedBytes","","Vector of bytes with known size.",33,null],[13,"Bytes","","Vector of bytes of unknown size.",33,null],[13,"Int","","Signed integer.",33,null],[13,"Uint","","Unisnged integer.",33,null],[13,"Bool","","Boolean value.",33,null],[13,"String","","String.",33,null],[13,"FixedArray","","Array with known size.",33,null],[13,"Array","","Array of params with unknown size.",33,null],[3,"StrictTokenizer","","Tries to parse string as a token. Require string to clearly represent the value.",null,null],[6,"Address","parables_testing::prelude::ethabi","ABI address.",null,null],[6,"FixedBytes","","ABI fixed bytes.",null,null],[6,"Bytes","","ABI bytes.",null,null],[6,"Int","","ABI signed integer.",null,null],[6,"Uint","","ABI unsigned integer.",null,null],[6,"Hash","","Commonly used FixedBytes of size 32",null,null],[8,"ContractFunction","","Contract functions generated by ethabi-derive",null,null],[16,"Output","","Output types of the contract function",34,null],[10,"encoded","","Encodes the input for the contract function",34,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[10,"output","","Decodes the given bytes output for the contract function",34,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"generics":["error"],"name":"result"}}],[3,"Contract","","API building calls to contracts ABI.",null,null],[12,"constructor","","Contract constructor.",35,null],[12,"functions","","Contract functions.",35,null],[12,"events","","Contract events.",35,null],[12,"fallback","","Contract has fallback function.",35,null],[3,"RawTopicFilter","","Raw topic filter.",null,null],[12,"topic0","","Topic.",36,null],[12,"topic1","","Topic.",36,null],[12,"topic2","","Topic.",36,null],[5,"decode","","Decodes ABI compliant vector of bytes into vector of tokens described by types param.",null,null],[5,"encode","","Encodes vector of tokens into ABI compliant vector of bytes.",null,null],[3,"Event","","Contract event.",null,null],[12,"name","","Event name.",37,null],[12,"inputs","","Event input.",37,null],[12,"anonymous","","If anonymous, event cannot be found using `from` filter.",37,null],[3,"Constructor","","Contract constructor specification.",null,null],[12,"inputs","","Constructor input.",38,null],[3,"Error","","The Error type.",null,null],[12,"0","","The kind of the error.",39,null],[3,"TopicFilter","","Topic filter.",null,null],[12,"topic0","","Usually (for not-anonymous transactions) the first topic is event signature.",40,null],[12,"topic1","","Second topic.",40,null],[12,"topic2","","Third topic.",40,null],[12,"topic3","","Fourth topic.",40,null],[8,"LogFilter","","Common filtering functions that are available for any event.",null,null],[10,"wildcard_filter","","Match any log parameters.",41,{"inputs":[{"name":"self"}],"output":{"name":"topicfilter"}}],[3,"Log","","Decoded log.",null,null],[12,"params","","Log params.",42,null],[4,"Topic","","Acceptable topic possibilities.",null,null],[13,"Any","","Match any.",43,null],[13,"OneOf","","Match any of the hashes.",43,null],[13,"This","","Match only this hash.",43,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["error"],"name":"result"}}],[3,"Events","","Contract events interator.",null,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ParseLog","","trait common to things (events) that have an associated `Log` type that can be parsed from a `RawLog`",null,null],[16,"Log","","the associated `Log` type that can be parsed from a `RawLog` by calling `parse_log`",45,null],[10,"parse_log","","parse the associated `Log` type from a `RawLog`",45,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"generics":["error"],"name":"result"}}],[3,"Function","","Contract function specification.",null,null],[12,"name","","Function name.",46,null],[12,"inputs","","Function input.",46,null],[12,"outputs","","Function output.",46,null],[12,"constant","","Constant function.",46,null],[3,"LogParam","","Decoded log param.",null,null],[12,"name","","Decoded log name.",47,null],[12,"value","","Decoded log value.",47,null],[3,"Param","","Function param.",null,null],[12,"name","","Param name.",48,null],[12,"kind","","Param type.",48,null],[3,"EventParam","","Event param specification.",null,null],[12,"name","","Param name.",49,null],[12,"kind","","Param type.",49,null],[12,"indexed","","Indexed flag. If true, param is used to build block bloom.",49,null],[3,"Functions","","Contract functions interator.",null,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",50,null],[13,"SerdeJson","","",50,null],[13,"ParseInt","","",50,null],[13,"Utf8","","",50,null],[13,"Hex","","",50,null],[13,"InvalidName","","",50,null],[13,"InvalidData","","",50,null],[3,"RawLog","","Ethereum log.",null,null],[12,"topics","","Indexed event params are represented as log topics.",51,null],[12,"data","","Others are just plain data.",51,null],[3,"Spec","parables_testing::prelude","Parameters for a block chain; includes both those intrinsic to the design of the chain and those to be interpreted by the active chain engine.",null,null],[12,"name","","User friendly spec name",52,null],[12,"engine","","What engine are we using for this?",52,null],[12,"data_dir","","Name of the subdir inside the main data dir to use for chain data and settings.",52,null],[12,"nodes","","Known nodes on the network in enode format.",52,null],[12,"parent_hash","","The genesis block's parent hash field.",52,null],[12,"author","","The genesis block's author field.",52,null],[12,"difficulty","","The genesis block's difficulty field.",52,null],[12,"gas_limit","","The genesis block's gas limit field.",52,null],[12,"gas_used","","The genesis block's gas used field.",52,null],[12,"timestamp","","The genesis block's timestamp field.",52,null],[12,"transactions_root","","Transactions root of the genesis block. Should be KECCAK_NULL_RLP.",52,null],[12,"receipts_root","","Receipts root of the genesis block. Should be KECCAK_NULL_RLP.",52,null],[12,"extra_data","","The genesis block's extra data field.",52,null],[12,"seal_rlp","","Each seal field, expressed as RLP, concatenated.",52,null],[12,"hardcoded_sync","","Hardcoded synchronization. Allows the light client to immediately jump to a specific block.",52,null],[6,"Result","","",null,null],[0,"reporter","parables_testing","",null,null],[3,"Account","parables_testing::reporter","",null,null],[3,"StdoutReporter","","A components that prints test results.",null,null],[3,"CollectingReporter","","A reporter that doesn't report anything.",null,null],[8,"Reporter","","",null,null],[10,"report","","Report a single result.",53,{"inputs":[{"name":"self"},{"name":"testresult"}],"output":{"generics":["error"],"name":"result"}}],[10,"report_skipped","","Report that a number of tests have been skipped.",53,{"inputs":[{"name":"self"},{"name":"test"}],"output":{"generics":["error"],"name":"result"}}],[10,"close","","Close the reporter.",53,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",54,{"inputs":[],"output":{"name":"account"}}],[11,"new","","",55,{"inputs":[],"output":{"name":"self"}}],[11,"report","","",55,{"inputs":[{"name":"self"},{"name":"testresult"}],"output":{"generics":["error"],"name":"result"}}],[11,"report_skipped","","",55,{"inputs":[{"name":"self"},{"name":"test"}],"output":{"generics":["error"],"name":"result"}}],[11,"close","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","",56,{"inputs":[],"output":{"name":"self"}}],[11,"take_results","","Take all collected results.",56,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"report","","",56,{"inputs":[{"name":"self"},{"name":"testresult"}],"output":{"generics":["error"],"name":"result"}}],[11,"report_skipped","","",56,{"inputs":[{"name":"self"},{"name":"test"}],"output":{"generics":["error"],"name":"result"}}],[11,"close","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[0,"snapshot","parables_testing","",null,null],[3,"Snapshot","parables_testing::snapshot","A managed instance that can be shared by cloning across threads.",null,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Snapshot value.",57,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get","","Create a clone of the underlying value and return it.",57,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[0,"source_map","parables_testing","",null,null],[3,"Mapping","parables_testing::source_map","",null,null],[12,"start","","",58,null],[12,"length","","",58,null],[12,"file_index","","",58,null],[12,"operation","","",58,null],[3,"SourceMap","","A parsed source map.",null,null],[4,"Operation","","",null,null],[13,"None","","",59,null],[13,"Input","","",59,null],[13,"Output","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"operation"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"operation"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"mapping"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"mapping"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"mapping"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"sourcemap"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"sourcemap"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"sourcemap"}],"output":{"name":"bool"}}],[11,"parse","","Parse the given source map.",60,{"inputs":[{"name":"str"}],"output":{"generics":["sourcemap","error"],"name":"result"}}],[11,"find_mapping","","Find the mapping for a given program counter.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["mapping"],"name":"option"}}],[0,"test_runner","parables_testing","Provides a simple test scaffolding for running tests in parallel.",null,null],[3,"TestRunner","parables_testing::test_runner","A scaffolding that runs tests very efficiently.",null,null],[3,"Test","","A single test.",null,null],[3,"PanicInfo","","Information about a panic.",null,null],[3,"TestResult","","The result from a single test.",null,null],[4,"Outcome","","The outcome of a single test.",null,null],[13,"Failed","","Contains information about the failed outcome.",61,null],[13,"Errored","","An error was raised.",61,null],[13,"Ok","","Only indicates that the test was successful.",61,null],[8,"IntoResult","","Convert into a result.",null,null],[10,"into_result","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[8,"TestEntry","","The entrypoint of a test.",null,null],[10,"run","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Access the name of the test.",65,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"panicinfo"}}],[11,"default","","",66,{"inputs":[],"output":{"name":"panicinfo"}}],[11,"hash","","",66,null],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"panicinfo"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"panicinfo"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"outcome"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"outcome"}],"output":{"name":"bool"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Access the name of the test results.",67,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"outcome","","Access the outcome of the test.",67,{"inputs":[{"name":"self"}],"output":{"name":"outcome"}}],[11,"duration","","Access the duration of the test.",67,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Build a new test runner.",64,{"inputs":[],"output":{"name":"self"}}],[11,"test","","",64,{"inputs":[{"name":"self"},{"name":"n"},{"name":"f"}],"output":null}],[11,"run","","Run by reading filters from argv.",64,{"inputs":[{"name":"self"},{"name":"reporter"}],"output":{"generics":["error"],"name":"result"}}],[11,"run_with_filters","","Run all registered tests, while applying the given filter on their name.",64,{"inputs":[{"name":"self"},{"name":"f"},{"name":"reporter"}],"output":{"generics":["error"],"name":"result"}}],[0,"wei","parables_testing","",null,null],[5,"from_ether","parables_testing::wei","Convert ether to wei.",null,{"inputs":[{"name":"t"}],"output":{"name":"u256"}}],[5,"from_finney","","Convert finney to wei.",null,{"inputs":[{"name":"t"}],"output":{"name":"u256"}}],[5,"from_szabo","","Convert szabo to wei.",null,{"inputs":[{"name":"t"}],"output":{"name":"u256"}}],[14,"prop_assert","parables_testing","Similar to `assert!` from std, but returns a test failure instead of panicking if the condition fails.",null,null],[14,"prop_assume","","Rejects the test input if assumptions are not met.",null,null],[14,"prop_assert_ne","","Similar to `assert_ne!` from std, but returns a test failure instead of panicking if the condition fails.",null,null],[14,"prop_compose","","Convenience to define functions which produce new strategies.",null,null],[14,"prop_assert_eq","","Similar to `assert_eq!` from std, but returns a test failure instead of panicking if the condition fails.",null,null],[14,"proptest","","Easily define `proptest` tests.",null,null],[14,"prop_oneof","","Produce a strategy which picks one of the listed choices.",null,null],[14,"contracts","","Include the generated contracts directory.",null,null],[14,"pt","","Helper macro for proptest! to build a closure suitable for passing in to `TestRunner::run`.",null,null],[14,"wei","","Convert the given argument into wei.",null,null],[11,"from","parables_testing::error","",12,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"next","parables_testing::prelude::ethabi","",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","parables_testing::prelude::ethabi::token","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","parables_testing::prelude::ethabi","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","parables_testing::prelude::ethabi::param_type","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","parables_testing::prelude::ethabi","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",43,{"inputs":[{"name":"vec"}],"output":{"name":"topic"}}],[11,"from","","",39,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",50,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"from","","",39,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"from","","",39,{"inputs":[{"name":"parseinterror"}],"output":{"name":"error"}}],[11,"from","","",50,{"inputs":[{"name":"string"}],"output":{"name":"errorkind"}}],[11,"from","","",39,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"from","","",39,{"inputs":[{"name":"string"}],"output":{"name":"error"}}],[11,"from","","",39,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",43,{"inputs":[{"name":"option"}],"output":{"name":"topic"}}],[11,"from","","",50,{"inputs":[{"name":"str"}],"output":{"name":"errorkind"}}],[11,"from","","",39,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"error"}}],[11,"from","","",51,null],[11,"from","","",43,{"inputs":[{"name":"t"}],"output":{"name":"topic"}}],[11,"new","","",39,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",39,null],[11,"with_chain","","",39,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","",39,null],[11,"iter","","",39,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",39,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"backtrace","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"extract_backtrace","","",39,{"inputs":[{"name":"error"}],"output":{"generics":["internalbacktrace"],"name":"option"}}],[11,"default","","",40,{"inputs":[],"output":{"name":"topicfilter"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"rawtopicfilter"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"topic"}}],[11,"tokenize_address","parables_testing::prelude::ethabi::token","",70,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"tokenize_string","","",70,{"inputs":[{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"tokenize_bool","","",70,{"inputs":[{"name":"str"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"tokenize_bytes","","",70,{"inputs":[{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"tokenize_fixed_bytes","","",70,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"tokenize_uint","","",70,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"tokenize_int","","",70,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"tokenize_address","","",71,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"tokenize_string","","",71,{"inputs":[{"name":"str"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"tokenize_bool","","",71,{"inputs":[{"name":"str"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"tokenize_bytes","","",71,{"inputs":[{"name":"str"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"tokenize_fixed_bytes","","",71,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"tokenize_uint","","",71,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"tokenize_int","","",71,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","parables_testing::prelude::ethabi","",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"topic"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"topic"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"logparam"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"logparam"}],"output":{"name":"bool"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"constructor"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"constructor"}],"output":{"name":"bool"}}],[11,"eq","parables_testing::prelude::ethabi::token","",33,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eq","parables_testing::prelude::ethabi","",42,{"inputs":[{"name":"self"},{"name":"log"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"log"}],"output":{"name":"bool"}}],[11,"eq","parables_testing::prelude::ethabi::param_type","",30,{"inputs":[{"name":"self"},{"name":"parammodifier"}],"output":{"name":"bool"}}],[11,"eq","parables_testing::prelude::ethabi","",46,{"inputs":[{"name":"self"},{"name":"function"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"function"}],"output":{"name":"bool"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"rawtopicfilter"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"rawtopicfilter"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"param"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"param"}],"output":{"name":"bool"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"contract"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"contract"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"eventparam"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"eventparam"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"topicfilter"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"topicfilter"}],"output":{"name":"bool"}}],[11,"eq","parables_testing::prelude::ethabi::param_type","",31,{"inputs":[{"name":"self"},{"name":"paramtype"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"paramtype"}],"output":{"name":"bool"}}],[11,"clone","parables_testing::prelude::ethabi","",46,{"inputs":[{"name":"self"}],"output":{"name":"function"}}],[11,"clone","parables_testing::prelude::ethabi::param_type","",30,{"inputs":[{"name":"self"}],"output":{"name":"parammodifier"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"paramtype"}}],[11,"clone","parables_testing::prelude::ethabi","",35,{"inputs":[{"name":"self"}],"output":{"name":"contract"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"constructor"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"eventparam"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"param"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","parables_testing::prelude::ethabi::token","",33,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","parables_testing::prelude::ethabi::param_type","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","parables_testing::prelude::ethabi","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","parables_testing::prelude::ethabi::token","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","parables_testing::prelude::ethabi","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","parables_testing::prelude::ethabi::param_type","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","parables_testing::prelude::ethabi","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"into","","",43,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",35,{"inputs":[{"name":"d"}],"output":{"generics":["contract"],"name":"result"}}],[11,"deserialize","","",49,{"inputs":[{"name":"__d"}],"output":{"generics":["eventparam"],"name":"result"}}],[11,"deserialize","","",46,{"inputs":[{"name":"__d"}],"output":{"generics":["function"],"name":"result"}}],[11,"deserialize","","",48,{"inputs":[{"name":"__d"}],"output":{"generics":["param"],"name":"result"}}],[11,"deserialize","","",37,{"inputs":[{"name":"__d"}],"output":{"generics":["event"],"name":"result"}}],[11,"deserialize","parables_testing::prelude::ethabi::param_type","",31,{"inputs":[{"name":"d"}],"output":{"generics":["paramtype"],"name":"result"}}],[11,"deserialize","parables_testing::prelude::ethabi","",38,{"inputs":[{"name":"__d"}],"output":{"generics":["constructor"],"name":"result"}}],[11,"serialize","","",43,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",40,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"write","parables_testing::prelude::ethabi::param_type","Returns string which is a formatted represenation of param.",72,{"inputs":[{"name":"paramtype"}],"output":{"name":"string"}}],[11,"read","","Converts string to param type.",73,{"inputs":[{"name":"str"}],"output":{"generics":["paramtype","error"],"name":"result"}}],[11,"type_check","parables_testing::prelude::ethabi::token","Check whether the type of the token matches the given parameter type.",33,{"inputs":[{"name":"self"},{"name":"paramtype"}],"output":{"name":"bool"}}],[11,"to_address","","Converts token to...",33,{"inputs":[{"name":"self"}],"output":{"generics":["h160"],"name":"option"}}],[11,"to_fixed_bytes","","Converts token to...",33,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"to_bytes","","Converts token to...",33,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"to_int","","Converts token to...",33,{"inputs":[{"name":"self"}],"output":{"generics":["u256"],"name":"option"}}],[11,"to_uint","","Converts token to...",33,{"inputs":[{"name":"self"}],"output":{"generics":["u256"],"name":"option"}}],[11,"to_bool","","Converts token to...",33,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"to_string","","Converts token to...",33,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"to_fixed_array","","Converts token to...",33,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"to_array","","Converts token to...",33,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"types_check","","Check if all the types of the tokens match the given parameter types.",33,null],[11,"load","parables_testing::prelude::ethabi","Loads contract from json.",35,{"inputs":[{"name":"t"}],"output":{"generics":["contract","error"],"name":"result"}}],[11,"constructor","","Creates constructor call builder.",35,{"inputs":[{"name":"self"}],"output":{"generics":["constructor"],"name":"option"}}],[11,"function","","Creates function call builder.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["function","error"],"name":"result"}}],[11,"event","","Creates event decoder.",35,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["event","error"],"name":"result"}}],[11,"functions","","Iterate over all functions of the contract in arbitrary order.",35,{"inputs":[{"name":"self"}],"output":{"name":"functions"}}],[11,"events","","Iterate over all events of the contract in arbitrary order.",35,{"inputs":[{"name":"self"}],"output":{"name":"events"}}],[11,"fallback","","Returns true if contract has fallback",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"signature","","Event signature",37,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"filter","","Creates topic filter",37,{"inputs":[{"name":"self"},{"name":"rawtopicfilter"}],"output":{"generics":["topicfilter","error"],"name":"result"}}],[11,"parse_log","","Parses `RawLog` and retrieves all log params from it.",37,{"inputs":[{"name":"self"},{"name":"rawlog"}],"output":{"generics":["log","error"],"name":"result"}}],[11,"encode_input","","Prepares ABI constructor call with given input params.",38,null],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",39,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",39,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",39,{"inputs":[{"generics":["error"],"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",39,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",39,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",39,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",39,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","A short description of the error. This method is identical to `Error::description()`",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"map","","Map",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"topic"}}],[11,"encode_input","","Prepares ABI function call with given input params.",46,null],[11,"decode_output","","Parses the ABI function output to list of tokens.",46,null],[11,"description","","A string describing the error kind.",50,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"state_root","parables_testing::prelude","Return the state root for the genesis state, memoising accordingly.",52,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[11,"params","","Get common blockchain parameters.",52,{"inputs":[{"name":"self"}],"output":{"name":"commonparams"}}],[11,"nodes","","Get the known knodes of the network in enode format.",52,null],[11,"network_id","","Get the configured Network ID.",52,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"chain_id","","Get the chain ID used for signing.",52,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"subprotocol_name","","Get the configured subprotocol name.",52,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fork_block","","Get the configured network fork block.",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"genesis_header","","Get the header of the genesis block.",52,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"genesis_block","","Compose the genesis block for this chain.",52,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"overwrite_genesis_params","","Overwrite the genesis components.",52,null],[11,"set_genesis_state","","Alter the value of the genesis state.",52,{"inputs":[{"name":"self"},{"name":"podstate"}],"output":{"generics":["error"],"name":"result"}}],[11,"is_state_root_valid","","Returns `false` if the memoized state root is invalid. `true` otherwise.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ensure_db_good","","Ensure that the given state DB has the trie nodes in for the genesis state.",52,{"inputs":[{"name":"self"},{"name":"t"},{"name":"factories"}],"output":{"generics":["error"],"name":"result"}}],[11,"load_machine","","Loads just the state machine from a json file.",52,{"inputs":[{"name":"r"}],"output":{"generics":["ethereummachine","string"],"name":"result"}}],[11,"load","","Loads spec from json file. Provide factories for executing contracts and ensuring storage goes to the right place.",52,{"inputs":[{"name":"t"},{"name":"r"}],"output":{"generics":["spec","string"],"name":"result"}}],[11,"genesis_epoch_data","","initialize genesis epoch data, using in-memory database for constructor.",52,{"inputs":[{"name":"self"}],"output":{"generics":["vec","string"],"name":"result"}}],[11,"new_instant","","Create a new Spec with InstantSeal consensus which does internal sealing (not requiring work).",52,{"inputs":[],"output":{"name":"spec"}}],[11,"new_test","","Create a new Spec which conforms to the Frontier-era Morden chain except that it's a NullEngine consensus.",52,{"inputs":[],"output":{"name":"spec"}}],[11,"new_test_machine","","Create the EthereumMachine corresponding to Spec::new_test.",52,{"inputs":[],"output":{"name":"ethereummachine"}}],[11,"new_test_with_reward","","Create a new Spec which conforms to the Frontier-era Morden chain except that it's a NullEngine consensus with applying reward on block close.",52,{"inputs":[],"output":{"name":"spec"}}],[11,"new_null","","Create a new Spec which is a NullEngine consensus with a premine of address whose secret is keccak('').",52,{"inputs":[],"output":{"name":"spec"}}],[11,"new_test_constructor","","Create a new Spec which constructs a contract at address 5 with storage at 0 equal to 1.",52,{"inputs":[],"output":{"name":"spec"}}],[11,"new_test_round","","Create a new Spec with AuthorityRound consensus which does internal sealing (not requiring work). Accounts with secrets keccak(\"0\") and keccak(\"1\") are the validators.",52,{"inputs":[],"output":{"name":"spec"}}],[11,"new_test_round_empty_steps","","Create a new Spec with AuthorityRound consensus which does internal sealing (not requiring work) with empty step messages enabled. Accounts with secrets keccak(\"0\") and keccak(\"1\") are the validators.",52,{"inputs":[],"output":{"name":"spec"}}],[11,"new_test_round_block_reward_contract","","Create a new Spec with AuthorityRound consensus (with empty steps) using a block reward contract. The contract source code can be found at: https://github.com/parity-contracts/block-reward/blob/daf7d44383b6cdb11cb6b953b018648e2b027cfb/contracts/ExampleBlockReward.sol",52,{"inputs":[],"output":{"name":"spec"}}],[11,"new_test_tendermint","","Create a new Spec with Tendermint consensus which does internal sealing (not requiring work). Account keccak(\"0\") and keccak(\"1\") are a authorities.",52,{"inputs":[],"output":{"name":"spec"}}],[11,"new_validator_safe_contract","","TestList.sol used in both specs: https://github.com/paritytech/contracts/pull/30/files Accounts with secrets keccak(\"0\") and keccak(\"1\") are initially the validators. Create a new Spec with BasicAuthority which uses a contract at address 5 to determine the current validators using `getValidators`. Second validator can be removed with \"0xbfc708a000000000000000000000000082a978b3f5962a5b0957d9ee9eef472ee55b42f1\" and added back in using \"0x4d238c8e00000000000000000000000082a978b3f5962a5b0957d9ee9eef472ee55b42f1\".",52,{"inputs":[],"output":{"name":"spec"}}],[11,"new_validator_contract","","The same as the `safeContract`, but allows reporting and uses AuthorityRound. Account is marked with `reportBenign` it can be checked as disliked with \"0xd8f2e0bf\". Validator can be removed with `reportMalicious`.",52,{"inputs":[],"output":{"name":"spec"}}],[11,"new_validator_multi","","Create a new Spec with BasicAuthority which uses multiple validator sets changing with height. Account with secrets keccak(\"0\") is the validator for block 1 and with keccak(\"1\") onwards.",52,{"inputs":[],"output":{"name":"spec"}}]],"paths":[[3,"ContractContext"],[8,"ContractFunction"],[8,"LogFilter"],[8,"ParseLog"],[8,"Constructor"],[8,"Vm"],[3,"Account"],[4,"Error"],[8,"Digestable"],[3,"Signer"],[3,"Signature"],[3,"Call"],[4,"Error"],[4,"CallError"],[8,"ResultCallErrorExt"],[8,"ResultExt"],[3,"CallResult"],[3,"CreateResult"],[3,"CallOutput"],[3,"Evm"],[3,"LogDrainer"],[8,"LedgerState"],[3,"Ledger"],[3,"Source"],[4,"Push"],[4,"Section"],[3,"Linker"],[3,"Decoder"],[3,"BadHex"],[3,"HexDecode"],[4,"ParamModifier"],[4,"ParamType"],[8,"Tokenizer"],[4,"Token"],[8,"ContractFunction"],[3,"Contract"],[3,"RawTopicFilter"],[3,"Event"],[3,"Constructor"],[3,"Error"],[3,"TopicFilter"],[8,"LogFilter"],[3,"Log"],[4,"Topic"],[8,"ResultExt"],[8,"ParseLog"],[3,"Function"],[3,"LogParam"],[3,"Param"],[3,"EventParam"],[4,"ErrorKind"],[3,"RawLog"],[3,"Spec"],[8,"Reporter"],[3,"Account"],[3,"StdoutReporter"],[3,"CollectingReporter"],[3,"Snapshot"],[3,"Mapping"],[4,"Operation"],[3,"SourceMap"],[4,"Outcome"],[8,"IntoResult"],[8,"TestEntry"],[3,"TestRunner"],[3,"Test"],[3,"PanicInfo"],[3,"TestResult"],[3,"Functions"],[3,"Events"],[3,"LenientTokenizer"],[3,"StrictTokenizer"],[3,"Writer"],[3,"Reader"]]};
searchIndex["parity_bytes"] = {"doc":"General bytes-related utilities.","items":[[3,"PrettySlice","parity_bytes","Slice pretty print helper",null,null],[4,"BytesRef","","A byte collection reference that can either be a slice or a vector",null,null],[13,"Flexible","","This is a reference to a vector",0,null],[13,"Fixed","","This is a reference to a slice",0,null],[6,"Bytes","","Vector of bytes.",null,null],[8,"ToPretty","","Trait to allow a type to be pretty-printed in `format!`, where unoverridable defaults cannot otherwise be avoided.",null,null],[10,"pretty","","Convert a type into a derivative form in order to make `format!` print it prettily.",1,{"inputs":[{"name":"self"}],"output":{"name":"prettyslice"}}],[11,"to_hex","","Express the object as a hex string.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","Writes given `input` to this `BytesRef` starting at `offset`. Returns number of bytes written to the ref. NOTE can return number greater then `input.len()` in case flexible vector had to be extended.",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null]],"paths":[[4,"BytesRef"],[8,"ToPretty"],[3,"PrettySlice"]]};
searchIndex["parity_crypto"] = {"doc":"Crypto utils used ethstore and network.","items":[[5,"derive_key_iterations","parity_crypto","",null,null],[5,"derive_mac","","",null,null],[5,"is_equal","","",null,null],[0,"aes","","",null,null],[5,"encrypt_128_ctr","parity_crypto::aes","Encrypt a message (CTR mode).",null,null],[5,"decrypt_128_ctr","","Decrypt a message (CTR mode).",null,null],[5,"decrypt_128_cbc","","Decrypt a message (CBC mode).",null,null],[0,"aes_gcm","parity_crypto","",null,null],[3,"Encryptor","parity_crypto::aes_gcm","AES GCM encryptor.",null,null],[3,"Decryptor","","AES GCM decryptor.",null,null],[11,"aes_128_gcm","","",0,null],[11,"aes_256_gcm","","",0,null],[11,"associate","","Optional associated data which is not encrypted but authenticated.",0,null],[11,"offset","","Optional offset value. Only the slice `[offset..]` will be encrypted.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"encrypt","","Please note that the pair (key, nonce) must never be reused. Using random nonces limits the number of messages encrypted with the same key to 2^32 (cf. [[1]])",0,null],[11,"aes_128_gcm","","",1,null],[11,"aes_256_gcm","","",1,null],[11,"associate","","Optional associated data which is not encrypted but authenticated.",1,null],[11,"offset","","Optional offset value. Only the slice `[offset..]` will be decrypted.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"decrypt","","",1,null],[0,"error","parity_crypto","",null,null],[3,"SymmError","parity_crypto::error","",null,null],[4,"Error","","",null,null],[13,"Scrypt","","",2,null],[13,"Symm","","",2,null],[4,"ScryptError","","",null,null],[13,"InvalidN","","",3,null],[13,"InvalidP","","",3,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"scrypterror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"symmerror"}],"output":{"name":"error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"unspecified"}],"output":{"name":"symmerror"}}],[11,"from","","",4,{"inputs":[{"name":"symmetricciphererror"}],"output":{"name":"symmerror"}}],[0,"scrypt","parity_crypto","",null,null],[5,"derive_key","parity_crypto::scrypt","",null,null],[0,"digest","parity_crypto","",null,null],[3,"Digest","parity_crypto::digest","The message digest.",null,null],[3,"Hasher","","Stateful digest computation.",null,null],[4,"Sha256","","",null,null],[4,"Sha512","","",null,null],[4,"Ripemd160","","",null,null],[5,"sha256","","Single-step sha256 digest computation.",null,null],[5,"sha512","","Single-step sha512 digest computation.",null,null],[5,"ripemd160","","Single-step ripemd160 digest computation.",null,null],[11,"deref","","",5,null],[11,"sha256","","",6,{"inputs":[],"output":{"generics":["sha256"],"name":"hasher"}}],[11,"sha512","","",6,{"inputs":[],"output":{"generics":["sha512"],"name":"hasher"}}],[11,"ripemd160","","",6,{"inputs":[],"output":{"generics":["ripemd160"],"name":"hasher"}}],[11,"update","","",6,null],[11,"finish","","",6,{"inputs":[{"name":"self"}],"output":{"name":"digest"}}],[0,"hmac","parity_crypto","",null,null],[3,"Signature","parity_crypto::hmac","HMAC signature.",null,null],[3,"SigKey","","HMAC signing key.",null,null],[3,"Signer","","Stateful HMAC computation.",null,null],[3,"VerifyKey","","HMAC signature verification key.",null,null],[5,"sign","","Compute HMAC signature of `data`.",null,null],[5,"verify","","Verify HMAC signature of `data`.",null,null],[11,"deref","","",7,null],[11,"sha256","","",8,null],[11,"sha512","","",8,null],[11,"with","","",9,{"inputs":[{"name":"sigkey"}],"output":{"name":"signer"}}],[11,"update","","",9,null],[11,"sign","","",9,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"sha256","","",10,null],[11,"sha512","","",10,null],[0,"pbkdf2","parity_crypto","",null,null],[3,"Salt","parity_crypto::pbkdf2","",null,null],[12,"0","","",11,null],[3,"Secret","","",null,null],[12,"0","","",12,null],[5,"sha256","","",null,null],[5,"sha512","","",null,null],[17,"KEY_LENGTH","parity_crypto","",null,null],[17,"KEY_ITERATIONS","","",null,null],[17,"KEY_LENGTH_AES","","",null,null],[17,"DEFAULT_MAC","","Default authenticated data to use (in RPC).",null,null],[8,"Keccak256","","",null,null],[10,"keccak256","","",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"Encryptor"],[3,"Decryptor"],[4,"Error"],[4,"ScryptError"],[3,"SymmError"],[3,"Digest"],[3,"Hasher"],[3,"Signature"],[3,"SigKey"],[3,"Signer"],[3,"VerifyKey"],[3,"Salt"],[3,"Secret"],[8,"Keccak256"]]};
searchIndex["parity_machine"] = {"doc":"Generalization of a state machine for a consensus engine. This will define traits for the header, block, and state of a blockchain.","items":[[8,"Header","parity_machine","A header. This contains important metadata about the block, as well as a \"seal\" that indicates validity to a consensus engine.",null,null],[10,"bare_hash","","Cryptographic hash of the header, excluding the seal.",0,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[10,"hash","","Cryptographic hash of the header, including the seal.",0,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[10,"seal","","Get a reference to the seal fields.",0,null],[10,"author","","The author of the header.",0,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[10,"number","","The number of the header.",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"ScoredHeader","","A header with an associated score (difficulty in PoW terms)",null,null],[16,"Value","","",1,null],[10,"score","","Get the score of this header.",1,null],[10,"set_score","","Set the score of this header.",1,null],[8,"TotalScoredHeader","","A header with associated total score.",null,null],[16,"Value","","",2,null],[10,"total_score","","Get the total score of this header.",2,null],[8,"FinalizableHeader","","A header with finalized information.",null,null],[10,"is_finalized","","Get whether this header is considered finalized, so that it will never be replaced in reorganization.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"WithMetadataHeader","","A header with metadata information.",null,null],[10,"metadata","","Get the current header metadata.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"LiveBlock","","A \"live\" block is one which is in the process of the transition. The state of this block can be mutated by arbitrary rules of the state transition function.",null,null],[16,"Header","","The block header type;",5,null],[10,"header","","Get a reference to the header.",5,null],[10,"uncles","","Get a reference to the uncle headers. If the block type doesn't support uncles, return the empty slice.",5,null],[8,"Transactions","","Trait for blocks which have a transaction type.",null,null],[16,"Transaction","","The transaction type.",6,null],[10,"transactions","","Get a reference to the transactions in this block.",6,null],[8,"Finalizable","","Trait for blocks which have finalized information.",null,null],[10,"is_finalized","","Get whether the block is finalized.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mark_finalized","","Mark the block as finalized.",7,{"inputs":[{"name":"self"}],"output":null}],[8,"WithMetadata","","A state machine with block metadata.",null,null],[10,"metadata","","Get the current live block metadata.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"set_metadata","","Set the current live block metadata.",8,{"inputs":[{"name":"self"},{"generics":["vec"],"name":"option"}],"output":null}],[8,"Machine","","Generalization of types surrounding blockchain-suitable state machines.",null,null],[16,"Header","","The block header type.",9,null],[16,"LiveBlock","","The live block type.",9,null],[16,"ExtendedHeader","","Block header with metadata information.",9,null],[16,"EngineClient","","A handle to a blockchain client for this machine.",9,null],[16,"AuxiliaryRequest","","A description of needed auxiliary data.",9,null],[16,"AncestryAction","","Actions taken on ancestry blocks when commiting a new block.",9,null],[16,"Error","","Errors which can occur when querying or interacting with the machine.",9,null],[8,"LocalizedMachine","","Machine-related types localized to a specific lifetime.",null,null],[16,"AuxiliaryData","","Definition of auxiliary data associated to a specific block.",10,null],[16,"StateContext","","A context providing access to the state in a controlled capacity. Generally also provides verifiable proofs.",10,null],[8,"WithBalances","","A state machine that uses balances.",null,null],[10,"balance","","Get the balance, in base units, associated with an account. Extracts data from the live block.",11,null],[10,"add_balance","","Increment the balance of an account in the state of the live block.",11,null]],"paths":[[8,"Header"],[8,"ScoredHeader"],[8,"TotalScoredHeader"],[8,"FinalizableHeader"],[8,"WithMetadataHeader"],[8,"LiveBlock"],[8,"Transactions"],[8,"Finalizable"],[8,"WithMetadata"],[8,"Machine"],[8,"LocalizedMachine"],[8,"WithBalances"]]};
searchIndex["parity_wasm"] = {"doc":"WebAssembly format library","items":[[5,"peek_size","parity_wasm","Returns size of the module in the provided stream",null,null],[0,"elements","","Elements of the WebAssembly binary format.",null,null],[3,"Module","parity_wasm::elements","WebAssembly module",null,null],[3,"FunctionSection","","Section with function signatures definition.",null,null],[3,"CodeSection","","Section with function bodies of the module.",null,null],[3,"MemorySection","","Section with table definition (currently only one entry is allowed).",null,null],[3,"DataSection","","Data entries definitions.",null,null],[3,"ImportSection","","Section of the imports definition.",null,null],[3,"ExportSection","","List of exports definition.",null,null],[3,"GlobalSection","","Globals definition section.",null,null],[3,"TypeSection","","Section with type declarations",null,null],[3,"ElementSection","","Element entries section.",null,null],[3,"TableSection","","Section with table definition (currently only one is allowed).",null,null],[3,"CustomSection","","Custom section",null,null],[3,"ImportEntry","","Import entry.",null,null],[3,"ResizableLimits","","Memory limits",null,null],[3,"MemoryType","","Memory entry.",null,null],[3,"TableType","","Table entry",null,null],[3,"GlobalType","","Global definition struct",null,null],[3,"ExportEntry","","Export entry.",null,null],[3,"GlobalEntry","","Global entry in the module.",null,null],[3,"VarUint32","","Unsigned variable-length integer, limited to 32 bits, represented by at most 5 bytes that may contain padding 0x80 bytes.",null,null],[3,"VarUint7","","7-bit unsigned integer, encoded in LEB128 (always 1 byte length)",null,null],[3,"Uint8","","8-bit unsigned integer, NOT encoded in LEB128; it's just a single byte.",null,null],[3,"VarUint1","","VarUint1, 1-bit value (0/1)",null,null],[3,"VarInt7","","7-bit signed integer, encoded in LEB128 (always 1 byte length)",null,null],[3,"Uint32","","32-bit unsigned integer, encoded in little endian",null,null],[3,"VarInt32","","32-bit signed integer, encoded in LEB128 (can be 1-5 bytes length)",null,null],[3,"VarInt64","","64-bit signed integer, encoded in LEB128 (can be 1-9 bytes length)",null,null],[3,"Uint64","","64-bit unsigned integer, encoded in little endian",null,null],[3,"VarUint64","","Unsigned variable-length integer, limited to 64 bits, represented by at most 9 bytes that may contain padding 0x80 bytes.",null,null],[3,"CountedList","","List for reading sequence of elements typed `T`, given they are preceded by length (serialized as VarUint32)",null,null],[3,"CountedWriter","","Helper struct to write payload which is preceded by it's own length in bytes.",null,null],[3,"CountedListWriter","","Helper struct to write series of `T` preceded by the length of the sequence serialized as VarUint32",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"FunctionType","","Function signature type.",null,null],[3,"Instructions","","List of instructions (usually inside a block section).",null,null],[3,"InitExpr","","Initialization expression.",null,null],[3,"Func","","Function signature (type reference)",null,null],[3,"FuncBody","","Function body definition.",null,null],[3,"Local","","Local definition inside the function body.",null,null],[3,"ElementSegment","","Entry in the element section.",null,null],[3,"DataSegment","","Data segment definition.",null,null],[3,"IndexMap","","A map from non-contiguous `u32` keys to values of type `T`, which is serialized and deserialized ascending order of the keys. Normally used for relative dense maps with occasional \"holes\", and stored as an array.",null,null],[3,"ModuleNameSection","","The name of this module.",null,null],[3,"FunctionNameSection","","The names of the functions in this module.",null,null],[3,"LocalNameSection","","The names of the local variables in this module's functions.",null,null],[3,"RelocSection","","Relocation information.",null,null],[3,"Unparsed","","Unparsed part of the module/section",null,null],[12,"0","","",1,null],[4,"ImportCountType","","Type of the import entry to count",null,null],[13,"Function","","Count functions",2,null],[13,"Global","","Count globals",2,null],[13,"Table","","Count tables",2,null],[13,"Memory","","Count memories",2,null],[4,"Section","","Section in the WebAssembly module.",null,null],[13,"Unparsed","","Section is unparsed.",3,null],[12,"id","parity_wasm::elements::Section","id of the unparsed section",3,null],[12,"payload","","raw bytes of the unparsed section",3,null],[13,"Custom","parity_wasm::elements","Custom section (`id=0`)",3,null],[13,"Type","","Types section",3,null],[13,"Import","","Import section",3,null],[13,"Function","","Function signatures section",3,null],[13,"Table","","Table definition section",3,null],[13,"Memory","","Memory definition section",3,null],[13,"Global","","Global entries section",3,null],[13,"Export","","Export definitions",3,null],[13,"Start","","Entry reference of the module",3,null],[13,"Element","","Elements section",3,null],[13,"Code","","Function bodies section",3,null],[13,"Data","","Data definition section",3,null],[13,"Name","","Name section.",3,null],[13,"Reloc","","Relocation section.",3,null],[4,"External","","External to local binding.",null,null],[13,"Function","","Binds to function with index.",4,null],[13,"Table","","Describes local table definition to be imported as.",4,null],[13,"Memory","","Describes local memory definition to be imported as.",4,null],[13,"Global","","Describes local global entry to be imported as.",4,null],[4,"Internal","","Internal reference of the exported entry.",null,null],[13,"Function","","Function reference.",5,null],[13,"Table","","Table reference.",5,null],[13,"Memory","","Memory reference.",5,null],[13,"Global","","Global reference.",5,null],[4,"Type","","Type definition in types section. Currently can be only of the function type.",null,null],[13,"Function","","Function type.",6,null],[4,"ValueType","","Value type.",null,null],[13,"I32","","32-bit signed integer",7,null],[13,"I64","","64-bit signed integer",7,null],[13,"F32","","32-bit float",7,null],[13,"F64","","64-bit float",7,null],[4,"BlockType","","Block type which is basically `ValueType` + NoResult (to define blocks that have no return type)",null,null],[13,"Value","","Value-type specified block type",8,null],[13,"NoResult","","No specified block type",8,null],[4,"TableElementType","","Table element type.",null,null],[13,"AnyFunc","","A reference to a function with any signature.",9,null],[4,"Instruction","","Instruction",null,null],[13,"Unreachable","","",10,null],[13,"Nop","","",10,null],[13,"Block","","",10,null],[13,"Loop","","",10,null],[13,"If","","",10,null],[13,"Else","","",10,null],[13,"End","","",10,null],[13,"Br","","",10,null],[13,"BrIf","","",10,null],[13,"BrTable","","",10,null],[13,"Return","","",10,null],[13,"Call","","",10,null],[13,"CallIndirect","","",10,null],[13,"Drop","","",10,null],[13,"Select","","",10,null],[13,"GetLocal","","",10,null],[13,"SetLocal","","",10,null],[13,"TeeLocal","","",10,null],[13,"GetGlobal","","",10,null],[13,"SetGlobal","","",10,null],[13,"I32Load","","",10,null],[13,"I64Load","","",10,null],[13,"F32Load","","",10,null],[13,"F64Load","","",10,null],[13,"I32Load8S","","",10,null],[13,"I32Load8U","","",10,null],[13,"I32Load16S","","",10,null],[13,"I32Load16U","","",10,null],[13,"I64Load8S","","",10,null],[13,"I64Load8U","","",10,null],[13,"I64Load16S","","",10,null],[13,"I64Load16U","","",10,null],[13,"I64Load32S","","",10,null],[13,"I64Load32U","","",10,null],[13,"I32Store","","",10,null],[13,"I64Store","","",10,null],[13,"F32Store","","",10,null],[13,"F64Store","","",10,null],[13,"I32Store8","","",10,null],[13,"I32Store16","","",10,null],[13,"I64Store8","","",10,null],[13,"I64Store16","","",10,null],[13,"I64Store32","","",10,null],[13,"CurrentMemory","","",10,null],[13,"GrowMemory","","",10,null],[13,"I32Const","","",10,null],[13,"I64Const","","",10,null],[13,"F32Const","","",10,null],[13,"F64Const","","",10,null],[13,"I32Eqz","","",10,null],[13,"I32Eq","","",10,null],[13,"I32Ne","","",10,null],[13,"I32LtS","","",10,null],[13,"I32LtU","","",10,null],[13,"I32GtS","","",10,null],[13,"I32GtU","","",10,null],[13,"I32LeS","","",10,null],[13,"I32LeU","","",10,null],[13,"I32GeS","","",10,null],[13,"I32GeU","","",10,null],[13,"I64Eqz","","",10,null],[13,"I64Eq","","",10,null],[13,"I64Ne","","",10,null],[13,"I64LtS","","",10,null],[13,"I64LtU","","",10,null],[13,"I64GtS","","",10,null],[13,"I64GtU","","",10,null],[13,"I64LeS","","",10,null],[13,"I64LeU","","",10,null],[13,"I64GeS","","",10,null],[13,"I64GeU","","",10,null],[13,"F32Eq","","",10,null],[13,"F32Ne","","",10,null],[13,"F32Lt","","",10,null],[13,"F32Gt","","",10,null],[13,"F32Le","","",10,null],[13,"F32Ge","","",10,null],[13,"F64Eq","","",10,null],[13,"F64Ne","","",10,null],[13,"F64Lt","","",10,null],[13,"F64Gt","","",10,null],[13,"F64Le","","",10,null],[13,"F64Ge","","",10,null],[13,"I32Clz","","",10,null],[13,"I32Ctz","","",10,null],[13,"I32Popcnt","","",10,null],[13,"I32Add","","",10,null],[13,"I32Sub","","",10,null],[13,"I32Mul","","",10,null],[13,"I32DivS","","",10,null],[13,"I32DivU","","",10,null],[13,"I32RemS","","",10,null],[13,"I32RemU","","",10,null],[13,"I32And","","",10,null],[13,"I32Or","","",10,null],[13,"I32Xor","","",10,null],[13,"I32Shl","","",10,null],[13,"I32ShrS","","",10,null],[13,"I32ShrU","","",10,null],[13,"I32Rotl","","",10,null],[13,"I32Rotr","","",10,null],[13,"I64Clz","","",10,null],[13,"I64Ctz","","",10,null],[13,"I64Popcnt","","",10,null],[13,"I64Add","","",10,null],[13,"I64Sub","","",10,null],[13,"I64Mul","","",10,null],[13,"I64DivS","","",10,null],[13,"I64DivU","","",10,null],[13,"I64RemS","","",10,null],[13,"I64RemU","","",10,null],[13,"I64And","","",10,null],[13,"I64Or","","",10,null],[13,"I64Xor","","",10,null],[13,"I64Shl","","",10,null],[13,"I64ShrS","","",10,null],[13,"I64ShrU","","",10,null],[13,"I64Rotl","","",10,null],[13,"I64Rotr","","",10,null],[13,"F32Abs","","",10,null],[13,"F32Neg","","",10,null],[13,"F32Ceil","","",10,null],[13,"F32Floor","","",10,null],[13,"F32Trunc","","",10,null],[13,"F32Nearest","","",10,null],[13,"F32Sqrt","","",10,null],[13,"F32Add","","",10,null],[13,"F32Sub","","",10,null],[13,"F32Mul","","",10,null],[13,"F32Div","","",10,null],[13,"F32Min","","",10,null],[13,"F32Max","","",10,null],[13,"F32Copysign","","",10,null],[13,"F64Abs","","",10,null],[13,"F64Neg","","",10,null],[13,"F64Ceil","","",10,null],[13,"F64Floor","","",10,null],[13,"F64Trunc","","",10,null],[13,"F64Nearest","","",10,null],[13,"F64Sqrt","","",10,null],[13,"F64Add","","",10,null],[13,"F64Sub","","",10,null],[13,"F64Mul","","",10,null],[13,"F64Div","","",10,null],[13,"F64Min","","",10,null],[13,"F64Max","","",10,null],[13,"F64Copysign","","",10,null],[13,"I32WrapI64","","",10,null],[13,"I32TruncSF32","","",10,null],[13,"I32TruncUF32","","",10,null],[13,"I32TruncSF64","","",10,null],[13,"I32TruncUF64","","",10,null],[13,"I64ExtendSI32","","",10,null],[13,"I64ExtendUI32","","",10,null],[13,"I64TruncSF32","","",10,null],[13,"I64TruncUF32","","",10,null],[13,"I64TruncSF64","","",10,null],[13,"I64TruncUF64","","",10,null],[13,"F32ConvertSI32","","",10,null],[13,"F32ConvertUI32","","",10,null],[13,"F32ConvertSI64","","",10,null],[13,"F32ConvertUI64","","",10,null],[13,"F32DemoteF64","","",10,null],[13,"F64ConvertSI32","","",10,null],[13,"F64ConvertUI32","","",10,null],[13,"F64ConvertSI64","","",10,null],[13,"F64ConvertUI64","","",10,null],[13,"F64PromoteF32","","",10,null],[13,"I32ReinterpretF32","","",10,null],[13,"I64ReinterpretF64","","",10,null],[13,"F32ReinterpretI32","","",10,null],[13,"F64ReinterpretI64","","",10,null],[4,"NameSection","","Debug name information.",null,null],[13,"Module","","Module name section.",11,null],[13,"Function","","Function name section.",11,null],[13,"Local","","Local name section.",11,null],[13,"Unparsed","","Name section is unparsed.",11,null],[12,"name_type","parity_wasm::elements::NameSection","The numeric identifier for this name section type.",11,null],[12,"name_payload","","The contents of this name section, unparsed.",11,null],[4,"RelocationEntry","parity_wasm::elements","Relocation entry.",null,null],[13,"FunctionIndexLeb","","Function index.",12,null],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,null],[12,"index","","Index of the function symbol in the symbol table.",12,null],[13,"TableIndexSleb","parity_wasm::elements","Function table index.",12,null],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,null],[12,"index","","Index of the function symbol in the symbol table.",12,null],[13,"TableIndexI32","parity_wasm::elements","Function table index.",12,null],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,null],[12,"index","","Index of the function symbol in the symbol table.",12,null],[13,"MemoryAddressLeb","parity_wasm::elements","Linear memory index.",12,null],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,null],[12,"index","","Index of the data symbol in the symbol table.",12,null],[12,"addend","","Addend to add to the address.",12,null],[13,"MemoryAddressSleb","parity_wasm::elements","Linear memory index.",12,null],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,null],[12,"index","","Index of the data symbol in the symbol table.",12,null],[12,"addend","","Addend to add to the address.",12,null],[13,"MemoryAddressI32","parity_wasm::elements","Linear memory index.",12,null],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,null],[12,"index","","Index of the data symbol in the symbol table.",12,null],[12,"addend","","Addend to add to the address.",12,null],[13,"TypeIndexLeb","parity_wasm::elements","Type table index.",12,null],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,null],[12,"index","","Index of the type used.",12,null],[13,"GlobalIndexLeb","parity_wasm::elements","Global index.",12,null],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,null],[12,"index","","Index of the global symbol in the symbol table.",12,null],[4,"Error","parity_wasm::elements","Deserialization/serialization error",null,null],[13,"UnexpectedEof","","Unexpected end of input",13,null],[13,"InvalidMagic","","Invalid magic",13,null],[13,"UnsupportedVersion","","Unsupported version",13,null],[13,"InconsistentLength","","Inconsistence between declared and actual length",13,null],[12,"expected","parity_wasm::elements::Error","Expected length of the definition",13,null],[12,"actual","","Actual length of the definition",13,null],[13,"Other","parity_wasm::elements","Other static error",13,null],[13,"HeapOther","","Other allocated error",13,null],[13,"UnknownValueType","","Invalid/unknown value type declaration",13,null],[13,"UnknownTableElementType","","Invalid/unknown table element type declaration",13,null],[13,"NonUtf8String","","Non-utf8 string",13,null],[13,"UnknownExternalKind","","Unknown external kind code",13,null],[13,"UnknownInternalKind","","Unknown internal kind code",13,null],[13,"UnknownOpcode","","Unknown opcode encountered",13,null],[13,"InvalidVarUint1","","Invalid VarUint1 value",13,null],[13,"InvalidVarInt32","","Invalid VarInt32 value",13,null],[13,"InvalidVarInt64","","Invalid VarInt64 value",13,null],[13,"InvalidVarUint32","","Invalid VarUint32 value",13,null],[13,"InvalidVarUint64","","Invalid VarUint64 value",13,null],[13,"InconsistentMetadata","","Inconsistent metadata",13,null],[13,"InvalidSectionId","","Invalid section id",13,null],[13,"SectionsOutOfOrder","","Sections are out of order",13,null],[13,"DuplicatedSections","","Duplicated sections",13,null],[13,"InvalidMemoryReference","","Invalid memory reference (should be 0)",13,null],[13,"InvalidTableReference","","Invalid table reference (should be 0)",13,null],[13,"UnknownFunctionForm","","Unknown function form (should be 0x60)",13,null],[13,"InvalidVarInt7","","Invalid varint7 (should be in -64..63 range)",13,null],[13,"InconsistentCode","","Number of function body entries and signatures does not match",13,null],[5,"peek_size","","Returns size of the module in the provided stream",null,null],[5,"deserialize_buffer","","Deserialize deserializable type from buffer.",null,null],[5,"serialize","","Create buffer with serialized value.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"deserialize_file","","Deserialize module from the file.",null,{"inputs":[{"name":"p"}],"output":{"generics":["module","error"],"name":"result"}}],[5,"serialize_to_file","","Serialize module to the file",null,{"inputs":[{"name":"p"},{"name":"module"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"varuint32"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"varuint32"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"varuint32"}],"output":{"name":"bool"}}],[11,"from","","",14,{"inputs":[{"name":"u32"}],"output":{"name":"varuint32"}}],[11,"from","","",14,{"inputs":[{"name":"usize"}],"output":{"name":"varuint32"}}],[11,"deserialize","","",14,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",14,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"varuint64"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"varuint64"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"varuint64"}],"output":{"name":"bool"}}],[11,"deserialize","","",15,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from","","",15,{"inputs":[{"name":"u64"}],"output":{"name":"varuint64"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"varuint7"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"varuint7"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"varuint7"}],"output":{"name":"bool"}}],[11,"from","","",16,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"deserialize","","",16,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",16,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"varint7"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"varint7"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"varint7"}],"output":{"name":"bool"}}],[11,"from","","",17,{"inputs":[{"name":"i8"}],"output":{"name":"varint7"}}],[11,"deserialize","","",17,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"uint8"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"uint8"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"uint8"}],"output":{"name":"bool"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"deserialize","","",18,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"varint32"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"varint32"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"varint32"}],"output":{"name":"bool"}}],[11,"from","","",19,{"inputs":[{"name":"i32"}],"output":{"name":"varint32"}}],[11,"deserialize","","",19,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",19,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"varint64"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"varint64"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"varint64"}],"output":{"name":"bool"}}],[11,"from","","",20,{"inputs":[{"name":"i64"}],"output":{"name":"varint64"}}],[11,"deserialize","","",20,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"uint32"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"uint32"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"uint32"}],"output":{"name":"bool"}}],[11,"deserialize","","",21,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",21,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from","","",21,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"uint64"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"uint64"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"uint64"}],"output":{"name":"bool"}}],[11,"deserialize","","",22,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",22,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from","","",22,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"varuint1"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"varuint1"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"varuint1"}],"output":{"name":"bool"}}],[11,"from","","",23,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"deserialize","","",23,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",23,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"countedlist"}}],[11,"into_inner","","Destroy counted list returing inner vector.",24,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",24,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","New counted writer on top of the given serial writer",25,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"done","","Finish counted writer routing, which writes accumulated length and actual payload.",25,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"countedlistwriter"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"module"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"importcounttype"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"importcounttype"}],"output":{"name":"bool"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"self"}}],[11,"new","","New module with sections",26,{"inputs":[{"generics":["section"],"name":"vec"}],"output":{"name":"self"}}],[11,"into_sections","","Destructure the module, yielding sections",26,{"inputs":[{"name":"self"}],"output":{"generics":["section"],"name":"vec"}}],[11,"version","","Version of module.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"sections","","Sections list. Each known section is optional and may appear at most once.",26,null],[11,"sections_mut","","Sections list (mutable) Each known section is optional and may appear at most once.",26,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"code_section","","Code section reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["codesection"],"name":"option"}}],[11,"code_section_mut","","Code section mutable reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["codesection"],"name":"option"}}],[11,"type_section","","Types section reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["typesection"],"name":"option"}}],[11,"type_section_mut","","Types section mutable reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["typesection"],"name":"option"}}],[11,"import_section","","Imports section reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["importsection"],"name":"option"}}],[11,"import_section_mut","","Imports section mutable reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["importsection"],"name":"option"}}],[11,"global_section","","Globals section reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["globalsection"],"name":"option"}}],[11,"global_section_mut","","Globals section mutable reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["globalsection"],"name":"option"}}],[11,"export_section","","Exports section reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["exportsection"],"name":"option"}}],[11,"export_section_mut","","Exports section mutable reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["exportsection"],"name":"option"}}],[11,"table_section","","Table section reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["tablesection"],"name":"option"}}],[11,"table_section_mut","","Table section mutable reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["tablesection"],"name":"option"}}],[11,"data_section","","Data section reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["datasection"],"name":"option"}}],[11,"data_section_mut","","Data section mutable reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["datasection"],"name":"option"}}],[11,"elements_section","","Element section reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["elementsection"],"name":"option"}}],[11,"elements_section_mut","","Element section mutable reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["elementsection"],"name":"option"}}],[11,"memory_section","","Memory section reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["memorysection"],"name":"option"}}],[11,"memory_section_mut","","Memory section mutable reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["memorysection"],"name":"option"}}],[11,"function_section","","Functions signatures section reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["functionsection"],"name":"option"}}],[11,"function_section_mut","","Functions signatures section mutable reference, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["functionsection"],"name":"option"}}],[11,"start_section","","Start section, if any.",26,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"names_section","","Functions signatures section reference, if any. NOTE: name section is not parsed by default so `names_section` could return None even if name section exists. Call `parse_names` to parse name section",26,{"inputs":[{"name":"self"}],"output":{"generics":["namesection"],"name":"option"}}],[11,"names_section_mut","","Functions signatures section mutable reference, if any. NOTE: name section is not parsed by default so `names_section` could return None even if name section exists. Call `parse_names` to parse name section",26,{"inputs":[{"name":"self"}],"output":{"generics":["namesection"],"name":"option"}}],[11,"parse_names","","Try to parse name section in place Corresponding custom section with proper header will convert to name sections If some of them will fail to be decoded, Err variant is returned with the list of (index, Error) tuples of failed sections.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"parse_reloc","","Try to parse reloc section in place Corresponding custom section with proper header will convert to reloc sections If some of them will fail to be decoded, Err variant is returned with the list of (index, Error) tuples of failed sections.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"import_count","","Count imports by provided type",26,{"inputs":[{"name":"self"},{"name":"importcounttype"}],"output":{"name":"usize"}}],[11,"functions_space","","Query functions space",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"globals_space","","Query globals space",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"table_space","","Query table space",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"memory_space","","Query memory space",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",26,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",26,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"section"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"section"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"section"}],"output":{"name":"bool"}}],[11,"deserialize","","",3,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"customsection"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"customsection"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"customsection"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"customsection"}],"output":{"name":"bool"}}],[11,"name","","Name of the custom section",27,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"payload","","Payload of the custom secion",27,null],[11,"name_mut","","Name of the custom section (mutable)",27,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"payload_mut","","Payload of the custom section (mutable)",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",27,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",27,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"typesection"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"typesection"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"typesection"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"typesection"}],"output":{"name":"bool"}}],[11,"with_types","","New type section with provided types",28,{"inputs":[{"generics":["type"],"name":"vec"}],"output":{"name":"self"}}],[11,"types","","List of type declarations",28,null],[11,"types_mut","","List of type declarations (mutable)",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",28,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",28,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"importsection"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"importsection"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"importsection"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"importsection"}],"output":{"name":"bool"}}],[11,"with_entries","","New import section with provided types",29,{"inputs":[{"generics":["importentry"],"name":"vec"}],"output":{"name":"self"}}],[11,"entries","","List of import entries.",29,null],[11,"entries_mut","","List of import entries (mutable).",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"functions","","Returns number of functions",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"globals","","Returns number of globals",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deserialize","","",29,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",29,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"functionsection"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"functionsection"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"functionsection"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"functionsection"}],"output":{"name":"bool"}}],[11,"with_entries","","New function signatures section with provided entries",30,{"inputs":[{"generics":["func"],"name":"vec"}],"output":{"name":"self"}}],[11,"entries_mut","","List of all functions in the section, mutable",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"entries","","List of all functions in the section",30,null],[11,"deserialize","","",30,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",30,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"tablesection"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"tablesection"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"tablesection"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"tablesection"}],"output":{"name":"bool"}}],[11,"entries","","Table entries.",31,null],[11,"with_entries","","New table section with provided table entries",31,{"inputs":[{"generics":["tabletype"],"name":"vec"}],"output":{"name":"self"}}],[11,"entries_mut","","Mutable table entries.",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",31,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",31,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"memorysection"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"memorysection"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"memorysection"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"memorysection"}],"output":{"name":"bool"}}],[11,"entries","","List of all memory entries in the section",32,null],[11,"with_entries","","New memory section with memory types",32,{"inputs":[{"generics":["memorytype"],"name":"vec"}],"output":{"name":"self"}}],[11,"entries_mut","","Mutable list of all memory entries in the section",32,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",32,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",32,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"globalsection"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"globalsection"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"globalsection"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"globalsection"}],"output":{"name":"bool"}}],[11,"entries","","List of all global entries in the section",33,null],[11,"with_entries","","New global section from list of global entries",33,{"inputs":[{"generics":["globalentry"],"name":"vec"}],"output":{"name":"self"}}],[11,"entries_mut","","List of all global entries in the section (mutable)",33,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",33,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",33,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"exportsection"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"exportsection"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"exportsection"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"exportsection"}],"output":{"name":"bool"}}],[11,"entries","","List of all export entries in the section",34,null],[11,"with_entries","","New export section from list of export entries",34,{"inputs":[{"generics":["exportentry"],"name":"vec"}],"output":{"name":"self"}}],[11,"entries_mut","","List of all export entries in the section (mutable)",34,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",34,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",34,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"codesection"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"codesection"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"codesection"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"codesection"}],"output":{"name":"bool"}}],[11,"with_bodies","","New code section with specified function bodies",35,{"inputs":[{"generics":["funcbody"],"name":"vec"}],"output":{"name":"self"}}],[11,"bodies","","All function bodies in the section.",35,null],[11,"bodies_mut","","All function bodies in the section, mutable.",35,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",35,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",35,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"elementsection"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"elementsection"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"elementsection"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"elementsection"}],"output":{"name":"bool"}}],[11,"with_entries","","New elements section",36,{"inputs":[{"generics":["elementsegment"],"name":"vec"}],"output":{"name":"self"}}],[11,"entries","","New elements entries in the section",36,null],[11,"entries_mut","","List of all data entries in the section (mutable)",36,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",36,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",36,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"datasection"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"datasection"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"datasection"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"datasection"}],"output":{"name":"bool"}}],[11,"with_entries","","New data section",37,{"inputs":[{"generics":["datasegment"],"name":"vec"}],"output":{"name":"self"}}],[11,"entries","","List of all data entries in the section",37,null],[11,"entries_mut","","List of all data entries in the section (mutable)",37,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",37,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",37,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"deserialize","","",6,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"deserialize","","",7,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"blocktype"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"blocktype"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"blocktype"}],"output":{"name":"bool"}}],[11,"deserialize","","",8,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"functiontype"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"functiontype"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"functiontype"}],"output":{"name":"bool"}}],[11,"default","","",38,{"inputs":[],"output":{"name":"self"}}],[11,"new","","New function type given the signature in-params(`params`) and return type (`return_type`)",38,{"inputs":[{"generics":["valuetype"],"name":"vec"},{"generics":["valuetype"],"name":"option"}],"output":{"name":"self"}}],[11,"form","","Function form (currently only valid value is `0x60`)",38,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"params","","Parameters in the function signature.",38,null],[11,"params_mut","","Mutable parameters in the function signature.",38,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"return_type","","Return type in the function signature, if any.",38,{"inputs":[{"name":"self"}],"output":{"generics":["valuetype"],"name":"option"}}],[11,"return_type_mut","","Mutable type in the function signature, if any.",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize","","",38,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",38,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"tableelementtype"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"tableelementtype"}],"output":{"name":"bool"}}],[11,"deserialize","","",9,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",9,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"globaltype"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"globaltype"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"globaltype"}],"output":{"name":"bool"}}],[11,"new","","New global type",39,{"inputs":[{"name":"valuetype"},{"name":"bool"}],"output":{"name":"self"}}],[11,"content_type","","Type of the global entry",39,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"is_mutable","","Is global entry is declared as mutable",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deserialize","","",39,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",39,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"tabletype"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"tabletype"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"tabletype"}],"output":{"name":"bool"}}],[11,"new","","New table definition",40,{"inputs":[{"name":"u32"},{"generics":["u32"],"name":"option"}],"output":{"name":"self"}}],[11,"limits","","Table memory specification",40,{"inputs":[{"name":"self"}],"output":{"name":"resizablelimits"}}],[11,"elem_type","","Table element type",40,{"inputs":[{"name":"self"}],"output":{"name":"tableelementtype"}}],[11,"deserialize","","",40,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",40,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"resizablelimits"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"resizablelimits"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"resizablelimits"}],"output":{"name":"bool"}}],[11,"new","","New memory limits definition",41,{"inputs":[{"name":"u32"},{"generics":["u32"],"name":"option"}],"output":{"name":"self"}}],[11,"initial","","Initial size",41,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"maximum","","Maximum size",41,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"deserialize","","",41,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",41,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"memorytype"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"memorytype"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"memorytype"}],"output":{"name":"bool"}}],[11,"new","","New memory definition",42,{"inputs":[{"name":"u32"},{"generics":["u32"],"name":"option"}],"output":{"name":"self"}}],[11,"limits","","Limits of the memory entry.",42,{"inputs":[{"name":"self"}],"output":{"name":"resizablelimits"}}],[11,"deserialize","","",42,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",42,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"external"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"external"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"external"}],"output":{"name":"bool"}}],[11,"deserialize","","",4,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"importentry"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"importentry"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"importentry"}],"output":{"name":"bool"}}],[11,"new","","New import entry.",43,{"inputs":[{"name":"string"},{"name":"string"},{"name":"external"}],"output":{"name":"self"}}],[11,"module","","Module reference of the import entry.",43,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"module_mut","","Module reference of the import entry (mutable).",43,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"field","","Field reference of the import entry.",43,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"field_mut","","Field reference of the import entry (mutable)",43,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"external","","Local binidng of the import entry.",43,{"inputs":[{"name":"self"}],"output":{"name":"external"}}],[11,"external_mut","","Local binidng of the import entry (mutable)",43,{"inputs":[{"name":"self"}],"output":{"name":"external"}}],[11,"deserialize","","",43,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",43,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"internal"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"internal"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"internal"}],"output":{"name":"bool"}}],[11,"deserialize","","",5,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"exportentry"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"exportentry"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"exportentry"}],"output":{"name":"bool"}}],[11,"new","","New export entry",44,{"inputs":[{"name":"string"},{"name":"internal"}],"output":{"name":"self"}}],[11,"field","","Public name",44,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"field_mut","","Public name (mutable)",44,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"internal","","Internal reference of the export entry.",44,{"inputs":[{"name":"self"}],"output":{"name":"internal"}}],[11,"internal_mut","","Internal reference of the export entry (mutable).",44,{"inputs":[{"name":"self"}],"output":{"name":"internal"}}],[11,"deserialize","","",44,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",44,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"globalentry"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"globalentry"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"globalentry"}],"output":{"name":"bool"}}],[11,"new","","New global entry",45,{"inputs":[{"name":"globaltype"},{"name":"initexpr"}],"output":{"name":"self"}}],[11,"global_type","","Global type.",45,{"inputs":[{"name":"self"}],"output":{"name":"globaltype"}}],[11,"init_expr","","Initialization expression (instructions) for global.",45,{"inputs":[{"name":"self"}],"output":{"name":"initexpr"}}],[11,"global_type_mut","","Global type (mutable)",45,{"inputs":[{"name":"self"}],"output":{"name":"globaltype"}}],[11,"init_expr_mut","","Initialization expression (instructions) for global (mutable)",45,{"inputs":[{"name":"self"}],"output":{"name":"initexpr"}}],[11,"deserialize","","",45,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",45,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"instructions"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"instructions"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"instructions"}],"output":{"name":"bool"}}],[11,"new","","New list of instructions from vector of instructions.",46,{"inputs":[{"generics":["instruction"],"name":"vec"}],"output":{"name":"self"}}],[11,"empty","","Empty expression with only `Instruction::End` instruction.",46,{"inputs":[],"output":{"name":"self"}}],[11,"elements","","List of individual instructions.",46,null],[11,"elements_mut","","Individual instructions, mutable.",46,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",46,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"initexpr"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"initexpr"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"initexpr"}],"output":{"name":"bool"}}],[11,"new","","New initialization expression from instruction list. `code` must end with the `Instruction::End` instruction!",47,{"inputs":[{"generics":["instruction"],"name":"vec"}],"output":{"name":"self"}}],[11,"empty","","Empty expression with only `Instruction::End` instruction",47,{"inputs":[],"output":{"name":"self"}}],[11,"code","","List of instructions used in the expression.",47,null],[11,"code_mut","","List of instructions used in the expression.",47,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",47,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[11,"is_block","","Is this instruction starts the new block (which should end with terminal instruction).",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_terminal","","Is this instruction determines the termination of instruction sequence `true` for `Instruction::End`",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deserialize","","",10,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",10,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",46,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"serialize","","",47,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"func"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"func"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"func"}],"output":{"name":"bool"}}],[11,"new","","New function signature",48,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"type_ref","","Function signature type reference.",48,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"type_ref_mut","","Function signature type reference (mutable).",48,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"serialize","","",48,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"deserialize","","",48,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"new","","New local with `count` and `value_type`.",49,{"inputs":[{"name":"u32"},{"name":"valuetype"}],"output":{"name":"self"}}],[11,"count","","Number of locals with the shared type.",49,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"value_type","","Type of the locals.",49,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"deserialize","","",49,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",49,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"funcbody"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"funcbody"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"funcbody"}],"output":{"name":"bool"}}],[11,"new","","New function body with given `locals` and `instructions`",50,{"inputs":[{"generics":["local"],"name":"vec"},{"name":"instructions"}],"output":{"name":"self"}}],[11,"empty","","List of individual instructions",50,{"inputs":[],"output":{"name":"self"}}],[11,"locals","","Locals declared in function body.",50,null],[11,"code","","Instruction list of the function body. Minimal instruction list is just `&[Instruction::End]`",50,{"inputs":[{"name":"self"}],"output":{"name":"instructions"}}],[11,"locals_mut","","Locals declared in function body (mutable).",50,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"code_mut","","Instruction list of the function body (mutable).",50,{"inputs":[{"name":"self"}],"output":{"name":"instructions"}}],[11,"deserialize","","",50,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",50,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"elementsegment"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"elementsegment"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"elementsegment"}],"output":{"name":"bool"}}],[11,"new","","New element segment.",51,{"inputs":[{"name":"u32"},{"name":"initexpr"},{"generics":["u32"],"name":"vec"}],"output":{"name":"self"}}],[11,"members","","Sequence of function indices.",51,null],[11,"members_mut","","Sequence of function indices (mutable)",51,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"index","","Table index (currently valid only value of `0`)",51,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"offset","","An i32 initializer expression that computes the offset at which to place the elements.",51,{"inputs":[{"name":"self"}],"output":{"name":"initexpr"}}],[11,"offset_mut","","An i32 initializer expression that computes the offset at which to place the elements (mutable)",51,{"inputs":[{"name":"self"}],"output":{"name":"initexpr"}}],[11,"deserialize","","",51,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",51,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"datasegment"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"datasegment"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"datasegment"}],"output":{"name":"bool"}}],[11,"new","","New data segments.",52,{"inputs":[{"name":"u32"},{"name":"initexpr"},{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[11,"index","","Linear memory index (currently the only valid value is `0`).",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"offset","","An i32 initializer expression that computes the offset at which to place the data.",52,{"inputs":[{"name":"self"}],"output":{"name":"initexpr"}}],[11,"offset_mut","","An i32 initializer expression that computes the offset at which to place the data (mutable)",52,{"inputs":[{"name":"self"}],"output":{"name":"initexpr"}}],[11,"value","","Initial value of the data segment.",52,null],[11,"value_mut","","Initial value of the data segment (mutable).",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",52,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",52,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",53,{"inputs":[],"output":{"name":"indexmap"}}],[11,"with_capacity","","Create an empty `IndexMap`, preallocating enough space to store `capacity` entries without needing to reallocate the underlying memory.",53,{"inputs":[{"name":"usize"}],"output":{"name":"indexmap"}}],[11,"clear","","Clear the map.",53,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Return the name for the specified index, if it exists.",53,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"contains_key","","Does the map contain an entry for the specified index?",53,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"insert","","Insert a name into our map, returning the existing value if present.",53,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Remove an item if present and return it.",53,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"len","","The number of items in this map.",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Is this map empty?",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Create a non-consuming iterator over this `IndexMap`'s keys and values.",53,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"deserialize_with","","Custom deserialization routine.",53,{"inputs":[{"name":"usize"},{"name":"f"},{"name":"r"}],"output":{"generics":["indexmap","error"],"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"indexmap"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"indexmap"}],"output":{"name":"bool"}}],[11,"from_iter","","Create an `IndexMap` from an iterator.",53,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","",53,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"serialize","","",53,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"deserialize","","Deserialize a map containing simple values that support `Deserialize`. We will allocate an underlying array no larger than `max_entry_space` to hold the data, so the maximum index must be less than `max_entry_space`.",53,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"namesection"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"namesection"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"namesection"}],"output":{"name":"bool"}}],[11,"deserialize","","Deserialize a name section.",11,{"inputs":[{"name":"module"},{"name":"r"}],"output":{"generics":["namesection","error"],"name":"result"}}],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"modulenamesection"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"modulenamesection"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"modulenamesection"}],"output":{"name":"bool"}}],[11,"new","","Create a new module name section with the specified name.",54,{"inputs":[{"name":"s"}],"output":{"name":"modulenamesection"}}],[11,"name","","The name of this module.",54,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"name_mut","","The name of this module (mutable).",54,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"serialize","","",54,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize","","",54,{"inputs":[{"name":"r"}],"output":{"generics":["modulenamesection","error"],"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"functionnamesection"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"functionnamesection"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"functionnamesection"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"functionnamesection"}],"output":{"name":"bool"}}],[11,"names","","A map from function indices to names.",55,{"inputs":[{"name":"self"}],"output":{"name":"namemap"}}],[11,"names_mut","","A map from function indices to names (mutable).",55,{"inputs":[{"name":"self"}],"output":{"name":"namemap"}}],[11,"deserialize","","Deserialize names, making sure that all names correspond to functions.",55,{"inputs":[{"name":"module"},{"name":"r"}],"output":{"generics":["functionnamesection","error"],"name":"result"}}],[11,"serialize","","",55,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"localnamesection"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"localnamesection"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"localnamesection"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"localnamesection"}],"output":{"name":"bool"}}],[11,"local_names","","A map from function indices to a map from variables indices to names.",56,{"inputs":[{"name":"self"}],"output":{"name":"indexmap"}}],[11,"local_names_mut","","A map from function indices to a map from variables indices to names (mutable).",56,{"inputs":[{"name":"self"}],"output":{"name":"indexmap"}}],[11,"deserialize","","Deserialize names, making sure that all names correspond to local variables.",56,{"inputs":[{"name":"module"},{"name":"r"}],"output":{"generics":["localnamesection","error"],"name":"result"}}],[11,"serialize","","",56,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"relocsection"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"relocsection"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"relocsection"}],"output":{"name":"bool"}}],[11,"name","","Name of this section.",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"name_mut","","Name of this section (mutable).",57,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"section_id","","ID of the section containing the relocations described in this section.",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"section_id_mut","","ID of the section containing the relocations described in this section (mutable).",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"relocation_section_name","","Name of the section containing the relocations described in this section.",57,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"relocation_section_name_mut","","Name of the section containing the relocations described in this section (mutable).",57,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"entries","","List of relocation entries.",57,null],[11,"entries_mut","","List of relocation entries (mutable).",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","Deserialize a reloc section.",57,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize","","",57,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"relocationentry"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"relocationentry"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"relocationentry"}],"output":{"name":"bool"}}],[11,"deserialize","","",12,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",12,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[0,"opcodes","","",null,null],[17,"UNREACHABLE","parity_wasm::elements::opcodes","",null,null],[17,"NOP","","",null,null],[17,"BLOCK","","",null,null],[17,"LOOP","","",null,null],[17,"IF","","",null,null],[17,"ELSE","","",null,null],[17,"END","","",null,null],[17,"BR","","",null,null],[17,"BRIF","","",null,null],[17,"BRTABLE","","",null,null],[17,"RETURN","","",null,null],[17,"CALL","","",null,null],[17,"CALLINDIRECT","","",null,null],[17,"DROP","","",null,null],[17,"SELECT","","",null,null],[17,"GETLOCAL","","",null,null],[17,"SETLOCAL","","",null,null],[17,"TEELOCAL","","",null,null],[17,"GETGLOBAL","","",null,null],[17,"SETGLOBAL","","",null,null],[17,"I32LOAD","","",null,null],[17,"I64LOAD","","",null,null],[17,"F32LOAD","","",null,null],[17,"F64LOAD","","",null,null],[17,"I32LOAD8S","","",null,null],[17,"I32LOAD8U","","",null,null],[17,"I32LOAD16S","","",null,null],[17,"I32LOAD16U","","",null,null],[17,"I64LOAD8S","","",null,null],[17,"I64LOAD8U","","",null,null],[17,"I64LOAD16S","","",null,null],[17,"I64LOAD16U","","",null,null],[17,"I64LOAD32S","","",null,null],[17,"I64LOAD32U","","",null,null],[17,"I32STORE","","",null,null],[17,"I64STORE","","",null,null],[17,"F32STORE","","",null,null],[17,"F64STORE","","",null,null],[17,"I32STORE8","","",null,null],[17,"I32STORE16","","",null,null],[17,"I64STORE8","","",null,null],[17,"I64STORE16","","",null,null],[17,"I64STORE32","","",null,null],[17,"CURRENTMEMORY","","",null,null],[17,"GROWMEMORY","","",null,null],[17,"I32CONST","","",null,null],[17,"I64CONST","","",null,null],[17,"F32CONST","","",null,null],[17,"F64CONST","","",null,null],[17,"I32EQZ","","",null,null],[17,"I32EQ","","",null,null],[17,"I32NE","","",null,null],[17,"I32LTS","","",null,null],[17,"I32LTU","","",null,null],[17,"I32GTS","","",null,null],[17,"I32GTU","","",null,null],[17,"I32LES","","",null,null],[17,"I32LEU","","",null,null],[17,"I32GES","","",null,null],[17,"I32GEU","","",null,null],[17,"I64EQZ","","",null,null],[17,"I64EQ","","",null,null],[17,"I64NE","","",null,null],[17,"I64LTS","","",null,null],[17,"I64LTU","","",null,null],[17,"I64GTS","","",null,null],[17,"I64GTU","","",null,null],[17,"I64LES","","",null,null],[17,"I64LEU","","",null,null],[17,"I64GES","","",null,null],[17,"I64GEU","","",null,null],[17,"F32EQ","","",null,null],[17,"F32NE","","",null,null],[17,"F32LT","","",null,null],[17,"F32GT","","",null,null],[17,"F32LE","","",null,null],[17,"F32GE","","",null,null],[17,"F64EQ","","",null,null],[17,"F64NE","","",null,null],[17,"F64LT","","",null,null],[17,"F64GT","","",null,null],[17,"F64LE","","",null,null],[17,"F64GE","","",null,null],[17,"I32CLZ","","",null,null],[17,"I32CTZ","","",null,null],[17,"I32POPCNT","","",null,null],[17,"I32ADD","","",null,null],[17,"I32SUB","","",null,null],[17,"I32MUL","","",null,null],[17,"I32DIVS","","",null,null],[17,"I32DIVU","","",null,null],[17,"I32REMS","","",null,null],[17,"I32REMU","","",null,null],[17,"I32AND","","",null,null],[17,"I32OR","","",null,null],[17,"I32XOR","","",null,null],[17,"I32SHL","","",null,null],[17,"I32SHRS","","",null,null],[17,"I32SHRU","","",null,null],[17,"I32ROTL","","",null,null],[17,"I32ROTR","","",null,null],[17,"I64CLZ","","",null,null],[17,"I64CTZ","","",null,null],[17,"I64POPCNT","","",null,null],[17,"I64ADD","","",null,null],[17,"I64SUB","","",null,null],[17,"I64MUL","","",null,null],[17,"I64DIVS","","",null,null],[17,"I64DIVU","","",null,null],[17,"I64REMS","","",null,null],[17,"I64REMU","","",null,null],[17,"I64AND","","",null,null],[17,"I64OR","","",null,null],[17,"I64XOR","","",null,null],[17,"I64SHL","","",null,null],[17,"I64SHRS","","",null,null],[17,"I64SHRU","","",null,null],[17,"I64ROTL","","",null,null],[17,"I64ROTR","","",null,null],[17,"F32ABS","","",null,null],[17,"F32NEG","","",null,null],[17,"F32CEIL","","",null,null],[17,"F32FLOOR","","",null,null],[17,"F32TRUNC","","",null,null],[17,"F32NEAREST","","",null,null],[17,"F32SQRT","","",null,null],[17,"F32ADD","","",null,null],[17,"F32SUB","","",null,null],[17,"F32MUL","","",null,null],[17,"F32DIV","","",null,null],[17,"F32MIN","","",null,null],[17,"F32MAX","","",null,null],[17,"F32COPYSIGN","","",null,null],[17,"F64ABS","","",null,null],[17,"F64NEG","","",null,null],[17,"F64CEIL","","",null,null],[17,"F64FLOOR","","",null,null],[17,"F64TRUNC","","",null,null],[17,"F64NEAREST","","",null,null],[17,"F64SQRT","","",null,null],[17,"F64ADD","","",null,null],[17,"F64SUB","","",null,null],[17,"F64MUL","","",null,null],[17,"F64DIV","","",null,null],[17,"F64MIN","","",null,null],[17,"F64MAX","","",null,null],[17,"F64COPYSIGN","","",null,null],[17,"I32WRAPI64","","",null,null],[17,"I32TRUNCSF32","","",null,null],[17,"I32TRUNCUF32","","",null,null],[17,"I32TRUNCSF64","","",null,null],[17,"I32TRUNCUF64","","",null,null],[17,"I64EXTENDSI32","","",null,null],[17,"I64EXTENDUI32","","",null,null],[17,"I64TRUNCSF32","","",null,null],[17,"I64TRUNCUF32","","",null,null],[17,"I64TRUNCSF64","","",null,null],[17,"I64TRUNCUF64","","",null,null],[17,"F32CONVERTSI32","","",null,null],[17,"F32CONVERTUI32","","",null,null],[17,"F32CONVERTSI64","","",null,null],[17,"F32CONVERTUI64","","",null,null],[17,"F32DEMOTEF64","","",null,null],[17,"F64CONVERTSI32","","",null,null],[17,"F64CONVERTUI32","","",null,null],[17,"F64CONVERTSI64","","",null,null],[17,"F64CONVERTUI64","","",null,null],[17,"F64PROMOTEF32","","",null,null],[17,"I32REINTERPRETF32","","",null,null],[17,"I64REINTERPRETF64","","",null,null],[17,"F32REINTERPRETI32","","",null,null],[17,"F64REINTERPRETI64","","",null,null],[6,"NameMap","parity_wasm::elements","A map from indices to names.",null,null],[8,"Deserialize","","Deserialization from serial i/o",null,null],[16,"Error","","Serialization error produced by deserialization routine.",58,null],[10,"deserialize","","Deserialize type from serial i/o",58,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[8,"Serialize","","Serialization to serial i/o. Takes self by value to consume less memory (parity-wasm IR is being partially freed by filling the result buffer).",null,null],[16,"Error","","Serialization error produced by serialization routine.",59,null],[10,"serialize","","Serialize type to serial i/o",59,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deserialize","","",1,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[0,"builder","parity_wasm","Various builders to generate/alter wasm components",null,null],[3,"SignatureBuilder","parity_wasm::builder","Signature builder",null,null],[3,"SignaturesBuilder","","Multiple signatures builder",null,null],[3,"FunctionBuilder","","Function definition builder",null,null],[3,"TypeRefBuilder","","Type (signature) reference builder (for function/import/indirect call)",null,null],[3,"FuncBodyBuilder","","Function body (code) builder",null,null],[3,"FunctionDefinition","","Function definition (extended structure to specify function entirely, incl. signature, mainness and code)",null,null],[12,"is_main","","Is this function is start function",60,null],[12,"signature","","Signature description",60,null],[12,"code","","Body (code) of the function",60,null],[3,"DataSegmentBuilder","","Data segment builder",null,null],[3,"ExportBuilder","","Export entry builder",null,null],[3,"ExportInternalBuilder","","Internal mapping builder for export entry",null,null],[3,"GlobalBuilder","","Global builder",null,null],[3,"ImportBuilder","","Import builder",null,null],[3,"Identity","","Identity chain element",null,null],[3,"MemoryBuilder","","Memory and static regions builder",null,null],[3,"ModuleBuilder","","Module builder",null,null],[3,"TableBuilder","","Table builder",null,null],[3,"TableDefinition","","Table definition",null,null],[12,"min","","Minimum length",61,null],[12,"max","","Maximum length, if any",61,null],[12,"elements","","Element segments, if any",61,null],[3,"TableEntryDefinition","","Table elements entry definition",null,null],[12,"offset","","Offset initialization expression",62,null],[12,"values","","Values of initialization",62,null],[5,"signatures","","New builder of signature list",null,{"inputs":[],"output":{"name":"signaturesbuilder"}}],[5,"signature","","New signature builder",null,{"inputs":[],"output":{"name":"signaturebuilder"}}],[5,"function","","New builder of function (signature & body)",null,{"inputs":[],"output":{"name":"functionbuilder"}}],[5,"export","","New builder for export entry",null,{"inputs":[],"output":{"name":"exportbuilder"}}],[5,"global","","New builder for export entry",null,{"inputs":[],"output":{"name":"globalbuilder"}}],[5,"import","","New builder for import entry",null,{"inputs":[],"output":{"name":"importbuilder"}}],[5,"module","","Start new module builder # Examples",null,{"inputs":[],"output":{"name":"modulebuilder"}}],[5,"from_module","","Start builder to extend existing module",null,{"inputs":[{"name":"module"}],"output":{"name":"modulebuilder"}}],[11,"new","","New empty module builder",63,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","New module builder with bound callback",63,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_module","","Builder from raw module",63,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"self"}}],[11,"with_sections","","Fill module with sections from iterator",63,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_section","","Add additional section",63,{"inputs":[{"name":"self"},{"name":"section"}],"output":{"name":"self"}}],[11,"with_signatures","","Binds to the type section, creates additional types when required",63,{"inputs":[{"name":"self"},{"generics":["signature"],"name":"vec"}],"output":{"name":"self"}}],[11,"push_function","","Push stand-alone function definition, creating sections, signature and code blocks in corresponding sections. `FunctionDefinition` can be build using `builder::function` builder",63,{"inputs":[{"name":"self"},{"name":"functiondefinition"}],"output":{"name":"codelocation"}}],[11,"push_memory","","Push linear memory region",63,{"inputs":[{"name":"self"},{"name":"memorydefinition"}],"output":{"name":"u32"}}],[11,"push_table","","Push table",63,{"inputs":[{"name":"self"},{"name":"tabledefinition"}],"output":{"name":"u32"}}],[11,"push_signature","","Push one function signature, returning it's calling index. Can create corresponding type in type section.",63,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"u32"}}],[11,"push_signatures","","Push signatures in the module, returning corresponding indices of pushed signatures",63,{"inputs":[{"name":"self"},{"generics":["signature"],"name":"vec"}],"output":{"generics":["u32"],"name":"vec"}}],[11,"push_import","","Push import entry to module. Not that it does not update calling indices in function bodies.",63,{"inputs":[{"name":"self"},{"name":"importentry"}],"output":{"name":"u32"}}],[11,"push_export","","Push export entry to module.",63,{"inputs":[{"name":"self"},{"name":"exportentry"}],"output":{"name":"u32"}}],[11,"function","","Add new function using dedicated builder",63,{"inputs":[{"name":"self"}],"output":{"name":"functionbuilder"}}],[11,"memory","","Add new linear memory using dedicated builder",63,{"inputs":[{"name":"self"}],"output":{"name":"memorybuilder"}}],[11,"table","","Add new table using dedicated builder",63,{"inputs":[{"name":"self"}],"output":{"name":"tablebuilder"}}],[11,"functions","","Define functions section",63,{"inputs":[{"name":"self"}],"output":{"name":"signaturesbuilder"}}],[11,"with_export","","With inserted export entry",63,{"inputs":[{"name":"self"},{"name":"exportentry"}],"output":{"name":"self"}}],[11,"with_import","","With inserted import entry",63,{"inputs":[{"name":"self"},{"name":"importentry"}],"output":{"name":"self"}}],[11,"import","","Import entry builder # Examples ``` use parity_wasm::builder::module;",63,{"inputs":[{"name":"self"}],"output":{"name":"importbuilder"}}],[11,"with_global","","With global variable",63,{"inputs":[{"name":"self"},{"name":"globalentry"}],"output":{"name":"self"}}],[11,"with_table","","With table",63,{"inputs":[{"name":"self"},{"name":"tabletype"}],"output":{"name":"self"}}],[11,"export","","Export entry builder # Examples ``` use parity_wasm::builder::module; use parity_wasm::elements::Instruction::*;",63,{"inputs":[{"name":"self"}],"output":{"name":"exportbuilder"}}],[11,"global","","Glboal entry builder # Examples ``` use parity_wasm::builder::module; use parity_wasm::elements::Instruction::*;",63,{"inputs":[{"name":"self"}],"output":{"name":"globalbuilder"}}],[11,"with_data_segment","","Add data segment to the builder",63,{"inputs":[{"name":"self"},{"name":"datasegment"}],"output":{"name":"self"}}],[11,"data","","Data entry builder",63,{"inputs":[{"name":"self"}],"output":{"name":"datasegmentbuilder"}}],[11,"build","","Build module (final step)",63,null],[11,"new","","New signature builder",64,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","New builder with callback function specified",64,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_param","","Add argument to signature builder",64,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"self"}}],[11,"with_params","","Add multiple arguments to signature builder",64,{"inputs":[{"name":"self"},{"generics":["valuetype"],"name":"vec"}],"output":{"name":"self"}}],[11,"with_return_type","","Override signature return type",64,{"inputs":[{"name":"self"},{"generics":["valuetype"],"name":"option"}],"output":{"name":"self"}}],[11,"param","","Start build new argument",64,{"inputs":[{"name":"self"}],"output":{"name":"valuetypebuilder"}}],[11,"params","","Start build multiple arguments",64,{"inputs":[{"name":"self"}],"output":{"name":"valuetypesbuilder"}}],[11,"return_type","","Start building return type",64,{"inputs":[{"name":"self"}],"output":{"name":"optionalvaluetypebuilder"}}],[11,"build","","Finish current builder",64,null],[11,"build_sig","","Finish current builder returning intermediate `Signature` struct",64,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"with_callback","","New builder chained with specified callback",65,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"val","","Set/override of type reference",65,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"build","","Finish current builder",65,null],[11,"new","","New empty functions section builder",66,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","New builder chained with specified callback",66,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_signature","","Push new signature into the builder output",66,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"self"}}],[11,"type_ref","","Start building new signature with `TypeRefBuilder`",66,{"inputs":[{"name":"self"}],"output":{"name":"typerefbuilder"}}],[11,"signature","","Start building new signature with dedicated builder",66,{"inputs":[{"name":"self"}],"output":{"name":"signaturebuilder"}}],[11,"build","","Finalize builder spawning element",66,null],[11,"bind","","Bind signature list",66,null],[11,"with_callback","","New body (code) builder given the chain callback",67,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_func","","Set/override entirely with FuncBody struct",67,{"inputs":[{"name":"self"},{"name":"funcbody"}],"output":{"name":"self"}}],[11,"with_locals","","Extend function local list with new entries",67,{"inputs":[{"name":"self"},{"generics":["local"],"name":"vec"}],"output":{"name":"self"}}],[11,"with_instructions","","Set code of the function",67,{"inputs":[{"name":"self"},{"name":"instructions"}],"output":{"name":"self"}}],[11,"build","","Finish current builder spawning resulting struct",67,null],[11,"default","","",60,{"inputs":[],"output":{"name":"self"}}],[11,"new","","New function builder",68,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","New function builder with chained callback",68,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"main","","Set that this function is main entry point",68,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"signature","","Start signature builder of the function",68,{"inputs":[{"name":"self"}],"output":{"name":"signaturebuilder"}}],[11,"with_signature","","Override current signature entirely with new one from known struct",68,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"self"}}],[11,"body","","Start code (body) builder",68,{"inputs":[{"name":"self"}],"output":{"name":"funcbodybuilder"}}],[11,"with_body","","Set body (code) for this function",68,{"inputs":[{"name":"self"},{"name":"funcbody"}],"output":{"name":"self"}}],[11,"build","","Finalize current builder spawning resulting struct in the callback",68,null],[11,"new","","New import builder",69,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","New import builder with callback (in chained context)",69,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"module","","Set/override module name",69,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"field","","Set/override field name",69,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"path","","Set/override both module name and field name",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_external","","Set/override external mapping for this import",69,{"inputs":[{"name":"self"},{"name":"external"}],"output":{"name":"self"}}],[11,"external","","Start new external mapping builder",69,{"inputs":[{"name":"self"}],"output":{"name":"importexternalbuilder"}}],[11,"build","","Finalize current builder spawning the resulting struct",69,null],[11,"new","","New memory builder",70,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","New memory builder with callback (in chained context)",70,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_min","","Set/override minimum size",70,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"with_max","","Set/override maximum size",70,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"self"}}],[11,"with_data","","Push new static region with initialized offset expression and raw bytes",70,{"inputs":[{"name":"self"},{"name":"u32"},{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[11,"build","","Finalize current builder, spawning resulting struct",70,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"tabledefinition"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"tabledefinition"}],"output":{"name":"bool"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"tableentrydefinition"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"tableentrydefinition"}],"output":{"name":"bool"}}],[11,"new","","New table builder",71,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","New table builder with callback in chained context",71,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_min","","Set/override minimum length",71,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"with_max","","Set/override maximum length",71,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"self"}}],[11,"with_element","","Generate initialization expression and element values on specified index",71,{"inputs":[{"name":"self"},{"name":"u32"},{"generics":["u32"],"name":"vec"}],"output":{"name":"self"}}],[11,"build","","Finalize current builder spawning resulting struct",71,null],[11,"default","","",61,{"inputs":[],"output":{"name":"self"}}],[11,"new","","New export builder",72,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","New export entry builder in the specified chained context",72,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"field","","Set the field name of the export entry",72,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_internal","","Specify the internal module mapping for this entry",72,{"inputs":[{"name":"self"},{"name":"internal"}],"output":{"name":"self"}}],[11,"internal","","Start the internal builder for this export entry",72,{"inputs":[{"name":"self"}],"output":{"name":"exportinternalbuilder"}}],[11,"build","","Finalize export entry builder spawning the resulting struct",72,null],[11,"with_callback","","New export entry internal mapping for the chained context",73,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"func","","Map to function by index",73,null],[11,"memory","","Map to memory",73,null],[11,"table","","Map to table",73,null],[11,"global","","Map to global",73,null],[11,"new","","New global builder",74,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","New global builder with callback (in chained context)",74,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_type","","Set/override resulting global type",74,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"self"}}],[11,"mutable","","Set mutabilty to true",74,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"init_expr","","Set initialization expression instruction for this global (`end` instruction will be added automatically)",74,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"self"}}],[11,"value_type","","Start value type builder",74,{"inputs":[{"name":"self"}],"output":{"name":"valuetypebuilder"}}],[11,"build","","Finalize current builder spawning resulting struct",74,null],[11,"new","","New data segment builder",75,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","New data segment builder inside the chain context",75,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"offset","","Set offset initialization instruction. `End` instruction will be added automatically.",75,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"self"}}],[11,"value","","Set the bytes value of the segment",75,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[11,"build","","Finish current builder, spawning resulting struct",75,null]],"paths":[[3,"CountedListWriter"],[3,"Unparsed"],[4,"ImportCountType"],[4,"Section"],[4,"External"],[4,"Internal"],[4,"Type"],[4,"ValueType"],[4,"BlockType"],[4,"TableElementType"],[4,"Instruction"],[4,"NameSection"],[4,"RelocationEntry"],[4,"Error"],[3,"VarUint32"],[3,"VarUint64"],[3,"VarUint7"],[3,"VarInt7"],[3,"Uint8"],[3,"VarInt32"],[3,"VarInt64"],[3,"Uint32"],[3,"Uint64"],[3,"VarUint1"],[3,"CountedList"],[3,"CountedWriter"],[3,"Module"],[3,"CustomSection"],[3,"TypeSection"],[3,"ImportSection"],[3,"FunctionSection"],[3,"TableSection"],[3,"MemorySection"],[3,"GlobalSection"],[3,"ExportSection"],[3,"CodeSection"],[3,"ElementSection"],[3,"DataSection"],[3,"FunctionType"],[3,"GlobalType"],[3,"TableType"],[3,"ResizableLimits"],[3,"MemoryType"],[3,"ImportEntry"],[3,"ExportEntry"],[3,"GlobalEntry"],[3,"Instructions"],[3,"InitExpr"],[3,"Func"],[3,"Local"],[3,"FuncBody"],[3,"ElementSegment"],[3,"DataSegment"],[3,"IndexMap"],[3,"ModuleNameSection"],[3,"FunctionNameSection"],[3,"LocalNameSection"],[3,"RelocSection"],[8,"Deserialize"],[8,"Serialize"],[3,"FunctionDefinition"],[3,"TableDefinition"],[3,"TableEntryDefinition"],[3,"ModuleBuilder"],[3,"SignatureBuilder"],[3,"TypeRefBuilder"],[3,"SignaturesBuilder"],[3,"FuncBodyBuilder"],[3,"FunctionBuilder"],[3,"ImportBuilder"],[3,"MemoryBuilder"],[3,"TableBuilder"],[3,"ExportBuilder"],[3,"ExportInternalBuilder"],[3,"GlobalBuilder"],[3,"DataSegmentBuilder"]]};
searchIndex["parity_wordlist"] = {"doc":"Parity Brain Wallet Generator.","items":[[4,"Error","parity_wordlist","Phrase Validation Error",null,null],[13,"PhraseTooShort","","Phrase is shorter than it was expected.",0,null],[13,"WordNotFromDictionary","","Phrase contains a word that doesn't come from our dictionary.",0,null],[5,"random_phrase","","Generate a string which is a random phrase of a number of lowercase words.",null,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[5,"validate_phrase","","Validates given phrase and checks if: 1. All the words are coming from the dictionary. 2. There are at least `expected_no_of_words` in the phrase.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[17,"WORDS","","The list of dictionary words.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Error"]]};
searchIndex["parking_lot"] = {"doc":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library. It also provides a `ReentrantMutex` type.","items":[[3,"Condvar","parking_lot","A Condition Variable",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[3,"Once","","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.",null,null],[3,"RawMutex","","Raw mutex type backed by the parking lot.",null,null],[3,"RawRwLock","","Raw reader-writer lock type backed by the parking lot.",null,null],[3,"RawThreadId","","Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.",null,null],[4,"OnceState","","Current state of a `Once`.",null,null],[13,"New","","A closure has not been executed yet",0,null],[13,"Poisoned","","A closure was executed but panicked.",0,null],[13,"InProgress","","A thread is currently executing a closure.",0,null],[13,"Done","","A closure has completed sucessfully.",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"waittimeoutresult"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",2,{"inputs":[],"output":{"name":"condvar"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all","","Wakes up all blocked threads on this condvar.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"}],"output":null}],[11,"wait_until","","Waits on this condition variable for a notification, timing out after the specified time instant.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"instant"}],"output":{"name":"waittimeoutresult"}}],[11,"wait_for","","Waits on this condition variable for a notification, timing out after a specified duration.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"waittimeoutresult"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"condvar"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"oncestate"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"oncestate"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"done","","Returns whether the associated `Once` has successfullly executed a closure.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Once` value.",3,{"inputs":[],"output":{"name":"once"}}],[11,"state","","Returns the current state of this `Once`.",3,{"inputs":[{"name":"self"}],"output":{"name":"oncestate"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will not be invoked.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"default","","",3,{"inputs":[],"output":{"name":"once"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lock","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"try_lock","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unlock","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"unlock_fair","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"bump","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"try_lock_until","","",4,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"try_lock_for","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"lock_exclusive","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"try_lock_exclusive","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unlock_exclusive","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"lock_shared","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"try_lock_shared","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unlock_shared","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"unlock_shared_fair","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"unlock_exclusive_fair","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"bump_shared","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"bump_exclusive","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"downgrade","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"try_lock_shared_for","","",5,null],[11,"try_lock_shared_until","","",5,null],[11,"try_lock_exclusive_for","","",5,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"try_lock_exclusive_until","","",5,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"lock_shared_recursive","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"try_lock_shared_recursive","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_lock_shared_recursive_for","","",5,null],[11,"try_lock_shared_recursive_until","","",5,null],[11,"lock_upgradable","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"try_lock_upgradable","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unlock_upgradable","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"upgrade","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"try_upgrade","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unlock_upgradable_fair","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"bump_upgradable","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"downgrade_upgradable","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"downgrade_to_upgradable","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"try_lock_upgradable_until","","",5,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"try_lock_upgradable_for","","",5,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"try_upgrade_until","","",5,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"try_upgrade_for","","",5,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"nonzero_thread_id","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[6,"MappedMutexGuard","","An RAII mutex guard returned by `MutexGuard::map`, which can point to a subfield of the protected data.",null,null],[6,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[6,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[6,"MappedReentrantMutexGuard","","An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a subfield of the protected data.",null,null],[6,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",null,null],[6,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[6,"MappedRwLockReadGuard","","An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a subfield of the protected data.",null,null],[6,"MappedRwLockWriteGuard","","An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a subfield of the protected data.",null,null],[6,"RwLock","","A reader-writer lock",null,null],[6,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",null,null],[6,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access of a lock when dropped.",null,null],[6,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null]],"paths":[[4,"OnceState"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Once"],[3,"RawMutex"],[3,"RawRwLock"],[3,"RawThreadId"]]};
searchIndex["parking_lot_core"] = {"doc":"This library exposes a low-level API for creating your own efficient synchronization primitives.","items":[[3,"ParkToken","parking_lot_core","A value associated with a parked thread which can be used by `unpark_filter`.",null,null],[12,"0","","",0,null],[3,"UnparkResult","","Result of an unpark operation.",null,null],[12,"unparked_threads","","The number of threads that were unparked.",1,null],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This only returns true if a thread was unparked.",1,null],[12,"be_fair","","This is set to true on average once every 0.5ms for any given key. It should be used to switch to a fair unlocking mechanism for a particular unlock.",1,null],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",null,null],[12,"0","","",2,null],[3,"SpinWait","","A counter used to perform exponential backoff in spin loops.",null,null],[4,"FilterOp","","Operation that `unpark_filter` should perform for each thread.",null,null],[13,"Unpark","","Unpark the thread and continue scanning the list of parked threads.",3,null],[13,"Skip","","Don't unpark the thread and continue scanning the list of parked threads.",3,null],[13,"Stop","","Don't unpark the thread and stop scanning the list of parked threads.",3,null],[4,"ParkResult","","Result of a park operation.",null,null],[13,"Unparked","","We were unparked by another thread with the given token.",4,null],[13,"Invalid","","The validation callback returned false.",4,null],[13,"TimedOut","","The timeout expired.",4,null],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",null,null],[13,"Abort","","Abort the operation without doing anything.",5,null],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target queue.",5,null],[13,"RequeueAll","","Requeue all threads onto the target queue.",5,null],[5,"park","","Parks the current thread in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"v"},{"name":"b"},{"name":"t"},{"name":"parktoken"},{"generics":["instant"],"name":"option"}],"output":{"name":"parkresult"}}],[5,"unpark_all","","Unparks all threads in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"unparktoken"}],"output":{"name":"usize"}}],[5,"unpark_filter","","Unparks a number of threads from the front of the queue associated with `key` depending on the results of a filter function which inspects the `ParkToken` associated with each thread.",null,{"inputs":[{"name":"usize"},{"name":"f"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_one","","Unparks one thread from the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_requeue","","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"},{"name":"c"}],"output":{"name":"unparkresult"}}],[11,"new","","Creates a new `SpinWait`.",6,{"inputs":[],"output":{"name":"spinwait"}}],[11,"reset","","Resets a `SpinWait` to its initial state.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"spin","","Spins until the sleep threshold has been reached.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spin_no_yield","","Spins without yielding the thread to the OS.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"spinwait"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"parkresult"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_unparked","","Returns true if we were unparked by another thread.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unparkresult"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"requeueop"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"requeueop"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"filterop"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"filterop"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unparktoken"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"parktoken"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"deadlock","","[Experimental] Deadlock detection",null,null],[5,"acquire_resource","parking_lot_core::deadlock","Acquire a resource identified by key in the deadlock detector Noop if deadlock_detection feature isn't enabled. Note: Call after the resource is acquired",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"release_resource","","Release a resource identified by key in the deadlock detector. Noop if deadlock_detection feature isn't enabled. Note: Call before the resource is released # Panics Panics if the resource was already released or wasn't acquired in this thread.",null,{"inputs":[{"name":"usize"}],"output":null}],[17,"DEFAULT_PARK_TOKEN","parking_lot_core","A default park token to use.",null,null],[17,"DEFAULT_UNPARK_TOKEN","","A default unpark token to use.",null,null]],"paths":[[3,"ParkToken"],[3,"UnparkResult"],[3,"UnparkToken"],[4,"FilterOp"],[4,"ParkResult"],[4,"RequeueOp"],[3,"SpinWait"]]};
searchIndex["patricia_trie"] = {"doc":"Trie interface and implementation.","items":[[3,"FatDB","patricia_trie","A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database. Additionaly it stores inserted hash-key mappings for later retrieval.",null,null],[3,"FatDBIterator","","Itarator over inserted pairs of key values.",null,null],[3,"FatDBMut","","A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database. Additionaly it stores inserted hash-key mappings for later retrieval.",null,null],[3,"Lookup","","Trie lookup helper object.",null,null],[12,"db","","database to query from.",0,null],[12,"query","","Query object to record nodes and transform data.",0,null],[12,"hash","","Hash to start at",0,null],[12,"marker","","",0,null],[3,"NibbleSlice","","Nibble-orientated view onto byte-slice, allowing nibble-precision offsets.",null,null],[3,"TrieFactory","","Trie factory.",null,null],[4,"TrieError","","Trie Errors.",null,null],[13,"InvalidStateRoot","","Attempted to create a trie with a state root not in the DB.",1,null],[13,"IncompleteDatabase","","Trie item not found in the database,",1,null],[13,"DecoderError","","Corrupt Trie item",1,null],[4,"TrieSpec","","Trie types",null,null],[13,"Generic","","Generic trie.",2,null],[13,"Secure","","Secure trie.",2,null],[13,"Fat","","Secure trie with fat database.",2,null],[4,"TrieKinds","","All different kinds of tries. This is used to prevent a heap allocation for every created trie.",null,null],[13,"Generic","","A generic trie db.",3,null],[13,"Secure","","A secure trie db.",3,null],[13,"Fat","","A fat trie db.",3,null],[0,"node","","",null,null],[4,"Node","patricia_trie::node","Type of node in the trie and essential information thereof.",null,null],[13,"Empty","","Null trie node; could be an empty root or an empty branch entry.",4,null],[13,"Leaf","","Leaf node; has key slice and value. Value may not be empty.",4,null],[13,"Extension","","Extension node; has key slice and node data. Data may not be null.",4,null],[13,"Branch","","Branch node; has array of 16 child nodes (each possibly null) and an optional immediate node data.",4,null],[4,"OwnedNode","","An owning node type. Useful for trie iterators.",null,null],[13,"Empty","","Empty trie node.",5,null],[13,"Leaf","","Leaf node: partial key and value.",5,null],[13,"Extension","","Extension node: partial key and child node.",5,null],[13,"Branch","","Branch node: 16 children and an optional value.",5,null],[6,"NodeKey","","Partial node key type.",null,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"ownednode"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"ownednode"}],"output":{"name":"bool"}}],[11,"from","","",5,{"inputs":[{"name":"node"}],"output":{"name":"self"}}],[0,"triedb","patricia_trie","",null,null],[3,"TrieDB","patricia_trie::triedb","A `Trie` implementation using a generic `HashDB` backing database, a `Hasher` implementation to generate keys and a `NodeCodec` implementation to encode/decode the nodes.",null,null],[3,"TrieDBIterator","","Iterator for going through all values in the trie.",null,null],[11,"new","","Create a new trie with the backing database `db` and `root` Returns an error if `root` does not exist",6,null],[11,"db","","Get the backing database.",6,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"root","","",6,null],[11,"get_with","","",6,null],[11,"iter","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator.",7,{"inputs":[{"name":"triedb"}],"output":{"generics":["triedbiterator"],"name":"result"}}],[11,"seek","","Position the iterator on the first element with key >= `key`",7,null],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"triedbmut","patricia_trie","In-memory trie representation.",null,null],[3,"TrieDBMut","patricia_trie::triedbmut","A `Trie` implementation using a generic `HashDB` backing database.",null,null],[4,"ChildReference","","Used to build a collection of child nodes from a collection of `NodeHandle`s",null,null],[13,"Hash","","",8,null],[13,"Inline","","",8,null],[11,"new","","Create a new trie with backing database `db` and empty `root`.",9,null],[11,"from_existing","","Create a new trie with the backing database `db` and `root. Returns an error if`root` does not exist.",9,null],[11,"db","","Get the backing database.",9,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"db_mut","","Get the backing database mutably.",9,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"commit","","Commit the in-memory changes to disk, freeing their storage and updating the state root.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"root","","",9,null],[11,"is_empty","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","",9,null],[11,"insert","","",9,null],[11,"remove","","",9,null],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[0,"sectriedb","patricia_trie","",null,null],[3,"SecTrieDB","patricia_trie::sectriedb","A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.",null,null],[11,"new","","Create a new trie with the backing database `db` and empty `root`",10,null],[11,"raw","","Get a reference to the underlying raw `TrieDB` struct.",10,{"inputs":[{"name":"self"}],"output":{"name":"triedb"}}],[11,"raw_mut","","Get a mutable reference to the underlying raw `TrieDB` struct.",10,{"inputs":[{"name":"self"}],"output":{"name":"triedb"}}],[11,"root","","",10,null],[11,"contains","","",10,null],[11,"get_with","","",10,null],[11,"iter","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"result"}}],[0,"sectriedbmut","patricia_trie","",null,null],[3,"SecTrieDBMut","patricia_trie::sectriedbmut","A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.",null,null],[11,"new","","Create a new trie with the backing database `db` and empty `root` Initialise to the state entailed by the genesis block. This guarantees the trie is built correctly.",11,null],[11,"from_existing","","Create a new trie with the backing database `db` and `root`.",11,null],[11,"db","","Get the backing database.",11,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"db_mut","","Get the backing database.",11,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"root","","",11,null],[11,"is_empty","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",11,null],[11,"get","","",11,null],[11,"insert","","",11,null],[11,"remove","","",11,null],[0,"recorder","patricia_trie","Trie query recorder.",null,null],[3,"Record","patricia_trie::recorder","A record of a visited node.",null,null],[12,"depth","","The depth of this node.",12,null],[12,"data","","The raw data of the node.",12,null],[12,"hash","","The hash of the data.",12,null],[3,"Recorder","","Records trie nodes as they pass it.",null,null],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"record"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a new `Recorder` which records all given nodes.",13,{"inputs":[],"output":{"name":"self"}}],[11,"with_depth","","Create a `Recorder` which only records nodes beyond a given depth.",13,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"record","","Record a visited node, given its hash, data, and depth.",13,null],[11,"drain","","Drain all visited records.",13,{"inputs":[{"name":"self"}],"output":{"generics":["record"],"name":"vec"}}],[11,"new","patricia_trie","Create a new trie with the backing database `db` and empty `root` Initialise to the state entailed by the genesis block. This guarantees the trie is built correctly.",14,null],[11,"db","","Get the backing database.",14,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"root","","",14,null],[11,"contains","","",14,null],[11,"get_with","","",14,null],[11,"iter","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"result"}}],[11,"new","","Creates new iterator.",15,{"inputs":[{"name":"triedb"}],"output":{"name":"result"}}],[11,"seek","","",15,null],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Create a new trie with the backing database `db` and empty `root` Initialise to the state entailed by the genesis block. This guarantees the trie is built correctly.",16,null],[11,"from_existing","","Create a new trie with the backing database `db` and `root`.",16,null],[11,"db","","Get the backing database.",16,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"db_mut","","Get the backing database.",16,{"inputs":[{"name":"self"}],"output":{"name":"hashdb"}}],[11,"root","","",16,null],[11,"is_empty","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",16,null],[11,"get","","",16,null],[11,"insert","","",16,null],[11,"remove","","",16,null],[11,"look_up","","Look up the given key. If the value is found, it will be passed to the given function to decode or copy.",0,{"inputs":[{"name":"self"},{"name":"nibbleslice"}],"output":{"generics":["option"],"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"nibbleslice"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"nibbleslice"}],"output":{"name":"ordering"}}],[11,"new","","Create a new nibble slice with the given byte-slice.",17,null],[11,"new_offset","","Create a new nibble slice with the given byte-slice with a nibble offset.",17,null],[11,"new_composed","","Create a composed nibble slice; one followed by the other.",17,{"inputs":[{"name":"nibbleslice"},{"name":"nibbleslice"}],"output":{"name":"self"}}],[11,"iter","","Get an iterator for the series of nibbles.",17,{"inputs":[{"name":"self"}],"output":{"name":"nibblesliceiterator"}}],[11,"from_encoded","","Create a new nibble slice from the given HPE encoded data (e.g. output of `encoded()`).",17,null],[11,"is_empty","","Is this an empty slice?",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Get the length (in nibbles, naturally) of this slice.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"at","","Get the nibble at position `i`.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"mid","","Return object which represents a view on to this slice (further) offset by `i` nibbles.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"nibbleslice"}}],[11,"starts_with","","Do we start with the same nibbles as the whole of `them`?",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"common_prefix","","How many of the same nibbles at the beginning do we match with `them`?",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"encoded","","Encode while nibble slice in prefixed hex notation, noting whether it `is_leaf`.",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["u8"],"name":"elasticarray36"}}],[11,"encoded_leftmost","","Encode only the leftmost `n` bytes of the nibble slice in prefixed hex notation, noting whether it `is_leaf`.",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":{"generics":["u8"],"name":"elasticarray36"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","Trie result type. Boxed to avoid copying around extra space for the `Hasher`s `Out` on successful queries.",null,null],[6,"TrieItem","","Trie-Item type used for iterators over trie data.",null,null],[8,"NodeCodec","","Trait for trie node encoding/decoding",null,null],[16,"Error","","Encoding error type",18,null],[18,"HASHED_NULL_NODE","","Null node type",18,null],[10,"decode","","Decode bytes to a `Node`. Returns `Self::E` on failure.",18,null],[10,"try_decode_hash","","Decode bytes to the `Hasher`s output type.  Returns `None` on failure.",18,null],[10,"is_empty_node","","Check if the provided bytes correspond to the codecs \"empty\" node.",18,null],[10,"empty_node","","Returns an empty node",18,{"inputs":[],"output":{"generics":["u8"],"name":"elasticarray1024"}}],[10,"leaf_node","","Returns an encoded leaft node",18,null],[10,"ext_node","","Returns an encoded extension node",18,null],[10,"branch_node","","Returns an encoded branch node. Takes an iterator yielding `ChildReference<H::Out>` and an optional value",18,{"inputs":[{"name":"i"},{"generics":["elasticarray128"],"name":"option"}],"output":{"generics":["u8"],"name":"elasticarray1024"}}],[8,"Query","","Description of what kind of query will be made to the trie.",null,null],[16,"Item","","Output item.",19,null],[10,"decode","","Decode a byte-slice into the desired item.",19,null],[11,"record","","Record that a node has been passed through.",19,null],[8,"Trie","","A key-value datastore implemented as a database-backed modified Merkle tree.",null,null],[10,"root","","Return the root of the trie.",20,null],[11,"is_empty","","Is the trie empty?",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Does the trie contain a given key?",20,null],[11,"get","","What is the value of the given key in this trie?",20,null],[10,"get_with","","Search for the key with the given query parameter. See the docs of the `Query` trait for more details.",20,null],[10,"iter","","Returns a depth-first iterator over the elements of trie.",20,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"result"}}],[8,"TrieMut","","A key-value datastore implemented as a database-backed modified Merkle tree.",null,null],[10,"root","","Return the root of the trie.",21,null],[10,"is_empty","","Is the trie empty?",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Does the trie contain a given key?",21,null],[10,"get","","What is the value of the given key in this trie?",21,null],[10,"insert","","Insert a `key`/`value` pair into the trie. An empty value is equivalent to removing `key` from the trie. Returns the old value associated with this key, if it existed.",21,null],[10,"remove","","Remove a `key` from the trie. Equivalent to making it equal to the empty value. Returns the old value associated with this key, if it existed.",21,null],[8,"TrieIterator","","A trie iterator that also supports random access (`seek()`).",null,null],[10,"seek","","Position the iterator on the first element with key > `key`",22,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"trieerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"trieerror"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"trieerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"triespec"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"triespec"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"triespec"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"triefactory"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"triefactory"}}],[11,"root","","",3,null],[11,"is_empty","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",3,null],[11,"get_with","","",3,null],[11,"iter","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"result"}}],[11,"new","","Creates new factory.",23,{"inputs":[{"name":"triespec"}],"output":{"name":"self"}}],[11,"readonly","","Create new immutable instance of Trie.",23,null],[11,"create","","Create new mutable instance of Trie.",23,null],[11,"from_existing","","Create new mutable instance of trie and check for errors.",23,null],[11,"is_fat","","Returns true iff the trie DB is a fat DB (allows enumeration of keys).",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[18,"HASHED_NULL_NODE","","Null node type",18,null]],"paths":[[3,"Lookup"],[4,"TrieError"],[4,"TrieSpec"],[4,"TrieKinds"],[4,"Node"],[4,"OwnedNode"],[3,"TrieDB"],[3,"TrieDBIterator"],[4,"ChildReference"],[3,"TrieDBMut"],[3,"SecTrieDB"],[3,"SecTrieDBMut"],[3,"Record"],[3,"Recorder"],[3,"FatDB"],[3,"FatDBIterator"],[3,"FatDBMut"],[3,"NibbleSlice"],[8,"NodeCodec"],[8,"Query"],[8,"Trie"],[8,"TrieMut"],[8,"TrieIterator"],[3,"TrieFactory"]]};
searchIndex["patricia_trie_ethereum"] = {"doc":"Façade crate for `patricia_trie` for Ethereum specific impls","items":[[3,"RlpNodeCodec","patricia_trie_ethereum","Concrete implementation of a `NodeCodec` with Rlp encoding, generic over the `Hasher`",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"rlpnodecodec"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rlpnodecodec"}}],[11,"decode","","",0,null],[11,"try_decode_hash","","",0,null],[11,"is_empty_node","","",0,null],[11,"empty_node","","",0,{"inputs":[],"output":{"generics":["u8"],"name":"elasticarray1024"}}],[11,"leaf_node","","",0,null],[11,"ext_node","","",0,null],[11,"branch_node","","",0,{"inputs":[{"name":"i"},{"generics":["elasticarray128"],"name":"option"}],"output":{"generics":["u8"],"name":"elasticarray1024"}}],[6,"RlpCodec","","Convenience type alias to instantiate a Keccak-flavoured `RlpNodeCodec`",null,null],[6,"TrieDB","","Convenience type alias to instantiate a Keccak/Rlp-flavoured `TrieDB`",null,null],[6,"SecTrieDB","","Convenience type alias to instantiate a Keccak/Rlp-flavoured `SecTrieDB`",null,null],[6,"FatDB","","Convenience type alias to instantiate a Keccak/Rlp-flavoured `FatDB`",null,null],[6,"TrieDBMut","","Convenience type alias to instantiate a Keccak/Rlp-flavoured `TrieDBMut`",null,null],[6,"SecTrieDBMut","","Convenience type alias to instantiate a Keccak/Rlp-flavoured `SecTrieDBMut`",null,null],[6,"FatDBMut","","Convenience type alias to instantiate a Keccak/Rlp-flavoured `FatDBMut`",null,null],[6,"TrieFactory","","Convenience type alias to instantiate a Keccak/Rlp-flavoured `TrieFactory`",null,null],[6,"TrieError","","Convenience type alias for Keccak/Rlp flavoured trie errors",null,null],[6,"Result","","Convenience type alias for Keccak/Rlp flavoured trie results",null,null]],"paths":[[3,"RlpNodeCodec"]]};
searchIndex["plain_hasher"] = {"doc":"","items":[[3,"PlainHasher","plain_hasher","Hasher that just takes 8 bytes of the provided value. May only be used for keys which are 32 bytes.",null,null],[6,"H256FastMap","","Specialized version of `HashMap` with H256 keys and fast hashing function.",null,null],[6,"H256FastSet","","Specialized version of `HashSet` with H256 keys and fast hashing function.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"plainhasher"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"PlainHasher"]]};
searchIndex["primal"] = {"doc":"`primal` puts raw power into prime numbers.","items":[[5,"estimate_prime_pi","primal","Returns estimated bounds for π(n), the number of primes less than or equal to `n`.",null,null],[5,"estimate_nth_prime","","Gives estimated bounds for pn, the `n`th prime number, 1-indexed (i.e. p1 = 2, p2 = 3).",null,null],[5,"is_prime","","Test if `n` is prime, using the deterministic version of the Miller-Rabin test.",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[5,"as_perfect_power","","Returns integers `(y, k)` such that `x = y^k` with `k` maximised (other than for `x = 0, 1`, in which case `y = x`, `k = 1`).",null,null],[5,"as_prime_power","","Return `Some((p, k))` if `x = p^k` for some prime `p` and `k >= 1` (that is, including when `x` is itself a prime).",null,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[3,"StreamingSieve","","A heavily optimised prime sieve.",null,null],[3,"Sieve","","A heavily optimised prime sieve.",null,null],[3,"SievePrimes","","An iterator over the primes stored in a `Sieve` instance.",null,null],[3,"Primes","","An iterator over all primes.",null,null],[11,"prime_pi","","Count the number of primes upto and including `n`, that is, 𝜋, the prime counting function.",0,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"nth_prime","","Compute pn, the `n` prime number, 1-indexed (i.e. p1 = 2, p2 = 3).",0,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sieveprimes"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Create a new instance, sieving out all the primes up to `limit`.",3,{"inputs":[{"name":"usize"}],"output":{"name":"sieve"}}],[11,"upper_bound","","Return the largest number that this sieve knows about.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_prime","","Determine if `n` is a prime number.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"prime_pi","","Count the number of primes upto and including `n`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"factor","","Factorise `n` into (prime, exponent) pairs.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["vec"],"name":"result"}}],[11,"nth_prime","","Compute pn, the `n` prime number, 1-indexed (i.e. p1 = 2, p2 = 3).",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"primes_from","","Return an iterator over the primes from `n` (inclusive) to the end of this sieve.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"sieveprimes"}}],[11,"all","","The sequence `2, 3, 5, 7, 11, ...`.",2,{"inputs":[],"output":{"name":"primes"}}]],"paths":[[3,"StreamingSieve"],[3,"SievePrimes"],[3,"Primes"],[3,"Sieve"]]};
searchIndex["primal_bit"] = {"doc":"A very simple bit-vector that serves the needs of `primal`.","items":[[3,"BitVec","primal_bit","The bitvector type.",null,null],[3,"Iter","","An iterator for `BitVec`.",null,null],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BitVec`.",0,{"inputs":[],"output":{"name":"bitvec"}}],[11,"from_u64s","","",0,{"inputs":[{"generics":["u64"],"name":"vec"},{"name":"usize"}],"output":{"name":"bitvec"}}],[11,"as_bytes_mut","","",0,null],[11,"as_bytes","","",0,null],[11,"as_u64s","","",0,null],[11,"count_ones_before","","Count the number of ones for the bits up to but not including the `bit`th bit.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"find_nth_bit","","Find the index of the `n`th (0-indexed) set bit.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element to `bit`.",0,{"inputs":[{"name":"usize"},{"name":"bool"}],"output":{"name":"bitvec"}}],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bool"],"name":"option"}}],[11,"set","","Sets the value of a bit at an index `i`.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"set_unchecked","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"set_all","","Sets all bits to 1.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Returns an iterator over the elements of the vector in order.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"len","","Returns the total number of bits in this vector",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if there are no bits in this vector",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this vector.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",0,{"inputs":[],"output":{"name":"bitvec"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bitvec"}}],[11,"clone_from","","",0,{"inputs":[{"name":"self"},{"name":"bitvec"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}]],"paths":[[3,"BitVec"],[3,"Iter"]]};
searchIndex["primal_check"] = {"doc":"Check some primality-related properties of numbers.","items":[[5,"miller_rabin","primal_check","Test if `n` is prime, using the deterministic version of the Miller-Rabin test.",null,{"inputs":[{"name":"u64"}],"output":{"name":"bool"}}],[5,"as_perfect_power","","Returns integers `(y, k)` such that `x = y^k` with `k` maximised (other than for `x = 0, 1`, in which case `y = x`, `k = 1`).",null,null],[5,"as_prime_power","","Return `Some((p, k))` if `x = p^k` for some prime `p` and `k >= 1` (that is, including when `x` is itself a prime).",null,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}]],"paths":[]};
searchIndex["primal_estimate"] = {"doc":"Estimate upper and lower bounds for the n-th prime, and π(n), the number of primes less than or equal to n.","items":[[5,"prime_pi","primal_estimate","Returns estimated bounds for π(n), the number of primes less than or equal to `n`.",null,null],[5,"nth_prime","","Gives estimated bounds for pn, the `n`th prime number, 1-indexed (i.e. p1 = 2, p2 = 3).",null,null]],"paths":[]};
searchIndex["primal_sieve"] = {"doc":"Highly optimised prime sieves.","items":[[3,"StreamingSieve","primal_sieve","A heavily optimised prime sieve.",null,null],[3,"Primes","","An iterator over all primes.",null,null],[3,"Sieve","","A heavily optimised prime sieve.",null,null],[3,"SievePrimes","","An iterator over the primes stored in a `Sieve` instance.",null,null],[11,"all","","The sequence `2, 3, 5, 7, 11, ...`.",0,{"inputs":[],"output":{"name":"primes"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"prime_pi","","Count the number of primes upto and including `n`, that is, 𝜋, the prime counting function.",1,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"nth_prime","","Compute pn, the `n` prime number, 1-indexed (i.e. p1 = 2, p2 = 3).",1,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new instance, sieving out all the primes up to `limit`.",2,{"inputs":[{"name":"usize"}],"output":{"name":"sieve"}}],[11,"upper_bound","","Return the largest number that this sieve knows about.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_prime","","Determine if `n` is a prime number.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"prime_pi","","Count the number of primes upto and including `n`.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"factor","","Factorise `n` into (prime, exponent) pairs.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["vec"],"name":"result"}}],[11,"nth_prime","","Compute pn, the `n` prime number, 1-indexed (i.e. p1 = 2, p2 = 3).",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"primes_from","","Return an iterator over the primes from `n` (inclusive) to the end of this sieve.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"sieveprimes"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"sieveprimes"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}]],"paths":[[3,"Primes"],[3,"StreamingSieve"],[3,"Sieve"],[3,"SievePrimes"]]};
searchIndex["proc_macro2"] = {"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","",null,null],[3,"LexError","","",null,null],[3,"Span","","",null,null],[3,"Group","","",null,null],[3,"Op","","",null,null],[3,"Term","","",null,null],[3,"Literal","","",null,null],[4,"TokenTree","","",null,null],[13,"Group","","",0,null],[13,"Term","","",0,null],[13,"Op","","",0,null],[13,"Literal","","",0,null],[4,"Delimiter","","",null,null],[13,"Parenthesis","","",1,null],[13,"Brace","","",1,null],[13,"Bracket","","",1,null],[13,"None","","",1,null],[4,"Spacing","","",null,null],[13,"Alone","","",2,null],[13,"Joint","","",2,null],[0,"token_stream","","",null,null],[3,"IntoIter","proc_macro2::token_stream","",null,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["tokentree"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","proc_macro2","",4,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["tokenstream","lexerror"],"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"call_site","","",6,{"inputs":[],"output":{"name":"span"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"span","","",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"from","","",0,{"inputs":[{"name":"group"}],"output":{"name":"tokentree"}}],[11,"from","","",0,{"inputs":[{"name":"term"}],"output":{"name":"tokentree"}}],[11,"from","","",0,{"inputs":[{"name":"op"}],"output":{"name":"tokentree"}}],[11,"from","","",0,{"inputs":[{"name":"literal"}],"output":{"name":"tokentree"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"bool"}}],[11,"new","","",7,{"inputs":[{"name":"delimiter"},{"name":"tokenstream"}],"output":{"name":"group"}}],[11,"delimiter","","",7,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"stream","","",7,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"span","","",7,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",7,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"op"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"spacing"}],"output":{"name":"bool"}}],[11,"new","","",8,{"inputs":[{"name":"char"},{"name":"spacing"}],"output":{"name":"op"}}],[11,"op","","",8,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"spacing","","",8,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"span","","",8,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",8,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"term"}}],[11,"new","","",9,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"term"}}],[11,"as_str","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"span","","",9,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",9,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"u8_suffixed","","",10,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16_suffixed","","",10,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32_suffixed","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64_suffixed","","",10,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize_suffixed","","",10,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8_suffixed","","",10,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16_suffixed","","",10,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32_suffixed","","",10,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64_suffixed","","",10,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize_suffixed","","",10,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"u8_unsuffixed","","",10,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16_unsuffixed","","",10,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32_unsuffixed","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64_unsuffixed","","",10,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize_unsuffixed","","",10,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8_unsuffixed","","",10,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16_unsuffixed","","",10,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32_unsuffixed","","",10,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64_unsuffixed","","",10,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize_unsuffixed","","",10,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"f64_unsuffixed","","",10,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f64_suffixed","","",10,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f32_unsuffixed","","",10,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"f32_suffixed","","",10,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"string","","",10,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"character","","",10,{"inputs":[{"name":"char"}],"output":{"name":"literal"}}],[11,"byte_string","","",10,null],[11,"span","","",10,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",10,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Span"],[3,"Group"],[3,"Op"],[3,"Term"],[3,"Literal"]]};
searchIndex["proptest"] = {"doc":"Proptest is a property testing framework (i.e., the QuickCheck family) inspired by the Hypothesis framework for Python. It allows to test that certain properties of your code hold for arbitrary inputs, and if a failure is found, automatically finds the minimal test case to reproduce the problem. Unlike QuickCheck, generation and shrinking is defined on a per-value basis instead of per-type, which makes it more flexible and simplifies composition.","items":[[0,"arbitrary","proptest","Defines the [`Arbitrary`] trait and related free functions and type aliases. See the trait for more information.",null,null],[5,"any","proptest::arbitrary","Generates a [`Strategy`] producing [`Arbitrary`][trait Arbitrary] values of `A`. Unlike [`arbitrary`][fn arbitrary], it should be used for being explicit on what `A` is. For clarity, this may be a good idea.",null,{"inputs":[],"output":{"name":"strategyfor"}}],[5,"any_with","","Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the given configuration arguments passed in `args`. Unlike [`arbitrary_with`], it should be used for being explicit on what `A` is. For clarity, this may be a good idea.",null,{"inputs":[{"name":"paramsfor"}],"output":{"name":"strategyfor"}}],[5,"arbitrary","","Generates a [`Strategy`] producing [`Arbitrary`] values of `A`. Works better with type inference than [`any::<A>()`].",null,{"inputs":[],"output":{"name":"s"}}],[5,"arbitrary_with","","Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the given configuration arguments passed in `args`. Works better with type inference than [`any_with::<A>(args)`].",null,{"inputs":[{"name":"p"}],"output":{"name":"s"}}],[0,"functor","","Provides higher order `Arbitrary` traits. This is mainly for use by `proptest_derive`.",null,null],[8,"ArbitraryF1","proptest::arbitrary::functor","`ArbitraryF1` lets you lift a [`Strategy`] to unary type constructors such as `Box`, `Vec`, and `Option`.",null,null],[16,"Parameters","","The type of parameters that [`lift1_with`] accepts for configuration of the lifted and generated [`Strategy`]. Parameters must implement [`Default`].",0,null],[11,"lift1","","Lifts a given [`Strategy`] to a new [`Strategy`] for the (presumably) bigger type. This is useful for lifting a `Strategy` for `SomeType` to a container such as `Vec<SomeType>`.",0,{"inputs":[{"name":"as"}],"output":{"name":"boxedstrategy"}}],[10,"lift1_with","","Lifts a given [`Strategy`] to a new [`Strategy`] for the (presumably) bigger type. This is useful for lifting a `Strategy` for `SomeType` to a container such as `Vec` of `SomeType`. The composite strategy is passed the arguments given in `args`.",0,null],[8,"ArbitraryF2","","`ArbitraryF2` lets you lift [`Strategy`] to binary type constructors such as `Result`, `HashMap`.",null,null],[16,"Parameters","","The type of parameters that [`lift2_with`] accepts for configuration of the lifted and generated [`Strategy`]. Parameters must implement [`Default`].",1,null],[11,"lift2","","Lifts two given strategies to a new [`Strategy`] for the (presumably) bigger type. This is useful for lifting a `Strategy` for `Type1` and one for `Type2` to a container such as `HashMap<Type1, Type2>`.",1,{"inputs":[{"name":"as"},{"name":"bs"}],"output":{"name":"boxedstrategy"}}],[10,"lift2_with","","Lifts two given strategies to a new [`Strategy`] for the (presumably) bigger type. This is useful for lifting a `Strategy` for `Type1` and one for `Type2` to a container such as `HashMap<Type1, Type2>`. The composite strategy is passed the arguments given in `args`.",1,null],[6,"StrategyFor","proptest::arbitrary","`StrategyFor` allows you to mention the type of [`Strategy`] for the input type `A` without directly using associated types or without resorting to existential types. This way, if implementation of [`Arbitrary`] changes, your tests should not break. This can be especially beneficial when the type of `Strategy` that you are dealing with is very long in name (the case with generics).",null,null],[6,"ParamsFor","","`ParamsFor` allows you to mention the type of [`Parameters`] for the input type `A` without directly using associated types or without resorting to existential types. This way, if implementation of [`Arbitrary`] changes, your tests should not break.",null,null],[6,"SMapped","","A static map from a strategy of `I` to `O`.",null,null],[6,"Mapped","","A normal map from a strategy of `I` to `O`.",null,null],[8,"Arbitrary","","Arbitrary determines a canonical [`Strategy`] for the implementing type.",null,null],[16,"Parameters","","The type of parameters that [`arbitrary_with`] accepts for configuration of the generated [`Strategy`]. Parameters must implement [`Default`].",2,null],[11,"arbitrary","","Generates a [`Strategy`] for producing arbitrary values of type the implementing type (`Self`).",2,null],[10,"arbitrary_with","","Generates a [`Strategy`] for producing arbitrary values of type the implementing type (`Self`). The strategy is passed the arguments given in args.",2,null],[16,"Strategy","","The type of [`Strategy`] used to generate values of type `Self`.",2,null],[0,"array","proptest","Support for strategies producing fixed-length arrays.",null,null],[3,"UniformArrayStrategy","proptest::array","A `Strategy` which generates fixed-size arrays containing values drawn from an inner strategy.",null,null],[3,"ArrayValueTree","","A `ValueTree` operating over a fixed-size array.",null,null],[5,"uniform1","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform2","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform3","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform4","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform5","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform6","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform7","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform8","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform9","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform10","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform11","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform12","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform13","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform14","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform15","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform16","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform17","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform18","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform19","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform20","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform21","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform22","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform23","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform24","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform25","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform26","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform27","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform28","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform29","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform30","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform31","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[5,"uniform32","","Create a strategy to generate fixed-length arrays.",null,{"inputs":[{"name":"s"}],"output":{"name":"uniformarraystrategy"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"uniformarraystrategy"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly create a `UniformArrayStrategy`.",3,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"arrayvaluetree"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_tree","","",3,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",4,null],[11,"simplify","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"bits","proptest","Strategies for working with bit sets.",null,null],[3,"BitSetStrategy","proptest::bits","Generates values as a set of bits between the two bounds.",null,null],[3,"SampledBitSetStrategy","","Generates bit sets with a particular number of bits set.",null,null],[3,"BitSetValueTree","","Value tree produced by `BitSetStrategy` and `SampledBitSetStrategy`.",null,null],[0,"u8","","",null,null],[5,"between","proptest::bits::u8","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["u8"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"u8"}],"output":{"generics":["u8"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[17,"ANY","","Generates integers where all bits may be set.",null,null],[0,"u16","proptest::bits","",null,null],[5,"between","proptest::bits::u16","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["u16"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"u16"}],"output":{"generics":["u16"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[17,"ANY","","Generates integers where all bits may be set.",null,null],[0,"u32","proptest::bits","",null,null],[5,"between","proptest::bits::u32","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["u32"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["u32"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[17,"ANY","","Generates integers where all bits may be set.",null,null],[0,"u64","proptest::bits","",null,null],[5,"between","proptest::bits::u64","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["u64"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"u64"}],"output":{"generics":["u64"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[17,"ANY","","Generates integers where all bits may be set.",null,null],[0,"i8","proptest::bits","",null,null],[5,"between","proptest::bits::i8","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["i8"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"i8"}],"output":{"generics":["i8"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[17,"ANY","","Generates integers where all bits may be set.",null,null],[0,"i16","proptest::bits","",null,null],[5,"between","proptest::bits::i16","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["i16"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"i16"}],"output":{"generics":["i16"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[17,"ANY","","Generates integers where all bits may be set.",null,null],[0,"i32","proptest::bits","",null,null],[5,"between","proptest::bits::i32","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["i32"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"i32"}],"output":{"generics":["i32"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[17,"ANY","","Generates integers where all bits may be set.",null,null],[0,"i64","proptest::bits","",null,null],[5,"between","proptest::bits::i64","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["i64"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"i64"}],"output":{"generics":["i64"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[17,"ANY","","Generates integers where all bits may be set.",null,null],[0,"usize","proptest::bits","",null,null],[5,"between","proptest::bits::usize","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["usize"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"usize"}],"output":{"generics":["usize"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[0,"isize","proptest::bits","",null,null],[5,"between","proptest::bits::isize","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["isize"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"isize"}],"output":{"generics":["isize"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[0,"bitset","proptest::bits","",null,null],[5,"between","proptest::bits::bitset","Generates values where bits between the given bounds may be set.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"generics":["bitset"],"name":"bitsetstrategy"}}],[5,"masked","","Generates values where any bits set in `mask` (and no others) may be set.",null,{"inputs":[{"name":"bitset"}],"output":{"generics":["bitset"],"name":"bitsetstrategy"}}],[5,"sampled","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",null,null],[8,"BitSetLike","proptest::bits","Trait for types which can be handled with `BitSetStrategy`.",null,null],[10,"new_bitset","","Create a new value of `Self` with space for up to `max` bits, all initialised to zero.",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"len","","Return an upper bound on the greatest bit set plus one.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"test","","Test whether the given bit is set.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set","","Set the given bit.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"clear","","Clear the given bit.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"count","","Return the number of bits set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bitsetstrategy"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a strategy which generates values where bits between `min` (inclusive) and `max` (exclusive) may be set.",6,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"masked","","Create a strategy which generates values where any bits set (and only those bits) in `mask` may be set.",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new_tree","","",6,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sampledbitsetstrategy"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a strategy which generates values where bits within the bounds given by `bits` may be set. The number of bits that are set is chosen to be in the range given by `size`.",7,null],[11,"new_tree","","",7,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bitsetvaluetree"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"simplify","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"bool","proptest","Strategies for generating `bool` values.",null,null],[3,"Any","proptest::bool","The type of the `ANY` constant.",null,null],[3,"Weighted","","The return type from `weighted()`.",null,null],[3,"BoolValueTree","","The `ValueTree` to shrink booleans to false.",null,null],[5,"weighted","","Generates boolean values by picking `true` with the given `probability` (1.0 = always true, 0.0 = always false).",null,{"inputs":[{"name":"f64"}],"output":{"name":"weighted"}}],[17,"ANY","","Generates boolean values by picking `true` or `false` uniformly.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",9,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",10,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"boolvaluetree"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"simplify","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"char","proptest","Strategies for generating `char` values.",null,null],[3,"CharStrategy","proptest::char","Strategy for generating `char`s.",null,null],[3,"CharValueTree","","The `ValueTree` corresponding to `CharStrategy`.",null,null],[5,"select_char","","Selects a random character the way `CharStrategy` does.",null,null],[5,"any","","Creates a `CharStrategy` which picks from literally any character, with the default biases.",null,{"inputs":[],"output":{"name":"charstrategy"}}],[5,"range","","Creates a `CharStrategy` which selects characters within the given endpoints, inclusive, using the default biases.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"charstrategy"}}],[5,"ranges","","Creates a `CharStrategy` which selects characters within the given ranges, all inclusive, using the default biases.",null,{"inputs":[{"name":"cow"}],"output":{"name":"charstrategy"}}],[17,"DEFAULT_SPECIAL_CHARS","","A default set of characters to consider as \"special\" during character generation.",null,null],[17,"DEFAULT_PREFERRED_RANGES","","A default sequence of ranges used preferentially when generating random characters.",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"charstrategy"}}],[11,"new","","Construct a new `CharStrategy` with the parameters it will pass to the function underlying `select_char()`.",12,{"inputs":[{"name":"cow"},{"name":"cow"},{"name":"cow"}],"output":{"name":"self"}}],[11,"new_borrowed","","Same as `CharStrategy::new()` but using `Cow::Borrowed` for all parts.",12,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"charvaluetree"}}],[11,"new_tree","","",12,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",13,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"simplify","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"collection","proptest","Strategies for generating `std::collections` of values.",null,null],[3,"SizeRange","proptest::collection","The minimum and maximum range/bounds on the size of a collection. The interval must form a subset of `[0, std::usize::MAX]`.",null,null],[3,"VecStrategy","","Strategy to create `Vec`s with a length in a certain range.",null,null],[3,"VecDequeStrategy","","Strategy to create `VecDeque`s with a length in a certain range.",null,null],[3,"VecDequeValueTree","","`ValueTree` corresponding to `VecDequeStrategy`.",null,null],[3,"LinkedListStrategy","","Strategy to create `LinkedList`s with a length in a certain range.",null,null],[3,"LinkedListValueTree","","`ValueTree` corresponding to `LinkedListStrategy`.",null,null],[3,"BinaryHeapStrategy","","Strategy to create `BinaryHeap`s with a length in a certain range.",null,null],[3,"BinaryHeapValueTree","","`ValueTree` corresponding to `BinaryHeapStrategy`.",null,null],[3,"HashSetStrategy","","Strategy to create `HashSet`s with a length in a certain range.",null,null],[3,"HashSetValueTree","","`ValueTree` corresponding to `HashSetStrategy`.",null,null],[3,"BTreeSetStrategy","","Strategy to create `BTreeSet`s with a length in a certain range.",null,null],[3,"BTreeSetValueTree","","`ValueTree` corresponding to `BTreeSetStrategy`.",null,null],[3,"HashMapStrategy","","Strategy to create `HashMap`s with a length in a certain range.",null,null],[3,"HashMapValueTree","","`ValueTree` corresponding to `HashMapStrategy`.",null,null],[3,"BTreeMapStrategy","","Strategy to create `BTreeMap`s with a length in a certain range.",null,null],[3,"BTreeMapValueTree","","`ValueTree` corresponding to `BTreeMapStrategy`.",null,null],[3,"VecValueTree","","`ValueTree` corresponding to `VecStrategy`.",null,null],[5,"size_range","","Creates a `SizeRange` from some value that is convertible into it.",null,null],[5,"vec","","Create a strategy to generate `Vec`s containing elements drawn from `element` and with a size range given by `size`.",null,null],[5,"vec_deque","","Create a strategy to generate `VecDeque`s containing elements drawn from `element` and with a size range given by `size`.",null,null],[5,"linked_list","","Create a strategy to generate `LinkedList`s containing elements drawn from `element` and with a size range given by `size`.",null,null],[5,"binary_heap","","Create a strategy to generate `BinaryHeap`s containing elements drawn from `element` and with a size range given by `size`.",null,null],[5,"hash_set","","Create a strategy to generate `HashSet`s containing elements drawn from `element` and with a size range given by `size`.",null,null],[5,"btree_set","","Create a strategy to generate `BTreeSet`s containing elements drawn from `element` and with a size range given by `size`.",null,null],[5,"hash_map","","Create a strategy to generate `HashMap`s containing keys and values drawn from `key` and `value` respectively, and with a size within the given range.",null,null],[5,"btree_map","","Create a strategy to generate `BTreeMap`s containing keys and values drawn from `key` and `value` respectively, and with a size within the given range.",null,null],[11,"default","","Constructs a `SizeRange` equivalent to `size_range(0..100)`.",14,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a `SizeBounds` from a `RangeInclusive<usize>`.",14,{"inputs":[{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"self"}}],[11,"with","","Merges self together with some other argument producing a product type expected by some impelementations of `A: Arbitrary` in `A::Parameters`. This can be more ergonomic to work with and may help type inference.",14,null],[11,"lift","","Merges self together with some other argument generated with a default value producing a product type expected by some impelementations of `A: Arbitrary` in `A::Parameters`. This can be more ergonomic to work with and may help type inference.",14,null],[11,"from","","",14,null],[11,"from","","",14,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",14,{"inputs":[{"generics":["usize"],"name":"rangeto"}],"output":{"name":"self"}}],[11,"from","","",14,{"inputs":[{"generics":["usize"],"name":"range"}],"output":{"name":"self"}}],[11,"from","","",14,{"inputs":[{"generics":["usize"],"name":"rangeinclusive"}],"output":{"name":"self"}}],[11,"from","","",14,{"inputs":[{"generics":["usize"],"name":"rangetoinclusive"}],"output":{"name":"self"}}],[11,"add","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"sizerange"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"sizerange"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"sizerange"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"vecstrategy"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vecdequestrategy"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"vecdequevaluetree"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",16,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",17,null],[11,"simplify","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"linkedliststrategy"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"linkedlistvaluetree"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",18,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",19,null],[11,"simplify","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"binaryheapstrategy"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"binaryheapvaluetree"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",20,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",21,null],[11,"simplify","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"hashsetstrategy"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"hashsetvaluetree"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",22,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",23,null],[11,"simplify","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"btreesetstrategy"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"btreesetvaluetree"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",24,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",25,null],[11,"simplify","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"hashmapstrategy"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"hashmapvaluetree"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",26,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",27,null],[11,"simplify","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"btreemapstrategy"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"btreemapvaluetree"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",28,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",29,null],[11,"simplify","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vecvaluetree"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",15,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"simplify","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"num","proptest","Strategies to generate numeric values (as opposed to integers used as bit fields).",null,null],[0,"i8","proptest::num","",null,null],[3,"Any","proptest::num::i8","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",31,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",32,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"current","","",32,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"simplify","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"i16","proptest::num","",null,null],[3,"Any","proptest::num::i16","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",33,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",34,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"current","","",34,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"simplify","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"i32","proptest::num","",null,null],[3,"Any","proptest::num::i32","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",35,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",36,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"current","","",36,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"simplify","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"i64","proptest::num","",null,null],[3,"Any","proptest::num::i64","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",37,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",38,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"current","","",38,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"simplify","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"i128","proptest::num","",null,null],[3,"Any","proptest::num::i128","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",39,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",40,{"inputs":[{"name":"i128"}],"output":{"name":"self"}}],[11,"current","","",40,{"inputs":[{"name":"self"}],"output":{"name":"i128"}}],[11,"simplify","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"isize","proptest::num","",null,null],[3,"Any","proptest::num::isize","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",41,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",42,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"current","","",42,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"simplify","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"u8","proptest::num","",null,null],[3,"Any","proptest::num::u8","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",43,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",44,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"new_above","","Creates a new binary searcher which will not search below the given `lo` value.",44,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"self"}}],[11,"current","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"simplify","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"u16","proptest::num","",null,null],[3,"Any","proptest::num::u16","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",45,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",46,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"new_above","","Creates a new binary searcher which will not search below the given `lo` value.",46,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"current","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"simplify","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"u32","proptest::num","",null,null],[3,"Any","proptest::num::u32","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",47,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",48,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"new_above","","Creates a new binary searcher which will not search below the given `lo` value.",48,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"current","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"simplify","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"u64","proptest::num","",null,null],[3,"Any","proptest::num::u64","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",49,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",50,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"new_above","","Creates a new binary searcher which will not search below the given `lo` value.",50,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"self"}}],[11,"current","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"simplify","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"u128","proptest::num","",null,null],[3,"Any","proptest::num::u128","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",51,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",52,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"new_above","","Creates a new binary searcher which will not search below the given `lo` value.",52,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"self"}}],[11,"current","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u128"}}],[11,"simplify","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"usize","proptest::num","",null,null],[3,"Any","proptest::num::usize","Type of the `ANY` constant.",null,null],[3,"BinarySearch","","Shrinks an integer towards 0, using binary search to find boundary points.",null,null],[17,"ANY","","Generates integers with completely arbitrary values, uniformly distributed over the whole range.",null,null],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",53,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",54,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new_above","","Creates a new binary searcher which will not search below the given `lo` value.",54,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"current","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"simplify","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"f32","proptest::num","",null,null],[3,"Any","proptest::num::f32","Strategies which produce floating-point values from particular classes. See the various `Any`-typed constants in this module.",null,null],[3,"BinarySearch","","Shrinks a float towards 0, using binary search to find boundary points.",null,null],[17,"POSITIVE","","Generates positive floats",null,null],[17,"NEGATIVE","","Generates negative floats.",null,null],[17,"NORMAL","","Generates \"normal\" floats.",null,null],[17,"SUBNORMAL","","Generates subnormal floats.",null,null],[17,"ZERO","","Generates zero-valued floats.",null,null],[17,"INFINITE","","Generates infinity floats.",null,null],[17,"QUIET_NAN","","Generates \"Quiet NaN\" floats.",null,null],[17,"SIGNALING_NAN","","Generates \"Signaling NaN\" floats if allowed by the platform.",null,null],[17,"ANY","","Generates literally arbitrary floating-point values, including infinities and quiet NaNs (but not signaling NaNs).",null,null],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitor","","",55,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor_assign","","",55,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"new_tree","","",55,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",56,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"current","","",56,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"simplify","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"f64","proptest::num","",null,null],[3,"Any","proptest::num::f64","Strategies which produce floating-point values from particular classes. See the various `Any`-typed constants in this module.",null,null],[3,"BinarySearch","","Shrinks a float towards 0, using binary search to find boundary points.",null,null],[17,"POSITIVE","","Generates positive floats",null,null],[17,"NEGATIVE","","Generates negative floats.",null,null],[17,"NORMAL","","Generates \"normal\" floats.",null,null],[17,"SUBNORMAL","","Generates subnormal floats.",null,null],[17,"ZERO","","Generates zero-valued floats.",null,null],[17,"INFINITE","","Generates infinity floats.",null,null],[17,"QUIET_NAN","","Generates \"Quiet NaN\" floats.",null,null],[17,"SIGNALING_NAN","","Generates \"Signaling NaN\" floats if allowed by the platform.",null,null],[17,"ANY","","Generates literally arbitrary floating-point values, including infinities and quiet NaNs (but not signaling NaNs).",null,null],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitor","","",57,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor_assign","","",57,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"new_tree","","",57,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"binarysearch"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new binary searcher starting at the given value.",58,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"current","","",58,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"simplify","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"strategy","proptest","Defines the core traits used by Proptest.",null,null],[3,"NoShrink","proptest::strategy","Wraps a `Strategy` or `ValueTree` to suppress shrinking of generated values.",null,null],[3,"BoxedStrategy","","A boxed `Strategy` trait object as produced by `Strategy::boxed()`.",null,null],[3,"SBoxedStrategy","","A boxed `Strategy` trait object which is also `Sync` and `Send`, as produced by `Strategy::sboxed()`.",null,null],[3,"CheckStrategySanityOptions","","Options passed to `check_strategy_sanity()`.",null,null],[12,"strict_complicate_after_simplify","","If true (the default), require that `complicate()` return `true` at least once after any call to `simplify()` which itself returns once.",59,null],[3,"Just","","A `Strategy` which always produces a single value value and never simplifies.",null,null],[12,"0","","The value produced by this strategy.",60,null],[3,"LazyJust","","A `Strategy` which always produces a single value value and never simplifies. If `T` is `Clone`, you should use `Just` instead.",null,null],[3,"Map","","`Strategy` and `ValueTree` map adaptor.",null,null],[3,"MapInto","","`Strategy` and `ValueTree` map into adaptor.",null,null],[3,"Perturb","","`Strategy` perturbation adaptor.",null,null],[3,"PerturbValueTree","","`ValueTree` perturbation adaptor.",null,null],[3,"Filter","","`Strategy` and `ValueTree` filter adaptor.",null,null],[3,"FilterMap","","`Strategy` and `ValueTree` filter_map adaptor.",null,null],[3,"FilterMapValueTree","","`ValueTree` corresponding to `FilterMap`.",null,null],[3,"Flatten","","Adaptor that flattens a `Strategy` which produces other `Strategy`s into a `Strategy` that picks one of those strategies and then picks values from it.",null,null],[3,"FlattenValueTree","","The `ValueTree` produced by `Flatten`.",null,null],[3,"IndFlatten","","Similar to `Flatten`, but does not shrink the input strategy.",null,null],[3,"IndFlattenMap","","Similar to `Map` plus `Flatten`, but does not shrink the input strategy and passes the original input through.",null,null],[3,"Union","","A `Strategy` which picks from one of several delegate `Stragegy`s.",null,null],[3,"UnionValueTree","","`ValueTree` corresponding to `Union`.",null,null],[3,"TupleUnion","","Similar to `Union`, but internally uses a tuple to hold the strategies.",null,null],[3,"TupleUnionValueTree","","`ValueTree` type produced by `TupleUnion`.",null,null],[3,"Recursive","","Return type from `Strategy::prop_recursive()`.",null,null],[3,"Shuffle","","`Strategy` shuffle adaptor.",null,null],[3,"ShuffleValueTree","","`ValueTree` shuffling adaptor.",null,null],[3,"Fuse","","Adaptor for `Strategy` and `ValueTree` which guards `simplify()` and `complicate()` to avoid contract violations.",null,null],[5,"check_strategy_sanity","","Run some tests on the given `Strategy` to ensure that it upholds the simplify/complicate contracts.",null,{"inputs":[{"name":"s"},{"generics":["checkstrategysanityoptions"],"name":"option"}],"output":null}],[5,"float_to_weight","","Convert a floating-point weight in the range (0.0,1.0) to a pair of weights that can be used with `Union` and similar.",null,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"noshrink"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",61,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",61,null],[11,"simplify","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new_tree","","",62,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"boxed","","",62,{"inputs":[{"name":"self"}],"output":{"name":"boxedstrategy"}}],[11,"new_tree","","",63,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"sboxed","","",63,{"inputs":[{"name":"self"}],"output":{"name":"sboxedstrategy"}}],[11,"boxed","","",63,{"inputs":[{"name":"self"}],"output":{"name":"boxedstrategy"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"checkstrategysanityoptions"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"just"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",60,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"simplify","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",60,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Constructs a `LazyJust` strategy given the function/closure that produces the value.",64,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"new_tree","","",64,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"simplify","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",64,null],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new_tree","","",65,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",65,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"simplify","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new_tree","","",66,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",66,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"simplify","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new_tree","","",67,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"current","","",68,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"simplify","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new_tree","","",69,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",69,null],[11,"simplify","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new_tree","","",70,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","",71,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"simplify","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"new","","Wrap `source` to flatten it.",72,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"new_tree","","",72,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","",73,null],[11,"simplify","","",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"indflatten"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",74,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new_tree","","",75,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a strategy which selects uniformly from the given delegate strategies.",76,null],[11,"new_weighted","","Create a strategy which selects from the given delegate strategies.",76,{"inputs":[{"generics":["w"],"name":"vec"}],"output":{"name":"self"}}],[11,"or","","Add `other` as an additional alternate strategy with weight 1.",76,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"new_tree","","",76,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"unionvaluetree"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","",77,null],[11,"simplify","","",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"tupleunion"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Wrap `tuple` in a `TupleUnion`.",78,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"new_tree","","",78,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"tupleunionvaluetree"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",79,null],[11,"simplify","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new_tree","","",80,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"shuffle"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",81,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"shufflevaluetree"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","",82,null],[11,"simplify","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"new","","Wrap the given `T` in `Fuse`.",83,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new_tree","","",83,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"may_simplify","","Return whether a call to `simplify()` may be productive.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"disallow_simplify","","Disallow any further calls to `simplify()` until a call to `complicate()` returns `true`.",83,{"inputs":[{"name":"self"}],"output":null}],[11,"may_complicate","","Return whether a call to `complicate()` may be productive.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"disallow_complicate","","Disallow any further calls to `complicate()` until a call to `simplify()` returns `true`.",83,{"inputs":[{"name":"self"}],"output":null}],[11,"freeze","","Prevent any further shrinking operations from occurring.",83,{"inputs":[{"name":"self"}],"output":null}],[11,"current","","",83,null],[11,"simplify","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"statics","","Modified versions of the normal strategy combinators which take specialised traits instead of normal functions.",null,null],[3,"Filter","proptest::strategy::statics","Static version of `strategy::Filter`.",null,null],[3,"Map","","Static version of `strategy::Map`.",null,null],[8,"FilterFn","","Essentially `Fn (&T) -> bool`.",null,null],[10,"apply","","Test whether `t` passes the filter.",84,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[8,"MapFn","","Essentially `Fn (T) -> Output`.",null,null],[16,"Output","","",85,null],[10,"apply","","Map `T` to `Output`.",85,null],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"new","","Adapt strategy `source` to reject values which do not pass `filter`, using `whence` as the reported reason/location.",86,{"inputs":[{"name":"s"},{"name":"reason"},{"name":"f"}],"output":{"name":"self"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",86,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",86,null],[11,"simplify","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"new","","Adapt strategy `source` by applying `fun` to values it produces.",87,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"self"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",87,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",87,null],[11,"simplify","","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[6,"NewTree","proptest::strategy","A new [`ValueTree`] from a [`Strategy`] when [`Ok`] or otherwise [`Err`] when a new value-tree can not be produced for some reason such as in the case of filtering with a predicate which always returns false. You should pass in your strategy as the type parameter.",null,null],[6,"ValueFor","","The value that functions under test use for a particular `Strategy`.",null,null],[6,"LazyJustFn","","Shorthand for `LazyJust<T, fn () -> T>`.",null,null],[6,"W","","A relative `weight` of a particular `Strategy` corresponding to `T` coupled with `T` itself. The weight is currently given in `u32`.",null,null],[8,"Strategy","","A strategy for producing arbitrary values of a given type.",null,null],[16,"Tree","","The value tree generated by this `Strategy`.",88,null],[16,"Value","","The type of value used by functions under test generated by this Strategy.",88,null],[10,"new_tree","","Generate a new value tree from the given runner.",88,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"prop_map","","Returns a strategy which produces values transformed by the function `fun`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"prop_map_into","","Returns a strategy which produces values of type `O` by transforming `Self` with `Into<O>`.",88,{"inputs":[{"name":"self"}],"output":{"name":"mapinto"}}],[11,"prop_perturb","","Returns a strategy which produces values transformed by the function `fun`, which is additionally given a random number generator.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"perturb"}}],[11,"prop_flat_map","","Maps values produced by this strategy into new strategies and picks values from those strategies.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["map"],"name":"flatten"}}],[11,"prop_ind_flat_map","","Maps values produced by this strategy into new strategies and picks values from those strategies while considering the new strategies to be independent.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["map"],"name":"indflatten"}}],[11,"prop_ind_flat_map2","","Similar to `prop_ind_flat_map()`, but produces 2-tuples with the input generated from `self` in slot 0 and the derived strategy in slot 1.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"indflattenmap"}}],[11,"prop_filter","","Returns a strategy which only produces values accepted by `fun`.",88,{"inputs":[{"name":"self"},{"name":"r"},{"name":"f"}],"output":{"name":"filter"}}],[11,"prop_filter_map","","Returns a strategy which only produces transformed values where `fun` returns `Some(value)` and rejects those where `fun` returns `None`.",88,null],[11,"prop_union","","Returns a strategy which picks uniformly from `self` and `other`.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"union"}}],[11,"prop_recursive","","Generate a recursive structure with `self` items as leaves.",88,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"recursive"}}],[11,"prop_shuffle","","Shuffle the contents of the values produced by this strategy.",88,{"inputs":[{"name":"self"}],"output":{"name":"shuffle"}}],[11,"boxed","","Erases the type of this `Strategy` so it can be passed around as a simple trait object.",88,{"inputs":[{"name":"self"}],"output":{"name":"boxedstrategy"}}],[11,"sboxed","","Erases the type of this `Strategy` so it can be passed around as a simple trait object.",88,{"inputs":[{"name":"self"}],"output":{"name":"sboxedstrategy"}}],[11,"no_shrink","","Wraps this strategy to prevent values from being subject to shrinking.",88,{"inputs":[{"name":"self"}],"output":{"name":"noshrink"}}],[8,"ValueTree","","A generated value and its associated shrinker.",null,null],[16,"Value","","The type of the value produced by this `ValueTree`.",89,null],[10,"current","","Returns the current value.",89,null],[10,"simplify","","Attempts to simplify the current value. Notionally, this sets the \"high\" value to the current value, and the current value to a \"halfway point\" between high and low, rounding towards low.",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"complicate","","Attempts to partially undo the last simplification. Notionally, this sets the \"low\" value to one plus the current value, and the current value to a \"halfway point\" between high and the new low, rounding towards low.",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Shuffleable","","A value which can be used with the `prop_shuffle` combinator.",null,null],[10,"shuffle_len","","Return the length of this collection.",90,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"shuffle_swap","","Swap the elements at the given indices.",90,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[0,"test_runner","proptest","State and functions for running proptest tests.",null,null],[3,"TestRng","proptest::test_runner","Proptest's random number generator.",null,null],[3,"MapFailurePersistence","","Failure persistence option that loads and saves seeds in memory on the heap. This may be useful when accumulating test failures across multiple `TestRunner` instances for external reporting or batched persistence.",null,null],[12,"map","","Backing map, keyed by source_file.",91,null],[3,"Config","","Configuration for how a proptest test should be run.",null,null],[12,"cases","","The number of successful test cases that must execute for the test as a whole to pass.",92,null],[12,"max_local_rejects","","The maximum number of individual inputs that may be rejected before the test as a whole aborts.",92,null],[12,"max_global_rejects","","The maximum number of combined inputs that may be rejected before the test as a whole aborts.",92,null],[12,"max_flat_map_regens","","The maximum number of times all `Flatten` combinators will attempt to regenerate values. This puts a limit on the worst-case exponential explosion that can happen with nested `Flatten`s.",92,null],[12,"failure_persistence","","Indicates whether and how to persist failed test results.",92,null],[12,"source_file","","File location of the current test, relevant for persistence and debugging.",92,null],[12,"test_name","","The fully-qualified name of the test being run, as would be passed to the test executable to run just that test.",92,null],[12,"fork","","If true, tests are run in a subprocess.",92,null],[12,"timeout","","If non-zero, tests are run in a subprocess and each generated case fails if it takes longer than this number of milliseconds.",92,null],[3,"Reason","","The reason for why something, such as a generated value, was rejected.",null,null],[3,"TestRunner","","State used when running a proptest test.",null,null],[4,"FileFailurePersistence","","Describes how failing test cases are persisted.",null,null],[13,"Off","","Completely disables persistence of failing test cases.",93,null],[13,"SourceParallel","","The path given to `TestRunner::set_source_file()` is parsed. The path is traversed up the directory tree until a directory containing a file named `lib.rs` or `main.rs` is found. A sibling to that directory with the name given by the string in this configuration is created, and a file with the same name and path relative to the source directory, but with the extension changed to `.txt`, is used.",93,null],[13,"WithSource","","The path given to `TestRunner::set_source_file()` is parsed. The extension of the path is changed to the string given in this configuration, and that filename is used.",93,null],[13,"Direct","","The string given in this option is directly used as a file path without any further processing.",93,null],[4,"TestCaseError","","Errors which can be returned from test cases to indicate non-successful completion.",null,null],[13,"Reject","","The input was not valid for the test case. This does not count as a test failure (nor a success); rather, it simply signals to generate a new input and try again.",94,null],[13,"Fail","","The code under test failed the test.",94,null],[4,"TestError","","A failure state from running test cases for a single test.",null,null],[13,"Abort","","The test was aborted for the given reason, for example, due to too many inputs having been rejected.",95,null],[13,"Fail","","A failing test case was found. The string indicates where and/or why the test failed. The `T` is the minimal input found to reproduce the failure.",95,null],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"testrng"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",96,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",96,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",96,null],[11,"try_fill_bytes","","",96,null],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"filefailurepersistence"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"filefailurepersistence"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"filefailurepersistence"}],"output":{"name":"bool"}}],[11,"default","","",93,{"inputs":[],"output":{"name":"self"}}],[11,"load_persisted_failures","","",93,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"vec"}}],[11,"save_persisted_failure","","",93,null],[11,"box_clone","","",93,{"inputs":[{"name":"self"}],"output":{"generics":["failurepersistence"],"name":"box"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"failurepersistence"}],"output":{"name":"bool"}}],[11,"as_any","","",93,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"mapfailurepersistence"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"mapfailurepersistence"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"mapfailurepersistence"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"mapfailurepersistence"}],"output":{"name":"bool"}}],[11,"load_persisted_failures","","",91,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"vec"}}],[11,"save_persisted_failure","","",91,null],[11,"box_clone","","",91,{"inputs":[{"name":"self"}],"output":{"generics":["failurepersistence"],"name":"box"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"failurepersistence"}],"output":{"name":"bool"}}],[11,"as_any","","",91,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"with_cases","","Constructs a `Config` only differing from the `default()` in the number of test cases required to pass the test successfully.",92,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"with_source_file","","Constructs a `Config` only differing from the `default()` in the source_file of the present test.",92,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"clone_with_source_file","","Constructs a `Config` only differing from the provided Config instance, `self`, in the source_file of the present test.",92,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"fork","","Return whether this configuration implies forking.",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"timeout","","Returns the configured timeout.",92,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"reason"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",97,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",97,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"name":"bool"}}],[11,"le","","",97,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"name":"bool"}}],[11,"gt","","",97,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"name":"bool"}}],[11,"ge","","",97,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"name":"bool"}}],[11,"cmp","","",97,{"inputs":[{"name":"self"},{"name":"reason"}],"output":{"name":"ordering"}}],[11,"hash","","",97,null],[11,"message","","Return the message for this `Reason`.",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",97,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",97,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",97,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"self"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"testcaseerror"}}],[11,"reject","","Rejects the generated test input as invalid for this test case. This does not count as a test failure (nor a success); rather, it simply signals to generate a new input and try again.",94,null],[11,"fail","","The code under test failed the test.",94,null],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",94,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"testerror"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"testerror"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"testerror"}],"output":{"name":"bool"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"testrunner"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a fresh `TestRunner` with the given configuration.",98,{"inputs":[{"name":"config"}],"output":{"name":"self"}}],[11,"rng","","Returns the RNG for this test run.",98,{"inputs":[{"name":"self"}],"output":{"name":"testrng"}}],[11,"new_rng","","Create a new, independent but deterministic RNG from the RNG in this runner.",98,{"inputs":[{"name":"self"}],"output":{"name":"testrng"}}],[11,"config","","Returns the configuration of this runner.",98,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"run","","Run test cases against `f`, choosing inputs via `strategy`.",98,null],[11,"run_one","","Run one specific test case against this runner.",98,null],[11,"reject_local","","Update the state to account for a local rejection from `whence`, and return `Ok` if the caller should keep going or `Err` to abort.",98,null],[11,"flat_map_regen","","Increment the counter of flat map regenerations and return whether it is still under the configured limit.",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[6,"TestCaseResult","","Convenience for the type returned by test cases.",null,null],[8,"FailurePersistence","","Provides external persistence for historical test failures by storing seeds.",null,null],[10,"load_persisted_failures","","Supply seeds associated with the given `source_file` that may be used by a `TestRunner`'s random number generator in order to consistently recreate a previously-failing `Strategy`-provided value.",99,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"vec"}}],[10,"save_persisted_failure","","Store a new failure-generating seed associated with the given `source_file`.",99,null],[10,"box_clone","","Delegate method for producing a trait object usable with `Clone`",99,{"inputs":[{"name":"self"}],"output":{"generics":["failurepersistence"],"name":"box"}}],[10,"eq","","Equality testing delegate required due to constraints of trait objects.",99,{"inputs":[{"name":"self"},{"name":"failurepersistence"}],"output":{"name":"bool"}}],[10,"as_any","","Assistant method for trait object comparison.",99,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[0,"tuple","proptest","Support for combining strategies into tuples.",null,null],[3,"TupleValueTree","proptest::tuple","Common `ValueTree` implementation for all tuple strategies.",null,null],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"tuplevaluetree"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `TupleValueTree` wrapping `inner`.",100,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"current","","",100,null],[11,"simplify","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"option","proptest","Strategies for generating `std::Option` values.",null,null],[3,"Probability","proptest::option","A probability in the range `[0.0, 1.0]` with a default of `0.5`.",null,null],[3,"OptionStrategy","","Strategy which generates `Option` values whose inner `Some` values are generated by another strategy.",null,null],[3,"OptionValueTree","","`ValueTree` type corresponding to `OptionStrategy`.",null,null],[5,"prob","","Creates a `Probability` from some value that is convertible into it.",null,null],[5,"of","","Return a strategy producing `Optional` values wrapping values from the given delegate strategy.",null,{"inputs":[{"name":"t"}],"output":{"name":"optionstrategy"}}],[5,"weighted","","Return a strategy producing `Optional` values wrapping values from the given delegate strategy.",null,null],[11,"default","","The default probability is 0.5, or 50% chance.",101,{"inputs":[],"output":{"name":"self"}}],[11,"from","","Creates a `Probability` from a `f64`.",101,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"new","","Creates a `Probability` from a `f64`.",101,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"with","","Merges self together with some other argument producing a product type expected by some impelementations of `A: Arbitrary` in `A::Parameters`. This can be more ergonomic to work with and may help type inference.",101,null],[11,"lift","","Merges self together with some other argument generated with a default value producing a product type expected by some impelementations of `A: Arbitrary` in `A::Parameters`. This can be more ergonomic to work with and may help type inference.",101,null],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"probability"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"probability"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"probability"}],"output":{"name":"bool"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"optionstrategy"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"optionvaluetree"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",102,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",103,null],[11,"simplify","","",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"result","proptest","Strategies for combining delegate strategies into `std::Result`s.",null,null],[3,"MaybeOk","proptest::result","Strategy which generates `Result`s using `Ok` and `Err` values from two delegate strategies.",null,null],[3,"MaybeOkValueTree","","`ValueTree` type corresponding to `MaybeOk`.",null,null],[3,"MaybeErr","","Strategy which generates `Result`s using `Ok` and `Err` values from two delegate strategies.",null,null],[3,"MaybeErrValueTree","","`ValueTree` type corresponding to `MaybeErr`.",null,null],[5,"maybe_ok","","Create a strategy for `Result`s where `Ok` values are taken from `t` and `Err` values are taken from `e`.",null,{"inputs":[{"name":"t"},{"name":"e"}],"output":{"name":"maybeok"}}],[5,"maybe_ok_weighted","","Create a strategy for `Result`s where `Ok` values are taken from `t` and `Err` values are taken from `e`.",null,null],[5,"maybe_err","","Create a strategy for `Result`s where `Ok` values are taken from `t` and `Err` values are taken from `e`.",null,{"inputs":[{"name":"t"},{"name":"e"}],"output":{"name":"maybeerr"}}],[5,"maybe_err_weighted","","Create a strategy for `Result`s where `Ok` values are taken from `t` and `Err` values are taken from `e`.",null,null],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"maybeok"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"maybeokvaluetree"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",104,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",105,null],[11,"simplify","","",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"maybeerr"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"maybeerrvaluetree"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",106,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",107,null],[11,"simplify","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"sample","proptest","Strategies for generating values by taking samples of collections.",null,null],[3,"Subsequence","proptest::sample","Strategy to generate `Vec`s by sampling a subsequence from another collection.",null,null],[3,"SubsequenceValueTree","","`ValueTree` type for `Subsequence`.",null,null],[3,"Select","","Strategy to produce one value from a fixed collection of options.",null,null],[3,"SelectValueTree","","`ValueTree` corresponding to `Select`.",null,null],[5,"subsequence","","Sample subsequences whose size are within `size` from the given collection `values`.",null,null],[5,"select","","Create a strategy which uniformly selects one value from `values`.",null,null],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"subsequence"}}],[11,"new_tree","","",108,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"subsequencevaluetree"}}],[11,"current","","",109,null],[11,"simplify","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"select"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"selectvaluetree"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",110,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",111,null],[11,"simplify","","",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"string","proptest","Strategies for generating strings and byte strings from regular expressions.",null,null],[3,"StringParam","proptest::string","Wraps the regex that forms the `Strategy` for `String` so that a sensible `Default` can be given. The default is a string of non-control characters.",null,null],[3,"RegexGeneratorStrategy","","Strategy which generates values (i.e., `String` or `Vec<u8>`) matching a regular expression.",null,null],[3,"RegexGeneratorValueTree","","`ValueTree` corresponding to `RegexGeneratorStrategy`.",null,null],[4,"Error","","Errors which may occur when preparing a regular expression for use with string generation.",null,null],[13,"RegexSyntax","","The string passed as the regex was not syntactically valid.",112,null],[13,"UnsupportedRegex","","The regex was syntactically valid, but contains elements not supported by proptest.",112,null],[5,"string_regex","","Creates a strategy which generates strings matching the given regular expression.",null,{"inputs":[{"name":"str"}],"output":{"generics":["regexgeneratorstrategy","error"],"name":"result"}}],[5,"string_regex_parsed","","Like `string_regex()`, but allows providing a pre-parsed expression.",null,{"inputs":[{"name":"hir"}],"output":{"generics":["regexgeneratorstrategy","error"],"name":"result"}}],[5,"bytes_regex","","Creates a strategy which generates byte strings matching the given regular expression.",null,{"inputs":[{"name":"str"}],"output":{"generics":["regexgeneratorstrategy","error"],"name":"result"}}],[5,"bytes_regex_parsed","","Like `bytes_regex()`, but allows providing a pre-parsed expression.",null,{"inputs":[{"name":"hir"}],"output":{"generics":["regexgeneratorstrategy","error"],"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",112,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",112,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",112,{"inputs":[{"name":"parseerror"}],"output":{"name":"error"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"stringparam"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"stringparam"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"stringparam"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"self"},{"name":"stringparam"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",113,{"inputs":[{"name":"self"},{"name":"stringparam"}],"output":{"name":"bool"}}],[11,"le","","",113,{"inputs":[{"name":"self"},{"name":"stringparam"}],"output":{"name":"bool"}}],[11,"gt","","",113,{"inputs":[{"name":"self"},{"name":"stringparam"}],"output":{"name":"bool"}}],[11,"ge","","",113,{"inputs":[{"name":"self"},{"name":"stringparam"}],"output":{"name":"bool"}}],[11,"cmp","","",113,{"inputs":[{"name":"self"},{"name":"stringparam"}],"output":{"name":"ordering"}}],[11,"hash","","",113,null],[11,"from","","",113,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"default","","",113,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tree","","",114,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"current","","",115,null],[11,"simplify","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"complicate","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"prelude","proptest","Re-exports the most commonly-needed APIs of proptest.",null,null],[8,"RngCore","proptest::prelude","The core of a random number generator.",null,null],[10,"next_u32","","Return the next random `u32`.",116,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"next_u64","","Return the next random `u64`.",116,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"fill_bytes","","Fill `dest` with random data.",116,null],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",116,null],[8,"Rng","","An automatically-implemented extension trait on [`RngCore`] providing high-level generic methods for sampling values and other convenience methods.",null,null],[11,"gen","","Return a random value supporting the [`Standard`] distribution.",117,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`), i.e. inclusive of `low` and exclusive of `high`.",117,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"sample","","Sample a new value, using the given distribution.",117,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"t"}}],[11,"sample_iter","","Create an iterator that generates values using the given distribution.",117,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"distiter"}}],[11,"fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",117,null],[11,"try_fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",117,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"gen_bool","","Return a bool with a probability `p` of being true.",117,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"choose","","Return a random element from `values`.",117,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",117,null],[11,"shuffle","","Shuffle a mutable slice in place.",117,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",117,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",117,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",117,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[3,"BoxedStrategy","","A boxed `Strategy` trait object as produced by `Strategy::boxed()`.",null,null],[3,"Just","","A `Strategy` which always produces a single value value and never simplifies.",null,null],[12,"0","","The value produced by this strategy.",60,null],[3,"SBoxedStrategy","","A boxed `Strategy` trait object which is also `Sync` and `Send`, as produced by `Strategy::sboxed()`.",null,null],[3,"ProptestConfig","","Configuration for how a proptest test should be run.",null,null],[12,"cases","","The number of successful test cases that must execute for the test as a whole to pass.",92,null],[12,"max_local_rejects","","The maximum number of individual inputs that may be rejected before the test as a whole aborts.",92,null],[12,"max_global_rejects","","The maximum number of combined inputs that may be rejected before the test as a whole aborts.",92,null],[12,"max_flat_map_regens","","The maximum number of times all `Flatten` combinators will attempt to regenerate values. This puts a limit on the worst-case exponential explosion that can happen with nested `Flatten`s.",92,null],[12,"failure_persistence","","Indicates whether and how to persist failed test results.",92,null],[12,"source_file","","File location of the current test, relevant for persistence and debugging.",92,null],[12,"test_name","","The fully-qualified name of the test being run, as would be passed to the test executable to run just that test.",92,null],[12,"fork","","If true, tests are run in a subprocess.",92,null],[12,"timeout","","If non-zero, tests are run in a subprocess and each generated case fails if it takes longer than this number of milliseconds.",92,null],[4,"TestCaseError","","Errors which can be returned from test cases to indicate non-successful completion.",null,null],[13,"Reject","","The input was not valid for the test case. This does not count as a test failure (nor a success); rather, it simply signals to generate a new input and try again.",94,null],[13,"Fail","","The code under test failed the test.",94,null],[5,"any","","Generates a [`Strategy`] producing [`Arbitrary`][trait Arbitrary] values of `A`. Unlike [`arbitrary`][fn arbitrary], it should be used for being explicit on what `A` is. For clarity, this may be a good idea.",null,{"inputs":[],"output":{"name":"strategyfor"}}],[5,"any_with","","Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the given configuration arguments passed in `args`. Unlike [`arbitrary_with`], it should be used for being explicit on what `A` is. For clarity, this may be a good idea.",null,{"inputs":[{"name":"paramsfor"}],"output":{"name":"strategyfor"}}],[0,"prop","","Re-exports the entire public API of proptest so that an import of `prelude` allows simply writing, for example, `prop::num::i32::ANY` rather than `proptest::num::i32::ANY` plus a separate `use proptest;`.",null,null],[8,"Strategy","","A strategy for producing arbitrary values of a given type.",null,null],[16,"Tree","","The value tree generated by this `Strategy`.",88,null],[16,"Value","","The type of value used by functions under test generated by this Strategy.",88,null],[10,"new_tree","","Generate a new value tree from the given runner.",88,{"inputs":[{"name":"self"},{"name":"testrunner"}],"output":{"name":"newtree"}}],[11,"prop_map","proptest::strategy","Returns a strategy which produces values transformed by the function `fun`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"prop_map_into","","Returns a strategy which produces values of type `O` by transforming `Self` with `Into<O>`.",88,{"inputs":[{"name":"self"}],"output":{"name":"mapinto"}}],[11,"prop_perturb","","Returns a strategy which produces values transformed by the function `fun`, which is additionally given a random number generator.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"perturb"}}],[11,"prop_flat_map","","Maps values produced by this strategy into new strategies and picks values from those strategies.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["map"],"name":"flatten"}}],[11,"prop_ind_flat_map","","Maps values produced by this strategy into new strategies and picks values from those strategies while considering the new strategies to be independent.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["map"],"name":"indflatten"}}],[11,"prop_ind_flat_map2","","Similar to `prop_ind_flat_map()`, but produces 2-tuples with the input generated from `self` in slot 0 and the derived strategy in slot 1.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"indflattenmap"}}],[11,"prop_filter","","Returns a strategy which only produces values accepted by `fun`.",88,{"inputs":[{"name":"self"},{"name":"r"},{"name":"f"}],"output":{"name":"filter"}}],[11,"prop_filter_map","","Returns a strategy which only produces transformed values where `fun` returns `Some(value)` and rejects those where `fun` returns `None`.",88,null],[11,"prop_union","","Returns a strategy which picks uniformly from `self` and `other`.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"union"}}],[11,"prop_recursive","","Generate a recursive structure with `self` items as leaves.",88,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"recursive"}}],[11,"prop_shuffle","","Shuffle the contents of the values produced by this strategy.",88,{"inputs":[{"name":"self"}],"output":{"name":"shuffle"}}],[11,"boxed","","Erases the type of this `Strategy` so it can be passed around as a simple trait object.",88,{"inputs":[{"name":"self"}],"output":{"name":"boxedstrategy"}}],[11,"sboxed","","Erases the type of this `Strategy` so it can be passed around as a simple trait object.",88,{"inputs":[{"name":"self"}],"output":{"name":"sboxedstrategy"}}],[11,"no_shrink","","Wraps this strategy to prevent values from being subject to shrinking.",88,{"inputs":[{"name":"self"}],"output":{"name":"noshrink"}}],[8,"Arbitrary","proptest::prelude","Arbitrary determines a canonical [`Strategy`] for the implementing type.",null,null],[16,"Parameters","","The type of parameters that [`arbitrary_with`] accepts for configuration of the generated [`Strategy`]. Parameters must implement [`Default`].",2,null],[11,"arbitrary","proptest::arbitrary","Generates a [`Strategy`] for producing arbitrary values of type the implementing type (`Self`).",2,null],[10,"arbitrary_with","proptest::prelude","Generates a [`Strategy`] for producing arbitrary values of type the implementing type (`Self`). The strategy is passed the arguments given in args.",2,null],[16,"Strategy","","The type of [`Strategy`] used to generate values of type `Self`.",2,null],[14,"proptest","proptest","Easily define `proptest` tests.",null,null],[14,"prop_assume","","Rejects the test input if assumptions are not met.",null,null],[14,"prop_oneof","","Produce a strategy which picks one of the listed choices.",null,null],[14,"prop_compose","","Convenience to define functions which produce new strategies.",null,null],[14,"prop_assert","","Similar to `assert!` from std, but returns a test failure instead of panicking if the condition fails.",null,null],[14,"prop_assert_eq","","Similar to `assert_eq!` from std, but returns a test failure instead of panicking if the condition fails.",null,null],[14,"prop_assert_ne","","Similar to `assert_ne!` from std, but returns a test failure instead of panicking if the condition fails.",null,null],[11,"arbitrary","proptest::arbitrary","Generates a [`Strategy`] for producing arbitrary values of type the implementing type (`Self`).",2,null],[11,"arbitrary_with","proptest::option","",101,null],[11,"arbitrary_with","proptest::collection","",14,null],[11,"prop_map","proptest::strategy","Returns a strategy which produces values transformed by the function `fun`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"prop_map_into","","Returns a strategy which produces values of type `O` by transforming `Self` with `Into<O>`.",88,{"inputs":[{"name":"self"}],"output":{"name":"mapinto"}}],[11,"prop_perturb","","Returns a strategy which produces values transformed by the function `fun`, which is additionally given a random number generator.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"perturb"}}],[11,"prop_flat_map","","Maps values produced by this strategy into new strategies and picks values from those strategies.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["map"],"name":"flatten"}}],[11,"prop_ind_flat_map","","Maps values produced by this strategy into new strategies and picks values from those strategies while considering the new strategies to be independent.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["map"],"name":"indflatten"}}],[11,"prop_ind_flat_map2","","Similar to `prop_ind_flat_map()`, but produces 2-tuples with the input generated from `self` in slot 0 and the derived strategy in slot 1.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"indflattenmap"}}],[11,"prop_filter","","Returns a strategy which only produces values accepted by `fun`.",88,{"inputs":[{"name":"self"},{"name":"r"},{"name":"f"}],"output":{"name":"filter"}}],[11,"prop_filter_map","","Returns a strategy which only produces transformed values where `fun` returns `Some(value)` and rejects those where `fun` returns `None`.",88,null],[11,"prop_union","","Returns a strategy which picks uniformly from `self` and `other`.",88,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"union"}}],[11,"prop_recursive","","Generate a recursive structure with `self` items as leaves.",88,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"recursive"}}],[11,"prop_shuffle","","Shuffle the contents of the values produced by this strategy.",88,{"inputs":[{"name":"self"}],"output":{"name":"shuffle"}}],[11,"boxed","","Erases the type of this `Strategy` so it can be passed around as a simple trait object.",88,{"inputs":[{"name":"self"}],"output":{"name":"boxedstrategy"}}],[11,"sboxed","","Erases the type of this `Strategy` so it can be passed around as a simple trait object.",88,{"inputs":[{"name":"self"}],"output":{"name":"sboxedstrategy"}}],[11,"no_shrink","","Wraps this strategy to prevent values from being subject to shrinking.",88,{"inputs":[{"name":"self"}],"output":{"name":"noshrink"}}],[11,"read","proptest::prelude","",116,null],[11,"eq","proptest::test_runner","",99,{"inputs":[{"name":"self"},{"name":"failurepersistence"}],"output":{"name":"bool"}}]],"paths":[[8,"ArbitraryF1"],[8,"ArbitraryF2"],[8,"Arbitrary"],[3,"UniformArrayStrategy"],[3,"ArrayValueTree"],[8,"BitSetLike"],[3,"BitSetStrategy"],[3,"SampledBitSetStrategy"],[3,"BitSetValueTree"],[3,"Any"],[3,"Weighted"],[3,"BoolValueTree"],[3,"CharStrategy"],[3,"CharValueTree"],[3,"SizeRange"],[3,"VecStrategy"],[3,"VecDequeStrategy"],[3,"VecDequeValueTree"],[3,"LinkedListStrategy"],[3,"LinkedListValueTree"],[3,"BinaryHeapStrategy"],[3,"BinaryHeapValueTree"],[3,"HashSetStrategy"],[3,"HashSetValueTree"],[3,"BTreeSetStrategy"],[3,"BTreeSetValueTree"],[3,"HashMapStrategy"],[3,"HashMapValueTree"],[3,"BTreeMapStrategy"],[3,"BTreeMapValueTree"],[3,"VecValueTree"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"Any"],[3,"BinarySearch"],[3,"CheckStrategySanityOptions"],[3,"Just"],[3,"NoShrink"],[3,"BoxedStrategy"],[3,"SBoxedStrategy"],[3,"LazyJust"],[3,"Map"],[3,"MapInto"],[3,"Perturb"],[3,"PerturbValueTree"],[3,"Filter"],[3,"FilterMap"],[3,"FilterMapValueTree"],[3,"Flatten"],[3,"FlattenValueTree"],[3,"IndFlatten"],[3,"IndFlattenMap"],[3,"Union"],[3,"UnionValueTree"],[3,"TupleUnion"],[3,"TupleUnionValueTree"],[3,"Recursive"],[3,"Shuffle"],[3,"ShuffleValueTree"],[3,"Fuse"],[8,"FilterFn"],[8,"MapFn"],[3,"Filter"],[3,"Map"],[8,"Strategy"],[8,"ValueTree"],[8,"Shuffleable"],[3,"MapFailurePersistence"],[3,"Config"],[4,"FileFailurePersistence"],[4,"TestCaseError"],[4,"TestError"],[3,"TestRng"],[3,"Reason"],[3,"TestRunner"],[8,"FailurePersistence"],[3,"TupleValueTree"],[3,"Probability"],[3,"OptionStrategy"],[3,"OptionValueTree"],[3,"MaybeOk"],[3,"MaybeOkValueTree"],[3,"MaybeErr"],[3,"MaybeErrValueTree"],[3,"Subsequence"],[3,"SubsequenceValueTree"],[3,"Select"],[3,"SelectValueTree"],[4,"Error"],[3,"StringParam"],[3,"RegexGeneratorStrategy"],[3,"RegexGeneratorValueTree"],[8,"RngCore"],[8,"Rng"]]};
searchIndex["protobuf"] = {"doc":"","items":[[3,"UnknownFields","protobuf","",null,null],[12,"fields","","",0,null],[3,"UnknownFieldsIter","","",null,null],[3,"UnknownValues","","",null,null],[12,"fixed32","","",1,null],[12,"fixed64","","",1,null],[12,"varint","","",1,null],[12,"length_delimited","","",1,null],[3,"UnknownValuesIter","","",null,null],[3,"CachedSize","","Cached size field used in generated code. It is always equal to itself to simplify generated code. (Generated code can use `#[derive(Eq)]`).",null,null],[4,"UnknownValue","","",null,null],[13,"Fixed32","","",2,null],[13,"Fixed64","","",2,null],[13,"Varint","","",2,null],[13,"LengthDelimited","","",2,null],[4,"UnknownValueRef","","",null,null],[13,"Fixed32","","",3,null],[13,"Fixed64","","",3,null],[13,"Varint","","",3,null],[13,"LengthDelimited","","",3,null],[0,"descriptor","","",null,null],[3,"FileDescriptorSet","protobuf::descriptor","",null,null],[3,"FileDescriptorProto","","",null,null],[3,"DescriptorProto","","",null,null],[3,"DescriptorProto_ExtensionRange","","",null,null],[3,"DescriptorProto_ReservedRange","","",null,null],[3,"FieldDescriptorProto","","",null,null],[3,"OneofDescriptorProto","","",null,null],[3,"EnumDescriptorProto","","",null,null],[3,"EnumValueDescriptorProto","","",null,null],[3,"ServiceDescriptorProto","","",null,null],[3,"MethodDescriptorProto","","",null,null],[3,"FileOptions","","",null,null],[3,"MessageOptions","","",null,null],[3,"FieldOptions","","",null,null],[3,"OneofOptions","","",null,null],[3,"EnumOptions","","",null,null],[3,"EnumValueOptions","","",null,null],[3,"ServiceOptions","","",null,null],[3,"MethodOptions","","",null,null],[3,"UninterpretedOption","","",null,null],[3,"UninterpretedOption_NamePart","","",null,null],[3,"SourceCodeInfo","","",null,null],[3,"SourceCodeInfo_Location","","",null,null],[3,"GeneratedCodeInfo","","",null,null],[3,"GeneratedCodeInfo_Annotation","","",null,null],[4,"FieldDescriptorProto_Type","","",null,null],[13,"TYPE_DOUBLE","","",4,null],[13,"TYPE_FLOAT","","",4,null],[13,"TYPE_INT64","","",4,null],[13,"TYPE_UINT64","","",4,null],[13,"TYPE_INT32","","",4,null],[13,"TYPE_FIXED64","","",4,null],[13,"TYPE_FIXED32","","",4,null],[13,"TYPE_BOOL","","",4,null],[13,"TYPE_STRING","","",4,null],[13,"TYPE_GROUP","","",4,null],[13,"TYPE_MESSAGE","","",4,null],[13,"TYPE_BYTES","","",4,null],[13,"TYPE_UINT32","","",4,null],[13,"TYPE_ENUM","","",4,null],[13,"TYPE_SFIXED32","","",4,null],[13,"TYPE_SFIXED64","","",4,null],[13,"TYPE_SINT32","","",4,null],[13,"TYPE_SINT64","","",4,null],[4,"FieldDescriptorProto_Label","","",null,null],[13,"LABEL_OPTIONAL","","",5,null],[13,"LABEL_REQUIRED","","",5,null],[13,"LABEL_REPEATED","","",5,null],[4,"FileOptions_OptimizeMode","","",null,null],[13,"SPEED","","",6,null],[13,"CODE_SIZE","","",6,null],[13,"LITE_RUNTIME","","",6,null],[4,"FieldOptions_CType","","",null,null],[13,"STRING","","",7,null],[13,"CORD","","",7,null],[13,"STRING_PIECE","","",7,null],[4,"FieldOptions_JSType","","",null,null],[13,"JS_NORMAL","","",8,null],[13,"JS_STRING","","",8,null],[13,"JS_NUMBER","","",8,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"filedescriptorset"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"filedescriptorset"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"filedescriptorset"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"default_instance","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"clear_file","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"set_file","","",9,{"inputs":[{"name":"self"},{"generics":["filedescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_file","","",9,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_file","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["filedescriptorproto"],"name":"repeatedfield"}}],[11,"get_file","","",9,null],[11,"is_initialized","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",9,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",9,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",9,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",9,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",9,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",9,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",9,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"descriptor_static","","",9,{"inputs":[{"generics":["filedescriptorset"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"filedescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"filedescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"filedescriptorproto"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"default_instance","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"clear_name","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",10,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_package","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_package","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_package","","",10,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_package","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_package","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_package","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_dependency","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_dependency","","",10,{"inputs":[{"name":"self"},{"generics":["string"],"name":"repeatedfield"}],"output":null}],[11,"mut_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"repeatedfield"}}],[11,"get_dependency","","",10,null],[11,"clear_public_dependency","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_public_dependency","","",10,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"vec"}],"output":null}],[11,"mut_public_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_public_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"vec"}}],[11,"get_public_dependency","","",10,null],[11,"clear_weak_dependency","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_weak_dependency","","",10,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"vec"}],"output":null}],[11,"mut_weak_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_weak_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"vec"}}],[11,"get_weak_dependency","","",10,null],[11,"clear_message_type","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_message_type","","",10,{"inputs":[{"name":"self"},{"generics":["descriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_message_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_message_type","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["descriptorproto"],"name":"repeatedfield"}}],[11,"get_message_type","","",10,null],[11,"clear_enum_type","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_enum_type","","",10,{"inputs":[{"name":"self"},{"generics":["enumdescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_enum_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_enum_type","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["enumdescriptorproto"],"name":"repeatedfield"}}],[11,"get_enum_type","","",10,null],[11,"clear_service","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_service","","",10,{"inputs":[{"name":"self"},{"generics":["servicedescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_service","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_service","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["servicedescriptorproto"],"name":"repeatedfield"}}],[11,"get_service","","",10,null],[11,"clear_extension","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_extension","","",10,{"inputs":[{"name":"self"},{"generics":["fielddescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_extension","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_extension","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["fielddescriptorproto"],"name":"repeatedfield"}}],[11,"get_extension","","",10,null],[11,"clear_options","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",10,{"inputs":[{"name":"self"},{"name":"fileoptions"}],"output":null}],[11,"mut_options","","",10,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions"}}],[11,"take_options","","",10,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions"}}],[11,"get_options","","",10,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions"}}],[11,"clear_source_code_info","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_source_code_info","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_source_code_info","","",10,{"inputs":[{"name":"self"},{"name":"sourcecodeinfo"}],"output":null}],[11,"mut_source_code_info","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sourcecodeinfo"}}],[11,"take_source_code_info","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sourcecodeinfo"}}],[11,"get_source_code_info","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sourcecodeinfo"}}],[11,"clear_syntax","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_syntax","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_syntax","","",10,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_syntax","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_syntax","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_syntax","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",10,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",10,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",10,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",10,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",10,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"descriptor_static","","",10,{"inputs":[{"generics":["filedescriptorproto"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"descriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"descriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"descriptorproto"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"default_instance","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"clear_name","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",11,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_field","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_field","","",11,{"inputs":[{"name":"self"},{"generics":["fielddescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_field","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_field","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["fielddescriptorproto"],"name":"repeatedfield"}}],[11,"get_field","","",11,null],[11,"clear_extension","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_extension","","",11,{"inputs":[{"name":"self"},{"generics":["fielddescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_extension","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_extension","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["fielddescriptorproto"],"name":"repeatedfield"}}],[11,"get_extension","","",11,null],[11,"clear_nested_type","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_nested_type","","",11,{"inputs":[{"name":"self"},{"generics":["descriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_nested_type","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_nested_type","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["descriptorproto"],"name":"repeatedfield"}}],[11,"get_nested_type","","",11,null],[11,"clear_enum_type","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_enum_type","","",11,{"inputs":[{"name":"self"},{"generics":["enumdescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_enum_type","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_enum_type","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["enumdescriptorproto"],"name":"repeatedfield"}}],[11,"get_enum_type","","",11,null],[11,"clear_extension_range","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_extension_range","","",11,{"inputs":[{"name":"self"},{"generics":["descriptorproto_extensionrange"],"name":"repeatedfield"}],"output":null}],[11,"mut_extension_range","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_extension_range","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["descriptorproto_extensionrange"],"name":"repeatedfield"}}],[11,"get_extension_range","","",11,null],[11,"clear_oneof_decl","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_oneof_decl","","",11,{"inputs":[{"name":"self"},{"generics":["oneofdescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_oneof_decl","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_oneof_decl","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["oneofdescriptorproto"],"name":"repeatedfield"}}],[11,"get_oneof_decl","","",11,null],[11,"clear_options","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",11,{"inputs":[{"name":"self"},{"name":"messageoptions"}],"output":null}],[11,"mut_options","","",11,{"inputs":[{"name":"self"}],"output":{"name":"messageoptions"}}],[11,"take_options","","",11,{"inputs":[{"name":"self"}],"output":{"name":"messageoptions"}}],[11,"get_options","","",11,{"inputs":[{"name":"self"}],"output":{"name":"messageoptions"}}],[11,"clear_reserved_range","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_reserved_range","","",11,{"inputs":[{"name":"self"},{"generics":["descriptorproto_reservedrange"],"name":"repeatedfield"}],"output":null}],[11,"mut_reserved_range","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_reserved_range","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["descriptorproto_reservedrange"],"name":"repeatedfield"}}],[11,"get_reserved_range","","",11,null],[11,"clear_reserved_name","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_reserved_name","","",11,{"inputs":[{"name":"self"},{"generics":["string"],"name":"repeatedfield"}],"output":null}],[11,"mut_reserved_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_reserved_name","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"repeatedfield"}}],[11,"get_reserved_name","","",11,null],[11,"is_initialized","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",11,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",11,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",11,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",11,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",11,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"descriptor_static","","",11,{"inputs":[{"generics":["descriptorproto"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"descriptorproto_extensionrange"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"descriptorproto_extensionrange"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"descriptorproto_extensionrange"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"default_instance","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"clear_start","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"has_start","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_start","","",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_start","","",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_end","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"has_end","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_end","","",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_end","","",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",12,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",12,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",12,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",12,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",12,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",12,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",12,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"descriptor_static","","",12,{"inputs":[{"generics":["descriptorproto_extensionrange"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"descriptorproto_reservedrange"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"descriptorproto_reservedrange"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"descriptorproto_reservedrange"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"default_instance","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"clear_start","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"has_start","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_start","","",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_start","","",13,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_end","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"has_end","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_end","","",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_end","","",13,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",13,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",13,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",13,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",13,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",13,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"descriptor_static","","",13,{"inputs":[{"generics":["descriptorproto_reservedrange"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"default_instance","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"clear_name","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_number","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_number","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_number","","",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_number","","",14,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_label","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_label","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_label","","",14,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto_label"}],"output":null}],[11,"get_label","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto_label"}}],[11,"clear_field_type","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_field_type","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_field_type","","",14,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto_type"}],"output":null}],[11,"get_field_type","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto_type"}}],[11,"clear_type_name","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_type_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_type_name","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_type_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_type_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_type_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_extendee","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_extendee","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_extendee","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_extendee","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_extendee","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_extendee","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_default_value","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_default_value","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_default_value","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_default_value","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_default_value","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_default_value","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_oneof_index","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_oneof_index","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_oneof_index","","",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_oneof_index","","",14,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_json_name","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_json_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_json_name","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_json_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_json_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_json_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_options","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",14,{"inputs":[{"name":"self"},{"name":"fieldoptions"}],"output":null}],[11,"mut_options","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions"}}],[11,"take_options","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions"}}],[11,"get_options","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions"}}],[11,"is_initialized","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",14,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",14,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",14,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",14,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",14,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",14,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",14,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"descriptor_static","","",14,{"inputs":[{"generics":["fielddescriptorproto"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto_type"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto_type"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"value","","",4,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",4,{"inputs":[{"name":"i32"}],"output":{"generics":["fielddescriptorproto_type"],"name":"option"}}],[11,"values","","",4,null],[11,"enum_descriptor_static","","",4,{"inputs":[{"generics":["fielddescriptorproto_type"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto_label"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto_label"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"value","","",5,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",5,{"inputs":[{"name":"i32"}],"output":{"generics":["fielddescriptorproto_label"],"name":"option"}}],[11,"values","","",5,null],[11,"enum_descriptor_static","","",5,{"inputs":[{"generics":["fielddescriptorproto_label"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"oneofdescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"oneofdescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"oneofdescriptorproto"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"default_instance","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"clear_name","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_options","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",15,{"inputs":[{"name":"self"},{"name":"oneofoptions"}],"output":null}],[11,"mut_options","","",15,{"inputs":[{"name":"self"}],"output":{"name":"oneofoptions"}}],[11,"take_options","","",15,{"inputs":[{"name":"self"}],"output":{"name":"oneofoptions"}}],[11,"get_options","","",15,{"inputs":[{"name":"self"}],"output":{"name":"oneofoptions"}}],[11,"is_initialized","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",15,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",15,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",15,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",15,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",15,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",15,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",15,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",15,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"descriptor_static","","",15,{"inputs":[{"generics":["oneofdescriptorproto"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"enumdescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"enumdescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"enumdescriptorproto"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"default_instance","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"clear_name","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",16,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_value","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",16,{"inputs":[{"name":"self"},{"generics":["enumvaluedescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_value","","",16,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_value","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["enumvaluedescriptorproto"],"name":"repeatedfield"}}],[11,"get_value","","",16,null],[11,"clear_options","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",16,{"inputs":[{"name":"self"},{"name":"enumoptions"}],"output":null}],[11,"mut_options","","",16,{"inputs":[{"name":"self"}],"output":{"name":"enumoptions"}}],[11,"take_options","","",16,{"inputs":[{"name":"self"}],"output":{"name":"enumoptions"}}],[11,"get_options","","",16,{"inputs":[{"name":"self"}],"output":{"name":"enumoptions"}}],[11,"is_initialized","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",16,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",16,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",16,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",16,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",16,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",16,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",16,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"descriptor_static","","",16,{"inputs":[{"generics":["enumdescriptorproto"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"enumvaluedescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"enumvaluedescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"enumvaluedescriptorproto"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"default_instance","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"clear_name","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",17,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_number","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"has_number","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_number","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_number","","",17,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_options","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",17,{"inputs":[{"name":"self"},{"name":"enumvalueoptions"}],"output":null}],[11,"mut_options","","",17,{"inputs":[{"name":"self"}],"output":{"name":"enumvalueoptions"}}],[11,"take_options","","",17,{"inputs":[{"name":"self"}],"output":{"name":"enumvalueoptions"}}],[11,"get_options","","",17,{"inputs":[{"name":"self"}],"output":{"name":"enumvalueoptions"}}],[11,"is_initialized","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",17,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",17,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",17,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",17,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",17,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",17,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",17,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"descriptor_static","","",17,{"inputs":[{"generics":["enumvaluedescriptorproto"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"servicedescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"servicedescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servicedescriptorproto"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"default_instance","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"clear_name","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",18,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_method","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"set_method","","",18,{"inputs":[{"name":"self"},{"generics":["methoddescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_method","","",18,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_method","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["methoddescriptorproto"],"name":"repeatedfield"}}],[11,"get_method","","",18,null],[11,"clear_options","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",18,{"inputs":[{"name":"self"},{"name":"serviceoptions"}],"output":null}],[11,"mut_options","","",18,{"inputs":[{"name":"self"}],"output":{"name":"serviceoptions"}}],[11,"take_options","","",18,{"inputs":[{"name":"self"}],"output":{"name":"serviceoptions"}}],[11,"get_options","","",18,{"inputs":[{"name":"self"}],"output":{"name":"serviceoptions"}}],[11,"is_initialized","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",18,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",18,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",18,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",18,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",18,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",18,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",18,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"descriptor_static","","",18,{"inputs":[{"generics":["servicedescriptorproto"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"methoddescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"methoddescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"methoddescriptorproto"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"default_instance","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"clear_name","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",19,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_input_type","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_input_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_input_type","","",19,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_input_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_input_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_input_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_output_type","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_output_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_output_type","","",19,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_output_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_output_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_output_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_options","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",19,{"inputs":[{"name":"self"},{"name":"methodoptions"}],"output":null}],[11,"mut_options","","",19,{"inputs":[{"name":"self"}],"output":{"name":"methodoptions"}}],[11,"take_options","","",19,{"inputs":[{"name":"self"}],"output":{"name":"methodoptions"}}],[11,"get_options","","",19,{"inputs":[{"name":"self"}],"output":{"name":"methodoptions"}}],[11,"clear_client_streaming","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_client_streaming","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_client_streaming","","",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_client_streaming","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_server_streaming","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_server_streaming","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_server_streaming","","",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_server_streaming","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",19,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",19,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",19,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",19,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",19,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",19,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",19,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"descriptor_static","","",19,{"inputs":[{"generics":["methoddescriptorproto"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"fileoptions"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"fileoptions"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"new","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"default_instance","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"clear_java_package","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_package","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_java_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_java_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_java_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_java_outer_classname","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_outer_classname","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_outer_classname","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_java_outer_classname","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_java_outer_classname","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_java_outer_classname","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_java_multiple_files","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_multiple_files","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_multiple_files","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_java_multiple_files","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_java_generate_equals_and_hash","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_generate_equals_and_hash","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_generate_equals_and_hash","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_java_generate_equals_and_hash","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_java_string_check_utf8","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_string_check_utf8","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_string_check_utf8","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_java_string_check_utf8","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_optimize_for","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_optimize_for","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_optimize_for","","",20,{"inputs":[{"name":"self"},{"name":"fileoptions_optimizemode"}],"output":null}],[11,"get_optimize_for","","",20,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions_optimizemode"}}],[11,"clear_go_package","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_go_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_go_package","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_go_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_go_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_go_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_cc_generic_services","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_cc_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_cc_generic_services","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_cc_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_java_generic_services","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_generic_services","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_java_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_py_generic_services","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_py_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_py_generic_services","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_py_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_deprecated","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_cc_enable_arenas","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_cc_enable_arenas","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_cc_enable_arenas","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_cc_enable_arenas","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_objc_class_prefix","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_objc_class_prefix","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_objc_class_prefix","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_objc_class_prefix","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_objc_class_prefix","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_objc_class_prefix","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_csharp_namespace","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_csharp_namespace","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_csharp_namespace","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_csharp_namespace","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_csharp_namespace","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_csharp_namespace","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_uninterpreted_option","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",20,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption"],"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",20,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption"],"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",20,null],[11,"is_initialized","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",20,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",20,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",20,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",20,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",20,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",20,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",20,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"descriptor_static","","",20,{"inputs":[{"generics":["fileoptions"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions_optimizemode"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fileoptions_optimizemode"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"value","","",6,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",6,{"inputs":[{"name":"i32"}],"output":{"generics":["fileoptions_optimizemode"],"name":"option"}}],[11,"values","","",6,null],[11,"enum_descriptor_static","","",6,{"inputs":[{"generics":["fileoptions_optimizemode"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"messageoptions"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"messageoptions"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"messageoptions"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"default_instance","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"clear_message_set_wire_format","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message_set_wire_format","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message_set_wire_format","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_message_set_wire_format","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_no_standard_descriptor_accessor","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"has_no_standard_descriptor_accessor","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_no_standard_descriptor_accessor","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_no_standard_descriptor_accessor","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_deprecated","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_map_entry","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"has_map_entry","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_map_entry","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_map_entry","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",21,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption"],"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",21,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption"],"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",21,null],[11,"is_initialized","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",21,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",21,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",21,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",21,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",21,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",21,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",21,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"descriptor_static","","",21,{"inputs":[{"generics":["messageoptions"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"fieldoptions"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"fieldoptions"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"new","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"default_instance","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"clear_ctype","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_ctype","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ctype","","",22,{"inputs":[{"name":"self"},{"name":"fieldoptions_ctype"}],"output":null}],[11,"get_ctype","","",22,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions_ctype"}}],[11,"clear_packed","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_packed","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_packed","","",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_packed","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_jstype","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_jstype","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_jstype","","",22,{"inputs":[{"name":"self"},{"name":"fieldoptions_jstype"}],"output":null}],[11,"get_jstype","","",22,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions_jstype"}}],[11,"clear_lazy","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_lazy","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_lazy","","",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_lazy","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_deprecated","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_weak","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_weak","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_weak","","",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_weak","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",22,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption"],"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",22,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption"],"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",22,null],[11,"is_initialized","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",22,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",22,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",22,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",22,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",22,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",22,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",22,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"descriptor_static","","",22,{"inputs":[{"generics":["fieldoptions"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions_ctype"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"fieldoptions_ctype"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"value","","",7,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",7,{"inputs":[{"name":"i32"}],"output":{"generics":["fieldoptions_ctype"],"name":"option"}}],[11,"values","","",7,null],[11,"enum_descriptor_static","","",7,{"inputs":[{"generics":["fieldoptions_ctype"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions_jstype"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"fieldoptions_jstype"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"value","","",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",8,{"inputs":[{"name":"i32"}],"output":{"generics":["fieldoptions_jstype"],"name":"option"}}],[11,"values","","",8,null],[11,"enum_descriptor_static","","",8,{"inputs":[{"generics":["fieldoptions_jstype"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"oneofoptions"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"oneofoptions"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"oneofoptions"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"new","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"default_instance","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"clear_uninterpreted_option","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",23,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption"],"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",23,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption"],"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",23,null],[11,"is_initialized","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",23,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",23,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",23,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",23,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",23,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",23,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",23,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"descriptor_static","","",23,{"inputs":[{"generics":["oneofoptions"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"enumoptions"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"enumoptions"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"enumoptions"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"new","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"default_instance","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"clear_allow_alias","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"has_allow_alias","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_allow_alias","","",24,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_allow_alias","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_deprecated","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",24,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",24,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption"],"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",24,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption"],"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",24,null],[11,"is_initialized","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",24,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",24,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",24,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",24,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",24,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",24,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",24,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"descriptor_static","","",24,{"inputs":[{"generics":["enumoptions"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"enumvalueoptions"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"enumvalueoptions"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"enumvalueoptions"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"new","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"default_instance","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"clear_deprecated","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",25,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",25,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption"],"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",25,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption"],"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",25,null],[11,"is_initialized","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",25,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",25,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",25,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",25,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",25,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",25,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",25,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"descriptor_static","","",25,{"inputs":[{"generics":["enumvalueoptions"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"serviceoptions"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"serviceoptions"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"serviceoptions"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"new","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"default_instance","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"clear_deprecated","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",26,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption"],"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",26,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption"],"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",26,null],[11,"is_initialized","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",26,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",26,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",26,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",26,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",26,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",26,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",26,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",26,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"descriptor_static","","",26,{"inputs":[{"generics":["serviceoptions"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"methodoptions"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"methodoptions"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"methodoptions"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"new","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"default_instance","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"clear_deprecated","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",27,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption"],"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",27,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption"],"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",27,null],[11,"is_initialized","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",27,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",27,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",27,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",27,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",27,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",27,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",27,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"descriptor_static","","",27,{"inputs":[{"generics":["methodoptions"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"uninterpretedoption"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"uninterpretedoption"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"uninterpretedoption"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"new","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"default_instance","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"clear_name","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",28,{"inputs":[{"name":"self"},{"generics":["uninterpretedoption_namepart"],"name":"repeatedfield"}],"output":null}],[11,"mut_name","","",28,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_name","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["uninterpretedoption_namepart"],"name":"repeatedfield"}}],[11,"get_name","","",28,null],[11,"clear_identifier_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_identifier_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_identifier_value","","",28,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_identifier_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_identifier_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_identifier_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_positive_int_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_positive_int_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_positive_int_value","","",28,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_positive_int_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_negative_int_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_negative_int_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_negative_int_value","","",28,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_negative_int_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_double_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_double_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_double_value","","",28,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"get_double_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"clear_string_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_string_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_string_value","","",28,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_string_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_string_value","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_string_value","","",28,null],[11,"clear_aggregate_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_aggregate_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_aggregate_value","","",28,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_aggregate_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_aggregate_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_aggregate_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",28,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",28,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",28,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",28,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",28,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",28,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",28,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"descriptor_static","","",28,{"inputs":[{"generics":["uninterpretedoption"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"uninterpretedoption_namepart"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"uninterpretedoption_namepart"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"uninterpretedoption_namepart"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"default_instance","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"clear_name_part","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name_part","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name_part","","",29,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name_part","","",29,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name_part","","",29,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name_part","","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_is_extension","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"has_is_extension","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_is_extension","","",29,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_is_extension","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",29,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",29,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",29,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",29,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",29,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",29,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",29,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"descriptor_static","","",29,{"inputs":[{"generics":["uninterpretedoption_namepart"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"sourcecodeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"sourcecodeinfo"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sourcecodeinfo"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"new","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"default_instance","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"clear_location","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"set_location","","",30,{"inputs":[{"name":"self"},{"generics":["sourcecodeinfo_location"],"name":"repeatedfield"}],"output":null}],[11,"mut_location","","",30,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_location","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["sourcecodeinfo_location"],"name":"repeatedfield"}}],[11,"get_location","","",30,null],[11,"is_initialized","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",30,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",30,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",30,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",30,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",30,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",30,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",30,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",30,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"descriptor_static","","",30,{"inputs":[{"generics":["sourcecodeinfo"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"sourcecodeinfo_location"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"sourcecodeinfo_location"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"sourcecodeinfo_location"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"new","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"default_instance","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"clear_path","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"set_path","","",31,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"vec"}],"output":null}],[11,"mut_path","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_path","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"vec"}}],[11,"get_path","","",31,null],[11,"clear_span","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"set_span","","",31,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"vec"}],"output":null}],[11,"mut_span","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_span","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"vec"}}],[11,"get_span","","",31,null],[11,"clear_leading_comments","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"has_leading_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_leading_comments","","",31,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_leading_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_leading_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_leading_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_trailing_comments","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"has_trailing_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_trailing_comments","","",31,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_trailing_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_trailing_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_trailing_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_leading_detached_comments","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"set_leading_detached_comments","","",31,{"inputs":[{"name":"self"},{"generics":["string"],"name":"repeatedfield"}],"output":null}],[11,"mut_leading_detached_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_leading_detached_comments","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"repeatedfield"}}],[11,"get_leading_detached_comments","","",31,null],[11,"is_initialized","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",31,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",31,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",31,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",31,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",31,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",31,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",31,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"descriptor_static","","",31,{"inputs":[{"generics":["sourcecodeinfo_location"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"generatedcodeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"generatedcodeinfo"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"generatedcodeinfo"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"default_instance","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"clear_annotation","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"set_annotation","","",32,{"inputs":[{"name":"self"},{"generics":["generatedcodeinfo_annotation"],"name":"repeatedfield"}],"output":null}],[11,"mut_annotation","","",32,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_annotation","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["generatedcodeinfo_annotation"],"name":"repeatedfield"}}],[11,"get_annotation","","",32,null],[11,"is_initialized","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",32,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",32,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",32,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",32,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",32,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",32,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",32,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"descriptor_static","","",32,{"inputs":[{"generics":["generatedcodeinfo"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"generatedcodeinfo_annotation"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"generatedcodeinfo_annotation"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"default_instance","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"clear_path","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"set_path","","",33,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"vec"}],"output":null}],[11,"mut_path","","",33,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_path","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"vec"}}],[11,"get_path","","",33,null],[11,"clear_source_file","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"has_source_file","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_source_file","","",33,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_source_file","","",33,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_source_file","","",33,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_source_file","","",33,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_begin","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"has_begin","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_begin","","",33,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_begin","","",33,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_end","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"has_end","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_end","","",33,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_end","","",33,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",33,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",33,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",33,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",33,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",33,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",33,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",33,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"descriptor_static","","",33,{"inputs":[{"generics":["generatedcodeinfo_annotation"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"plugin","protobuf","",null,null],[3,"CodeGeneratorRequest","protobuf::plugin","",null,null],[3,"CodeGeneratorResponse","","",null,null],[3,"CodeGeneratorResponse_File","","",null,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"codegeneratorrequest"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"codegeneratorrequest"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"codegeneratorrequest"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"new","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"default_instance","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"clear_file_to_generate","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"set_file_to_generate","","",34,{"inputs":[{"name":"self"},{"generics":["string"],"name":"repeatedfield"}],"output":null}],[11,"mut_file_to_generate","","",34,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_file_to_generate","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"repeatedfield"}}],[11,"get_file_to_generate","","",34,null],[11,"clear_parameter","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"has_parameter","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_parameter","","",34,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_parameter","","",34,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_parameter","","",34,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_parameter","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_proto_file","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"set_proto_file","","",34,{"inputs":[{"name":"self"},{"generics":["filedescriptorproto"],"name":"repeatedfield"}],"output":null}],[11,"mut_proto_file","","",34,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_proto_file","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["filedescriptorproto"],"name":"repeatedfield"}}],[11,"get_proto_file","","",34,null],[11,"is_initialized","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",34,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",34,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",34,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",34,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",34,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",34,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",34,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",34,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"descriptor_static","","",34,{"inputs":[{"generics":["codegeneratorrequest"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"codegeneratorresponse"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"codegeneratorresponse"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"codegeneratorresponse"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"new","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"default_instance","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"clear_error","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",35,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_error","","",35,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_error","","",35,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_error","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_file","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"set_file","","",35,{"inputs":[{"name":"self"},{"generics":["codegeneratorresponse_file"],"name":"repeatedfield"}],"output":null}],[11,"mut_file","","",35,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_file","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["codegeneratorresponse_file"],"name":"repeatedfield"}}],[11,"get_file","","",35,null],[11,"is_initialized","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",35,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",35,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",35,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",35,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",35,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",35,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",35,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"descriptor_static","","",35,{"inputs":[{"generics":["codegeneratorresponse"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"codegeneratorresponse_file"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"codegeneratorresponse_file"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"codegeneratorresponse_file"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"default_instance","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"clear_name","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",36,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_insertion_point","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_insertion_point","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_insertion_point","","",36,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_insertion_point","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_insertion_point","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_insertion_point","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_content","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_content","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_content","","",36,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_content","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_content","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_content","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",36,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",36,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",36,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",36,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",36,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",36,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",36,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",36,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"descriptor_static","","",36,{"inputs":[{"generics":["codegeneratorresponse_file"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"core","protobuf","",null,null],[5,"message_down_cast","protobuf::core","",null,{"inputs":[{"name":"message"}],"output":{"name":"m"}}],[5,"parse_from","","",null,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[5,"parse_from_reader","","",null,{"inputs":[{"name":"read"}],"output":{"name":"protobufresult"}}],[5,"parse_from_bytes","","",null,null],[5,"parse_length_delimited_from","","",null,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[5,"parse_length_delimited_from_reader","","",null,{"inputs":[{"name":"read"}],"output":{"name":"protobufresult"}}],[5,"parse_length_delimited_from_bytes","","",null,null],[8,"Message","","",null,null],[10,"descriptor","","",37,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[10,"is_initialized","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"merge_from","","",37,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[10,"write_to_with_cached_sizes","","",37,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[10,"compute_size","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_cached_size","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to","","",37,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"write_length_delimited_to","","",37,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"write_length_delimited_to_vec","","",37,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"merge_from_bytes","","",37,null],[11,"check_initialized","","",37,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"write_to_writer","","",37,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"write_to_vec","","",37,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"write_to_bytes","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"protobufresult"}}],[11,"write_length_delimited_to_writer","","",37,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"write_length_delimited_to_bytes","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"protobufresult"}}],[10,"get_unknown_fields","","",37,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[10,"mut_unknown_fields","","",37,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"type_id","","",37,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[10,"as_any","","",37,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",37,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",37,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[8,"MessageStatic","","",null,null],[10,"new","","",38,{"inputs":[],"output":{"name":"self"}}],[11,"descriptor_static","","",38,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[8,"ProtobufEnum","","",null,null],[10,"value","","",39,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"from_i32","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",39,null],[11,"descriptor","","",39,{"inputs":[{"name":"self"}],"output":{"name":"enumvaluedescriptor"}}],[11,"enum_descriptor","","",39,{"inputs":[{"name":"self"}],"output":{"name":"enumdescriptor"}}],[11,"enum_descriptor_static","","",39,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[0,"rt","protobuf","",null,null],[5,"compute_raw_varint64_size","protobuf::rt","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[5,"compute_raw_varint32_size","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"vec_packed_varint_data_size","","",null,null],[5,"vec_packed_varint_zigzag_data_size","","",null,null],[5,"vec_packed_enum_data_size","","",null,null],[5,"vec_packed_varint_size","","",null,null],[5,"vec_packed_varint_zigzag_size","","",null,null],[5,"vec_packed_enum_size","","",null,null],[5,"tag_size","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"value_size_no_tag","","",null,{"inputs":[{"name":"t"},{"name":"wiretype"}],"output":{"name":"u32"}}],[5,"value_size","","",null,{"inputs":[{"name":"u32"},{"name":"t"},{"name":"wiretype"}],"output":{"name":"u32"}}],[5,"value_varint_zigzag_size_no_tag","","Length of value when encoded with zigzag encoding",null,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[5,"value_varint_zigzag_size","","Length of value when encoding with zigzag encoding with tag",null,{"inputs":[{"name":"u32"},{"name":"t"}],"output":{"name":"u32"}}],[5,"enum_size","","",null,{"inputs":[{"name":"u32"},{"name":"e"}],"output":{"name":"u32"}}],[5,"bytes_size_no_tag","","",null,null],[5,"bytes_size","","",null,null],[5,"string_size_no_tag","","",null,{"inputs":[{"name":"str"}],"output":{"name":"u32"}}],[5,"string_size","","",null,{"inputs":[{"name":"u32"},{"name":"str"}],"output":{"name":"u32"}}],[5,"unknown_fields_size","","",null,{"inputs":[{"name":"unknownfields"}],"output":{"name":"u32"}}],[5,"read_repeated_int32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_int64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_uint32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_uint64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sint32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sint64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_fixed32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_fixed64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sfixed32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sfixed64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_double_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_float_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_bool_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_enum_into","","Read repeated `enum` field into given vec. This function is no longer called from generated code, remove in 1.5.",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_enum_with_unknown_fields_into","","Read repeated `enum` field into given vec, and when value is unknown store it in unknown fields which matches proto2 spec.",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"},{"name":"u32"},{"name":"unknownfields"}],"output":{"name":"protobufresult"}}],[5,"read_proto3_enum_with_unknown_fields_into","","Read repeated `enum` field into given vec, and when value is unknown store it in unknown fields which matches proto2 spec.",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"e"},{"name":"u32"},{"name":"unknownfields"}],"output":{"name":"protobufresult"}}],[5,"read_proto2_enum_with_unknown_fields_into","","Read repeated `enum` field into given vec, and when value is unknown store it in unknown fields which matches proto2 spec.",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"option"},{"name":"u32"},{"name":"unknownfields"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_string_into","","Read repeated `string` field into given vec.",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"repeatedfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_string_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"singularfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_proto3_string_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"string"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_bytes_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"repeatedfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_bytes_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"singularfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_proto3_bytes_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_message_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"repeatedfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_message_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"singularptrfield"}],"output":{"name":"protobufresult"}}],[5,"read_unknown_or_skip_group","","",null,{"inputs":[{"name":"u32"},{"name":"wiretype"},{"name":"codedinputstream"},{"name":"unknownfields"}],"output":{"name":"protobufresult"}}],[5,"unexpected_wire_type","","Create an error for unexpected wire type.",null,{"inputs":[{"name":"wiretype"}],"output":{"name":"protobuferror"}}],[5,"compute_map_size","","",null,{"inputs":[{"name":"u32"},{"name":"hashmap"}],"output":{"name":"u32"}}],[5,"write_map_with_cached_sizes","","",null,{"inputs":[{"name":"u32"},{"name":"hashmap"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[5,"read_map_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"hashmap"}],"output":{"name":"protobufresult"}}],[8,"ProtobufVarint","","",null,null],[10,"len_varint","","",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"ProtobufVarintZigzag","","",null,null],[10,"len_varint_zigzag","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[0,"lazy","protobuf","",null,null],[3,"Lazy","protobuf::lazy","",null,null],[12,"lock","","",42,null],[12,"ptr","","",42,null],[17,"ONCE_INIT","","",null,null],[11,"get","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[0,"code_writer","protobuf","",null,null],[3,"CodeWriter","protobuf::code_writer","",null,null],[4,"Visibility","","",null,null],[13,"Public","","",43,null],[13,"Default","","",43,null],[11,"new","","",44,{"inputs":[{"name":"write"}],"output":{"name":"codewriter"}}],[11,"write_line","","",44,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"write_generated","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"todo","","",44,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"unimplemented","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"indented","","",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"commented","","",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"pub_const","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[11,"lazy_static","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"lazy_static_decl_get","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"f"}],"output":null}],[11,"lazy_static_decl_get_simple","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[11,"block","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"f"}],"output":null}],[11,"expr_block","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"stmt_block","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"unsafe_expr","","",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"impl_self_block","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"impl_for_block","","",44,{"inputs":[{"name":"self"},{"name":"s1"},{"name":"s2"},{"name":"f"}],"output":null}],[11,"unsafe_impl","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"pub_struct","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"def_struct","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"pub_enum","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"pub_trait","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"field_entry","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"field_decl","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"pub_field_decl","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"field_decl_vis","","",44,{"inputs":[{"name":"self"},{"name":"visibility"},{"name":"str"},{"name":"str"}],"output":null}],[11,"derive","","",44,null],[11,"allow","","",44,null],[11,"comment","","",44,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"fn_def","","",44,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"fn_block","","",44,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"f"}],"output":null}],[11,"pub_fn","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"def_fn","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"def_mod","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"pub_mod","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"while_block","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"if_stmt","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"if_else_stmt","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"if_let_stmt","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"f"}],"output":null}],[11,"if_let_else_stmt","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"f"}],"output":null}],[11,"for_stmt","","",44,{"inputs":[{"name":"self"},{"name":"s1"},{"name":"s2"},{"name":"f"}],"output":null}],[11,"match_block","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"match_expr","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"case_block","","",44,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"case_expr","","",44,{"inputs":[{"name":"self"},{"name":"s1"},{"name":"s2"}],"output":null}],[0,"codegen","protobuf","",null,null],[5,"gen","protobuf::codegen","",null,null],[5,"protoc_gen_rust_main","","",null,{"inputs":[],"output":null}],[0,"compiler_plugin","protobuf","",null,null],[3,"GenResult","protobuf::compiler_plugin","",null,null],[12,"name","","",45,null],[12,"content","","",45,null],[5,"plugin_main","","",null,null],[0,"repeated","protobuf","",null,null],[3,"RepeatedField","protobuf::repeated","",null,null],[11,"len","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",46,{"inputs":[],"output":{"name":"repeatedfield"}}],[11,"new","","",46,{"inputs":[],"output":{"name":"repeatedfield"}}],[11,"from_vec","","",46,{"inputs":[{"name":"vec"}],"output":{"name":"repeatedfield"}}],[11,"into_vec","","",46,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"capacity","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_mut_slice","","",46,null],[11,"slice","","",46,null],[11,"slice_mut","","",46,null],[11,"slice_from","","",46,null],[11,"slice_from_mut","","",46,null],[11,"slice_to","","",46,null],[11,"slice_to_mut","","",46,null],[11,"split_at","","",46,null],[11,"split_at_mut","","",46,null],[11,"tail","","",46,null],[11,"last","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"init","","",46,null],[11,"push","","",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"insert","","",46,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"remove","","",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"truncate","","",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reverse","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",46,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"iter","","",46,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"sort_by","","",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"as_ptr","","",46,null],[11,"as_mut_ptr","","",46,null],[11,"push_default","","",46,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from_slice","","",46,null],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"from_iter","","",46,{"inputs":[{"name":"i"}],"output":{"name":"repeatedfield"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":{"name":"bool"}}],[11,"contains","","",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"hash","","",46,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ref","","",46,null],[11,"borrow","","",46,null],[11,"deref","","",46,null],[11,"deref_mut","","",46,null],[11,"index","","",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",46,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"singular","protobuf","",null,null],[3,"SingularField","protobuf::singular","",null,null],[3,"SingularPtrField","","",null,null],[11,"some","","",47,{"inputs":[{"name":"t"}],"output":{"name":"singularfield"}}],[11,"is_some","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_option","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut_ref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap","","",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","",47,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","",47,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"singularptrfield"}}],[11,"iter","","",47,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"mut_iter","","",47,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clear","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"none","","",47,{"inputs":[],"output":{"name":"singularfield"}}],[11,"from_option","","",47,{"inputs":[{"name":"option"}],"output":{"name":"singularfield"}}],[11,"take","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"some","","",48,{"inputs":[{"name":"t"}],"output":{"name":"singularptrfield"}}],[11,"none","","",48,{"inputs":[],"output":{"name":"singularptrfield"}}],[11,"from_option","","",48,{"inputs":[{"name":"option"}],"output":{"name":"singularptrfield"}}],[11,"is_some","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_option","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut_ref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap","","",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"singularptrfield"}}],[11,"iter","","",48,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"mut_iter","","",48,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"take","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"unwrap_or_default","","",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_default","","",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or_default","","",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_default","","",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"singularfield"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"singularptrfield"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"singularfield"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"singularptrfield"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"singularfield"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"singularptrfield"}],"output":{"name":"bool"}}],[11,"hash","","",47,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash","","",48,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"clear","protobuf","",null,null],[8,"Clear","protobuf::clear","anything that can be cleared",null,null],[10,"clear","","",49,{"inputs":[{"name":"self"}],"output":null}],[0,"reflect","protobuf","",null,null],[3,"FieldDescriptor","protobuf::reflect","",null,null],[3,"MessageDescriptor","","",null,null],[3,"EnumValueDescriptor","","",null,null],[3,"EnumDescriptor","","",null,null],[4,"ProtobufValueRef","","",null,null],[13,"U32","","",50,null],[13,"U64","","",50,null],[13,"I32","","",50,null],[13,"I64","","",50,null],[13,"F32","","",50,null],[13,"F64","","",50,null],[13,"Bool","","",50,null],[13,"String","","",50,null],[13,"Bytes","","",50,null],[13,"Enum","","",50,null],[13,"Message","","",50,null],[4,"ReflectFieldRef","","",null,null],[13,"Repeated","","",51,null],[13,"RepeatedOld","","",51,null],[13,"Map","","",51,null],[13,"Optional","","",51,null],[0,"accessor","","",null,null],[5,"make_singular_u32_accessor","protobuf::reflect::accessor","",null,null],[5,"make_singular_i32_accessor","","",null,null],[5,"make_singular_u64_accessor","","",null,null],[5,"make_singular_i64_accessor","","",null,null],[5,"make_singular_f32_accessor","","",null,null],[5,"make_singular_f64_accessor","","",null,null],[5,"make_singular_bool_accessor","","",null,null],[5,"make_singular_enum_accessor","","",null,null],[5,"make_singular_string_accessor","","",null,null],[5,"make_singular_bytes_accessor","","",null,null],[5,"make_singular_message_accessor","","",null,null],[5,"make_repeated_u32_accessor","","",null,null],[5,"make_repeated_i32_accessor","","",null,null],[5,"make_repeated_u64_accessor","","",null,null],[5,"make_repeated_i64_accessor","","",null,null],[5,"make_repeated_f32_accessor","","",null,null],[5,"make_repeated_f64_accessor","","",null,null],[5,"make_repeated_bool_accessor","","",null,null],[5,"make_repeated_string_accessor","","",null,null],[5,"make_repeated_bytes_accessor","","",null,null],[5,"make_repeated_enum_accessor","","",null,null],[5,"make_repeated_message_accessor","","",null,null],[5,"make_vec_accessor","","",null,null],[5,"make_repeated_field_accessor","","",null,null],[5,"make_option_accessor","","",null,null],[5,"make_has_get_set_clear_accessor","","",null,null],[5,"make_has_get_mut_clear_accessor","","",null,null],[5,"make_singular_field_accessor","","",null,null],[5,"make_singular_ptr_field_accessor","","",null,null],[5,"make_simple_field_accessor","","",null,null],[5,"make_map_accessor","","",null,null],[8,"FieldAccessor","","this trait should not be used directly, use `FieldDescriptor` instead",null,null],[10,"name_generic","","",52,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"has_field_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[10,"len_field_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"usize"}}],[10,"get_message_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"message"}}],[10,"get_rep_message_item_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"message"}}],[10,"get_enum_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"enumvaluedescriptor"}}],[10,"get_rep_enum_item_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"enumvaluedescriptor"}}],[10,"get_str_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"str"}}],[10,"get_rep_str_generic","","",52,null],[10,"get_bytes_generic","","",52,null],[10,"get_rep_bytes_generic","","",52,null],[10,"get_u32_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"u32"}}],[10,"get_rep_u32_generic","","",52,null],[10,"get_u64_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"u64"}}],[10,"get_rep_u64_generic","","",52,null],[10,"get_i32_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"i32"}}],[10,"get_rep_i32_generic","","",52,null],[10,"get_i64_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"i64"}}],[10,"get_rep_i64_generic","","",52,null],[10,"get_bool_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[10,"get_rep_bool_generic","","",52,null],[10,"get_f32_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"f32"}}],[10,"get_rep_f32_generic","","",52,null],[10,"get_f64_generic","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"f64"}}],[10,"get_rep_f64_generic","","",52,null],[10,"get_reflect","","",52,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"reflectfieldref"}}],[11,"is_non_zero","protobuf::reflect","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"ProtobufValue","","",null,null],[10,"as_ref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"as_any","","",53,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"is_non_zero","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref_copy","","",53,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"proto","","",54,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto"}}],[11,"name","","",54,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_repeated","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_field","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[11,"len_field","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"usize"}}],[11,"get_message","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"message"}}],[11,"get_rep_message_item","","",54,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"message"}}],[11,"get_enum","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"enumvaluedescriptor"}}],[11,"get_rep_enum_item","","",54,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"enumvaluedescriptor"}}],[11,"get_str","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"str"}}],[11,"get_rep_str","","",54,null],[11,"get_rep_str_item","","",54,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"str"}}],[11,"get_bytes","","",54,null],[11,"get_rep_bytes","","",54,null],[11,"get_rep_bytes_item","","",54,null],[11,"get_u32","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"u32"}}],[11,"get_rep_u32","","",54,null],[11,"get_u64","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"u64"}}],[11,"get_rep_u64","","",54,null],[11,"get_i32","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"i32"}}],[11,"get_rep_i32","","",54,null],[11,"get_i64","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"i64"}}],[11,"get_rep_i64","","",54,null],[11,"get_bool","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[11,"get_rep_bool","","",54,null],[11,"get_f32","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"f32"}}],[11,"get_rep_f32","","",54,null],[11,"get_f64","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"f64"}}],[11,"get_rep_f64","","",54,null],[11,"get_reflect","","",54,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"reflectfieldref"}}],[11,"get_rep_item","","",54,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"protobufvalueref"}}],[11,"for_type","","",55,{"inputs":[],"output":{"name":"messagedescriptor"}}],[11,"new","","",55,{"inputs":[{"name":"str"},{"generics":["box"],"name":"vec"},{"name":"filedescriptorproto"}],"output":{"name":"messagedescriptor"}}],[11,"new_instance","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["message"],"name":"box"}}],[11,"name","","",55,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"full_name","","",55,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fields","","",55,null],[11,"field_by_name","","",55,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fielddescriptor"}}],[11,"field_by_number","","",55,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"fielddescriptor"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"enumvaluedescriptor"}}],[11,"name","","",56,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","",56,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"name","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"for_type","","",57,{"inputs":[],"output":{"name":"enumdescriptor"}}],[11,"new","","",57,{"inputs":[{"name":"str"},{"name":"filedescriptorproto"}],"output":{"name":"enumdescriptor"}}],[11,"value_by_name","","",57,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"enumvaluedescriptor"}}],[11,"value_by_number","","",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"enumvaluedescriptor"}}],[0,"text_format","protobuf","",null,null],[5,"quote_escape_bytes","protobuf::text_format","",null,null],[5,"unescape_string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"print_to","","",null,{"inputs":[{"name":"message"},{"name":"string"}],"output":null}],[5,"print_to_string","","",null,{"inputs":[{"name":"message"}],"output":{"name":"string"}}],[5,"fmt","","",null,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stream","protobuf","",null,null],[3,"CodedInputStream","protobuf::stream","",null,null],[3,"CodedOutputStream","","",null,null],[5,"with_coded_output_stream_to_bytes","","",null,{"inputs":[{"name":"f"}],"output":{"generics":["vec"],"name":"protobufresult"}}],[0,"wire_format","","",null,null],[3,"Tag","protobuf::stream::wire_format","",null,null],[4,"WireType","","",null,null],[13,"WireTypeVarint","","",58,null],[13,"WireTypeFixed64","","",58,null],[13,"WireTypeLengthDelimited","","",58,null],[13,"WireTypeStartGroup","","",58,null],[13,"WireTypeEndGroup","","",58,null],[13,"WireTypeFixed32","","",58,null],[17,"TAG_TYPE_BITS","","",null,null],[17,"TAG_TYPE_MASK","","",null,null],[17,"FIELD_NUMBER_MAX","","",null,null],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"wiretype"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"wiretype"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",58,{"inputs":[{"name":"u32"}],"output":{"generics":["wiretype"],"name":"option"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"tag"}}],[11,"value","","",59,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new","","",59,{"inputs":[{"name":"u32"}],"output":{"generics":["tag"],"name":"option"}}],[11,"make","","",59,{"inputs":[{"name":"u32"},{"name":"wiretype"}],"output":{"name":"tag"}}],[11,"unpack","","",59,null],[11,"field_number","","",59,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"WithCodedOutputStream","protobuf::stream","",null,null],[10,"with_coded_output_stream","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"protobufresult"}}],[8,"WithCodedInputStream","","",null,null],[10,"with_coded_input_stream","","",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"protobufresult"}}],[11,"new","","",62,{"inputs":[{"name":"read"}],"output":{"name":"codedinputstream"}}],[11,"from_buffered_reader","","",62,{"inputs":[{"name":"bufread"}],"output":{"name":"codedinputstream"}}],[11,"from_bytes","","",62,null],[11,"pos","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"bytes_until_limit","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",62,null],[11,"read_raw_byte","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"protobufresult"}}],[11,"push_limit","","",62,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["u64"],"name":"protobufresult"}}],[11,"pop_limit","","",62,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"eof","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"protobufresult"}}],[11,"check_eof","","",62,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_raw_varint64","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"protobufresult"}}],[11,"read_raw_varint32","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"protobufresult"}}],[11,"read_raw_little_endian32","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"protobufresult"}}],[11,"read_raw_little_endian64","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"protobufresult"}}],[11,"read_tag","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["tag"],"name":"protobufresult"}}],[11,"read_tag_unpack","","",62,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_double","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"protobufresult"}}],[11,"read_float","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"protobufresult"}}],[11,"read_int64","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"protobufresult"}}],[11,"read_int32","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"protobufresult"}}],[11,"read_uint64","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"protobufresult"}}],[11,"read_uint32","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"protobufresult"}}],[11,"read_sint64","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"protobufresult"}}],[11,"read_sint32","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"protobufresult"}}],[11,"read_fixed64","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"protobufresult"}}],[11,"read_fixed32","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"protobufresult"}}],[11,"read_sfixed64","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"protobufresult"}}],[11,"read_sfixed32","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"protobufresult"}}],[11,"read_bool","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"protobufresult"}}],[11,"read_enum","","",62,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_double_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_float_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_int64_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_int32_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_uint64_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_uint32_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_sint64_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_sint32_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_fixed64_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_fixed32_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_sfixed64_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_sfixed32_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_bool_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_enum_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_unknown","","",62,{"inputs":[{"name":"self"},{"name":"wiretype"}],"output":{"generics":["unknownvalue"],"name":"protobufresult"}}],[11,"skip_field","","",62,{"inputs":[{"name":"self"},{"name":"wiretype"}],"output":{"name":"protobufresult"}}],[11,"read_raw_bytes_into","","Read raw bytes into the supplied vector.  The vector will be resized as needed and overwritten.",62,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_raw_bytes","","Read exact number of bytes",62,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["vec"],"name":"protobufresult"}}],[11,"skip_raw_bytes","","",62,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"read_bytes","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"protobufresult"}}],[11,"read_bytes_into","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_string","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"protobufresult"}}],[11,"read_string_into","","",62,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"protobufresult"}}],[11,"merge_message","","",62,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"protobufresult"}}],[11,"read_message","","",62,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"new","","",63,{"inputs":[{"name":"write"}],"output":{"name":"codedoutputstream"}}],[11,"bytes","","`CodedOutputStream` which writes directly to bytes.",63,null],[11,"vec","","`CodedOutputStream` which writes directly to `Vec<u8>`.",63,{"inputs":[{"name":"vec"}],"output":{"name":"codedoutputstream"}}],[11,"check_eof","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"flush","","",63,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"write_raw_byte","","",63,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"protobufresult"}}],[11,"write_raw_bytes","","",63,null],[11,"write_tag","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"wiretype"}],"output":{"name":"protobufresult"}}],[11,"write_raw_varint32","","",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_raw_varint64","","",63,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_raw_little_endian32","","",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_raw_little_endian64","","",63,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_float_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"protobufresult"}}],[11,"write_double_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"protobufresult"}}],[11,"write_float","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f32"}],"output":{"name":"protobufresult"}}],[11,"write_double","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f64"}],"output":{"name":"protobufresult"}}],[11,"write_uint64_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_uint32_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_int64_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_int32_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_sint64_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_sint32_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_fixed64_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_fixed32_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_sfixed64_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_sfixed32_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_bool_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"protobufresult"}}],[11,"write_enum_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_enum_obj_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"protobufresult"}}],[11,"write_unknown_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"unknownvalueref"}],"output":{"name":"protobufresult"}}],[11,"write_uint64","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_uint32","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_int64","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_int32","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_sint64","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_sint32","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_fixed64","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_fixed32","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_sfixed64","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_sfixed32","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_bool","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"bool"}],"output":{"name":"protobufresult"}}],[11,"write_enum","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_enum_obj","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"e"}],"output":{"name":"protobufresult"}}],[11,"write_unknown","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"unknownvalueref"}],"output":{"name":"protobufresult"}}],[11,"write_unknown_fields","","",63,{"inputs":[{"name":"self"},{"name":"unknownfields"}],"output":{"name":"protobufresult"}}],[11,"write_bytes_no_tag","","",63,null],[11,"write_string_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"protobufresult"}}],[11,"write_message_no_tag","","",63,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"protobufresult"}}],[11,"write_bytes","","",63,null],[11,"write_string","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"str"}],"output":{"name":"protobufresult"}}],[11,"write_message","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"m"}],"output":{"name":"protobufresult"}}],[0,"error","protobuf","",null,null],[4,"WireError","protobuf::error","Enum values added here for diagnostic purposes. Users should not depend on specific values.",null,null],[13,"UnexpectedEof","","",64,null],[13,"UnexpectedWireType","","",64,null],[13,"IncorrectTag","","",64,null],[13,"IncompleteMap","","",64,null],[13,"IncorrectVarint","","",64,null],[13,"Utf8Error","","",64,null],[13,"InvalidEnumValue","","",64,null],[13,"Other","","",64,null],[4,"ProtobufError","","",null,null],[13,"IoError","","",65,null],[13,"WireError","","",65,null],[13,"Utf8","","",65,null],[13,"MessageNotInitialized","","",65,null],[12,"message","protobuf::error::ProtobufError","",65,null],[6,"ProtobufResult","protobuf::error","",null,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"message_not_initialized","","",65,{"inputs":[{"name":"str"}],"output":{"name":"protobuferror"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",65,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",65,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",65,{"inputs":[{"name":"utf8error"}],"output":{"name":"self"}}],[0,"types","protobuf","",null,null],[3,"ProtobufTypeFloat","protobuf::types","",null,null],[3,"ProtobufTypeDouble","","",null,null],[3,"ProtobufTypeInt32","","",null,null],[3,"ProtobufTypeInt64","","",null,null],[3,"ProtobufTypeUint32","","",null,null],[3,"ProtobufTypeUint64","","",null,null],[3,"ProtobufTypeSint32","","",null,null],[3,"ProtobufTypeSint64","","",null,null],[3,"ProtobufTypeFixed32","","",null,null],[3,"ProtobufTypeFixed64","","",null,null],[3,"ProtobufTypeSfixed32","","",null,null],[3,"ProtobufTypeSfixed64","","",null,null],[3,"ProtobufTypeBool","","",null,null],[3,"ProtobufTypeString","","",null,null],[3,"ProtobufTypeBytes","","",null,null],[3,"ProtobufTypeChars","","",null,null],[3,"ProtobufTypeEnum","","",null,null],[3,"ProtobufTypeMessage","","",null,null],[8,"ProtobufType","","",null,null],[16,"Value","","",66,null],[10,"wire_type","","",66,{"inputs":[],"output":{"name":"wiretype"}}],[10,"read","","",66,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[10,"compute_size","","",66,null],[11,"compute_size_with_length_delimiter","","Compute size adding length prefix if wire type is length delimited (i. e. string, bytes, message)",66,null],[11,"get_from_unknown","","",66,{"inputs":[{"name":"unknownvalues"}],"output":{"name":"option"}}],[11,"get_cached_size","","Get previously computed size",66,null],[11,"get_cached_size_with_length_delimiter","","Get previously cached size with length prefix",66,null],[10,"write_with_cached_size","","",66,null],[11,"wire_type","","",67,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",67,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["f32"],"name":"protobufresult"}}],[11,"compute_size","","",67,{"inputs":[{"name":"f32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",67,{"inputs":[{"name":"u32"},{"name":"f32"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",68,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",68,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["f64"],"name":"protobufresult"}}],[11,"compute_size","","",68,{"inputs":[{"name":"f64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",68,{"inputs":[{"name":"u32"},{"name":"f64"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",69,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",69,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["i32"],"name":"protobufresult"}}],[11,"compute_size","","",69,{"inputs":[{"name":"i32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",69,{"inputs":[{"name":"u32"},{"name":"i32"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",70,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",70,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["i64"],"name":"protobufresult"}}],[11,"compute_size","","",70,{"inputs":[{"name":"i64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",70,{"inputs":[{"name":"u32"},{"name":"i64"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",71,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",71,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["u32"],"name":"protobufresult"}}],[11,"compute_size","","",71,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",71,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",72,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",72,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["u64"],"name":"protobufresult"}}],[11,"compute_size","","",72,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",72,{"inputs":[{"name":"u32"},{"name":"u64"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",73,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",73,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["i32"],"name":"protobufresult"}}],[11,"compute_size","","",73,{"inputs":[{"name":"i32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",73,{"inputs":[{"name":"u32"},{"name":"i32"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",74,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",74,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["i64"],"name":"protobufresult"}}],[11,"compute_size","","",74,{"inputs":[{"name":"i64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",74,{"inputs":[{"name":"u32"},{"name":"i64"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",75,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",75,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["u32"],"name":"protobufresult"}}],[11,"compute_size","","",75,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",75,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",76,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",76,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["u64"],"name":"protobufresult"}}],[11,"compute_size","","",76,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",76,{"inputs":[{"name":"u32"},{"name":"u64"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",77,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",77,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["i32"],"name":"protobufresult"}}],[11,"compute_size","","",77,{"inputs":[{"name":"i32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",77,{"inputs":[{"name":"u32"},{"name":"i32"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",78,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",78,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["i64"],"name":"protobufresult"}}],[11,"compute_size","","",78,{"inputs":[{"name":"i64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",78,{"inputs":[{"name":"u32"},{"name":"i64"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",79,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",79,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["bool"],"name":"protobufresult"}}],[11,"get_from_unknown","","",79,{"inputs":[{"name":"unknownvalues"}],"output":{"generics":["bool"],"name":"option"}}],[11,"compute_size","","",79,{"inputs":[{"name":"bool"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",79,{"inputs":[{"name":"u32"},{"name":"bool"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",80,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",80,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["string"],"name":"protobufresult"}}],[11,"compute_size","","",80,{"inputs":[{"name":"string"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",80,{"inputs":[{"name":"u32"},{"name":"string"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",81,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",81,{"inputs":[{"name":"codedinputstream"}],"output":{"generics":["vec"],"name":"protobufresult"}}],[11,"compute_size","","",81,{"inputs":[{"name":"vec"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",81,{"inputs":[{"name":"u32"},{"name":"vec"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",82,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",82,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",82,{"inputs":[{"name":"e"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",82,{"inputs":[{"name":"u32"},{"name":"e"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",83,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",83,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",83,{"inputs":[{"name":"m"}],"output":{"name":"u32"}}],[11,"get_cached_size","","",83,{"inputs":[{"name":"m"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",83,null],[0,"well_known_types","protobuf","",null,null],[3,"Any","protobuf::well_known_types","",null,null],[12,"type_url","","",84,null],[12,"value","","",84,null],[3,"Api","","",null,null],[12,"name","","",85,null],[12,"methods","","",85,null],[12,"options","","",85,null],[12,"version","","",85,null],[12,"source_context","","",85,null],[12,"mixins","","",85,null],[12,"syntax","","",85,null],[3,"Method","","",null,null],[12,"name","","",86,null],[12,"request_type_url","","",86,null],[12,"request_streaming","","",86,null],[12,"response_type_url","","",86,null],[12,"response_streaming","","",86,null],[12,"options","","",86,null],[12,"syntax","","",86,null],[3,"Mixin","","",null,null],[12,"name","","",87,null],[12,"root","","",87,null],[3,"Duration","","",null,null],[12,"seconds","","",88,null],[12,"nanos","","",88,null],[3,"Empty","","",null,null],[3,"FieldMask","","",null,null],[12,"paths","","",89,null],[3,"SourceContext","","",null,null],[12,"file_name","","",90,null],[3,"Struct","","",null,null],[12,"fields","","",91,null],[3,"Value","","",null,null],[3,"ListValue","","",null,null],[12,"values","","",92,null],[3,"Timestamp","","",null,null],[12,"seconds","","",93,null],[12,"nanos","","",93,null],[3,"Type","","",null,null],[12,"name","","",94,null],[12,"fields","","",94,null],[12,"oneofs","","",94,null],[12,"options","","",94,null],[12,"source_context","","",94,null],[12,"syntax","","",94,null],[3,"Field","","",null,null],[12,"kind","","",95,null],[12,"cardinality","","",95,null],[12,"number","","",95,null],[12,"name","","",95,null],[12,"type_url","","",95,null],[12,"oneof_index","","",95,null],[12,"packed","","",95,null],[12,"options","","",95,null],[12,"json_name","","",95,null],[12,"default_value","","",95,null],[3,"Enum","","",null,null],[12,"name","","",96,null],[12,"enumvalue","","",96,null],[12,"options","","",96,null],[12,"source_context","","",96,null],[12,"syntax","","",96,null],[3,"EnumValue","","",null,null],[12,"name","","",97,null],[12,"number","","",97,null],[12,"options","","",97,null],[3,"Option","","",null,null],[12,"name","","",98,null],[12,"value","","",98,null],[3,"DoubleValue","","",null,null],[12,"value","","",99,null],[3,"FloatValue","","",null,null],[12,"value","","",100,null],[3,"Int64Value","","",null,null],[12,"value","","",101,null],[3,"UInt64Value","","",null,null],[12,"value","","",102,null],[3,"Int32Value","","",null,null],[12,"value","","",103,null],[3,"UInt32Value","","",null,null],[12,"value","","",104,null],[3,"BoolValue","","",null,null],[12,"value","","",105,null],[3,"StringValue","","",null,null],[12,"value","","",106,null],[3,"BytesValue","","",null,null],[12,"value","","",107,null],[4,"Value_oneof_kind","","",null,null],[13,"null_value","","",108,null],[13,"number_value","","",108,null],[13,"string_value","","",108,null],[13,"bool_value","","",108,null],[13,"struct_value","","",108,null],[13,"list_value","","",108,null],[4,"NullValue","","",null,null],[13,"NULL_VALUE","","",109,null],[4,"Field_Kind","","",null,null],[13,"TYPE_UNKNOWN","","",110,null],[13,"TYPE_DOUBLE","","",110,null],[13,"TYPE_FLOAT","","",110,null],[13,"TYPE_INT64","","",110,null],[13,"TYPE_UINT64","","",110,null],[13,"TYPE_INT32","","",110,null],[13,"TYPE_FIXED64","","",110,null],[13,"TYPE_FIXED32","","",110,null],[13,"TYPE_BOOL","","",110,null],[13,"TYPE_STRING","","",110,null],[13,"TYPE_GROUP","","",110,null],[13,"TYPE_MESSAGE","","",110,null],[13,"TYPE_BYTES","","",110,null],[13,"TYPE_UINT32","","",110,null],[13,"TYPE_ENUM","","",110,null],[13,"TYPE_SFIXED32","","",110,null],[13,"TYPE_SFIXED64","","",110,null],[13,"TYPE_SINT32","","",110,null],[13,"TYPE_SINT64","","",110,null],[4,"Field_Cardinality","","",null,null],[13,"CARDINALITY_UNKNOWN","","",111,null],[13,"CARDINALITY_OPTIONAL","","",111,null],[13,"CARDINALITY_REQUIRED","","",111,null],[13,"CARDINALITY_REPEATED","","",111,null],[4,"Syntax","","",null,null],[13,"SYNTAX_PROTO2","","",112,null],[13,"SYNTAX_PROTO3","","",112,null],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"default","","",84,{"inputs":[],"output":{"name":"any"}}],[11,"new","","",84,{"inputs":[],"output":{"name":"any"}}],[11,"default_instance","","",84,{"inputs":[],"output":{"name":"any"}}],[11,"clear_type_url","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"set_type_url","","",84,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_type_url","","",84,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_type_url","","",84,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_type_url","","",84,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_value","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",84,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_value","","",84,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_value","","",84,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_value","","",84,null],[11,"is_initialized","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",84,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",84,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",84,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",84,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",84,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",84,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",84,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",84,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",84,{"inputs":[],"output":{"name":"any"}}],[11,"descriptor_static","","",84,{"inputs":[{"generics":["any"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",84,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"api"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"api"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"default","","",85,{"inputs":[],"output":{"name":"api"}}],[11,"new","","",85,{"inputs":[],"output":{"name":"api"}}],[11,"default_instance","","",85,{"inputs":[],"output":{"name":"api"}}],[11,"clear_name","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",85,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",85,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",85,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_methods","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"set_methods","","",85,{"inputs":[{"name":"self"},{"generics":["method"],"name":"repeatedfield"}],"output":null}],[11,"mut_methods","","",85,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_methods","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["method"],"name":"repeatedfield"}}],[11,"get_methods","","",85,null],[11,"clear_options","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"set_options","","",85,{"inputs":[{"name":"self"},{"generics":["option"],"name":"repeatedfield"}],"output":null}],[11,"mut_options","","",85,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_options","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"repeatedfield"}}],[11,"get_options","","",85,null],[11,"clear_version","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"set_version","","",85,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_version","","",85,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_version","","",85,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_version","","",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_source_context","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"has_source_context","","",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_source_context","","",85,{"inputs":[{"name":"self"},{"name":"sourcecontext"}],"output":null}],[11,"mut_source_context","","",85,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"take_source_context","","",85,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"get_source_context","","",85,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"clear_mixins","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"set_mixins","","",85,{"inputs":[{"name":"self"},{"generics":["mixin"],"name":"repeatedfield"}],"output":null}],[11,"mut_mixins","","",85,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_mixins","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["mixin"],"name":"repeatedfield"}}],[11,"get_mixins","","",85,null],[11,"clear_syntax","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"set_syntax","","",85,{"inputs":[{"name":"self"},{"name":"syntax"}],"output":null}],[11,"get_syntax","","",85,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"is_initialized","","",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",85,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",85,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",85,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",85,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",85,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",85,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",85,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",85,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",85,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",85,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",85,{"inputs":[],"output":{"name":"api"}}],[11,"descriptor_static","","",85,{"inputs":[{"generics":["api"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",85,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"default","","",86,{"inputs":[],"output":{"name":"method"}}],[11,"new","","",86,{"inputs":[],"output":{"name":"method"}}],[11,"default_instance","","",86,{"inputs":[],"output":{"name":"method"}}],[11,"clear_name","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",86,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",86,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",86,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",86,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_request_type_url","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"set_request_type_url","","",86,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_request_type_url","","",86,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_request_type_url","","",86,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_request_type_url","","",86,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_request_streaming","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"set_request_streaming","","",86,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_request_streaming","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_response_type_url","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"set_response_type_url","","",86,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_response_type_url","","",86,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_response_type_url","","",86,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_response_type_url","","",86,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_response_streaming","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"set_response_streaming","","",86,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_response_streaming","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_options","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"set_options","","",86,{"inputs":[{"name":"self"},{"generics":["option"],"name":"repeatedfield"}],"output":null}],[11,"mut_options","","",86,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_options","","",86,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"repeatedfield"}}],[11,"get_options","","",86,null],[11,"clear_syntax","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"set_syntax","","",86,{"inputs":[{"name":"self"},{"name":"syntax"}],"output":null}],[11,"get_syntax","","",86,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"is_initialized","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",86,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",86,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",86,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",86,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",86,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",86,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",86,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",86,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",86,{"inputs":[],"output":{"name":"method"}}],[11,"descriptor_static","","",86,{"inputs":[{"generics":["method"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",86,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"mixin"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"mixin"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"mixin"}}],[11,"default","","",87,{"inputs":[],"output":{"name":"mixin"}}],[11,"new","","",87,{"inputs":[],"output":{"name":"mixin"}}],[11,"default_instance","","",87,{"inputs":[],"output":{"name":"mixin"}}],[11,"clear_name","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",87,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",87,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",87,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_root","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"set_root","","",87,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_root","","",87,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_root","","",87,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_root","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",87,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",87,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",87,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",87,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",87,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",87,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",87,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",87,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",87,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",87,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",87,{"inputs":[],"output":{"name":"mixin"}}],[11,"descriptor_static","","",87,{"inputs":[{"generics":["mixin"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",87,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"default","","",88,{"inputs":[],"output":{"name":"duration"}}],[11,"new","","",88,{"inputs":[],"output":{"name":"duration"}}],[11,"default_instance","","",88,{"inputs":[],"output":{"name":"duration"}}],[11,"clear_seconds","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"set_seconds","","",88,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_seconds","","",88,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_nanos","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"set_nanos","","",88,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_nanos","","",88,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",88,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",88,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",88,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",88,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",88,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",88,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",88,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",88,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",88,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",88,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",88,{"inputs":[],"output":{"name":"duration"}}],[11,"descriptor_static","","",88,{"inputs":[{"generics":["duration"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",88,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"empty"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"empty"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"empty"}}],[11,"default","","",113,{"inputs":[],"output":{"name":"empty"}}],[11,"new","","",113,{"inputs":[],"output":{"name":"empty"}}],[11,"default_instance","","",113,{"inputs":[],"output":{"name":"empty"}}],[11,"is_initialized","","",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",113,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",113,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",113,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",113,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",113,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",113,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",113,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",113,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",113,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",113,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",113,{"inputs":[],"output":{"name":"empty"}}],[11,"descriptor_static","","",113,{"inputs":[{"generics":["empty"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",113,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",113,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"fieldmask"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"fieldmask"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"fieldmask"}}],[11,"default","","",89,{"inputs":[],"output":{"name":"fieldmask"}}],[11,"new","","",89,{"inputs":[],"output":{"name":"fieldmask"}}],[11,"default_instance","","",89,{"inputs":[],"output":{"name":"fieldmask"}}],[11,"clear_paths","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"set_paths","","",89,{"inputs":[{"name":"self"},{"generics":["string"],"name":"repeatedfield"}],"output":null}],[11,"mut_paths","","",89,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_paths","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"repeatedfield"}}],[11,"get_paths","","",89,null],[11,"is_initialized","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",89,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",89,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",89,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",89,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",89,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",89,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",89,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",89,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",89,{"inputs":[],"output":{"name":"fieldmask"}}],[11,"descriptor_static","","",89,{"inputs":[{"generics":["fieldmask"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",89,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"sourcecontext"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"sourcecontext"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"sourcecontext"}}],[11,"new","","",90,{"inputs":[],"output":{"name":"sourcecontext"}}],[11,"default_instance","","",90,{"inputs":[],"output":{"name":"sourcecontext"}}],[11,"clear_file_name","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"set_file_name","","",90,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_file_name","","",90,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_file_name","","",90,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_file_name","","",90,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",90,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",90,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",90,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",90,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",90,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",90,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",90,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",90,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",90,{"inputs":[],"output":{"name":"sourcecontext"}}],[11,"descriptor_static","","",90,{"inputs":[{"generics":["sourcecontext"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",90,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"struct"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"struct"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"struct"}}],[11,"new","","",91,{"inputs":[],"output":{"name":"struct"}}],[11,"default_instance","","",91,{"inputs":[],"output":{"name":"struct"}}],[11,"clear_fields","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"set_fields","","",91,{"inputs":[{"name":"self"},{"generics":["string","value"],"name":"hashmap"}],"output":null}],[11,"mut_fields","","",91,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"take_fields","","",91,{"inputs":[{"name":"self"}],"output":{"generics":["string","value"],"name":"hashmap"}}],[11,"get_fields","","",91,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"is_initialized","","",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",91,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",91,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",91,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",91,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",91,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",91,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",91,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",91,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",91,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",91,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",91,{"inputs":[],"output":{"name":"struct"}}],[11,"descriptor_static","","",91,{"inputs":[{"generics":["struct"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",91,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"default","","",114,{"inputs":[],"output":{"name":"value"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"value_oneof_kind"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"value_oneof_kind"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"value_oneof_kind"}],"output":{"name":"bool"}}],[11,"new","","",114,{"inputs":[],"output":{"name":"value"}}],[11,"default_instance","","",114,{"inputs":[],"output":{"name":"value"}}],[11,"clear_null_value","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"has_null_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_null_value","","",114,{"inputs":[{"name":"self"},{"name":"nullvalue"}],"output":null}],[11,"get_null_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"nullvalue"}}],[11,"clear_number_value","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"has_number_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_number_value","","",114,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"get_number_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"clear_string_value","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"has_string_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_string_value","","",114,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_string_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_string_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_string_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_bool_value","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"has_bool_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_bool_value","","",114,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_bool_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_struct_value","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"has_struct_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_struct_value","","",114,{"inputs":[{"name":"self"},{"name":"struct"}],"output":null}],[11,"mut_struct_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"take_struct_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"get_struct_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"clear_list_value","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"has_list_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_list_value","","",114,{"inputs":[{"name":"self"},{"name":"listvalue"}],"output":null}],[11,"mut_list_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"listvalue"}}],[11,"take_list_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"listvalue"}}],[11,"get_list_value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"listvalue"}}],[11,"is_initialized","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",114,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",114,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",114,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",114,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",114,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",114,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",114,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",114,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",114,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",114,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",114,{"inputs":[],"output":{"name":"value"}}],[11,"descriptor_static","","",114,{"inputs":[{"generics":["value"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",114,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"listvalue"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"listvalue"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"listvalue"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"listvalue"}}],[11,"new","","",92,{"inputs":[],"output":{"name":"listvalue"}}],[11,"default_instance","","",92,{"inputs":[],"output":{"name":"listvalue"}}],[11,"clear_values","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"set_values","","",92,{"inputs":[{"name":"self"},{"generics":["value"],"name":"repeatedfield"}],"output":null}],[11,"mut_values","","",92,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_values","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["value"],"name":"repeatedfield"}}],[11,"get_values","","",92,null],[11,"is_initialized","","",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",92,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",92,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",92,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",92,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",92,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",92,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",92,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",92,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",92,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",92,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",92,{"inputs":[],"output":{"name":"listvalue"}}],[11,"descriptor_static","","",92,{"inputs":[{"generics":["listvalue"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",92,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"nullvalue"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"nullvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",109,null],[11,"value","","",109,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",109,{"inputs":[{"name":"i32"}],"output":{"generics":["nullvalue"],"name":"option"}}],[11,"values","","",109,null],[11,"enum_descriptor_static","","",109,{"inputs":[{"generics":["nullvalue"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"default","","",109,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",109,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"timestamp"}}],[11,"default","","",93,{"inputs":[],"output":{"name":"timestamp"}}],[11,"new","","",93,{"inputs":[],"output":{"name":"timestamp"}}],[11,"default_instance","","",93,{"inputs":[],"output":{"name":"timestamp"}}],[11,"clear_seconds","","",93,{"inputs":[{"name":"self"}],"output":null}],[11,"set_seconds","","",93,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_seconds","","",93,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_nanos","","",93,{"inputs":[{"name":"self"}],"output":null}],[11,"set_nanos","","",93,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_nanos","","",93,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",93,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",93,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",93,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",93,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",93,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",93,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",93,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",93,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",93,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",93,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",93,{"inputs":[],"output":{"name":"timestamp"}}],[11,"descriptor_static","","",93,{"inputs":[{"generics":["timestamp"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",93,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"default","","",94,{"inputs":[],"output":{"name":"type"}}],[11,"new","","",94,{"inputs":[],"output":{"name":"type"}}],[11,"default_instance","","",94,{"inputs":[],"output":{"name":"type"}}],[11,"clear_name","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",94,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",94,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",94,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",94,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_fields","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"set_fields","","",94,{"inputs":[{"name":"self"},{"generics":["field"],"name":"repeatedfield"}],"output":null}],[11,"mut_fields","","",94,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_fields","","",94,{"inputs":[{"name":"self"}],"output":{"generics":["field"],"name":"repeatedfield"}}],[11,"get_fields","","",94,null],[11,"clear_oneofs","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"set_oneofs","","",94,{"inputs":[{"name":"self"},{"generics":["string"],"name":"repeatedfield"}],"output":null}],[11,"mut_oneofs","","",94,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_oneofs","","",94,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"repeatedfield"}}],[11,"get_oneofs","","",94,null],[11,"clear_options","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"set_options","","",94,{"inputs":[{"name":"self"},{"generics":["option"],"name":"repeatedfield"}],"output":null}],[11,"mut_options","","",94,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_options","","",94,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"repeatedfield"}}],[11,"get_options","","",94,null],[11,"clear_source_context","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"has_source_context","","",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_source_context","","",94,{"inputs":[{"name":"self"},{"name":"sourcecontext"}],"output":null}],[11,"mut_source_context","","",94,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"take_source_context","","",94,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"get_source_context","","",94,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"clear_syntax","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"set_syntax","","",94,{"inputs":[{"name":"self"},{"name":"syntax"}],"output":null}],[11,"get_syntax","","",94,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"is_initialized","","",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",94,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",94,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",94,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",94,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",94,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",94,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",94,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",94,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",94,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",94,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",94,{"inputs":[],"output":{"name":"type"}}],[11,"descriptor_static","","",94,{"inputs":[{"generics":["type"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"field"}}],[11,"new","","",95,{"inputs":[],"output":{"name":"field"}}],[11,"default_instance","","",95,{"inputs":[],"output":{"name":"field"}}],[11,"clear_kind","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_kind","","",95,{"inputs":[{"name":"self"},{"name":"field_kind"}],"output":null}],[11,"get_kind","","",95,{"inputs":[{"name":"self"}],"output":{"name":"field_kind"}}],[11,"clear_cardinality","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_cardinality","","",95,{"inputs":[{"name":"self"},{"name":"field_cardinality"}],"output":null}],[11,"get_cardinality","","",95,{"inputs":[{"name":"self"}],"output":{"name":"field_cardinality"}}],[11,"clear_number","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_number","","",95,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_number","","",95,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_name","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",95,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_type_url","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_type_url","","",95,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_type_url","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_type_url","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_type_url","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_oneof_index","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_oneof_index","","",95,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_oneof_index","","",95,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_packed","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_packed","","",95,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_packed","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_options","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_options","","",95,{"inputs":[{"name":"self"},{"generics":["option"],"name":"repeatedfield"}],"output":null}],[11,"mut_options","","",95,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_options","","",95,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"repeatedfield"}}],[11,"get_options","","",95,null],[11,"clear_json_name","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_json_name","","",95,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_json_name","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_json_name","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_json_name","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_default_value","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"set_default_value","","",95,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_default_value","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_default_value","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_default_value","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",95,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",95,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",95,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",95,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",95,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",95,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",95,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",95,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",95,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",95,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",95,{"inputs":[],"output":{"name":"field"}}],[11,"descriptor_static","","",95,{"inputs":[{"generics":["field"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",95,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"field_kind"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"field_kind"}],"output":{"name":"bool"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",110,null],[11,"value","","",110,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",110,{"inputs":[{"name":"i32"}],"output":{"generics":["field_kind"],"name":"option"}}],[11,"values","","",110,null],[11,"enum_descriptor_static","","",110,{"inputs":[{"generics":["field_kind"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"default","","",110,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",110,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"field_cardinality"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"field_cardinality"}],"output":{"name":"bool"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",111,null],[11,"value","","",111,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",111,{"inputs":[{"name":"i32"}],"output":{"generics":["field_cardinality"],"name":"option"}}],[11,"values","","",111,null],[11,"enum_descriptor_static","","",111,{"inputs":[{"generics":["field_cardinality"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"default","","",111,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",111,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"enum"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"enum"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"enum"}}],[11,"default","","",96,{"inputs":[],"output":{"name":"enum"}}],[11,"new","","",96,{"inputs":[],"output":{"name":"enum"}}],[11,"default_instance","","",96,{"inputs":[],"output":{"name":"enum"}}],[11,"clear_name","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",96,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",96,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",96,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",96,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_enumvalue","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"set_enumvalue","","",96,{"inputs":[{"name":"self"},{"generics":["enumvalue"],"name":"repeatedfield"}],"output":null}],[11,"mut_enumvalue","","",96,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_enumvalue","","",96,{"inputs":[{"name":"self"}],"output":{"generics":["enumvalue"],"name":"repeatedfield"}}],[11,"get_enumvalue","","",96,null],[11,"clear_options","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"set_options","","",96,{"inputs":[{"name":"self"},{"generics":["option"],"name":"repeatedfield"}],"output":null}],[11,"mut_options","","",96,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_options","","",96,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"repeatedfield"}}],[11,"get_options","","",96,null],[11,"clear_source_context","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"has_source_context","","",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_source_context","","",96,{"inputs":[{"name":"self"},{"name":"sourcecontext"}],"output":null}],[11,"mut_source_context","","",96,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"take_source_context","","",96,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"get_source_context","","",96,{"inputs":[{"name":"self"}],"output":{"name":"sourcecontext"}}],[11,"clear_syntax","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"set_syntax","","",96,{"inputs":[{"name":"self"},{"name":"syntax"}],"output":null}],[11,"get_syntax","","",96,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"is_initialized","","",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",96,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",96,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",96,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",96,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",96,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",96,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",96,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",96,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",96,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",96,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",96,{"inputs":[],"output":{"name":"enum"}}],[11,"descriptor_static","","",96,{"inputs":[{"generics":["enum"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",96,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"enumvalue"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"enumvalue"}],"output":{"name":"bool"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"enumvalue"}}],[11,"default","","",97,{"inputs":[],"output":{"name":"enumvalue"}}],[11,"new","","",97,{"inputs":[],"output":{"name":"enumvalue"}}],[11,"default_instance","","",97,{"inputs":[],"output":{"name":"enumvalue"}}],[11,"clear_name","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",97,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",97,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",97,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_number","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"set_number","","",97,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_number","","",97,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_options","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"set_options","","",97,{"inputs":[{"name":"self"},{"generics":["option"],"name":"repeatedfield"}],"output":null}],[11,"mut_options","","",97,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_options","","",97,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"repeatedfield"}}],[11,"get_options","","",97,null],[11,"is_initialized","","",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",97,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",97,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",97,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",97,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",97,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",97,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",97,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",97,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",97,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",97,{"inputs":[],"output":{"name":"enumvalue"}}],[11,"descriptor_static","","",97,{"inputs":[{"generics":["enumvalue"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",98,{"inputs":[],"output":{"name":"option"}}],[11,"new","","",98,{"inputs":[],"output":{"name":"option"}}],[11,"default_instance","","",98,{"inputs":[],"output":{"name":"option"}}],[11,"clear_name","","",98,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",98,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",98,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",98,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",98,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_value","","",98,{"inputs":[{"name":"self"}],"output":null}],[11,"has_value","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_value","","",98,{"inputs":[{"name":"self"},{"name":"any"}],"output":null}],[11,"mut_value","","",98,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"take_value","","",98,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"get_value","","",98,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"is_initialized","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",98,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",98,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",98,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",98,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",98,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",98,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",98,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",98,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",98,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",98,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",98,{"inputs":[],"output":{"name":"option"}}],[11,"descriptor_static","","",98,{"inputs":[{"generics":["option"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",98,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",98,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"syntax"}],"output":{"name":"bool"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",112,null],[11,"value","","",112,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",112,{"inputs":[{"name":"i32"}],"output":{"generics":["syntax"],"name":"option"}}],[11,"values","","",112,null],[11,"enum_descriptor_static","","",112,{"inputs":[{"generics":["syntax"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"default","","",112,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",112,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"doublevalue"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"doublevalue"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"doublevalue"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"doublevalue"}}],[11,"new","","",99,{"inputs":[],"output":{"name":"doublevalue"}}],[11,"default_instance","","",99,{"inputs":[],"output":{"name":"doublevalue"}}],[11,"clear_value","","",99,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",99,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"get_value","","",99,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"is_initialized","","",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",99,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",99,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",99,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",99,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",99,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",99,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",99,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",99,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",99,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",99,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",99,{"inputs":[],"output":{"name":"doublevalue"}}],[11,"descriptor_static","","",99,{"inputs":[{"generics":["doublevalue"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",99,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",99,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"floatvalue"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"floatvalue"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"floatvalue"}}],[11,"default","","",100,{"inputs":[],"output":{"name":"floatvalue"}}],[11,"new","","",100,{"inputs":[],"output":{"name":"floatvalue"}}],[11,"default_instance","","",100,{"inputs":[],"output":{"name":"floatvalue"}}],[11,"clear_value","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",100,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"get_value","","",100,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"is_initialized","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",100,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",100,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",100,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",100,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",100,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",100,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",100,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",100,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",100,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",100,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",100,{"inputs":[],"output":{"name":"floatvalue"}}],[11,"descriptor_static","","",100,{"inputs":[{"generics":["floatvalue"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",100,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"int64value"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"int64value"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"int64value"}}],[11,"default","","",101,{"inputs":[],"output":{"name":"int64value"}}],[11,"new","","",101,{"inputs":[],"output":{"name":"int64value"}}],[11,"default_instance","","",101,{"inputs":[],"output":{"name":"int64value"}}],[11,"clear_value","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",101,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_value","","",101,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"is_initialized","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",101,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",101,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",101,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",101,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",101,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",101,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",101,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",101,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",101,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",101,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",101,{"inputs":[],"output":{"name":"int64value"}}],[11,"descriptor_static","","",101,{"inputs":[{"generics":["int64value"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",101,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"uint64value"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"uint64value"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"uint64value"}}],[11,"default","","",102,{"inputs":[],"output":{"name":"uint64value"}}],[11,"new","","",102,{"inputs":[],"output":{"name":"uint64value"}}],[11,"default_instance","","",102,{"inputs":[],"output":{"name":"uint64value"}}],[11,"clear_value","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",102,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_value","","",102,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_initialized","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",102,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",102,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",102,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",102,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",102,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",102,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",102,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",102,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",102,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",102,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",102,{"inputs":[],"output":{"name":"uint64value"}}],[11,"descriptor_static","","",102,{"inputs":[{"generics":["uint64value"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",102,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"int32value"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"int32value"}],"output":{"name":"bool"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"int32value"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"int32value"}}],[11,"new","","",103,{"inputs":[],"output":{"name":"int32value"}}],[11,"default_instance","","",103,{"inputs":[],"output":{"name":"int32value"}}],[11,"clear_value","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",103,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_value","","",103,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",103,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",103,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",103,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",103,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",103,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",103,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",103,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",103,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",103,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",103,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",103,{"inputs":[],"output":{"name":"int32value"}}],[11,"descriptor_static","","",103,{"inputs":[{"generics":["int32value"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",103,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"uint32value"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"uint32value"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"uint32value"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"uint32value"}}],[11,"new","","",104,{"inputs":[],"output":{"name":"uint32value"}}],[11,"default_instance","","",104,{"inputs":[],"output":{"name":"uint32value"}}],[11,"clear_value","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",104,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_value","","",104,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",104,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",104,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",104,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",104,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",104,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",104,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",104,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",104,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",104,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",104,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",104,{"inputs":[],"output":{"name":"uint32value"}}],[11,"descriptor_static","","",104,{"inputs":[{"generics":["uint32value"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",104,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"boolvalue"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"boolvalue"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"boolvalue"}}],[11,"default","","",105,{"inputs":[],"output":{"name":"boolvalue"}}],[11,"new","","",105,{"inputs":[],"output":{"name":"boolvalue"}}],[11,"default_instance","","",105,{"inputs":[],"output":{"name":"boolvalue"}}],[11,"clear_value","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",105,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_value","","",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",105,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",105,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",105,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",105,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",105,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",105,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",105,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",105,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",105,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",105,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",105,{"inputs":[],"output":{"name":"boolvalue"}}],[11,"descriptor_static","","",105,{"inputs":[{"generics":["boolvalue"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",105,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"stringvalue"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"stringvalue"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"stringvalue"}}],[11,"default","","",106,{"inputs":[],"output":{"name":"stringvalue"}}],[11,"new","","",106,{"inputs":[],"output":{"name":"stringvalue"}}],[11,"default_instance","","",106,{"inputs":[],"output":{"name":"stringvalue"}}],[11,"clear_value","","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",106,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_value","","",106,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_value","","",106,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_value","","",106,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",106,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",106,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",106,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",106,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",106,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",106,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",106,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",106,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",106,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",106,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",106,{"inputs":[],"output":{"name":"stringvalue"}}],[11,"descriptor_static","","",106,{"inputs":[{"generics":["stringvalue"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",106,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"bytesvalue"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"bytesvalue"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bytesvalue"}}],[11,"default","","",107,{"inputs":[],"output":{"name":"bytesvalue"}}],[11,"new","","",107,{"inputs":[],"output":{"name":"bytesvalue"}}],[11,"default_instance","","",107,{"inputs":[],"output":{"name":"bytesvalue"}}],[11,"clear_value","","",107,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",107,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_value","","",107,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_value","","",107,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_value","","",107,null],[11,"is_initialized","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",107,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",107,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",107,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",107,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",107,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",107,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",107,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",107,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",107,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",107,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",107,{"inputs":[],"output":{"name":"bytesvalue"}}],[11,"descriptor_static","","",107,{"inputs":[{"generics":["bytesvalue"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",107,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",107,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"ext","protobuf","",null,null],[3,"ExtFieldOptional","protobuf::ext","Optional ext field",null,null],[12,"field_number","","",115,null],[12,"phantom","","",115,null],[3,"ExtFieldRepeated","","Repeated ext field",null,null],[12,"field_number","","",116,null],[12,"phantom","","",116,null],[11,"get","","",115,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"option"}}],[11,"get","","",116,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"vec"}}],[0,"hex","protobuf","",null,null],[5,"decode_hex","protobuf::hex","",null,{"inputs":[{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[5,"encode_hex","","",null,null],[0,"descriptorx","protobuf","",null,null],[3,"RootScope","protobuf::descriptorx","",null,null],[12,"file_descriptors","","",117,null],[3,"FileScope","","",null,null],[12,"file_descriptor","","",118,null],[3,"Scope","","",null,null],[12,"file_scope","","",119,null],[12,"path","","",119,null],[3,"MessageWithScope","","",null,null],[12,"scope","","",120,null],[12,"message","","",120,null],[3,"EnumWithScope","","",null,null],[12,"scope","","",121,null],[12,"en","","",121,null],[3,"FieldWithContext","","",null,null],[12,"field","","",122,null],[12,"message","","",122,null],[3,"OneofVariantWithContext","","",null,null],[12,"oneof","","",123,null],[12,"field","","",123,null],[3,"OneofWithContext","","",null,null],[12,"oneof","","",124,null],[12,"index","","",124,null],[12,"message","","",124,null],[4,"Syntax","","",null,null],[13,"PROTO2","","",125,null],[13,"PROTO3","","",125,null],[4,"MessageOrEnumWithScope","","",null,null],[13,"Message","","",126,null],[13,"Enum","","",126,null],[5,"proto_path_to_rust_mod","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"find_message_by_rust_name","","",null,{"inputs":[{"name":"filedescriptorproto"},{"name":"str"}],"output":{"name":"messagewithscope"}}],[5,"find_enum_by_rust_name","","",null,{"inputs":[{"name":"filedescriptorproto"},{"name":"str"}],"output":{"name":"enumwithscope"}}],[8,"WithScope","","",null,null],[10,"get_scope","","",127,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"get_file_descriptor","","",127,{"inputs":[{"name":"self"}],"output":{"name":"filedescriptorproto"}}],[10,"get_name","","",127,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"escape_prefix","","",127,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"name_to_package","","",127,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rust_name","","",127,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rust_fq_name","","",127,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"EnumValueDescriptorEx","","",null,null],[10,"rust_name","","",128,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"find_enum","","",117,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"enumwithscope"}}],[11,"find_message","","",117,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"messagewithscope"}}],[11,"find_message_or_enum","","",117,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"messageorenumwithscope"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"syntax"}],"output":{"name":"bool"}}],[11,"parse","","",125,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"filescope"}}],[11,"syntax","","",118,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"to_scope","","",118,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"find_enums","","",118,{"inputs":[{"name":"self"}],"output":{"generics":["enumwithscope"],"name":"vec"}}],[11,"find_messages","","",118,{"inputs":[{"name":"self"}],"output":{"generics":["messagewithscope"],"name":"vec"}}],[11,"find_messages_and_enums","","",118,{"inputs":[{"name":"self"}],"output":{"generics":["messageorenumwithscope"],"name":"vec"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"get_file_descriptor","","",119,{"inputs":[{"name":"self"}],"output":{"name":"filedescriptorproto"}}],[11,"get_messages","","",119,{"inputs":[{"name":"self"}],"output":{"generics":["messagewithscope"],"name":"vec"}}],[11,"get_enums","","",119,{"inputs":[{"name":"self"}],"output":{"generics":["enumwithscope"],"name":"vec"}}],[11,"get_messages_and_enums","","",119,{"inputs":[{"name":"self"}],"output":{"generics":["messageorenumwithscope"],"name":"vec"}}],[11,"prefix","","",119,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rust_prefix","","",119,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"messagewithscope"}}],[11,"get_scope","","",120,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"escape_prefix","","",120,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_name","","",120,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_scope","","",120,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"to_scope","","",120,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"fields","","",120,{"inputs":[{"name":"self"}],"output":{"generics":["fieldwithcontext"],"name":"vec"}}],[11,"oneofs","","",120,{"inputs":[{"name":"self"}],"output":{"generics":["oneofwithcontext"],"name":"vec"}}],[11,"oneof_by_index","","",120,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"oneofwithcontext"}}],[11,"map_entry","","Pair of (key, value) if this message is map entry",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"enumwithscope"}}],[11,"values","","",121,null],[11,"value_by_name","","",121,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"enumvaluedescriptorproto"}}],[11,"rust_name","protobuf::descriptor","",17,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_scope","protobuf::descriptorx","",121,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"escape_prefix","","",121,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_name","","",121,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_scope","","",126,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"escape_prefix","","",126,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_name","","",126,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"fieldwithcontext"}}],[11,"oneof","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["oneofwithcontext"],"name":"option"}}],[11,"number","","",122,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"name","","Shortcut",122,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"rust_name","","",122,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"containing_messages","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["descriptorproto"],"name":"vec"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"oneofvariantwithcontext"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"oneofwithcontext"}}],[11,"name","","",124,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"rust_name","","",124,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"variants","","",124,{"inputs":[{"name":"self"}],"output":{"generics":["oneofvariantwithcontext"],"name":"vec"}}],[11,"fmt","protobuf","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"wire_type","","",2,{"inputs":[{"name":"self"}],"output":{"name":"wiretype"}}],[11,"get_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unknownvalueref"}}],[11,"wire_type","","",3,{"inputs":[{"name":"self"}],"output":{"name":"wiretype"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unknownvalues"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"unknownvalues"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"unknownvalues"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"unknownvalues"}}],[11,"add_value","","",1,{"inputs":[{"name":"self"},{"name":"unknownvalue"}],"output":null}],[11,"iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unknownvaluesiter"}}],[11,"next","","",129,{"inputs":[{"name":"self"}],"output":{"generics":["unknownvalueref"],"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"unknownfields"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"unknownfields"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"unknownfields"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"unknownfields"}}],[11,"add_fixed32","","",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"add_fixed64","","",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u64"}],"output":null}],[11,"add_varint","","",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u64"}],"output":null}],[11,"add_length_delimited","","",0,{"inputs":[{"name":"self"},{"name":"u32"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"add_value","","",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"unknownvalue"}],"output":null}],[11,"iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unknownfieldsiter"}}],[11,"get","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["unknownvalues"],"name":"option"}}],[11,"clear","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",131,{"inputs":[],"output":{"name":"cachedsize"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"cachedsize"}}],[11,"get","","",131,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set","","",131,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"cachedsize"}],"output":{"name":"bool"}}],[11,"as_any","protobuf::reflect","",53,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"is_non_zero","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref_copy","","",53,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}]],"paths":[[3,"UnknownFields"],[3,"UnknownValues"],[4,"UnknownValue"],[4,"UnknownValueRef"],[4,"FieldDescriptorProto_Type"],[4,"FieldDescriptorProto_Label"],[4,"FileOptions_OptimizeMode"],[4,"FieldOptions_CType"],[4,"FieldOptions_JSType"],[3,"FileDescriptorSet"],[3,"FileDescriptorProto"],[3,"DescriptorProto"],[3,"DescriptorProto_ExtensionRange"],[3,"DescriptorProto_ReservedRange"],[3,"FieldDescriptorProto"],[3,"OneofDescriptorProto"],[3,"EnumDescriptorProto"],[3,"EnumValueDescriptorProto"],[3,"ServiceDescriptorProto"],[3,"MethodDescriptorProto"],[3,"FileOptions"],[3,"MessageOptions"],[3,"FieldOptions"],[3,"OneofOptions"],[3,"EnumOptions"],[3,"EnumValueOptions"],[3,"ServiceOptions"],[3,"MethodOptions"],[3,"UninterpretedOption"],[3,"UninterpretedOption_NamePart"],[3,"SourceCodeInfo"],[3,"SourceCodeInfo_Location"],[3,"GeneratedCodeInfo"],[3,"GeneratedCodeInfo_Annotation"],[3,"CodeGeneratorRequest"],[3,"CodeGeneratorResponse"],[3,"CodeGeneratorResponse_File"],[8,"Message"],[8,"MessageStatic"],[8,"ProtobufEnum"],[8,"ProtobufVarint"],[8,"ProtobufVarintZigzag"],[3,"Lazy"],[4,"Visibility"],[3,"CodeWriter"],[3,"GenResult"],[3,"RepeatedField"],[3,"SingularField"],[3,"SingularPtrField"],[8,"Clear"],[4,"ProtobufValueRef"],[4,"ReflectFieldRef"],[8,"FieldAccessor"],[8,"ProtobufValue"],[3,"FieldDescriptor"],[3,"MessageDescriptor"],[3,"EnumValueDescriptor"],[3,"EnumDescriptor"],[4,"WireType"],[3,"Tag"],[8,"WithCodedOutputStream"],[8,"WithCodedInputStream"],[3,"CodedInputStream"],[3,"CodedOutputStream"],[4,"WireError"],[4,"ProtobufError"],[8,"ProtobufType"],[3,"ProtobufTypeFloat"],[3,"ProtobufTypeDouble"],[3,"ProtobufTypeInt32"],[3,"ProtobufTypeInt64"],[3,"ProtobufTypeUint32"],[3,"ProtobufTypeUint64"],[3,"ProtobufTypeSint32"],[3,"ProtobufTypeSint64"],[3,"ProtobufTypeFixed32"],[3,"ProtobufTypeFixed64"],[3,"ProtobufTypeSfixed32"],[3,"ProtobufTypeSfixed64"],[3,"ProtobufTypeBool"],[3,"ProtobufTypeString"],[3,"ProtobufTypeBytes"],[3,"ProtobufTypeEnum"],[3,"ProtobufTypeMessage"],[3,"Any"],[3,"Api"],[3,"Method"],[3,"Mixin"],[3,"Duration"],[3,"FieldMask"],[3,"SourceContext"],[3,"Struct"],[3,"ListValue"],[3,"Timestamp"],[3,"Type"],[3,"Field"],[3,"Enum"],[3,"EnumValue"],[3,"Option"],[3,"DoubleValue"],[3,"FloatValue"],[3,"Int64Value"],[3,"UInt64Value"],[3,"Int32Value"],[3,"UInt32Value"],[3,"BoolValue"],[3,"StringValue"],[3,"BytesValue"],[4,"Value_oneof_kind"],[4,"NullValue"],[4,"Field_Kind"],[4,"Field_Cardinality"],[4,"Syntax"],[3,"Empty"],[3,"Value"],[3,"ExtFieldOptional"],[3,"ExtFieldRepeated"],[3,"RootScope"],[3,"FileScope"],[3,"Scope"],[3,"MessageWithScope"],[3,"EnumWithScope"],[3,"FieldWithContext"],[3,"OneofVariantWithContext"],[3,"OneofWithContext"],[4,"Syntax"],[4,"MessageOrEnumWithScope"],[8,"WithScope"],[8,"EnumValueDescriptorEx"],[3,"UnknownValuesIter"],[3,"UnknownFieldsIter"],[3,"CachedSize"]]};
searchIndex["pwasm_utils"] = {"doc":"","items":[[4,"OptimizerError","pwasm_utils","",null,null],[13,"NoExportSection","","Since optimizer starts with export entries, export section is supposed to exist.",0,null],[4,"PackingError","","Pack error.",null,null],[13,"MalformedModule","","",1,null],[13,"NoTypeSection","","",1,null],[13,"NoExportSection","","",1,null],[13,"NoCodeSection","","",1,null],[13,"InvalidCreateSignature","","",1,null],[13,"NoCreateSymbol","","",1,null],[13,"InvalidCreateMember","","",1,null],[13,"NoImportSection","","",1,null],[5,"optimize","","",null,{"inputs":[{"name":"module"},{"generics":["str"],"name":"vec"}],"output":{"generics":["error"],"name":"result"}}],[5,"inject_gas_counter","","Injects gas counter.",null,{"inputs":[{"name":"module"},{"name":"set"}],"output":{"generics":["module","module"],"name":"result"}}],[5,"externalize","","",null,{"inputs":[{"name":"module"},{"generics":["str"],"name":"vec"}],"output":{"name":"module"}}],[5,"externalize_mem","","",null,{"inputs":[{"name":"module"},{"generics":["u32"],"name":"option"},{"name":"u32"}],"output":{"name":"module"}}],[5,"underscore_funcs","","",null,{"inputs":[{"name":"module"}],"output":{"name":"module"}}],[5,"ununderscore_funcs","","",null,{"inputs":[{"name":"module"}],"output":{"name":"module"}}],[5,"shrink_unknown_stack","","",null,null],[5,"pack_instance","","If module has an exported \"CREATE_SYMBOL\" function we want to pack it into \"constructor\". `raw_module` is the actual contract code `ctor_module` is the constructor which should return `raw_module`",null,{"inputs":[{"generics":["u8"],"name":"vec"},{"name":"module"}],"output":{"generics":["module","error"],"name":"result"}}],[5,"inject_runtime_type","","",null,null],[0,"rules","","",null,null],[3,"UnknownInstruction","pwasm_utils::rules","",null,null],[3,"Set","","",null,null],[4,"Metering","","",null,null],[13,"Regular","","",2,null],[13,"Forbidden","","",2,null],[13,"Fixed","","",2,null],[4,"InstructionType","","",null,null],[13,"Bit","","",3,null],[13,"Add","","",3,null],[13,"Mul","","",3,null],[13,"Div","","",3,null],[13,"Load","","",3,null],[13,"Store","","",3,null],[13,"Const","","",3,null],[13,"FloatConst","","",3,null],[13,"Local","","",3,null],[13,"Global","","",3,null],[13,"ControlFlow","","",3,null],[13,"IntegerComparsion","","",3,null],[13,"FloatComparsion","","",3,null],[13,"Float","","",3,null],[13,"Conversion","","",3,null],[13,"FloatConversion","","",3,null],[13,"Reinterpretation","","",3,null],[13,"Unreachable","","",3,null],[13,"Nop","","",3,null],[13,"CurrentMemory","","",3,null],[13,"GrowMemory","","",3,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"metering"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"metering"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"metering"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"instructiontype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"instructiontype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"instructiontype"}],"output":{"name":"ordering"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"instructiontype"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"op","","",3,{"inputs":[{"name":"instruction"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",4,{"inputs":[{"name":"u32"},{"generics":["instructiontype","metering"],"name":"map"}],"output":{"name":"self"}}],[11,"process","","",4,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"generics":["u32"],"name":"result"}}],[11,"grow_cost","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_grow_cost","","",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"with_forbidden_floats","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","pwasm_utils","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[0,"stack_height","","The pass that tries to make stack overflows deterministic, by introducing an upper bound of the stack size.",null,null],[3,"Error","pwasm_utils::stack_height","Error that occured during processing the module.",null,null],[5,"inject_limiter","","Instrument a module with stack height limiter.",null,{"inputs":[{"name":"module"},{"name":"u32"}],"output":{"generics":["module","error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[7,"CREATE_SYMBOL","pwasm_utils","",null,null],[7,"CALL_SYMBOL","","",null,null],[7,"RET_SYMBOL","","",null,null]],"paths":[[4,"OptimizerError"],[4,"PackingError"],[4,"Metering"],[4,"InstructionType"],[3,"Set"],[3,"Error"]]};
searchIndex["quick_error"] = {"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","Generic context type",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[8,"ResultExt","","Result extension trait adding a `context` method",null,null],[10,"context","","The method is use to add context information to current operation",1,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"generics":["context"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"quick_error","","Main macro that does all the work",null,null]],"paths":[[3,"Context"],[8,"ResultExt"]]};
searchIndex["quote"] = {"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[3,"Tokens","quote","Tokens produced by a [`quote!`] invocation.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"tokens"}}],[11,"new","","Empty tokens.",0,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"u"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u"}],"output":null}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"into_tokens","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"into_iter","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"into_tokens","","Convert `self` directly into a `Tokens` object.",1,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",null,null],[11,"into_tokens","","Convert `self` directly into a `Tokens` object.",1,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}]],"paths":[[3,"Tokens"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"OsRng","rand","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"isaac","","The ISAAC random number generator.",null,null],[3,"Isaac64Rng","rand::isaac","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1].",null,null],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",0,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",1,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[0,"os","rand","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[8,"Rng","rand","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",2,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",2,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",2,null],[11,"gen","","Return a random value of a `Rand` type.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",2,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",2,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",2,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",2,null],[11,"shuffle","","Shuffle a mutable slice in place.",2,null],[8,"Rand","","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",3,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",4,null],[10,"from_seed","","Create a new RNG with the given seed.",4,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",5,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",6,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"Range","rand::distributions","Sample values uniformly between two bounds.",null,null],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",7,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",8,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",9,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[3,"RandSample","","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",12,null],[12,"item","","The actual item which is being weighted",12,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[11,"new","rand::os","Create a new `OsRng`.",13,{"inputs":[],"output":{"generics":["osrng","error"],"name":"result"}}],[11,"reseed","rand::reseeding","",14,null],[11,"next","rand","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next_u32","rand::chacha","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u32","rand::isaac","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_u32","rand","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u32","rand::read","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"next_u32","rand::isaac","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u32","rand::os","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",13,null],[11,"next_u32","rand","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",23,null],[11,"next_u32","rand::reseeding","",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",0,null],[11,"default","","",14,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"ind_sample","rand::distributions","",24,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",25,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","rand::distributions::exponential","",26,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions::normal","",27,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions::gamma","",28,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",29,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions::range","",30,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","rand::distributions::gamma","",31,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",32,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions::normal","",33,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"rand","","",8,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"rand","rand::isaac","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"rand","rand","",20,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"rand","","",5,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"open01"}}],[11,"rand","","",6,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"closed01"}}],[11,"rand","","",6,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"closed01"}}],[11,"rand","rand::isaac","",22,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"rand","rand::chacha","",17,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[11,"rand","rand","",5,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"open01"}}],[11,"rand","rand::distributions::exponential","",9,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"clone","rand::distributions::gamma","",28,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"clone","rand::distributions::range","",30,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","rand::isaac","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"clone","rand","",23,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"clone","rand::distributions","",12,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"clone","rand::distributions::normal","",8,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"clone","rand","",19,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"clone","rand::distributions::gamma","",31,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"clone","rand::distributions::normal","",33,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"clone","rand::distributions::exponential","",9,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"clone","rand::reseeding","",14,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"clone","rand::distributions","",25,{"inputs":[{"name":"self"}],"output":{"name":"randsample"}}],[11,"clone","rand","",20,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"clone","rand::distributions::normal","",27,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"clone","rand::isaac","",22,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"clone","rand::chacha","",17,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"clone","rand::distributions::gamma","",29,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"sample","","",32,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::range","",30,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"sample","rand::distributions::gamma","",29,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",28,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::normal","",27,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions","",24,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"sample","rand::distributions::normal","",33,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::gamma","",31,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::exponential","",26,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions","",25,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"reseed","rand::isaac","",22,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",22,null],[11,"reseed","rand::chacha","",17,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",17,null],[11,"reseed","rand","",19,null],[11,"from_seed","","",19,null],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",20,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",20,null],[11,"reseed","rand::reseeding","",0,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",0,null],[11,"reseed","rand::isaac","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"fmt","rand","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::gamma","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::isaac","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::exponential","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::gamma","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::read","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::range","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::os","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::gamma","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::normal","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::reseeding","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::gamma","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::isaac","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::normal","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::chacha","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::normal","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::reseeding","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::exponential","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default fixed seed.",22,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"new_unseeded","rand::chacha","Create an ChaCha random number generator using the default fixed key of 8 zero words.",17,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",17,null],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",0,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",0,null],[11,"new","rand::read","Create a new `ReadRng` from a `Read`.",21,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"new_unseeded","rand","Creates a new XorShiftRng instance which is not seeded.",20,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",19,{"inputs":[],"output":{"generics":["stdrng","error"],"name":"result"}}],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",30,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)` distribution.",28,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",31,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",29,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",32,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"new","rand::distributions::normal","Construct a new `Normal` distribution with the given mean and standard deviation.",27,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",33,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"new","rand::distributions::exponential","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",26,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"new","rand::distributions","",25,{"inputs":[],"output":{"name":"randsample"}}],[11,"new","","Create a new `WeightedChoice`.",24,null]],"paths":[[3,"ReseedingRng"],[8,"Reseeder"],[8,"Rng"],[8,"Rand"],[8,"SeedableRng"],[3,"Open01"],[3,"Closed01"],[8,"SampleRange"],[3,"StandardNormal"],[3,"Exp1"],[8,"Sample"],[8,"IndependentSample"],[3,"Weighted"],[3,"OsRng"],[3,"ReseedWithDefault"],[3,"Generator"],[3,"AsciiGenerator"],[3,"ChaChaRng"],[3,"Isaac64Rng"],[3,"StdRng"],[3,"XorShiftRng"],[3,"ReadRng"],[3,"IsaacRng"],[3,"ThreadRng"],[3,"WeightedChoice"],[3,"RandSample"],[3,"Exp"],[3,"Normal"],[3,"Gamma"],[3,"FisherF"],[3,"Range"],[3,"ChiSquared"],[3,"StudentT"],[3,"LogNormal"]]};
searchIndex["rand_core"] = {"doc":"Random number generation traits","items":[[3,"Error","rand_core","Error type of random number generators",null,null],[12,"kind","","The error kind",0,null],[12,"msg","","The error message",0,null],[4,"ErrorKind","","Error kind which can be matched over.",null,null],[13,"Unavailable","","Feature is not available; not recoverable.",1,null],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",1,null],[13,"Transient","","A transient failure which likely can be resolved or worked around.",1,null],[13,"NotReady","","Not ready yet: recommended to try again a little later.",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"should_retry","","True if this kind of error may resolve itself on retry.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"should_wait","","True if we should retry but wait before retrying",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"description","","A description of this error kind",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new instance, with specified kind and a message.",0,{"inputs":[{"name":"errorkind"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",0,{"inputs":[{"name":"errorkind"},{"name":"str"},{"name":"e"}],"output":{"name":"self"}}],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",0,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[0,"block","","The `BlockRngCore` trait and implementation helpers",null,null],[3,"BlockRng","rand_core::block","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",null,null],[12,"core","","The core part of the RNG, implementing the `generate` function.",2,null],[3,"BlockRng64","","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",null,null],[12,"core","","The core part of the RNG, implementing the `generate` function.",3,null],[8,"BlockRngCore","","A trait for RNGs which do not generate random numbers individually, but in blocks (typically `[u32; N]`). This technique is commonly used by cryptographic RNGs to improve performance.",null,null],[16,"Item","","Results element type, e.g. `u32`.",4,null],[16,"Results","","Results type. This is the 'block' an RNG implementing `BlockRngCore` generates, which will usually be an array like `[u32; 16]`.",4,null],[10,"generate","","Generate a new block of results.",4,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"blockrng"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",2,{"inputs":[{"name":"r"}],"output":{"name":"blockrng"}}],[11,"index","","Get the index into the result buffer.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"next_u32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",2,null],[11,"try_fill_bytes","","",2,null],[11,"from_seed","","",2,null],[11,"from_rng","","",2,{"inputs":[{"name":"s"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"blockrng64"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",3,{"inputs":[{"name":"r"}],"output":{"name":"blockrng64"}}],[11,"index","","Get the index into the result buffer.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"next_u32","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",3,null],[11,"try_fill_bytes","","",3,null],[11,"from_seed","","",3,null],[11,"from_rng","","",3,{"inputs":[{"name":"s"}],"output":{"generics":["error"],"name":"result"}}],[0,"impls","rand_core","Helper functions for implementing `RngCore` functions.",null,null],[5,"next_u64_via_u32","rand_core::impls","Implement `next_u64` via `next_u32`, little-endian order.",null,{"inputs":[{"name":"r"}],"output":{"name":"u64"}}],[5,"fill_bytes_via_next","","Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.",null,null],[5,"fill_via_u32_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",null,null],[5,"fill_via_u64_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",null,null],[5,"next_u32_via_fill","","Implement `next_u32` via `fill_bytes`, little-endian order.",null,{"inputs":[{"name":"r"}],"output":{"name":"u32"}}],[5,"next_u64_via_fill","","Implement `next_u64` via `fill_bytes`, little-endian order.",null,{"inputs":[{"name":"r"}],"output":{"name":"u64"}}],[0,"le","rand_core","Little-Endian utilities",null,null],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",null,null],[5,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",null,null],[8,"RngCore","rand_core","The core of a random number generator.",null,null],[10,"next_u32","","Return the next random `u32`.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"next_u64","","Return the next random `u64`.",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"fill_bytes","","Fill `dest` with random data.",5,null],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",5,null],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",null,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",null,null],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",6,null],[10,"from_seed","","Create a new PRNG using the given seed.",6,null],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",6,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",5,null]],"paths":[[3,"Error"],[4,"ErrorKind"],[3,"BlockRng"],[3,"BlockRng64"],[8,"BlockRngCore"],[8,"RngCore"],[8,"SeedableRng"]]};
searchIndex["rayon"] = {"doc":"Data-parallelism library that makes it easy to convert sequential computations into parallel","items":[[5,"current_num_threads","rayon","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"inputs":[],"output":{"name":"usize"}}],[3,"ThreadPool","","Represents a user created [thread-pool].",null,null],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",null,null],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",null,null],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"inputs":[{"name":"op"}],"output":{"name":"r"}}],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,null],[0,"collections","","Parallel iterator types for [standard collections][std::collections]",null,null],[0,"binary_heap","rayon::collections","This module contains the parallel iterator types for heaps (`BinaryHeap<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::binary_heap","Parallel iterator over a binary heap",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a binary heap",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",0,null],[11,"opt_len","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",0,null],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",1,null],[11,"opt_len","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",1,null],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",1,null],[0,"btree_map","rayon::collections","This module contains the parallel iterator types for B-Tree maps (`BTreeMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_map","Parallel iterator over a B-Tree map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a B-Tree map",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",2,null],[11,"opt_len","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",3,null],[11,"opt_len","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",4,null],[11,"opt_len","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"btree_set","rayon::collections","This module contains the parallel iterator types for B-Tree sets (`BTreeSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_set","Parallel iterator over a B-Tree set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree set",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",5,null],[11,"opt_len","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",6,null],[11,"opt_len","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"hash_map","rayon::collections","This module contains the parallel iterator types for hash maps (`HashMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_map","Parallel iterator over a hash map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a hash map",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",7,null],[11,"opt_len","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",8,null],[11,"opt_len","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",9,null],[11,"opt_len","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"hash_set","rayon::collections","This module contains the parallel iterator types for hash sets (`HashSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_set","Parallel iterator over a hash set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash set",null,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",10,null],[11,"opt_len","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",11,null],[11,"opt_len","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"linked_list","rayon::collections","This module contains the parallel iterator types for linked lists (`LinkedList<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::linked_list","Parallel iterator over a linked list",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a linked list",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a linked list",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",12,null],[11,"opt_len","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",13,null],[11,"opt_len","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",14,null],[11,"opt_len","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"vec_deque","rayon::collections","This module contains the parallel iterator types for double-ended queues (`VecDeque<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::vec_deque","Parallel iterator over a double-ended queue",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a double-ended queue",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a double-ended queue",null,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",15,null],[11,"opt_len","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",15,null],[11,"len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",15,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",16,null],[11,"opt_len","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",16,null],[11,"len","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",17,null],[11,"opt_len","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",17,null],[11,"len","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",17,null],[0,"iter","rayon","Traits for writing parallel programs using an iterator-style interface",null,null],[4,"Either","rayon::iter","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",18,null],[13,"Right","","A value of type `R`.",18,null],[3,"IterBridge","","`IterBridge` is a parallel iterator that wraps a sequential iterator.",null,null],[3,"Chain","","`Chain` is an iterator that joins `b` after `a` in one continuous iterator. This struct is created by the [`chain()`] method on [`ParallelIterator`]",null,null],[3,"Chunks","","`Chunks` is an iterator that groups elements of an underlying iterator.",null,null],[3,"Enumerate","","`Enumerate` is an iterator that returns the current count along with the element. This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]",null,null],[3,"Filter","","`Filter` takes a predicate `filter_op` and filters out elements that match. This struct is created by the [`filter()`] method on [`ParallelIterator`]",null,null],[3,"FilterMap","","`FilterMap` creates an iterator that uses `filter_op` to both filter and map elements. This struct is created by the [`filter_map()`] method on [`ParallelIterator`].",null,null],[3,"FlatMap","","`FlatMap` maps each element to an iterator, then flattens these iterators together. This struct is created by the [`flat_map()`] method on [`ParallelIterator`]",null,null],[3,"Flatten","","`Flatten` turns each element to an iterator, then flattens these iterators together. This struct is created by the [`flatten()`] method on [`ParallelIterator`].",null,null],[3,"Fold","","`Fold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold()`] method on [`ParallelIterator`]",null,null],[3,"FoldWith","","`FoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold_with()`] method on [`ParallelIterator`]",null,null],[3,"TryFold","","`TryFold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`try_fold()`] method on [`ParallelIterator`]",null,null],[3,"TryFoldWith","","`TryFoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`try_fold_with()`] method on [`ParallelIterator`]",null,null],[3,"Skip","","`Skip` is an iterator that skips over the first `n` elements. This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]",null,null],[3,"Split","","`Split` is a parallel iterator using arbitrary data and a splitting function. This struct is created by the [`split()`] function.",null,null],[3,"Take","","`Take` is an iterator that iterates over the first `n` elements. This struct is created by the [`take()`] method on [`IndexedParallelIterator`]",null,null],[3,"Map","","`Map` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"MapWith","","`MapWith` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"Zip","","`Zip` is an iterator that zips up `a` and `b` into a single iterator of pairs. This struct is created by the [`zip()`] method on [`IndexedParallelIterator`]",null,null],[3,"ZipEq","","An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal length simultaneously.",null,null],[3,"Interleave","","`Interleave` is an iterator that interleaves elements of iterators `i` and `j` in one continuous iterator. This struct is created by the [`interleave()`] method on [`IndexedParallelIterator`]",null,null],[3,"InterleaveShortest","","`InterleaveShortest` is an iterator that works similarly to `Interleave`, but this version stops returning elements once one of the iterators run out.",null,null],[3,"Intersperse","","`Intersperse` is an iterator that inserts a particular item between each item of the adapted iterator.  This struct is created by the [`intersperse()`] method on [`ParallelIterator`]",null,null],[3,"Update","","`Update` is an iterator that mutates the elements of an underlying iterator before they are yielded.",null,null],[3,"Rev","","`Rev` is an iterator that produces elements in reverse order. This struct is created by the [`rev()`] method on [`IndexedParallelIterator`]",null,null],[3,"MinLen","","`MinLen` is an iterator that imposes a minimum length on iterator splits. This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"MaxLen","","`MaxLen` is an iterator that imposes a maximum length on iterator splits. This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"Cloned","","`Cloned` is an iterator that clones the elements of an underlying iterator.",null,null],[3,"Inspect","","`Inspect` is an iterator that calls a function with a reference to each element before yielding it.",null,null],[3,"WhileSome","","`WhileSome` is an iterator that yields the `Some` elements of an iterator, halting as soon as any `None` is produced.",null,null],[3,"Repeat","","Iterator adaptor for the `repeat()` function.",null,null],[3,"RepeatN","","Iterator adaptor for the `repeatn()` function.",null,null],[3,"Empty","","Iterator adaptor for the `empty()` function.",null,null],[3,"Once","","Iterator adaptor for the `once()` function.",null,null],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",null,{"inputs":[{"name":"d"},{"name":"s"}],"output":{"name":"split"}}],[5,"repeat","","Creates a parallel iterator that endlessly repeats `elt` (by cloning it). Note that this iterator has \"infinite\" length, so typically you would want to use `zip` or `take` or some other means to shorten it, or consider using the `repeatn()` function instead.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"repeatn","","Creates a parallel iterator that produces `n` repeats of `elt` (by cloning it).",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"repeatn"}}],[5,"empty","","Creates a parallel iterator that produces nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates a parallel iterator that produces an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"iterbridge"}}],[11,"drive_unindexed","","",19,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chain"}}],[11,"drive_unindexed","","",20,null],[11,"opt_len","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",20,null],[11,"len","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",20,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"chunks"}}],[11,"drive_unindexed","","",21,null],[11,"opt_len","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",21,null],[11,"len","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",21,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"drive_unindexed","","",22,null],[11,"opt_len","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",22,null],[11,"len","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",22,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"filter"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",23,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"filtermap"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",24,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",25,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"drive_unindexed","","",26,null],[0,"plumbing","","Traits and functions used to implement parallel iteration.  These are low-level details -- users of parallel iterators should not need to interact with them directly.  See [the `plumbing` README][r] for a high-level overview.",null,null],[5,"bridge","rayon::iter::plumbing","This helper function is used to \"connect\" a parallel iterator to a consumer. It will convert the `par_iter` into a producer P and then pull items from P and feed them to `consumer`, splitting and creating parallel threads as needed.",null,null],[5,"bridge_producer_consumer","","This helper function is used to \"connect\" a producer and a consumer. You may prefer to call [`bridge`], which wraps this function. This function will draw items from `producer` and feed them to `consumer`, splitting and creating parallel tasks when needed.",null,null],[5,"bridge_unindexed","","A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.",null,null],[8,"ProducerCallback","","The `ProducerCallback` trait is a kind of generic closure, [analogous to `FnOnce`][FnOnce]. See [the corresponding section in the plumbing README][r] for more details.",null,null],[16,"Output","","The type of value returned by this callback. Analogous to [`Output` from the `FnOnce` trait][Output].",27,null],[10,"callback","","Invokes the callback with the given producer as argument. The key point of this trait is that this method is generic over `P`, and hence implementors must be defined for any producer.",27,null],[8,"Producer","","A `Producer` is effectively a \"splittable `IntoIterator`\". That is, a producer is a value which can be converted into an iterator at any time: at that point, it simply produces items on demand, like any iterator. But what makes a `Producer` special is that, before we convert to an iterator, we can also split it at a particular point using the `split_at` method. This will yield up two producers, one producing the items before that point, and one producing the items after that point (these two producers can then independently be split further, or be converted into iterators). In Rayon, this splitting is used to divide between threads. See [the `plumbing` README][r] for further details.",null,null],[16,"Item","","The type of item that will be produced by this producer once it is converted into an iterator.",28,null],[16,"IntoIter","","The type of iterator we will become.",28,null],[10,"into_iter","","Convert `self` into an iterator; at this point, no more parallel splits are possible.",28,null],[11,"min_len","","The minimum number of items that we will process sequentially. Defaults to 1, which means that we will split all the way down to a single item. This can be raised higher using the [`with_min_len`] method, which will force us to create sequential tasks at a larger granularity. Note that Rayon automatically normally attempts to adjust the size of parallel splits to reduce overhead, so this should not be needed.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","The maximum number of items that we will process sequentially. Defaults to MAX, which means that we can choose not to split at all. This can be lowered using the [`with_max_len`] method, which will force us to create more parallel tasks. Note that Rayon automatically normally attempts to adjust the size of parallel splits to reduce overhead, so this should not be needed.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"split_at","","Split into two producers; one produces items `0..index`, the other `index..N`. Index must be less than or equal to `N`.",28,null],[11,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[8,"Consumer","","A consumer is effectively a [generalized \"fold\" operation][fold], and in fact each consumer will eventually be converted into a [`Folder`]. What makes a consumer special is that, like a [`Producer`], it can be split into multiple consumers using the `split_at` method. When a consumer is split, it produces two consumers, as well as a reducer. The two consumers can be fed items independently, and when they are done the reducer is used to combine their two results into one. See [the `plumbing` README][r] for further details.",null,null],[16,"Folder","","The type of folder that this consumer can be converted into.",29,null],[16,"Reducer","","The type of reducer that is produced if this consumer is split.",29,null],[16,"Result","","The type of result that this consumer will ultimately produce.",29,null],[10,"split_at","","Divide the consumer into two consumers, one processing items `0..index` and one processing items from `index..`. Also produces a reducer that can be used to reduce the results at the end.",29,null],[10,"into_folder","","Convert the consumer into a folder that can consume items sequentially, eventually producing a final result.",29,null],[10,"full","","Hint whether this `Consumer` would like to stop processing further items, e.g. if a search has been completed.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Folder","","The `Folder` trait encapsulates [the standard fold operation][fold].  It can be fed many items using the `consume` method. At the end, once all items have been consumed, it can then be converted (using `complete`) into a final value.",null,null],[16,"Result","","The type of result that will ultimately be produced by the folder.",30,null],[10,"consume","","Consume next item and return new sequential state.",30,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[11,"consume_iter","","Consume items from the iterator until full, and return new sequential state.",30,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[10,"complete","","Finish consuming items, produce final result.",30,null],[10,"full","","Hint whether this `Folder` would like to stop processing further items, e.g. if a search has been completed.",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Reducer","","The reducer is the final step of a `Consumer` -- after a consumer has been split into two parts, and each of those parts has been fully processed, we are left with two results. The reducer is then used to combine those two results into one. See [the `plumbing` README][r] for further details.",null,null],[10,"reduce","","Reduce two final results into one; this is executed after a split.",31,{"inputs":[{"name":"self"},{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[8,"UnindexedConsumer","","A stateless consumer can be freely copied. These consumers can be used like regular consumers, but they also support a `split_off_left` method that does not take an index to split, but simply splits at some arbitrary point (`for_each`, for example, produces an unindexed consumer).",null,null],[10,"split_off_left","","Splits off a \"left\" consumer and returns it. The `self` consumer should then be used to consume the \"right\" portion of the data. (The ordering matters for methods like find_first -- values produced by the returned value are given precedence over values produced by `self`.) Once the left and right halves have been fully consumed, you should reduce the results with the result of `to_reducer`.",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_reducer","","Creates a reducer that can be used to combine the results from a split consumer.",32,null],[8,"UnindexedProducer","","A variant on `Producer` which does not know its exact length or cannot represent it in a `usize`. These producers act like ordinary producers except that they cannot be told to split at a particular point. Instead, you just ask them to split 'somewhere'.",null,null],[16,"Item","","The type of item returned by this producer.",33,null],[10,"split","","Split midway into a new producer if possible, otherwise return `None`.",33,null],[10,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[11,"clone","rayon::iter","",34,{"inputs":[{"name":"self"}],"output":{"name":"fold"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"foldwith"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",35,null],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"tryfold"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",36,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"tryfoldwith"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",37,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"drive_unindexed","","",38,null],[11,"opt_len","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"len","","",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",38,null],[11,"with_producer","","",38,null],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"take"}}],[11,"drive_unindexed","","",40,null],[11,"opt_len","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"len","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",40,null],[11,"with_producer","","",40,null],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",41,null],[11,"opt_len","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",41,null],[11,"len","","",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",41,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"mapwith"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",42,null],[11,"opt_len","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",42,null],[11,"len","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",42,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"drive_unindexed","","",43,null],[11,"opt_len","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",43,null],[11,"len","","",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",43,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"zipeq"}}],[11,"drive_unindexed","","",44,null],[11,"opt_len","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",44,null],[11,"len","","",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",44,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"interleave"}}],[11,"drive_unindexed","","",45,null],[11,"opt_len","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",45,null],[11,"len","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",45,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"interleaveshortest"}}],[11,"drive_unindexed","","",46,null],[11,"opt_len","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",46,null],[11,"len","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",46,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"intersperse"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",47,null],[11,"opt_len","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",47,null],[11,"len","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",47,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"update"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",48,null],[11,"opt_len","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",48,null],[11,"len","","",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",48,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"drive_unindexed","","",49,null],[11,"opt_len","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",49,null],[11,"len","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",49,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"minlen"}}],[11,"drive_unindexed","","",50,null],[11,"opt_len","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",50,null],[11,"len","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",50,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"maxlen"}}],[11,"drive_unindexed","","",51,null],[11,"opt_len","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",51,null],[11,"len","","",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",51,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"drive_unindexed","","",52,null],[11,"opt_len","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",52,null],[11,"len","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",52,null],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"inspect"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",53,null],[11,"opt_len","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",53,null],[11,"len","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",53,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"drive_unindexed","","",54,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"repeat"}}],[11,"take","","Take only `n` repeats of the element, similar to the general `take()`.",55,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"repeatn"}}],[11,"zip","","Iterate tuples repeating the element with items from another iterator, similar to the general `zip()`.",55,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"generics":["repeatn"],"name":"zip"}}],[11,"drive_unindexed","","",55,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"repeatn"}}],[11,"drive_unindexed","","",56,null],[11,"opt_len","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",56,null],[11,"with_producer","","",56,null],[11,"len","","",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",57,null],[11,"opt_len","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",57,null],[11,"len","","",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",57,null],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"once"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",58,null],[11,"opt_len","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",58,null],[11,"len","","",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",58,null],[8,"ParallelBridge","","Conversion trait to convert an `Iterator` to a `ParallelIterator`.",null,null],[10,"par_bridge","","Create a bridge from this type to a `ParallelIterator`.",59,{"inputs":[{"name":"self"}],"output":{"name":"iterbridge"}}],[8,"IntoParallelIterator","","`IntoParallelIterator` implements the conversion to a [`ParallelIterator`].",null,null],[16,"Iter","","The parallel iterator type that will be created.",60,null],[16,"Item","","The type of item that the parallel iterator will produce.",60,null],[10,"into_par_iter","","Converts `self` into a parallel iterator.",60,null],[8,"IntoParallelRefIterator","","`IntoParallelRefIterator` implements the conversion to a [`ParallelIterator`], providing shared references to the data.",null,null],[16,"Iter","","The type of the parallel iterator that will be returned.",61,null],[16,"Item","","The type of item that the parallel iterator will produce. This will typically be an `&'data T` reference type.",61,null],[10,"par_iter","","Converts `self` into a parallel iterator.",61,null],[8,"IntoParallelRefMutIterator","","`IntoParallelRefMutIterator` implements the conversion to a [`ParallelIterator`], providing mutable references to the data.",null,null],[16,"Iter","","The type of iterator that will be created.",62,null],[16,"Item","","The type of item that will be produced; this is typically an `&'data mut T` reference.",62,null],[10,"par_iter_mut","","Creates the parallel iterator from `self`.",62,null],[8,"ParallelIterator","","Parallel version of the standard iterator trait.",null,null],[16,"Item","","The type of item that this parallel iterator produces. For example, if you use the [`for_each`] method, this is the type of item that your closure will be invoked with.",63,null],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",63,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"for_each_with","","Executes `OP` on the given `init` value with each item produced by the iterator, in parallel.",63,{"inputs":[{"name":"self"},{"name":"t"},{"name":"op"}],"output":null}],[11,"try_for_each","","Executes a fallible `OP` on each item produced by the iterator, in parallel.",63,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"try_for_each_with","","Executes a fallible `OP` on the given `init` value with each item produced by the iterator, in parallel.",63,{"inputs":[{"name":"self"},{"name":"t"},{"name":"op"}],"output":{"name":"r"}}],[11,"count","","Counts the number of items in this parallel iterator.",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_with","","Applies `map_op` to the given `init` value with each item of this iterator, producing a new iterator with the results.",63,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"mapwith"}}],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",63,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",63,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"inspect"}}],[11,"update","","Mutates each item of this iterator before yielding it.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"update"}}],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",63,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",63,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filtermap"}}],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"flatten","","An adaptor that flattens iterable `Item`s into one large iterator",63,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",63,null],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",63,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"option"}}],[11,"try_reduce","","Reduces the items in the iterator into one item using a fallible `op`. The `identity` argument is used the same way as in [`reduce()`].",63,null],[11,"try_reduce_with","","Reduces the items in the iterator into one item using a fallible `op`.",63,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"option"}}],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The parallel fold works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",63,{"inputs":[{"name":"self"},{"name":"id"},{"name":"f"}],"output":{"name":"fold"}}],[11,"fold_with","","Applies `fold_op` to the given `init` value with each item of this iterator, finally producing the value for further use.",63,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"foldwith"}}],[11,"try_fold","","Perform a fallible parallel fold.",63,{"inputs":[{"name":"self"},{"name":"id"},{"name":"f"}],"output":{"name":"tryfold"}}],[11,"try_fold_with","","Perform a fallible parallel fold with a cloneable `init` value.",63,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"tryfoldwith"}}],[11,"sum","","Sums up the items in the iterator.",63,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Multiplies all the items in the iterator.",63,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_by","","Computes the minimum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by","","Computes the maximum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both.",63,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"chain"}}],[11,"find_any","","Searches for some item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the first one in the parallel sequence which matches, since we search the entire sequence in parallel.",63,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate and returns it.",63,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate and returns it.",63,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"any","","Searches for some item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",63,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",63,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"while_some","","Creates an iterator over the `Some` items of this iterator, halting as soon as any `None` is found.",63,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",63,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"unzip","","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",63,null],[11,"partition","","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  Items for which the `predicate` returns true go into the first container, and the rest go into the second.",63,null],[11,"partition_map","","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  `Either::Left` items go into the first container, and `Either::Right` items go into the second.",63,null],[11,"intersperse","","Intersperses clones of an element between items of this iterator.",63,null],[10,"drive_unindexed","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",63,null],[11,"opt_len","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",63,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"IndexedParallelIterator","","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points.",null,null],[11,"collect_into_vec","","Collects the results of the iterator into the specified vector. The vector is always truncated before execution begins. If possible, reusing the vector across calls can lead to better performance since it reuses the same backing buffer.",64,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"unzip_into_vecs","","Unzips the results of the iterator into the specified vectors. The vectors are always truncated before execution begins. If possible, reusing the vectors across calls can lead to better performance since they reuse the same backing buffer.",64,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from this iterator and `B` are from the iterator given as argument. Like the `zip` method on ordinary iterators, if the two iterators are of unequal length, you only get the items they have in common.",64,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"name":"zip"}}],[11,"zip_eq","","The same as `Zip`, but requires that both iterators have the same length.",64,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"name":"zipeq"}}],[11,"interleave","","Interleave elements of this iterator and the other given iterator. Alternately yields elements from this iterator and the given iterator, until both are exhausted. If one iterator is exhausted before the other, the last elements are provided from the other.",64,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Interleave elements of this iterator and the other given iterator, until one is exhausted.",64,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"interleaveshortest"}}],[11,"chunks","","Split an iterator up into fixed-size chunks.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",64,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",64,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","Determines if the elements of this `ParallelIterator` are equal to those of another",64,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `ParallelIterator` are unequal to those of another",64,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `ParallelIterator` are lexicographically less than those of another.",64,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",64,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `ParallelIterator` are lexicographically greater than those of another.",64,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",64,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"enumerate","","Yields an index along with each item.",64,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields the first `n` elements.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"position_any","","Searches for some item in the parallel iterator that matches the given predicate, and returns its index.  Like `ParallelIterator::find_any`, the parallel search will not necessarily find the first match, and once a match is found we'll attempt to stop processing any more.",64,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"position_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate, and returns its index.",64,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"position_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate, and returns its index.",64,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rev","","Produces a new iterator with the elements of this iterator in reverse order.",64,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"with_min_len","","Sets the minimum length of iterators desired to process in each thread.  Rayon will not split any smaller than this length, but of course an iterator could already be smaller to begin with.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"minlen"}}],[11,"with_max_len","","Sets the maximum length of iterators desired to process in each thread.  Rayon will try to split at least below this length, unless that would put it below the length from `with_min_len()`. For example, given min=10 and max=15, a length of 16 will not be split any further.",64,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"maxlen"}}],[10,"len","","Produces an exact count of how many items this iterator will produce, presuming no panic occurs.",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"drive","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",64,null],[10,"with_producer","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",64,null],[8,"FromParallelIterator","","`FromParallelIterator` implements the creation of a collection from a [`ParallelIterator`]. By implementing `FromParallelIterator` for a given type, you define how it will be created from an iterator.",null,null],[10,"from_par_iter","","Creates an instance of the collection from the parallel iterator `par_iter`.",65,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"ParallelExtend","","`ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].",null,null],[10,"par_extend","","Extends an instance of the collection with the elements drawn from the parallel iterator `par_iter`.",66,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[0,"option","rayon","Parallel iterator types for [options][std::option]",null,null],[3,"IntoIter","rayon::option","A parallel iterator over the value in [`Some`] variant of an [`Option`].",null,null],[3,"Iter","","A parallel iterator over a reference to the [`Some`] variant of an [`Option`].",null,null],[3,"IterMut","","A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].",null,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",67,null],[11,"opt_len","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",67,null],[11,"len","","",67,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",67,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",68,null],[11,"opt_len","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",68,null],[11,"len","","",68,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",68,null],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",69,null],[11,"opt_len","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",69,null],[11,"len","","",69,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",69,null],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.",null,null],[8,"ParallelBridge","rayon::prelude","Conversion trait to convert an `Iterator` to a `ParallelIterator`.",null,null],[10,"par_bridge","","Create a bridge from this type to a `ParallelIterator`.",59,{"inputs":[{"name":"self"}],"output":{"name":"iterbridge"}}],[0,"range","rayon","Parallel iterator types for [ranges][std::range], the type for values created by `a..b` expressions",null,null],[3,"Iter","rayon::range","Parallel iterator over a range, implemented for all integer types.",null,null],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",70,null],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",70,null],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",70,null],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",70,null],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",70,null],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",70,null],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",70,null],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",70,null],[11,"len","","",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",70,null],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",70,null],[11,"opt_len","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"result","rayon","Parallel iterator types for [results][std::result]",null,null],[3,"IntoIter","rayon::result","Parallel iterator over a result",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a result",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a result",null,null],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",71,null],[11,"opt_len","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",71,null],[11,"len","","",71,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",71,null],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",72,null],[11,"opt_len","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",72,null],[11,"len","","",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",72,null],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",73,null],[11,"opt_len","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",73,null],[11,"len","","",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",73,null],[0,"slice","rayon","Parallel iterator types for [slices][std::slice]",null,null],[3,"Iter","rayon::slice","Parallel iterator over immutable items in a slice",null,null],[3,"Chunks","","Parallel iterator over immutable non-overlapping chunks of a slice",null,null],[3,"Windows","","Parallel iterator over immutable overlapping windows of a slice",null,null],[3,"IterMut","","Parallel iterator over mutable items in a slice",null,null],[3,"ChunksMut","","Parallel iterator over mutable non-overlapping chunks of a slice",null,null],[3,"Split","","Parallel iterator over slices separated by a predicate",null,null],[3,"SplitMut","","Parallel iterator over mutable slices separated by a predicate",null,null],[8,"ParallelSlice","","Parallel extensions for slices.",null,null],[10,"as_parallel_slice","","Returns a plain slice, which is used to implement the rest of the parallel methods.",74,null],[11,"par_split","","Returns a parallel iterator over subslices separated by elements that match the separator.",74,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"par_windows","","Returns a parallel iterator over all contiguous windows of length `window_size`. The windows overlap.",74,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"windows"}}],[11,"par_chunks","","Returns a parallel iterator over at most `chunk_size` elements of `self` at a time. The chunks do not overlap.",74,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[8,"ParallelSliceMut","","Parallel extensions for mutable slices.",null,null],[10,"as_parallel_slice_mut","","Returns a plain mutable slice, which is used to implement the rest of the parallel methods.",75,null],[11,"par_split_mut","","Returns a parallel iterator over mutable subslices separated by elements that match the separator.",75,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitmut"}}],[11,"par_chunks_mut","","Returns a parallel iterator over at most `chunk_size` elements of `self` at a time. The chunks are mutable and do not overlap.",75,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[11,"par_sort","","Sorts the slice in parallel.",75,{"inputs":[{"name":"self"}],"output":null}],[11,"par_sort_by","","Sorts the slice in parallel with a comparator function.",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_by_key","","Sorts the slice in parallel with a key extraction function.",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_unstable","","Sorts the slice in parallel, but may not preserve the order of equal elements.",75,{"inputs":[{"name":"self"}],"output":null}],[11,"par_sort_unstable_by","","Sorts the slice in parallel with a comparator function, but may not preserve the order of equal elements.",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_unstable_by_key","","Sorts the slice in parallel with a key extraction function, but may not preserve the order of equal elements.",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",76,null],[11,"opt_len","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",76,null],[11,"len","","",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",76,null],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",77,null],[11,"opt_len","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",77,null],[11,"len","","",77,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",77,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drive_unindexed","","",78,null],[11,"opt_len","","",78,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",78,null],[11,"len","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",78,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",79,null],[11,"opt_len","","",79,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",79,null],[11,"len","","",79,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",79,null],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",80,null],[11,"opt_len","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",80,null],[11,"len","","",80,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",80,null],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",81,null],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drive_unindexed","","",82,null],[0,"str","rayon","Parallel iterator types for [strings][std::str]",null,null],[3,"Chars","rayon::str","Parallel iterator over the characters of a string",null,null],[3,"CharIndices","","Parallel iterator over the characters of a string, with their positions",null,null],[3,"Bytes","","Parallel iterator over the bytes of a string",null,null],[3,"EncodeUtf16","","Parallel iterator over a string encoded as UTF-16",null,null],[3,"Split","","Parallel iterator over substrings separated by a pattern",null,null],[3,"SplitTerminator","","Parallel iterator over substrings separated by a terminator pattern",null,null],[3,"Lines","","Parallel iterator over lines in a string",null,null],[3,"SplitWhitespace","","Parallel iterator over substrings separated by whitespace",null,null],[3,"Matches","","Parallel iterator over substrings that match a pattern",null,null],[3,"MatchIndices","","Parallel iterator over substrings that match a pattern, with their positions",null,null],[8,"ParallelString","","Parallel extensions for strings.",null,null],[10,"as_parallel_string","","Returns a plain string slice, which is used to implement the rest of the parallel methods.",83,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"par_chars","","Returns a parallel iterator over the characters of a string.",83,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"par_char_indices","","Returns a parallel iterator over the characters of a string, with their positions.",83,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"par_bytes","","Returns a parallel iterator over the bytes of a string.",83,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"par_encode_utf16","","Returns a parallel iterator over a string encoded as UTF-16.",83,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"par_split","","Returns a parallel iterator over substrings separated by a given character or predicate, similar to `str::split`.",83,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"par_split_terminator","","Returns a parallel iterator over substrings terminated by a given character or predicate, similar to `str::split_terminator`. It's equivalent to `par_split`, except it doesn't produce an empty substring after a trailing terminator.",83,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitterminator"}}],[11,"par_lines","","Returns a parallel iterator over the lines of a string, ending with an optional carriage return and with a newline (`\\r\\n` or just `\\n`). The final line ending is optional, and line endings are not included in the output strings.",83,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"par_split_whitespace","","Returns a parallel iterator over the sub-slices of a string that are separated by any amount of whitespace.",83,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"par_matches","","Returns a parallel iterator over substrings that match a given character or predicate, similar to `str::matches`.",83,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"matches"}}],[11,"par_match_indices","","Returns a parallel iterator over substrings that match a given character or predicate, with their positions, similar to `str::match_indices`.",83,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"matchindices"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"drive_unindexed","","",84,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"charindices"}}],[11,"drive_unindexed","","",85,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"drive_unindexed","","",86,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf16"}}],[11,"drive_unindexed","","",87,null],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"split"}}],[11,"drive_unindexed","","",88,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"splitterminator"}}],[11,"drive_unindexed","","",89,null],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"drive_unindexed","","",90,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"drive_unindexed","","",91,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"drive_unindexed","","",92,null],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"matchindices"}}],[11,"drive_unindexed","","",93,null],[0,"vec","rayon","Parallel iterator types for [vectors][std::vec] (`Vec<T>`)",null,null],[3,"IntoIter","rayon::vec","Parallel iterator that moves out of a vector.",null,null],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"drive_unindexed","","",94,null],[11,"opt_len","","",94,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",94,null],[11,"len","","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",94,null],[11,"drive_unindexed","rayon::iter","",18,null],[11,"opt_len","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",18,null],[11,"len","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",18,null],[11,"par_extend","","",18,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"new","rayon","Deprecated in favor of `ThreadPoolBuilder::build`.",95,{"inputs":[{"name":"configuration"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",95,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",95,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",95,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",95,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",95,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",95,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",97,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"drop","","",95,null],[11,"description","","",96,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"next_back","rayon::iter","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",18,null],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"fold","","",18,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",18,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",18,{"inputs":[{"name":"result"}],"output":{"name":"either"}}],[11,"write","","",18,null],[11,"flush","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",18,null],[11,"read_to_end","","",18,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"as_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"extend","","",18,null],[11,"hash","","",18,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"description","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fill_buf","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"consume","","",18,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"deref_mut","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"into","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","rayon","Creates and returns a valid rayon thread pool builder, but does not initialize it.",97,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",97,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","threadpoolbuilderror"],"name":"result"}}],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",97,{"inputs":[{"name":"self"}],"output":{"generics":["threadpoolbuilderror"],"name":"result"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"threadpoolbuilder"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",97,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"threadpoolbuilder"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",97,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"stack_size","","Set the stack size of the worker threads",97,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"threadpoolbuilder"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",97,{"inputs":[{"name":"self"}],"output":{"name":"threadpoolbuilder"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",97,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",97,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",99,null],[11,"is_left","rayon::iter","Return true if the value is the `Left` variant.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",18,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",18,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",18,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",18,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",18,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",18,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",18,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",18,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",18,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[4,"Either"],[3,"IterBridge"],[3,"Chain"],[3,"Chunks"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"Flatten"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[3,"Fold"],[3,"FoldWith"],[3,"TryFold"],[3,"TryFoldWith"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"Map"],[3,"MapWith"],[3,"Zip"],[3,"ZipEq"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersperse"],[3,"Update"],[3,"Rev"],[3,"MinLen"],[3,"MaxLen"],[3,"Cloned"],[3,"Inspect"],[3,"WhileSome"],[3,"Repeat"],[3,"RepeatN"],[3,"Empty"],[3,"Once"],[8,"ParallelBridge"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelExtend"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"Iter"],[3,"Chunks"],[3,"Windows"],[3,"IterMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[8,"ParallelString"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"EncodeUtf16"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"Matches"],[3,"MatchIndices"],[3,"IntoIter"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"],[3,"FnContext"],[3,"Scope"]]};
searchIndex["rayon_core"] = {"doc":"Under construction","items":[[3,"ThreadPool","rayon_core","Represents a user created [thread-pool].",null,null],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",null,null],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",null,null],[3,"Configuration","","Contains the rayon thread pool configuration. Use [`ThreadPoolBuilder`] instead.",null,null],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",null,null],[5,"current_thread_index","","If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.",null,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[5,"current_thread_has_pending_tasks","","If called from a Rayon worker thread, indicates whether that thread's local deque still has pending tasks. Otherwise, returns `None`. For more information, see [the `ThreadPool::current_thread_has_pending_tasks()` method][m].",null,{"inputs":[],"output":{"generics":["bool"],"name":"option"}}],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"inputs":[{"name":"op"}],"output":{"name":"r"}}],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"current_num_threads","","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"initialize","","Deprecated in favor of `ThreadPoolBuilder::build_global`.",null,{"inputs":[{"name":"configuration"}],"output":{"generics":["box"],"name":"result"}}],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",0,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Deprecated in favor of `ThreadPoolBuilder::build`.",1,{"inputs":[{"name":"configuration"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",1,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"configuration"}}],[11,"new","","Creates and returns a valid rayon thread pool builder, but does not initialize it.",3,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",3,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","threadpoolbuilderror"],"name":"result"}}],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",3,{"inputs":[{"name":"self"}],"output":{"generics":["threadpoolbuilderror"],"name":"result"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"threadpoolbuilder"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"stack_size","","Set the stack size of the worker threads",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",4,{"inputs":[],"output":{"name":"configuration"}}],[11,"build","","Deprecated in favor of `ThreadPoolBuilder::build`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"thread_name","","Deprecated in favor of `ThreadPoolBuilder::thread_name`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"num_threads","","Deprecated in favor of `ThreadPoolBuilder::num_threads`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"panic_handler","","Deprecated in favor of `ThreadPoolBuilder::panic_handler`.",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"stack_size","","Deprecated in favor of `ThreadPoolBuilder::stack_size`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"breadth_first","","Deprecated in favor of `ThreadPoolBuilder::breadth_first`.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_handler","","Deprecated in favor of `ThreadPoolBuilder::start_handler`.",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"exit_handler","","Deprecated in favor of `ThreadPoolBuilder::exit_handler`.",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Scope"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"],[3,"Configuration"],[3,"FnContext"]]};
searchIndex["regex"] = {"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",null,null],[3,"NoExpand","","`NoExpand` indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",null,null],[3,"NoExpand","","`NoExpand` indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,{"inputs":[{"name":"self"}],"output":{"name":"replacerref"}}],[11,"clone","regex","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",4,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"nest_limit","","Set the nesting limit for this parser.",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",5,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"nest_limit","","Set the nesting limit for this parser.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"regexbuilder"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,{"inputs":[{"name":"self"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"nest_limit","","Set the nesting limit for this parser.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"regexsetbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,{"inputs":[{"name":"self"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"nest_limit","","Set the nesting limit for this parser.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"regexsetbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,{"inputs":[{"name":"self"}],"output":{"name":"replacerref"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_bytes","","Returns the matched text.",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",9,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",9,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,null],[11,"shortest_match","","Returns the end location of a match in the text given.",9,null],[11,"as_str","","Returns the original string of this regex.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",9,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",14,null],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["match"],"name":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["match"],"name":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",15,{"inputs":[{"name":"self"}],"output":{"name":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",15,null],[11,"len","","Returns the number of captured groups.",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",15,null],[11,"index","","",15,null],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"replace_append","","",17,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"replace_append","","",2,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"clone","regex","",18,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",18,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",19,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",19,null],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::bytes","",22,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",22,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",22,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",22,null],[11,"len","","Returns the total number of regular expressions in this set.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",23,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",23,null],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex","",26,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_str","","Returns the matched text.",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",27,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",27,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["match"],"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"matches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["captures"],"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"capturematches"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"split"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"splitn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"generics":["str"],"name":"cow"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"generics":["str"],"name":"cow"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"generics":["str"],"name":"cow"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",27,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",27,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",28,null],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["match"],"name":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",31,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["match"],"name":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",31,{"inputs":[{"name":"self"}],"output":{"name":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"string"}],"output":null}],[11,"len","","Returns the number of captured groups.",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",31,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"replace_append","","",35,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"replace_append","","",0,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",36,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement string.",36,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",36,{"inputs":[{"name":"self"}],"output":{"name":"replacerref"}}],[11,"no_expansion","","Return a fixed unchanging replacement string.",36,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",36,{"inputs":[{"name":"self"}],"output":{"name":"replacerref"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[3,"ReplacerRef"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a robust regular expression parser.","items":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",null,null],[3,"ParserBuilder","","A builder for a regular expression parser.",null,null],[4,"Error","","This error type encompasses any error that can be returned by this crate.",null,null],[13,"Parse","","An error that occurred while translating concrete syntax into abstract syntax (AST).",0,null],[13,"Translate","","An error that occurred while translating abstract syntax into a high level intermediate representation (HIR).",0,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"escape_into","","Escapes all meta characters in `text` and writes the result into `buf`.",null,{"inputs":[{"name":"str"},{"name":"string"}],"output":null}],[5,"is_meta_character","","Returns true if the give character has significance in a regex.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_word_character","","Returns true if and only if the given character is a Unicode word character.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_word_byte","","Returns true if and only if the given character is an ASCII word character.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[0,"ast","","Defines an abstract syntax for regular expressions.",null,null],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression into an abstract syntax tree.",null,null],[3,"Span","","Span represents the position information of a single AST item.",null,null],[12,"start","","The start byte offset.",1,null],[12,"end","","The end byte offset.",1,null],[3,"Position","","A single position in a regular expression.",null,null],[12,"offset","","The absolute offset of this position, starting at `0` from the beginning of the regular expression pattern string.",2,null],[12,"line","","The line number, starting at `1`.",2,null],[12,"column","","The approximate column number, starting at `1`.",2,null],[3,"WithComments","","An abstract syntax tree for a singular expression along with comments found.",null,null],[12,"ast","","The actual ast.",3,null],[12,"comments","","All comments found in the original regular expression.",3,null],[3,"Comment","","A comment from a regular expression with an associated span.",null,null],[12,"span","","The span of this comment, including the beginning `#` and ending `\\n`.",4,null],[12,"comment","","The comment text, starting with the first character following the `#` and ending with the last character preceding the `\\n`.",4,null],[3,"Alternation","","An alternation of regular expressions.",null,null],[12,"span","","The span of this alternation.",5,null],[12,"asts","","The alternate regular expressions.",5,null],[3,"Concat","","A concatenation of regular expressions.",null,null],[12,"span","","The span of this concatenation.",6,null],[12,"asts","","The concatenation regular expressions.",6,null],[3,"Literal","","A single literal expression.",null,null],[12,"span","","The span of this literal.",7,null],[12,"kind","","The kind of this literal.",7,null],[12,"c","","The Unicode scalar value corresponding to this literal.",7,null],[3,"ClassPerl","","A Perl character class.",null,null],[12,"span","","The span of this class.",8,null],[12,"kind","","The kind of Perl class.",8,null],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not negated but `\\D` is.",8,null],[3,"ClassAscii","","An ASCII character class.",null,null],[12,"span","","The span of this class.",9,null],[12,"kind","","The kind of ASCII class.",9,null],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated but `[[:^alpha:]]` is.",9,null],[3,"ClassUnicode","","A Unicode character class.",null,null],[12,"span","","The span of this class.",10,null],[12,"negated","","Whether this class is negated or not.",10,null],[12,"kind","","The kind of Unicode class.",10,null],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",null,null],[12,"span","","The span of this class.",11,null],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not negated but `[^a]` is.",11,null],[12,"kind","","The type of this set. A set is either a normal union of things, e.g., `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.",11,null],[3,"ClassSetRange","","A single character class range in a set.",null,null],[12,"span","","The span of this range.",12,null],[12,"start","","The start of this range.",12,null],[12,"end","","The end of this range.",12,null],[3,"ClassSetUnion","","A union of items inside a character class set.",null,null],[12,"span","","The span of the items in this operation. e.g., the `a-z0-9` in `[^a-z0-9]`",13,null],[12,"items","","The sequence of items that make up this union.",13,null],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",null,null],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.",14,null],[12,"kind","","The type of this set operation.",14,null],[12,"lhs","","The left hand side of the operation.",14,null],[12,"rhs","","The right hand side of the operation.",14,null],[3,"Assertion","","A single zero-width assertion.",null,null],[12,"span","","The span of this assertion.",15,null],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,null],[3,"Repetition","","A repetition operation applied to a regular expression.",null,null],[12,"span","","The span of this operation.",16,null],[12,"op","","The actual operation.",16,null],[12,"greedy","","Whether this operation was applied greedily or not.",16,null],[12,"ast","","The regular expression under repetition.",16,null],[3,"RepetitionOp","","The repetition operator itself.",null,null],[12,"span","","The span of this operator. This includes things like `+`, `*?` and `{m,n}`.",17,null],[12,"kind","","The type of operation.",17,null],[3,"Group","","A grouped regular expression.",null,null],[12,"span","","The span of this group.",18,null],[12,"kind","","The kind of this group.",18,null],[12,"ast","","The regular expression in this group.",18,null],[3,"CaptureName","","A capture name.",null,null],[12,"span","","The span of this capture name.",19,null],[12,"name","","The capture name.",19,null],[12,"index","","The capture index.",19,null],[3,"SetFlags","","A group of flags that is not applied to a particular regular expression.",null,null],[12,"span","","The span of these flags, including the grouping parentheses.",20,null],[12,"flags","","The actual sequence of flags.",20,null],[3,"Flags","","A group of flags.",null,null],[12,"span","","The span of this group of flags.",21,null],[12,"items","","A sequence of flag items. Each item is either a flag or a negation operator.",21,null],[3,"FlagsItem","","A single item in a group of flags.",null,null],[12,"span","","The span of this item.",22,null],[12,"kind","","The kind of this item.",22,null],[4,"ErrorKind","","The type of an error that occurred while building an AST.",null,null],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,null],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class set.",23,null],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid range is any range where the start is greater than the end.",23,null],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. Range boundaries must be a single literal codepoint, but this error indicates that something else was found, such as a nested class.",23,null],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,null],[13,"DecimalEmpty","","An empty decimal number was given where one was expected.",23,null],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,null],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,null],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode scalar value.",23,null],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,null],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,null],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,null],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,null],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position points to the duplicate flag.",23,null],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error position points to the duplicate negation operator.",23,null],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,null],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,null],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture name. The error position itself points to the duplicate occurrence.",23,null],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,null],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. This includes errors where the first character is a digit (even though subsequent characters are allowed to be digits).",23,null],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,null],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,null],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,null],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the limit configured in the parser.",23,null],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is invalid. The range is invalid if the start is greater than the end.",23,null],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,null],[13,"RepetitionMissing","","A repetition operator was applied to a missing sub-expression. This occurs, for example, in the regex consisting of just a `*` or even `(?i)*`. It is, however, possible to create a repetition operating on an empty sub-expression. For example, `()*` is still considered valid.",23,null],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced when an octal escape is used. The octal escape is assumed to be an invocation of a backreference, which is the common case.",23,null],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this error is returned. Some example syntaxes that are rejected include, but are not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this error is used to improve the user experience.",23,null],[4,"Ast","","An abstract syntax tree for a single regular expression.",null,null],[13,"Empty","","An empty regex that matches everything.",24,null],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,null],[13,"Literal","","A single character literal, which includes escape sequences.",24,null],[13,"Dot","","The \"any character\" class.",24,null],[13,"Assertion","","A single zero-width assertion.",24,null],[13,"Class","","A single character class. This includes all forms of character classes except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.",24,null],[13,"Repetition","","A repetition operator applied to an arbitrary regular expression.",24,null],[13,"Group","","A grouped regular expression.",24,null],[13,"Alternation","","An alternation of regular expressions.",24,null],[13,"Concat","","A concatenation of regular expressions.",24,null],[4,"LiteralKind","","The kind of a single literal expression.",null,null],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,null],[13,"Punctuation","","The literal is written as an escape because it is punctuation, e.g., `\\*` or `\\[`.",25,null],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,null],[13,"HexFixed","","The literal is written as a hex code with a fixed number of digits depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or `\\U00000061`.",25,null],[13,"HexBrace","","The literal is written as a hex code with a bracketed number of digits. The only restriction is that the bracketed hex code must refer to a valid Unicode scalar value.",25,null],[13,"Special","","The literal is written as a specially recognized escape, e.g., `\\f` or `\\n`.",25,null],[4,"SpecialLiteralKind","","The type of a special literal.",null,null],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,null],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,null],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,null],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,null],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,null],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,null],[13,"Space","","Space, spelled `\\` (`\\x20`). Note that this can only appear when parsing in verbose mode.",26,null],[4,"HexLiteralKind","","The type of a Unicode hex literal.",null,null],[13,"X","","A `\\x` prefix. When used without brackets, this form is limited to two digits.",27,null],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is limited to four digits.",27,null],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is limited to eight digits.",27,null],[4,"Class","","A single character class expression.",null,null],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,null],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,null],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",28,null],[4,"ClassPerlKind","","The available Perl character classes.",null,null],[13,"Digit","","Decimal numbers.",29,null],[13,"Space","","Whitespace.",29,null],[13,"Word","","Word characters.",29,null],[4,"ClassAsciiKind","","The available ASCII character classes.",null,null],[13,"Alnum","","`[0-9A-Za-z]`",30,null],[13,"Alpha","","`[A-Za-z]`",30,null],[13,"Ascii","","`[\\x00-\\x7F]`",30,null],[13,"Blank","","`[ \\t]`",30,null],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,null],[13,"Digit","","`[0-9]`",30,null],[13,"Graph","","`[!-~]`",30,null],[13,"Lower","","`[a-z]`",30,null],[13,"Print","","`[ -~]`",30,null],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,null],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,null],[13,"Upper","","`[A-Z]`",30,null],[13,"Word","","`[0-9A-Za-z_]`",30,null],[13,"Xdigit","","`[0-9A-Fa-f]`",30,null],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",null,null],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,null],[13,"Named","","A binary property, general category or script. The string may be empty.",31,null],[13,"NamedValue","","A property name and an associated value.",31,null],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with `value`.",31,null],[12,"name","","The property name (which may be empty).",31,null],[12,"value","","The property value (which may be empty).",31,null],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",null,null],[13,"Equal","","A property set to a specific value, e.g., `\\p{scx=Katakana}`.",32,null],[13,"Colon","","A property set to a specific value using a colon, e.g., `\\p{scx:Katakana}`.",32,null],[13,"NotEqual","","A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.",32,null],[4,"ClassSet","","A character class set.",null,null],[13,"Item","","An item, which can be a single literal, range, nested character class or a union of items.",33,null],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,null],[4,"ClassSetItem","","A single component of a character class set.",null,null],[13,"Empty","","An empty item.",34,null],[13,"Literal","","A single literal.",34,null],[13,"Range","","A range between two literals.",34,null],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,null],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,null],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,null],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",34,null],[13,"Union","","A union of items.",34,null],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",null,null],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,null],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,null],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric difference is the set of elements belonging to one but not both sets. e.g., `[\\pL~~[:ascii:]]`.",35,null],[4,"AssertionKind","","An assertion kind.",null,null],[13,"StartLine","","`^`",36,null],[13,"EndLine","","`$`",36,null],[13,"StartText","","`\\A`",36,null],[13,"EndText","","`\\z`",36,null],[13,"WordBoundary","","`\\b`",36,null],[13,"NotWordBoundary","","`\\B`",36,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","`?`",37,null],[13,"ZeroOrMore","","`*`",37,null],[13,"OneOrMore","","`+`",37,null],[13,"Range","","`{m,n}`",37,null],[4,"RepetitionRange","","A range repetition operator.",null,null],[13,"Exactly","","`{m}`",38,null],[13,"AtLeast","","`{m,}`",38,null],[13,"Bounded","","`{m,n}`",38,null],[4,"GroupKind","","The kind of a group.",null,null],[13,"CaptureIndex","","`(a)`",39,null],[13,"CaptureName","","`(?P<name>a)`",39,null],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,null],[4,"FlagsItemKind","","The kind of an item in a group of flags.",null,null],[13,"Negation","","A negation operator applied to all subsequent flags in the enclosing group.",40,null],[13,"Flag","","A single flag in a group.",40,null],[4,"Flag","","A single flag.",null,null],[13,"CaseInsensitive","","`i`",41,null],[13,"MultiLine","","`m`",41,null],[13,"DotMatchesNewLine","","`s`",41,null],[13,"SwapGreed","","`U`",41,null],[13,"Unicode","","`u`",41,null],[13,"IgnoreWhitespace","","`x`",41,null],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",null,{"inputs":[{"name":"ast"},{"name":"v"}],"output":{"name":"result"}}],[0,"parse","","This module provides a regular expression parser.",null,null],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",null,null],[3,"Parser","","A regular expression parser.",null,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"parserbuilder"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"new","","Create a new parser builder with a default configuration.",42,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"build","","Build a parser from this configuration with the given pattern.",42,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"nest_limit","","Set the nesting limit for this parser.",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"parserbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new parser with a default configuration.",43,{"inputs":[],"output":{"name":"parser"}}],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ast","error"],"name":"result"}}],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax tree with all of the comments found in the pattern.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["withcomments","error"],"name":"result"}}],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",null,null],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",null,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new printer.",44,{"inputs":[],"output":{"name":"printer"}}],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",44,{"inputs":[{"name":"self"},{"name":"ast"},{"name":"w"}],"output":{"name":"result"}}],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in depth first order.",null,null],[16,"Output","","The result of visiting an AST.",45,null],[16,"Err","","An error that visiting an AST might return.",45,null],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the AST or an error.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start","","This method is called before beginning traversal of the AST.",45,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"kind","","Return the type of this error.",46,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"pattern","","The original pattern string in which this error occurred.",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"span","","Return the span at which this error occurred.",46,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some errors that benefit from being able to point to two locations in the original regular expression. For example, \"duplicate\" errors will have the main error position set to the duplicate occurrence while its auxiliary span will be set to the initial occurrence.",46,{"inputs":[{"name":"self"}],"output":{"generics":["span"],"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"description","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"new","","Create a new span with the given positions.",1,{"inputs":[{"name":"position"},{"name":"position"}],"output":{"name":"span"}}],[11,"splat","","Create a new span using the given position as the start and end.",1,{"inputs":[{"name":"position"}],"output":{"name":"span"}}],[11,"with_start","","Create a new span by replacing the starting the position with the one given.",1,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"span"}}],[11,"with_end","","Create a new span by replacing the ending the position with the one given.",1,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"span"}}],[11,"is_one_line","","Returns true if and only if this span occurs on a single line.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if and only if this span is empty. That is, it points to a single position in the concrete syntax of a regular expression.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new position with the given information.",2,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"position"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"withcomments"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"withcomments"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"withcomments"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"comment"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this abstract syntax tree.",24,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"is_empty","","Return true if and only if this Ast is empty.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"alternation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"alternation"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"alternation"}],"output":{"name":"bool"}}],[11,"into_ast","","Return this alternation as an AST.",5,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"concat"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"concat"}],"output":{"name":"bool"}}],[11,"into_ast","","Return this concatenation as an AST.",6,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"byte","","If this literal was written as a `\\x` hex escape, then this returns the corresponding byte value. Otherwise, this returns `None`.",7,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"literalkind"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"literalkind"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"literalkind"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"specialliteralkind"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"specialliteralkind"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"hexliteralkind"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"hexliteralkind"}],"output":{"name":"bool"}}],[11,"digits","","The number of digits that must be used with this literal form when used without brackets. When used with brackets, there is no restriction on the number of digits.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this character class.",28,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"classperl"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"classperl"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"classperl"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"classperlkind"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"classperlkind"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"classascii"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"classascii"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"classascii"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"classasciikind"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"classasciikind"}],"output":{"name":"bool"}}],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the given name.",30,{"inputs":[{"name":"str"}],"output":{"generics":["classasciikind"],"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"classunicode"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"is_negated","","Returns true if this class has been negated.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"classunicodekind"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"classunicodekind"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"classunicodekind"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"classunicodeopkind"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"classunicodeopkind"}],"output":{"name":"bool"}}],[11,"is_equal","","Whether the op is an equality op or not.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"classbracketed"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"classbracketed"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"classbracketed"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"classset"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"classset"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"classset"}],"output":{"name":"bool"}}],[11,"union","","Build a set from a union.",33,{"inputs":[{"name":"classsetunion"}],"output":{"name":"classset"}}],[11,"span","","Return the span of this character class set.",33,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"classsetitem"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this character class set item.",34,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"classsetrange"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"classsetrange"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"classsetrange"}],"output":{"name":"bool"}}],[11,"is_valid","","Returns true if and only if this character class range is valid.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"classsetunion"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"classsetunion"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"classsetunion"}],"output":{"name":"bool"}}],[11,"push","","Push a new item in this union.",13,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":null}],[11,"into_item","","Return this union as a character class set item.",13,{"inputs":[{"name":"self"}],"output":{"name":"classsetitem"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"classsetbinaryop"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"classsetbinaryopkind"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"classsetbinaryopkind"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"assertion"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"assertion"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"assertion"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"assertionkind"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"assertionkind"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"repetition"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"repetitionop"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"repetitionop"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"repetitionop"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"repetitionkind"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"repetitionrange"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"flags","","If this group is non-capturing, then this returns the (possibly empty) set of flags. Otherwise, `None` is returned.",18,{"inputs":[{"name":"self"}],"output":{"generics":["flags"],"name":"option"}}],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capture_index","","Returns the capture index of this group, if this is a capturing group.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"groupkind"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"capturename"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"capturename"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"capturename"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"setflags"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"setflags"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"setflags"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"add_item","","Add the given item to this sequence of flags.",21,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"generics":["usize"],"name":"option"}}],[11,"flag_state","","Returns the state of the given flag in this set.",21,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"generics":["bool"],"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"flagsitem"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"flagsitemkind"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"flagsitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"flagsitemkind"}],"output":{"name":"bool"}}],[11,"is_negation","","Returns true if and only if this item is a negation operator.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","regex_syntax","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hir","","Defines a high-level intermediate representation for regular expressions.",null,null],[3,"Error","regex_syntax::hir","An error that can occur while translating an `Ast` to a `Hir`.",null,null],[3,"Hir","","A high-level intermediate representation (HIR) for a regular expression.",null,null],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",null,null],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",null,null],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar values.",null,null],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where one byte corresponds to one character).",null,null],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",null,null],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",null,null],[3,"Group","","The high-level intermediate representation for a group.",null,null],[12,"kind","","The kind of this group. If it is a capturing group, then the kind contains the capture group index (and the name, if it is a named group).",47,null],[12,"hir","","The expression inside the capturing group, which may be empty.",47,null],[3,"Repetition","","The high-level intermediate representation of a repetition operator.",null,null],[12,"kind","","The kind of this repetition operator.",48,null],[12,"greedy","","Whether this repetition operator is greedy or not. A greedy operator will match as much as it can. A non-greedy operator will match as little as it can.",48,null],[12,"hir","","The expression being repeated.",48,null],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",null,null],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when Unicode support is disabled. For example `(?-u:\\pL)` would trigger this error.",49,null],[13,"InvalidUtf8","","This error occurs when translating a pattern that could match a byte sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.",49,null],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name could not be found.",49,null],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value could not be found.",49,null],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a character class that is empty.",49,null],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",null,null],[13,"Empty","","The empty regular expression, which matches everything, including the empty string.",50,null],[13,"Literal","","A single literal character that matches exactly this character.",50,null],[13,"Class","","A single character class that matches any of the characters in the class. A class can either consist of Unicode scalar values as characters, or it can use bytes.",50,null],[13,"Anchor","","An anchor assertion. An anchor assertion match always has zero length.",50,null],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode aware. A word boundary assertion match always has zero length.",50,null],[13,"Repetition","","A repetition operation applied to a child expression.",50,null],[13,"Group","","A possibly capturing group, which contains a child expression.",50,null],[13,"Concat","","A concatenation of expressions. A concatenation always has at least two child expressions.",50,null],[13,"Alternation","","An alternation of expressions. An alternation always has at least two child expressions.",50,null],[4,"Literal","","The high-level intermediate representation of a literal.",null,null],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,null],[13,"Byte","","A single character represented by an arbitrary byte.",51,null],[4,"Class","","The high-level intermediate representation of a character class.",null,null],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,null],[13,"Bytes","","A set of characters represented by arbitrary bytes (one byte per character).",52,null],[4,"Anchor","","The high-level intermediate representation for an anchor assertion.",null,null],[13,"StartLine","","Match the beginning of a line or the beginning of text. Specifically, this matches at the starting position of the input, or at the position immediately following a `\\n` character.",53,null],[13,"EndLine","","Match the end of a line or the end of text. Specifically, this matches at the end position of the input, or at the position immediately preceding a `\\n` character.",53,null],[13,"StartText","","Match the beginning of text. Specifically, this matches at the starting position of the input.",53,null],[13,"EndText","","Match the end of text. Specifically, this matches at the ending position of the input.",53,null],[4,"WordBoundary","","The high-level intermediate representation for a word-boundary assertion.",null,null],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,null],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,null],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,null],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,null],[4,"GroupKind","","The kind of group.",null,null],[13,"CaptureIndex","","A normal unnamed capturing group.",55,null],[13,"CaptureName","","A named capturing group.",55,null],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,null],[12,"index","","The capture index of the group.",55,null],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,null],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,null],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,null],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,null],[4,"RepetitionRange","","The kind of a counted repetition operator.",null,null],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,null],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,null],[13,"Bounded","","Matches a sub-expression at least `m` times and at most `n` times.",57,null],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",null,{"inputs":[{"name":"hir"},{"name":"v"}],"output":{"name":"result"}}],[0,"literal","","Provides routines for extracting literal prefixes and suffixes from an `Hir`.",null,null],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Literal","","A single member of a set of literals extracted from a regular expression.",null,null],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"cmp","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",58,{"inputs":[],"output":{"name":"literals"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from the given `Hir`.",58,{"inputs":[{"name":"hir"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from the given `Hir`.",58,{"inputs":[{"name":"hir"}],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",58,null],[11,"min_len","","Returns the length of the smallest literal.",58,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",58,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",58,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["literals"],"name":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,null],[11,"add","","Adds the given literal to this set.",58,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",58,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"reverse","","Reverses all members in place.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Clears this set of all members.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",59,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"literal"}}],[11,"empty","","Returns a new complete empty literal.",59,{"inputs":[],"output":{"name":"literal"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",59,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",59,null],[11,"deref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",null,null],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level intermediate representation.",null,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new printer.",60,{"inputs":[],"output":{"name":"printer"}}],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",60,{"inputs":[{"name":"self"},{"name":"hir"},{"name":"w"}],"output":{"name":"result"}}],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",null,null],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",null,null],[3,"Translator","","A translator maps abstract syntax to a high level intermediate representation.",null,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"translatorbuilder"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"translatorbuilder"}}],[11,"new","","Create a new translator builder with a default c onfiguration.",61,{"inputs":[],"output":{"name":"translatorbuilder"}}],[11,"build","","Build a translator using the current configuration.",61,{"inputs":[{"name":"self"}],"output":{"name":"translator"}}],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of a regular expression that may match invalid UTF-8.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag (`s`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"translator"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new translator using the default configuration.",62,{"inputs":[],"output":{"name":"translator"}}],[11,"translate","","Translate the given abstract syntax tree (AST) into a high level intermediate representation (HIR).",62,{"inputs":[{"name":"self"},{"name":"str"},{"name":"ast"}],"output":{"generics":["hir","error"],"name":"result"}}],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth first order.",null,null],[16,"Output","","The result of visiting an HIR.",63,null],[16,"Err","","An error that visiting an HIR might return.",63,null],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the HIR or an error.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start","","This method is called before beginning traversal of the HIR.",63,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"kind","","Return the type of this error.",64,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"pattern","","The original pattern string in which this error occurred.",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"span","","Return the span at which this error occurred.",64,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"description","","",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"hir"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"hirkind"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"hirkind"}],"output":{"name":"bool"}}],[11,"kind","","Returns a reference to the underlying HIR kind.",65,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"into_kind","","Consumes ownership of this HIR expression and returns its underlying `HirKind`.",65,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"empty","","Returns an empty HIR expression.",65,{"inputs":[],"output":{"name":"hir"}}],[11,"literal","","Creates a literal HIR expression.",65,{"inputs":[{"name":"literal"}],"output":{"name":"hir"}}],[11,"class","","Creates a class HIR expression.",65,{"inputs":[{"name":"class"}],"output":{"name":"hir"}}],[11,"anchor","","Creates an anchor assertion HIR expression.",65,{"inputs":[{"name":"anchor"}],"output":{"name":"hir"}}],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,{"inputs":[{"name":"wordboundary"}],"output":{"name":"hir"}}],[11,"repetition","","Creates a repetition HIR expression.",65,{"inputs":[{"name":"repetition"}],"output":{"name":"hir"}}],[11,"group","","Creates a group HIR expression.",65,{"inputs":[{"name":"group"}],"output":{"name":"hir"}}],[11,"concat","","Returns the concatenation of the given expressions.",65,{"inputs":[{"generics":["hir"],"name":"vec"}],"output":{"name":"hir"}}],[11,"alternation","","Returns the alternation of the given expressions.",65,{"inputs":[{"generics":["hir"],"name":"vec"}],"output":{"name":"hir"}}],[11,"dot","","Build an HIR expression for `.`.",65,{"inputs":[{"name":"bool"}],"output":{"name":"hir"}}],[11,"any","","Build an HIR expression for `(?s).`.",65,{"inputs":[{"name":"bool"}],"output":{"name":"hir"}}],[11,"is_always_utf8","","Return true if and only if this HIR will always match valid UTF-8.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is made up of zero-width assertions.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_start","","Return true if and only if this HIR is required to match from the beginning of text. This includes expressions like `^foo`, `^(foo|bar)`, `^foo|^bar` but not `^foo|bar`.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Return true if and only if this HIR is required to match at the end of text. This includes expressions like `foo$`, `(foo|bar)$`, `foo$|bar$` but not `foo$|bar`.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any sub-expression that is required to match at the beginning of text. Specifically, this returns true if the `^` symbol (when multiline mode is disabled) or the `\\A` escape appear anywhere in the regex.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any sub-expression that is required to match at the end of text. Specifically, this returns true if the `$` symbol (when multiline mode is disabled) or the `\\z` escape appear anywhere in the regex.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_match_empty","","Return true if and only if the empty string is part of the language matched by this regular expression.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Return true if and only if this HIR is the empty regular expression.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_subexprs","","Returns true if and only if this kind has any (including possibly empty) subexpressions.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"is_unicode","","Returns true if and only if this literal corresponds to a Unicode scalar value.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class, in place. The character class will be expanded to include all simple case folded character variants.",52,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this character class in place.",52,{"inputs":[{"name":"self"}],"output":null}],[11,"is_always_utf8","","Returns true if and only if this character class will only ever match valid UTF-8.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"classunicode"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"new","","Create a new class from a sequence of ranges.",66,{"inputs":[{"name":"i"}],"output":{"name":"classunicode"}}],[11,"empty","","Create a new class with no ranges.",66,{"inputs":[],"output":{"name":"classunicode"}}],[11,"push","","Add a new range to this set.",66,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":null}],[11,"iter","","Return an iterator over all ranges in this class.",66,{"inputs":[{"name":"self"}],"output":{"name":"classunicodeiter"}}],[11,"ranges","","Return the underlying ranges as a slice.",66,null],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters, according to Unicode's \"simple\" mapping. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",66,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this character class.",66,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Union this character class with the given character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"intersect","","Intersect this character class with the given character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"difference","","Subtract the given character class from this character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"symmetric_difference","","Compute the symmetric difference of the given character classes, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["classunicoderange"],"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"classunicoderange"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"classunicoderange"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"cmp","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"ordering"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Unicode scalar value range for a character class.",68,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"classunicoderange"}}],[11,"start","","Return the start of this range.",68,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"end","","Return the end of this range.",68,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"classbytes"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"new","","Create a new class from a sequence of ranges.",69,{"inputs":[{"name":"i"}],"output":{"name":"classbytes"}}],[11,"empty","","Create a new class with no ranges.",69,{"inputs":[],"output":{"name":"classbytes"}}],[11,"push","","Add a new range to this set.",69,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":null}],[11,"iter","","Return an iterator over all ranges in this class.",69,{"inputs":[{"name":"self"}],"output":{"name":"classbytesiter"}}],[11,"ranges","","Return the underlying ranges as a slice.",69,null],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",69,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this byte class.",69,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Union this byte class with the given byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"intersect","","Intersect this byte class with the given byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"difference","","Subtract the given byte class from this byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"symmetric_difference","","Compute the symmetric difference of the given byte classes, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"is_all_ascii","","Returns true if and only if this character class will either match nothing or only ASCII bytes. Stated differently, this returns false if and only if this class contains a non-ASCII byte.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["classbytesrange"],"name":"option"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"classbytesrange"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"classbytesrange"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"cmp","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"ordering"}}],[11,"new","","Create a new byte range for a character class.",71,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"classbytesrange"}}],[11,"start","","Return the start of this range.",71,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"end","","Return the end of this range.",71,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"wordboundary"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"wordboundary"}],"output":{"name":"bool"}}],[11,"is_negated","","Returns true if and only if this word boundary assertion is negated.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"groupkind"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"repetition"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"is_match_empty","","Returns true if and only if this repetition operator makes it possible to match the empty string.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"repetitionkind"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"repetitionrange"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"drop","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","regex_syntax","",72,{"inputs":[{"name":"self"}],"output":{"name":"parserbuilder"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"new","","Create a new parser builder with a default configuration.",72,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"build","","Build a parser from this configuration with the given pattern.",72,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"nest_limit","","Set the nesting limit for this parser.",72,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"parserbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a regular expression that may match invalid UTF-8.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new parser with a default configuration.",73,{"inputs":[],"output":{"name":"parser"}}],[11,"parse","","Parse the regular expression into a high level intermediate representation.",73,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["hir"],"name":"result"}}],[6,"Result","","A type alias for dealing with errors returned by this crate.",null,null],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"]]};
searchIndex["remove_dir_all"] = {"doc":"","items":[[5,"remove_dir_all","remove_dir_all","Removes a directory at this path, after removing all its contents. Use carefully!",null,{"inputs":[{"name":"p"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[]};
searchIndex["ring"] = {"doc":"Safe, fast, small crypto using Rust with BoringSSL's cryptography primitives.","items":[[0,"aead","ring","Authenticated Encryption with Associated Data (AEAD).",null,null],[3,"OpeningKey","ring::aead","A key for authenticating and decrypting (“opening”) AEAD-protected data.",null,null],[3,"SealingKey","","A key for encrypting and signing (“sealing”) data.",null,null],[3,"Algorithm","","An AEAD Algorithm.",null,null],[5,"open_in_place","","Authenticates and decrypts (“opens”) data in place. When",null,null],[5,"seal_in_place","","Encrypts and signs (“seals”) data in place.",null,null],[0,"chacha20_poly1305_openssh","","The [chacha20-poly1305@openssh.com] AEAD-ish construct.",null,null],[3,"SealingKey","ring::aead::chacha20_poly1305_openssh","A key for sealing packets.",null,null],[3,"OpeningKey","","A key for opening packets.",null,null],[17,"KEY_LEN","","The length of key.",null,null],[17,"TAG_LEN","","The length of a tag.",null,null],[17,"PACKET_LENGTH_LEN","","The length in bytes of the `packet_length` field in a SSH packet.",null,null],[11,"new","","Constructs a new `SealingKey`.",0,null],[11,"seal_in_place","","Seals (encrypts and signs) a packet.",0,null],[11,"new","","Constructs a new `OpeningKey`.",1,null],[11,"decrypt_packet_length","","Returns the decrypted, but unauthenticated, packet length.",1,null],[11,"open_in_place","","Opens (authenticates and decrypts) a packet.",1,null],[7,"CHACHA20_POLY1305","ring::aead","ChaCha20-Poly1305 as described in [RFC 7539].",null,null],[7,"AES_128_GCM","","AES-128 in GCM mode with 128-bit tags and 96 bit nonces.",null,null],[7,"AES_256_GCM","","AES-256 in GCM mode with 128-bit tags and 96 bit nonces.",null,null],[17,"MAX_TAG_LEN","","The maximum length of a tag for the algorithms in this module.",null,null],[11,"new","","Create a new opening key.",2,null],[11,"algorithm","","The key's AEAD algorithm.",2,{"inputs":[{"name":"self"}],"output":{"name":"algorithm"}}],[11,"new","","C analogs: `EVP_AEAD_CTX_init_with_direction` with direction            `evp_aead_seal`, `EVP_AEAD_CTX_init`.",3,null],[11,"algorithm","","The key's AEAD algorithm.",3,{"inputs":[{"name":"self"}],"output":{"name":"algorithm"}}],[11,"key_len","","The length of the key.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"tag_len","","The length of a tag.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"nonce_len","","The length of the nonces.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[0,"agreement","ring","Key Agreement: ECDH, including X25519.",null,null],[3,"Algorithm","ring::agreement","A key agreement algorithm.",null,null],[3,"EphemeralPrivateKey","","An ephemeral private key for use (only) with `agree_ephemeral`. The signature of `agree_ephemeral` ensures that an `EphemeralPrivateKey` can be used for at most one key agreement.",null,null],[5,"agree_ephemeral","","Performs a key agreement with an ephemeral private key and the given public key.",null,{"inputs":[{"name":"ephemeralprivatekey"},{"name":"algorithm"},{"name":"input"},{"name":"e"},{"name":"f"}],"output":{"name":"result"}}],[7,"ECDH_P256","","ECDH using the NSA Suite B P-256 (secp256r1) curve.",null,null],[7,"ECDH_P384","","ECDH using the NSA Suite B P-384 (secp384r1) curve.",null,null],[7,"X25519","","X25519 (ECDH using Curve25519) as described in [RFC 7748].",null,null],[17,"PUBLIC_KEY_MAX_LEN","","The maximum length, in bytes, of an encoded public key.",null,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"algorithm"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"algorithm"}],"output":{"name":"bool"}}],[11,"generate","","Generate a new ephemeral private key for the given algorithm.",6,{"inputs":[{"name":"algorithm"},{"name":"securerandom"}],"output":{"generics":["ephemeralprivatekey","unspecified"],"name":"result"}}],[11,"algorithm","","The key exchange algorithm.",6,{"inputs":[{"name":"self"}],"output":{"name":"algorithm"}}],[11,"public_key_len","","The size in bytes of the encoded public key.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"compute_public_key","","Computes the public key from the private key's value and fills `out` with the public point encoded in the standard form for the algorithm.",6,null],[0,"constant_time","ring","Constant-time operations.",null,null],[5,"verify_slices_are_equal","ring::constant_time","Returns `Ok(())` if `a == b` and `Err(error::Unspecified)` otherwise. The comparison of `a` and `b` is done in constant time with respect to the contents of each, but NOT in constant time with respect to the lengths of `a` and `b`.",null,null],[0,"digest","ring","SHA-2 and the legacy SHA-1 digest algorithm.",null,null],[3,"Context","ring::digest","A context for multi-step (Init-Update-Finish) digest calculations.",null,null],[12,"algorithm","","The context's algorithm.",7,null],[3,"Digest","","A calculated digest value.",null,null],[3,"Algorithm","","A digest algorithm.",null,null],[12,"output_len","","C analog: `EVP_MD_size`",8,null],[12,"chaining_len","","The size of the chaining value of the digest function, in bytes. For non-truncated algorithms (SHA-1, SHA-256, SHA-512), this is equal to `output_len`. For truncated algorithms (e.g. SHA-384, SHA-512/256), this is equal to the length before truncation. This is mostly helpful for determining the size of an HMAC key that is appropriate for the digest algorithm.",8,null],[12,"block_len","","C analog: `EVP_MD_block_size`",8,null],[5,"digest","","Returns the digest of `data` using the given digest algorithm.",null,null],[7,"SHA1","","SHA-1 as specified in [FIPS 180-4]. Deprecated.",null,null],[7,"SHA256","","SHA-256 as specified in [FIPS 180-4].",null,null],[7,"SHA384","","SHA-384 as specified in [FIPS 180-4].",null,null],[7,"SHA512","","SHA-512 as specified in [FIPS 180-4].",null,null],[7,"SHA512_256","","SHA-512/256 as specified in [FIPS 180-4].",null,null],[17,"MAX_BLOCK_LEN","","The maximum block length (`Algorithm::block_len`) of all the algorithms in this module.",null,null],[17,"MAX_OUTPUT_LEN","","The maximum output length (`Algorithm::output_len`) of all the algorithms in this module.",null,null],[17,"MAX_CHAINING_LEN","","The maximum chaining length (`Algorithm::chaining_len`) of all the algorithms in this module.",null,null],[17,"SHA1_OUTPUT_LEN","","The length of the output of SHA-1, in bytes.",null,null],[17,"SHA256_OUTPUT_LEN","","The length of the output of SHA-256, in bytes.",null,null],[17,"SHA384_OUTPUT_LEN","","The length of the output of SHA-384, in bytes.",null,null],[17,"SHA512_OUTPUT_LEN","","The length of the output of SHA-512, in bytes.",null,null],[17,"SHA512_256_OUTPUT_LEN","","The length of the output of SHA-512/256, in bytes.",null,null],[11,"new","","Constructs a new context.",7,{"inputs":[{"name":"algorithm"}],"output":{"name":"context"}}],[11,"update","","Updates the digest with all the data in `data`. `update` may be called zero or more times until `finish` is called. It must not be called after `finish` has been called.",7,null],[11,"finish","","Finalizes the digest calculation and returns the digest value. `finish` consumes the context so it cannot be (mis-)used after `finish` has been called.",7,{"inputs":[{"name":"self"}],"output":{"name":"digest"}}],[11,"algorithm","","The algorithm that this context is using.",7,{"inputs":[{"name":"self"}],"output":{"name":"algorithm"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"digest"}}],[11,"algorithm","","The algorithm that was used to calculate the digest value.",9,{"inputs":[{"name":"self"}],"output":{"name":"algorithm"}}],[11,"as_ref","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"error","ring","Error reporting.",null,null],[3,"Unspecified","ring::error","An error with absolutely no details.",null,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"unspecified"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"unspecified"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",10,{"inputs":[{"name":"endofinput"}],"output":{"name":"self"}}],[0,"hkdf","ring","HMAC-based Extract-and-Expand Key Derivation Function.",null,null],[5,"extract_and_expand","ring::hkdf","Fills `out` with the output of the HKDF Extract-and-Expand operation for the given inputs.",null,null],[5,"extract","","The HKDF-Extract operation.",null,null],[5,"expand","","Fills `out` with the output of the HKDF-Expand operation for the given inputs.",null,null],[0,"hmac","ring","HMAC is specified in [RFC 2104].",null,null],[3,"Signature","ring::hmac","An HMAC signature.",null,null],[3,"SigningKey","","A key to use for HMAC signing.",null,null],[3,"SigningContext","","A context for multi-step (Init-Update-Finish) HMAC signing.",null,null],[3,"VerificationKey","","A key to use for HMAC authentication.",null,null],[5,"sign","","Calculates the HMAC of `data` using the key `key` in one step.",null,null],[5,"verify","","Calculates the HMAC of `data` using the key `key`, and verifies whether the resultant value equals `signature`, in one step.",null,null],[5,"verify_with_own_key","","Calculates the HMAC of `data` using the signing key `key`, and verifies whether the resultant value equals `signature`, in one step.",null,null],[5,"recommended_key_len","","Returns the recommended key length for HMAC using the given digest algorithm.",null,{"inputs":[{"name":"algorithm"}],"output":{"name":"usize"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",11,null],[11,"generate","","Generate an HMAC signing key using the given digest algorithm with a random value generated from `rng`.",12,{"inputs":[{"name":"algorithm"},{"name":"securerandom"}],"output":{"generics":["signingkey","unspecified"],"name":"result"}}],[11,"generate_serializable","","Generate an HMAC signing key using the given digest algorithm with a random value generated from `rng`, and puts the raw key value in `key_bytes`.",12,null],[11,"new","","Construct an HMAC signing key using the given digest algorithm and key value.",12,null],[11,"digest_algorithm","","The digest algorithm for the key.",12,{"inputs":[{"name":"self"}],"output":{"name":"algorithm"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"signingcontext"}}],[11,"with_key","","Constructs a new HMAC signing context using the given digest algorithm and key.",13,{"inputs":[{"name":"signingkey"}],"output":{"name":"signingcontext"}}],[11,"update","","Updates the HMAC with all the data in `data`. `update` may be called zero or more times until `finish` is called.",13,null],[11,"sign","","Finalizes the HMAC calculation and returns the HMAC value. `sign` consumes the context so it cannot be (mis-)used after `sign` has been called.",13,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"new","","Construct an HMAC verification key using the given digest algorithm and key value.",14,null],[0,"pbkdf2","ring","PBKDF2 derivation and verification.",null,null],[5,"derive","ring::pbkdf2","Fills `out` with the key derived using PBKDF2 with the given inputs.",null,null],[5,"verify","","Verifies that a previously-derived (e.g., using `derive`) PBKDF2 value matches the PBKDF2 value derived from the other inputs.",null,null],[0,"rand","ring","Cryptographic pseudo-random number generation.",null,null],[3,"SystemRandom","ring::rand","A secure random number generator where the random values come directly from the operating system.",null,null],[8,"SecureRandom","","A secure random number generator.",null,null],[10,"fill","","Fills `dest` with random bytes.",15,null],[11,"new","","Constructs a new `SystemRandom`.",16,{"inputs":[],"output":{"name":"systemrandom"}}],[11,"fill","","",16,null],[0,"signature","ring","Public key signatures: signing and verification.",null,null],[3,"ECDSAVerificationAlgorithm","ring::signature","An ECDSA verification algorithm.",null,null],[3,"EdDSAParameters","","Parameters for EdDSA signing and verification.",null,null],[3,"Ed25519KeyPair","","An Ed25519 key pair, for signing.",null,null],[3,"PKCS8Document","","A generated PKCS#8 document.",null,null],[3,"RSAParameters","","Parameters for RSA verification.",null,null],[3,"Signature","","A public key signature returned from a signing operation.",null,null],[5,"verify","","Verify the signature `signature` of message `msg` with the public key `public_key` using the algorithm `alg`.",null,{"inputs":[{"name":"verificationalgorithm"},{"name":"input"},{"name":"input"},{"name":"input"}],"output":{"generics":["unspecified"],"name":"result"}}],[0,"primitive","","Lower-level verification primitives. Usage of `ring::signature::verify()` is preferred when the public key and signature are encoded in standard formats, as it also handles the parsing.",null,null],[5,"verify_rsa","ring::signature::primitive","Lower-level API for the verification of RSA signatures.",null,null],[7,"ECDSA_P256_SHA256_ASN1","ring::signature","Verification of ASN.1 DER-encoded ECDSA signatures using the P-256 curve and SHA-256.",null,null],[7,"ECDSA_P256_SHA256_FIXED","","Verification of fixed-length (PKCS#11 style) ECDSA signatures using the P-256 curve and SHA-256.",null,null],[7,"ECDSA_P256_SHA384_ASN1","","Not recommended. Verification of ASN.1 DER-encoded ECDSA signatures using the P-256 curve and SHA-384.",null,null],[7,"ECDSA_P384_SHA256_ASN1","","Not recommended. Verification of ASN.1 DER-encoded ECDSA signatures using the P-384 curve and SHA-256.",null,null],[7,"ECDSA_P384_SHA384_ASN1","","Verification of ASN.1 DER-encoded ECDSA signatures using the P-384 curve and SHA-384.",null,null],[7,"ECDSA_P384_SHA384_FIXED","","Verification of fixed-length (PKCS#11 style) ECDSA signatures using the P-384 curve and SHA-384.",null,null],[7,"ED25519","","Verification of [Ed25519] signatures.",null,null],[7,"RSA_PKCS1_2048_8192_SHA1","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-1.",null,null],[7,"RSA_PKCS1_2048_8192_SHA256","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-256.",null,null],[7,"RSA_PKCS1_2048_8192_SHA384","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-384.",null,null],[7,"RSA_PKCS1_2048_8192_SHA512","","Verification of signatures using RSA keys of 2048-8192 bits,              PKCS#1.5 padding, and SHA-512.",null,null],[7,"RSA_PKCS1_3072_8192_SHA384","","Verification of signatures using RSA keys of 3072-8192 bits,              PKCS#1.5 padding, and SHA-384.",null,null],[7,"RSA_PSS_2048_8192_SHA256","","Verification of signatures using RSA keys of 2048-8192 bits,              PSS padding, and SHA-256.",null,null],[7,"RSA_PSS_2048_8192_SHA384","","Verification of signatures using RSA keys of 2048-8192 bits,              PSS padding, and SHA-384.",null,null],[7,"RSA_PSS_2048_8192_SHA512","","Verification of signatures using RSA keys of 2048-8192 bits,              PSS padding, and SHA-512.",null,null],[17,"ED25519_PKCS8_V2_LEN","","The length of a Ed25519 PKCS#8 (v2) private key generated by `Ed25519KeyPair::generate_pkcs8()`. Ed25519 PKCS#8 files generated by other software may have different lengths, and `Ed25519KeyPair::generate_pkcs8()` may generate files of a different length in the future.",null,null],[17,"ED25519_PUBLIC_KEY_LEN","","The length of an Ed25519 public key.",null,null],[8,"VerificationAlgorithm","","A signature verification algorithm.",null,null],[10,"verify","","Verify the signature `signature` of message `msg` with the public key `public_key`.",17,{"inputs":[{"name":"self"},{"name":"input"},{"name":"input"},{"name":"input"}],"output":{"generics":["unspecified"],"name":"result"}}],[11,"as_ref","","",18,null],[0,"test","ring","Testing framework.",null,null],[3,"TestCase","ring::test","A test case. A test case consists of a set of named attributes. Every attribute in the test case must be consumed exactly once; this helps catch typos and omissions.",null,null],[5,"ring_src_path","","Returns the path for ring source code root.",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"from_file","","Reads test cases out of the file with the path given by `test_data_relative_file_path`, calling `f` on each vector until `f` fails or until all the test vectors have been read. `f` can indicate failure either by returning `Err()` or by panicking.",null,{"inputs":[{"name":"str"},{"name":"f"}],"output":null}],[5,"from_hex","","Decode an string of hex digits into a sequence of bytes. The input must have an even number of digits.",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","string"],"name":"result"}}],[0,"rand","","Deterministic implementations of `ring::rand::SecureRandom`.",null,null],[3,"FixedByteRandom","ring::test::rand","An implementation of `SecureRandom` that always fills the output slice with the given byte.",null,null],[12,"byte","","",19,null],[3,"FixedSliceRandom","","An implementation of `SecureRandom` that always fills the output slice with the slice in `bytes`. The length of the slice given to `slice` must match exactly.",null,null],[12,"bytes","","",20,null],[3,"FixedSliceSequenceRandom","","An implementation of `SecureRandom` where each slice in `bytes` is a test vector for one call to `fill()`. Not thread-safe.",null,null],[12,"bytes","","The value.",21,null],[12,"current","","",21,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fill","","",19,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fill","","",20,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fill","","",21,null],[11,"drop","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","ring::test","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"consume_digest_alg","","Maps the strings \"SHA1\", \"SHA256\", \"SHA384\", and \"SHA512\" to digest algorithms, maps \"SHA224\" to `None`, and panics on other (erroneous) inputs. \"SHA224\" is mapped to None because ring intentionally does not support SHA224, but we need to consume test vectors from NIST that have SHA224 vectors in them.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["algorithm"],"name":"option"}}],[11,"consume_bytes","","Returns the value of an attribute that is encoded as a sequence of an even number of hex digits, or as a double-quoted UTF-8 string. The empty (zero-length) value is represented as \"\".",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"consume_usize","","Returns the value of an attribute that is an integer, in decimal notation.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"usize"}}],[11,"consume_usize_bits","","Returns the value of an attribute that is an integer, in decimal notation, as a bit length.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bitlength"}}],[11,"consume_string","","Returns the raw value of an attribute, without any unquoting or other interpretation.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"consume_optional_string","","Like `consume_string()` except it returns `None` if the test case doesn't have the attribute.",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[11,"fmt","ring::signature","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"generate_pkcs8","","Generates a new key pair and returns the key pair serialized as a PKCS#8 document.",24,{"inputs":[{"name":"securerandom"}],"output":{"generics":["unspecified"],"name":"result"}}],[11,"from_pkcs8","","Constructs an Ed25519 key pair by parsing an unencrypted PKCS#8 v2 Ed25519 private key.",24,{"inputs":[{"name":"input"}],"output":{"generics":["ed25519keypair","unspecified"],"name":"result"}}],[11,"from_pkcs8_maybe_unchecked","","Constructs an Ed25519 key pair by parsing an unencrypted PKCS#8 v1 or v2 Ed25519 private key.",24,{"inputs":[{"name":"input"}],"output":{"generics":["ed25519keypair","unspecified"],"name":"result"}}],[11,"from_seed_and_public_key","","Constructs an Ed25519 key pair from the private key seed `seed` and its public key `public_key`.",24,{"inputs":[{"name":"input"},{"name":"input"}],"output":{"generics":["ed25519keypair","unspecified"],"name":"result"}}],[11,"from_seed_unchecked","","Constructs a Ed25519 key pair from the private key seed `seed`.",24,{"inputs":[{"name":"input"}],"output":{"generics":["ed25519keypair","unspecified"],"name":"result"}}],[11,"public_key_bytes","","Returns a reference to the little-endian-encoded public key bytes.",24,null],[11,"sign","","Returns the signature of the message `msg`.",24,null],[11,"verify","","",23,{"inputs":[{"name":"self"},{"name":"input"},{"name":"input"},{"name":"input"}],"output":{"generics":["unspecified"],"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"verify","","",25,{"inputs":[{"name":"self"},{"name":"input"},{"name":"input"},{"name":"input"}],"output":{"generics":["unspecified"],"name":"result"}}],[11,"as_ref","","",26,null],[11,"verify","","",27,{"inputs":[{"name":"self"},{"name":"input"},{"name":"input"},{"name":"input"}],"output":{"generics":["unspecified"],"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[3,"SealingKey"],[3,"OpeningKey"],[3,"OpeningKey"],[3,"SealingKey"],[3,"Algorithm"],[3,"Algorithm"],[3,"EphemeralPrivateKey"],[3,"Context"],[3,"Algorithm"],[3,"Digest"],[3,"Unspecified"],[3,"Signature"],[3,"SigningKey"],[3,"SigningContext"],[3,"VerificationKey"],[8,"SecureRandom"],[3,"SystemRandom"],[8,"VerificationAlgorithm"],[3,"Signature"],[3,"FixedByteRandom"],[3,"FixedSliceRandom"],[3,"FixedSliceSequenceRandom"],[3,"TestCase"],[3,"EdDSAParameters"],[3,"Ed25519KeyPair"],[3,"ECDSAVerificationAlgorithm"],[3,"PKCS8Document"],[3,"RSAParameters"]]};
searchIndex["rlp"] = {"doc":"Recursive Length Prefix serialization crate.","items":[[3,"Rlp","rlp","Data-oriented view onto rlp-slice.",null,null],[3,"RlpIterator","","Iterator over rlp-slice list elements.",null,null],[3,"PayloadInfo","","Stores basic information about item",null,null],[12,"header_len","","Header length in bytes",0,null],[12,"value_len","","Value length in bytes",0,null],[3,"RlpStream","","Appendable rlp encoder.",null,null],[4,"DecoderError","","Error concerning the RLP decoder.",null,null],[13,"RlpIsTooBig","","Data has additional bytes at the end of the valid RLP fragment.",1,null],[13,"RlpIsTooShort","","Data has too few bytes for valid RLP.",1,null],[13,"RlpExpectedToBeList","","Expect an encoded list, RLP was something else.",1,null],[13,"RlpExpectedToBeData","","Expect encoded data, RLP was something else.",1,null],[13,"RlpIncorrectListLen","","Expected a different size list.",1,null],[13,"RlpDataLenWithZeroPrefix","","Data length number has a prefixed zero byte, invalid for numbers.",1,null],[13,"RlpListLenWithZeroPrefix","","List length number has a prefixed zero byte, invalid for numbers.",1,null],[13,"RlpInvalidIndirection","","Non-canonical (longer than necessary) representation used for data or list.",1,null],[13,"RlpInconsistentLengthAndData","","Declared length is inconsistent with data specified after.",1,null],[13,"RlpInvalidLength","","Declared length is invalid and results in overflow",1,null],[13,"Custom","","Custom rlp decoding error.",1,null],[4,"Prototype","","RLP prototype",null,null],[13,"Null","","Empty",2,null],[13,"Data","","Value",2,null],[13,"List","","List",2,null],[5,"decode","","Shortcut function to decode trusted rlp",null,null],[5,"decode_list","","",null,null],[5,"encode","","Shortcut function to encode structure into rlp.",null,{"inputs":[{"name":"e"}],"output":{"generics":["u8"],"name":"elasticarray1024"}}],[5,"encode_list","","",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"decodererror"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"total","","Total size of the RLP.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from","","Create a new object from the given bytes RLP. The bytes",0,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rlp"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","",3,null],[11,"as_raw","","",3,null],[11,"prototype","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["prototype","decodererror"],"name":"result"}}],[11,"payload_info","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["payloadinfo","decodererror"],"name":"result"}}],[11,"data","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"item_count","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize","decodererror"],"name":"result"}}],[11,"size","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"at","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["rlp","decodererror"],"name":"result"}}],[11,"is_null","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_list","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_data","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_int","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rlpiterator"}}],[11,"as_val","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"as_list","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["vec","decodererror"],"name":"result"}}],[11,"val_at","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"list_at","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["vec","decodererror"],"name":"result"}}],[11,"decoder","","",3,{"inputs":[{"name":"self"}],"output":{"name":"basicdecoder"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["rlp"],"name":"option"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Initializes instance of empty `Stream`.",5,{"inputs":[],"output":{"name":"self"}}],[11,"new_list","","Initializes the `Stream` as a list.",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"append_empty_data","","Apends null to the end of stream, chainable.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drain","","Drain the object and return the underlying ElasticArray. Panics if it is not finished.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"elasticarray1024"}}],[11,"append_raw","","Appends raw (pre-serialised) RLP data. Use with caution. Chainable.",5,null],[11,"append","","Appends value to the end of stream, chainable.",5,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"self"}}],[11,"append_list","","Appends list of values to the end of stream, chainable.",5,null],[11,"append_internal","","Appends value to the end of stream, but do not count it as an appended item. It's useful for wrapper types",5,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"self"}}],[11,"begin_list","","Declare appending the list of given size, chainable.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"rlpstream"}}],[11,"begin_unbounded_list","","Declare appending the list of unknown size, chainable.",5,{"inputs":[{"name":"self"}],"output":{"name":"rlpstream"}}],[11,"append_raw_checked","","Appends raw (pre-serialised) RLP data. Checks for size oveflow.",5,null],[11,"estimate_size","","Calculate total RLP size for appended payload.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"len","","Returns current RLP size in bytes for the data pushed into the list.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Clear the output stream so far.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"is_finished","","Returns true if stream doesnt expect any more items.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_raw","","Get raw encoded bytes",5,null],[11,"out","","Streams out encoded bytes.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"encoder","","",5,{"inputs":[{"name":"self"}],"output":{"name":"basicencoder"}}],[11,"complete_unbounded_list","","Finalize current ubnbound list. Panics if no unbounded list has been opened.",5,{"inputs":[{"name":"self"}],"output":null}],[17,"NULL_RLP","","The RLP encoded empty data (used to mean \"null value\").",null,null],[17,"EMPTY_LIST_RLP","","The RLP encoded empty list.",null,null],[8,"Decodable","","RLP decodable trait",null,null],[10,"decode","","Decode a value from RLP bytes",6,{"inputs":[{"name":"rlp"}],"output":{"generics":["decodererror"],"name":"result"}}],[8,"Encodable","","Structure encodable to RLP",null,null],[10,"rlp_append","","Append a value to the stream",7,{"inputs":[{"name":"self"},{"name":"rlpstream"}],"output":null}],[11,"rlp_bytes","","Get rlp-encoded bytes for this instance",7,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"elasticarray1024"}}],[11,"rlp_bytes","","Get rlp-encoded bytes for this instance",7,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"elasticarray1024"}}]],"paths":[[3,"PayloadInfo"],[4,"DecoderError"],[4,"Prototype"],[3,"Rlp"],[3,"RlpIterator"],[3,"RlpStream"],[8,"Decodable"],[8,"Encodable"]]};
searchIndex["rlp_compress"] = {"doc":"","items":[[3,"Swapper","rlp_compress","Stores RLPs used for compression",null,null],[5,"snapshot_swapper","","",null,{"inputs":[],"output":{"name":"swapper"}}],[5,"blocks_swapper","","",null,{"inputs":[],"output":{"name":"swapper"}}],[5,"compress","","Call this function to compress rlp.",null,null],[5,"decompress","","Call this function to decompress rlp.",null,null],[8,"Compressor","","A trait used to compress rlp.",null,null],[10,"compressed","","Get compressed version of given rlp.",0,null],[8,"Decompressor","","A trait used to convert compressed rlp into it's original version.",null,null],[10,"decompressed","","Get decompressed rlp.",1,null],[11,"new","","Construct a swapper from a list of common RLPs",2,null],[11,"decompressed","","",2,null],[11,"compressed","","",2,null]],"paths":[[8,"Compressor"],[8,"Decompressor"],[3,"Swapper"]]};
searchIndex["rlp_derive"] = {"doc":"","items":[[5,"encodable","rlp_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"encodable_wrapper","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"decodable","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"decodable_wrapper","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["rocksdb"] = {"doc":"","items":[[0,"rocksdb_ffi","rocksdb","",null,null],[4,"DBOptionsOpaque","rocksdb::rocksdb_ffi","",null,null],[6,"DBOptions","","",null,null],[4,"DBInstanceOpaque","","",null,null],[6,"DBInstance","","",null,null],[4,"DBWriteOptionsOpaque","","",null,null],[6,"DBWriteOptions","","",null,null],[4,"DBReadOptionsOpaque","","",null,null],[6,"DBReadOptions","","",null,null],[4,"DBMergeOperatorOpaque","","",null,null],[6,"DBMergeOperator","","",null,null],[4,"DBBlockBasedTableOptionsOpaque","","",null,null],[6,"DBBlockBasedTableOptions","","",null,null],[4,"DBCacheOpaque","","",null,null],[6,"DBCache","","",null,null],[4,"DBFilterPolicyOpaque","","",null,null],[6,"DBFilterPolicy","","",null,null],[4,"DBSnapshotOpaque","","",null,null],[6,"DBSnapshot","","",null,null],[4,"DBIteratorOpaque","","",null,null],[6,"DBIterator","","",null,null],[4,"DBCFHandleOpaque","","",null,null],[6,"DBCFHandle","","",null,null],[4,"DBWriteBatchOpaque","","",null,null],[6,"DBWriteBatch","","",null,null],[4,"DBComparatorOpaque","","",null,null],[6,"DBComparator","","",null,null],[4,"DBSliceTransformOpaque","","",null,null],[6,"DBSliceTransform","","",null,null],[17,"BLOCK_BASED_INDEX_TYPE_BINARY_SEARCH","","",null,null],[17,"BLOCK_BASED_INDEX_TYPE_HASH_SEARCH","","",null,null],[5,"new_bloom_filter","","",null,null],[5,"new_cache","","",null,null],[4,"DBCompressionType","","",null,null],[13,"DBNoCompression","","",0,null],[13,"DBSnappyCompression","","",0,null],[13,"DBZlibCompression","","",0,null],[13,"DBBz2Compression","","",0,null],[13,"DBLz4Compression","","",0,null],[13,"DBLz4hcCompression","","",0,null],[4,"DBCompactionStyle","","",null,null],[13,"DBLevelCompaction","","",1,null],[13,"DBUniversalCompaction","","",1,null],[13,"DBFifoCompaction","","",1,null],[4,"DBUniversalCompactionStyle","","",null,null],[13,"rocksdb_similar_size_compaction_stop_style","","",2,null],[13,"rocksdb_total_size_compaction_stop_style","","",2,null],[5,"error_message","","",null,null],[5,"rocksdb_options_create","","",null,null],[5,"rocksdb_options_destroy","","",null,null],[5,"rocksdb_cache_create_lru","","",null,null],[5,"rocksdb_cache_destroy","","",null,null],[5,"rocksdb_block_based_options_create","","",null,null],[5,"rocksdb_block_based_options_destroy","","",null,null],[5,"rocksdb_block_based_options_set_block_size","","",null,null],[5,"rocksdb_block_based_options_set_block_size_deviation","","",null,null],[5,"rocksdb_block_based_options_set_block_restart_interval","","",null,null],[5,"rocksdb_block_based_options_set_filter_policy","","",null,null],[5,"rocksdb_block_based_options_set_no_block_cache","","",null,null],[5,"rocksdb_block_based_options_set_block_cache","","",null,null],[5,"rocksdb_block_based_options_set_block_cache_compressed","","",null,null],[5,"rocksdb_block_based_options_set_whole_key_filtering","","",null,null],[5,"rocksdb_options_set_block_based_table_factory","","",null,null],[5,"rocksdb_block_based_options_set_index_type","","",null,null],[5,"rocksdb_options_increase_parallelism","","",null,null],[5,"rocksdb_options_optimize_level_style_compaction","","",null,null],[5,"rocksdb_options_set_create_if_missing","","",null,null],[5,"rocksdb_options_set_max_open_files","","",null,null],[5,"rocksdb_options_set_use_fsync","","",null,null],[5,"rocksdb_options_set_bytes_per_sync","","",null,null],[5,"rocksdb_options_optimize_for_point_lookup","","",null,null],[5,"rocksdb_options_set_table_cache_numshardbits","","",null,null],[5,"rocksdb_options_set_max_write_buffer_number","","",null,null],[5,"rocksdb_options_set_min_write_buffer_number_to_merge","","",null,null],[5,"rocksdb_options_set_level0_file_num_compaction_trigger","","",null,null],[5,"rocksdb_options_set_level0_slowdown_writes_trigger","","",null,null],[5,"rocksdb_options_set_level0_stop_writes_trigger","","",null,null],[5,"rocksdb_options_set_write_buffer_size","","",null,null],[5,"rocksdb_options_set_db_write_buffer_size","","",null,null],[5,"rocksdb_options_set_target_file_size_base","","",null,null],[5,"rocksdb_options_set_target_file_size_multiplier","","",null,null],[5,"rocksdb_options_set_max_log_file_size","","",null,null],[5,"rocksdb_options_set_max_manifest_file_size","","",null,null],[5,"rocksdb_options_set_hash_skip_list_rep","","",null,null],[5,"rocksdb_options_set_compaction_style","","",null,null],[5,"rocksdb_options_set_compression","","",null,null],[5,"rocksdb_options_set_max_background_compactions","","",null,null],[5,"rocksdb_options_set_max_background_flushes","","",null,null],[5,"rocksdb_options_set_disable_auto_compactions","","",null,null],[5,"rocksdb_options_set_prefix_extractor","","",null,null],[5,"rocksdb_filterpolicy_create_bloom","","",null,null],[5,"rocksdb_filterpolicy_destroy","","",null,null],[5,"rocksdb_open","","",null,null],[5,"rocksdb_writeoptions_create","","",null,null],[5,"rocksdb_writeoptions_destroy","","",null,null],[5,"rocksdb_writeoptions_set_sync","","",null,null],[5,"rocksdb_writeoptions_disable_WAL","","",null,null],[5,"rocksdb_put","","",null,null],[5,"rocksdb_put_cf","","",null,null],[5,"rocksdb_readoptions_create","","",null,null],[5,"rocksdb_readoptions_destroy","","",null,null],[5,"rocksdb_readoptions_set_verify_checksums","","",null,null],[5,"rocksdb_readoptions_set_fill_cache","","",null,null],[5,"rocksdb_readoptions_set_snapshot","","",null,null],[5,"rocksdb_readoptions_set_iterate_upper_bound","","",null,null],[5,"rocksdb_readoptions_set_read_tier","","",null,null],[5,"rocksdb_readoptions_set_tailing","","",null,null],[5,"rocksdb_get","","",null,null],[5,"rocksdb_get_cf","","",null,null],[5,"rocksdb_create_iterator","","",null,null],[5,"rocksdb_create_iterator_cf","","",null,null],[5,"rocksdb_create_snapshot","","",null,null],[5,"rocksdb_release_snapshot","","",null,null],[5,"rocksdb_delete","","",null,null],[5,"rocksdb_delete_cf","","",null,null],[5,"rocksdb_close","","",null,null],[5,"rocksdb_destroy_db","","",null,null],[5,"rocksdb_repair_db","","",null,null],[5,"rocksdb_merge","","",null,null],[5,"rocksdb_merge_cf","","",null,null],[5,"rocksdb_mergeoperator_create","","",null,null],[5,"rocksdb_mergeoperator_destroy","","",null,null],[5,"rocksdb_options_set_merge_operator","","",null,null],[5,"rocksdb_iter_destroy","","",null,null],[5,"rocksdb_iter_valid","","",null,null],[5,"rocksdb_iter_seek_to_first","","",null,null],[5,"rocksdb_iter_seek_to_last","","",null,null],[5,"rocksdb_iter_seek","","",null,null],[5,"rocksdb_iter_next","","",null,null],[5,"rocksdb_iter_prev","","",null,null],[5,"rocksdb_iter_key","","",null,null],[5,"rocksdb_iter_value","","",null,null],[5,"rocksdb_iter_get_error","","",null,null],[5,"rocksdb_write","","",null,null],[5,"rocksdb_writebatch_create","","",null,null],[5,"rocksdb_writebatch_create_from","","",null,null],[5,"rocksdb_writebatch_destroy","","",null,null],[5,"rocksdb_writebatch_clear","","",null,null],[5,"rocksdb_writebatch_count","","",null,null],[5,"rocksdb_writebatch_put","","",null,null],[5,"rocksdb_writebatch_put_cf","","",null,null],[5,"rocksdb_writebatch_merge","","",null,null],[5,"rocksdb_writebatch_merge_cf","","",null,null],[5,"rocksdb_writebatch_delete","","",null,null],[5,"rocksdb_writebatch_delete_cf","","",null,null],[5,"rocksdb_writebatch_iterate","","",null,null],[5,"rocksdb_writebatch_data","","",null,null],[5,"rocksdb_options_set_comparator","","",null,null],[5,"rocksdb_comparator_create","","",null,null],[5,"rocksdb_comparator_destroy","","",null,null],[5,"rocksdb_open_column_families","","",null,null],[5,"rocksdb_create_column_family","","",null,null],[5,"rocksdb_drop_column_family","","",null,null],[5,"rocksdb_column_family_handle_destroy","","",null,null],[5,"rocksdb_slicetransform_create","","",null,null],[5,"rocksdb_slicetransform_create_fixed_prefix","","",null,null],[5,"rocksdb_slicetransform_create_noop","","",null,null],[5,"rocksdb_slicetransform_destroy","","",null,null],[5,"rocksdb_get_options_from_string","","",null,null],[4,"DBCompactionStyle","rocksdb","",null,null],[13,"DBLevelCompaction","","",1,null],[13,"DBUniversalCompaction","","",1,null],[13,"DBFifoCompaction","","",1,null],[6,"DBComparator","","",null,null],[5,"new_bloom_filter","","",null,null],[0,"rocksdb","","",null,null],[3,"DB","rocksdb::rocksdb","",null,null],[3,"Column","","",null,null],[3,"WriteBatch","","",null,null],[3,"ReadOptions","","",null,null],[3,"Snapshot","","",null,null],[3,"DBIterator","","",null,null],[3,"DBVector","","",null,null],[4,"Direction","","",null,null],[13,"Forward","","",3,null],[13,"Reverse","","",3,null],[4,"IteratorMode","","",null,null],[13,"Start","","",4,null],[13,"End","","",4,null],[13,"From","","",4,null],[8,"Writable","","",null,null],[10,"put","","",5,null],[10,"put_cf","","",5,null],[10,"merge","","",5,null],[10,"merge_cf","","",5,null],[10,"delete","","",5,null],[10,"delete_cf","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_mode","","",7,{"inputs":[{"name":"self"},{"name":"iteratormode"}],"output":null}],[11,"valid","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",8,{"inputs":[{"name":"db"}],"output":{"name":"snapshot"}}],[11,"iterator","","",8,{"inputs":[{"name":"self"},{"name":"iteratormode"}],"output":{"name":"dbiterator"}}],[11,"get","","",8,null],[11,"get_cf","","",8,null],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"open_default","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["db","string"],"name":"result"}}],[11,"open","","",9,{"inputs":[{"name":"options"},{"name":"str"}],"output":{"generics":["db","string"],"name":"result"}}],[11,"open_cf","","",9,null],[11,"destroy","","",9,{"inputs":[{"name":"options"},{"name":"str"}],"output":{"generics":["string"],"name":"result"}}],[11,"repair","","",9,{"inputs":[{"name":"options"},{"name":"str"}],"output":{"generics":["string"],"name":"result"}}],[11,"write_opt","","",9,{"inputs":[{"name":"self"},{"name":"writebatch"},{"name":"writeoptions"}],"output":{"generics":["string"],"name":"result"}}],[11,"write","","",9,{"inputs":[{"name":"self"},{"name":"writebatch"}],"output":{"generics":["string"],"name":"result"}}],[11,"get_opt","","",9,null],[11,"get","","",9,null],[11,"get_cf_opt","","",9,null],[11,"get_cf","","",9,null],[11,"create_cf","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"options"}],"output":{"generics":["column","string"],"name":"result"}}],[11,"drop_cf","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"result"}}],[11,"cf_handle","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["column"],"name":"option"}}],[11,"iterator","","",9,{"inputs":[{"name":"self"},{"name":"iteratormode"}],"output":{"name":"dbiterator"}}],[11,"iterator_opt","","",9,{"inputs":[{"name":"self"},{"name":"iteratormode"},{"name":"readoptions"}],"output":{"name":"dbiterator"}}],[11,"iterator_cf","","",9,{"inputs":[{"name":"self"},{"name":"column"},{"name":"iteratormode"}],"output":{"generics":["dbiterator","string"],"name":"result"}}],[11,"iterator_cf_opt","","",9,{"inputs":[{"name":"self"},{"name":"column"},{"name":"iteratormode"},{"name":"readoptions"}],"output":{"generics":["dbiterator","string"],"name":"result"}}],[11,"snapshot","","",9,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"put_opt","","",9,null],[11,"put_cf_opt","","",9,null],[11,"merge_opt","","",9,null],[11,"merge_cf_opt","","",9,null],[11,"delete_opt","","",9,null],[11,"delete_cf_opt","","",9,null],[11,"put","","",9,null],[11,"put_cf","","",9,null],[11,"merge","","",9,null],[11,"merge_cf","","",9,null],[11,"delete","","",9,null],[11,"delete_cf","","",9,null],[11,"new","","",10,{"inputs":[],"output":{"name":"writebatch"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"put","","",10,null],[11,"put_cf","","",10,null],[11,"merge","","",10,null],[11,"merge_cf","","",10,null],[11,"delete","","",10,null],[11,"delete_cf","","",10,null],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",11,{"inputs":[],"output":{"name":"readoptions"}}],[11,"set_snapshot","","",11,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":null}],[11,"set_verify_checksums","","",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_tailing","","",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"deref","","",12,null],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"from_c","","",12,null],[11,"to_utf8","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[0,"rocksdb_options","rocksdb","",null,null],[3,"BlockBasedOptions","rocksdb::rocksdb_options","",null,null],[3,"Options","","",null,null],[12,"inner","","",13,null],[3,"WriteOptions","","",null,null],[12,"inner","","",14,null],[3,"Cache","","",null,null],[12,"inner","","",15,null],[4,"IndexType","","",null,null],[13,"BinarySearch","","",16,null],[13,"HashSearch","","",16,null],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",17,{"inputs":[],"output":{"name":"blockbasedoptions"}}],[11,"set_block_size","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"set_index_type","","",17,{"inputs":[{"name":"self"},{"name":"indextype"}],"output":null}],[11,"set_cache","","",17,{"inputs":[{"name":"self"},{"name":"cache"}],"output":null}],[11,"set_filter","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"new","","",13,{"inputs":[],"output":{"name":"options"}}],[11,"increase_parallelism","","",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"optimize_level_style_compaction","","",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"create_if_missing","","",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"add_merge_operator","","",13,null],[11,"add_comparator","","",13,null],[11,"set_prefix_extractor_fixed_size","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"set_block_cache_size_mb","","",13,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"set_max_open_files","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_use_fsync","","",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_bytes_per_sync","","",13,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"set_table_cache_num_shard_bits","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_min_write_buffer_number","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_max_write_buffer_number","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_write_buffer_size","","",13,{"inputs":[{"name":"self"},{"name":"size_t"}],"output":null}],[11,"set_db_write_buffer_size","","",13,{"inputs":[{"name":"self"},{"name":"size_t"}],"output":null}],[11,"set_target_file_size_base","","",13,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"set_target_file_size_multiplier","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_min_write_buffer_number_to_merge","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_level_zero_slowdown_writes_trigger","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_level_zero_stop_writes_trigger","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_compaction_style","","",13,{"inputs":[{"name":"self"},{"name":"dbcompactionstyle"}],"output":null}],[11,"set_max_background_compactions","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_max_background_flushes","","",13,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"set_disable_auto_compactions","","",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_block_based_table_factory","","",13,{"inputs":[{"name":"self"},{"name":"blockbasedoptions"}],"output":null}],[11,"set_parsed_options","","",13,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"result"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"writeoptions"}}],[11,"set_sync","","",14,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"disable_wal","","",14,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"new","","",15,{"inputs":[{"name":"usize"}],"output":{"name":"cache"}}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[0,"merge_operator","rocksdb","",null,null],[3,"MergeOperatorCallback","rocksdb::merge_operator","",null,null],[12,"name","","",18,null],[12,"merge_fn","","",18,null],[3,"MergeOperands","","",null,null],[5,"destructor_callback","","",null,null],[5,"name_callback","","",null,null],[5,"full_merge_callback","","",null,null],[5,"partial_merge_callback","","",null,null],[0,"comparator","rocksdb","",null,null],[3,"ComparatorCallback","rocksdb::comparator","",null,null],[12,"name","","",19,null],[12,"f","","",19,null],[5,"destructor_callback","","",null,null],[5,"name_callback","","",null,null],[5,"compare_callback","","",null,null]],"paths":[[4,"DBCompressionType"],[4,"DBCompactionStyle"],[4,"DBUniversalCompactionStyle"],[4,"Direction"],[4,"IteratorMode"],[8,"Writable"],[3,"Column"],[3,"DBIterator"],[3,"Snapshot"],[3,"DB"],[3,"WriteBatch"],[3,"ReadOptions"],[3,"DBVector"],[3,"Options"],[3,"WriteOptions"],[3,"Cache"],[4,"IndexType"],[3,"BlockBasedOptions"],[3,"MergeOperatorCallback"],[3,"ComparatorCallback"]]};
searchIndex["rocksdb_sys"] = {"doc":"","items":[[0,"ffi","rocksdb_sys","",null,null],[4,"DBOptionsOpaque","rocksdb_sys::ffi","",null,null],[4,"DBInstanceOpaque","","",null,null],[4,"DBWriteOptionsOpaque","","",null,null],[4,"DBReadOptionsOpaque","","",null,null],[4,"DBMergeOperatorOpaque","","",null,null],[4,"DBBlockBasedTableOptionsOpaque","","",null,null],[4,"DBCacheOpaque","","",null,null],[4,"DBFilterPolicyOpaque","","",null,null],[4,"DBSnapshotOpaque","","",null,null],[4,"DBIteratorOpaque","","",null,null],[4,"DBCFHandleOpaque","","",null,null],[4,"DBWriteBatchOpaque","","",null,null],[4,"DBComparatorOpaque","","",null,null],[4,"DBSliceTransformOpaque","","",null,null],[4,"DBCompressionType","","",null,null],[13,"DBNoCompression","","",0,null],[13,"DBSnappyCompression","","",0,null],[13,"DBZlibCompression","","",0,null],[13,"DBBz2Compression","","",0,null],[13,"DBLz4Compression","","",0,null],[13,"DBLz4hcCompression","","",0,null],[4,"DBCompactionStyle","","",null,null],[13,"DBLevelCompaction","","",1,null],[13,"DBUniversalCompaction","","",1,null],[13,"DBFifoCompaction","","",1,null],[4,"DBUniversalCompactionStyle","","",null,null],[13,"rocksdb_similar_size_compaction_stop_style","","",2,null],[13,"rocksdb_total_size_compaction_stop_style","","",2,null],[5,"new_bloom_filter","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"dbfilterpolicy"}}],[5,"new_cache","","",null,{"inputs":[{"name":"size_t"}],"output":{"name":"dbcache"}}],[5,"error_message","","",null,null],[5,"rocksdb_options_create","","",null,null],[5,"rocksdb_options_destroy","","",null,null],[5,"rocksdb_cache_create_lru","","",null,null],[5,"rocksdb_cache_destroy","","",null,null],[5,"rocksdb_block_based_options_create","","",null,null],[5,"rocksdb_block_based_options_destroy","","",null,null],[5,"rocksdb_block_based_options_set_block_size","","",null,null],[5,"rocksdb_block_based_options_set_block_size_deviation","","",null,null],[5,"rocksdb_block_based_options_set_block_restart_interval","","",null,null],[5,"rocksdb_block_based_options_set_filter_policy","","",null,null],[5,"rocksdb_block_based_options_set_no_block_cache","","",null,null],[5,"rocksdb_block_based_options_set_block_cache","","",null,null],[5,"rocksdb_block_based_options_set_block_cache_compressed","","",null,null],[5,"rocksdb_block_based_options_set_whole_key_filtering","","",null,null],[5,"rocksdb_options_set_block_based_table_factory","","",null,null],[5,"rocksdb_block_based_options_set_index_type","","",null,null],[5,"rocksdb_options_increase_parallelism","","",null,null],[5,"rocksdb_options_optimize_level_style_compaction","","",null,null],[5,"rocksdb_options_set_create_if_missing","","",null,null],[5,"rocksdb_options_set_max_open_files","","",null,null],[5,"rocksdb_options_set_use_fsync","","",null,null],[5,"rocksdb_options_set_bytes_per_sync","","",null,null],[5,"rocksdb_options_optimize_for_point_lookup","","",null,null],[5,"rocksdb_options_set_table_cache_numshardbits","","",null,null],[5,"rocksdb_options_set_max_write_buffer_number","","",null,null],[5,"rocksdb_options_set_min_write_buffer_number_to_merge","","",null,null],[5,"rocksdb_options_set_level0_file_num_compaction_trigger","","",null,null],[5,"rocksdb_options_set_level0_slowdown_writes_trigger","","",null,null],[5,"rocksdb_options_set_level0_stop_writes_trigger","","",null,null],[5,"rocksdb_options_set_write_buffer_size","","",null,null],[5,"rocksdb_options_set_db_write_buffer_size","","",null,null],[5,"rocksdb_options_set_target_file_size_base","","",null,null],[5,"rocksdb_options_set_target_file_size_multiplier","","",null,null],[5,"rocksdb_options_set_max_log_file_size","","",null,null],[5,"rocksdb_options_set_max_manifest_file_size","","",null,null],[5,"rocksdb_options_set_hash_skip_list_rep","","",null,null],[5,"rocksdb_options_set_compaction_style","","",null,null],[5,"rocksdb_options_set_compression","","",null,null],[5,"rocksdb_options_set_max_background_compactions","","",null,null],[5,"rocksdb_options_set_max_background_flushes","","",null,null],[5,"rocksdb_options_set_disable_auto_compactions","","",null,null],[5,"rocksdb_options_set_prefix_extractor","","",null,null],[5,"rocksdb_filterpolicy_create_bloom","","",null,null],[5,"rocksdb_filterpolicy_destroy","","",null,null],[5,"rocksdb_open","","",null,null],[5,"rocksdb_writeoptions_create","","",null,null],[5,"rocksdb_writeoptions_destroy","","",null,null],[5,"rocksdb_writeoptions_set_sync","","",null,null],[5,"rocksdb_writeoptions_disable_WAL","","",null,null],[5,"rocksdb_put","","",null,null],[5,"rocksdb_put_cf","","",null,null],[5,"rocksdb_readoptions_create","","",null,null],[5,"rocksdb_readoptions_destroy","","",null,null],[5,"rocksdb_readoptions_set_verify_checksums","","",null,null],[5,"rocksdb_readoptions_set_fill_cache","","",null,null],[5,"rocksdb_readoptions_set_snapshot","","",null,null],[5,"rocksdb_readoptions_set_iterate_upper_bound","","",null,null],[5,"rocksdb_readoptions_set_read_tier","","",null,null],[5,"rocksdb_readoptions_set_tailing","","",null,null],[5,"rocksdb_get","","",null,null],[5,"rocksdb_get_cf","","",null,null],[5,"rocksdb_create_iterator","","",null,null],[5,"rocksdb_create_iterator_cf","","",null,null],[5,"rocksdb_create_snapshot","","",null,null],[5,"rocksdb_release_snapshot","","",null,null],[5,"rocksdb_delete","","",null,null],[5,"rocksdb_delete_cf","","",null,null],[5,"rocksdb_close","","",null,null],[5,"rocksdb_destroy_db","","",null,null],[5,"rocksdb_repair_db","","",null,null],[5,"rocksdb_merge","","",null,null],[5,"rocksdb_merge_cf","","",null,null],[5,"rocksdb_mergeoperator_create","","",null,null],[5,"rocksdb_mergeoperator_destroy","","",null,null],[5,"rocksdb_options_set_merge_operator","","",null,null],[5,"rocksdb_iter_destroy","","",null,null],[5,"rocksdb_iter_valid","","",null,null],[5,"rocksdb_iter_seek_to_first","","",null,null],[5,"rocksdb_iter_seek_to_last","","",null,null],[5,"rocksdb_iter_seek","","",null,null],[5,"rocksdb_iter_next","","",null,null],[5,"rocksdb_iter_prev","","",null,null],[5,"rocksdb_iter_key","","",null,null],[5,"rocksdb_iter_value","","",null,null],[5,"rocksdb_iter_get_error","","",null,null],[5,"rocksdb_write","","",null,null],[5,"rocksdb_writebatch_create","","",null,null],[5,"rocksdb_writebatch_create_from","","",null,null],[5,"rocksdb_writebatch_destroy","","",null,null],[5,"rocksdb_writebatch_clear","","",null,null],[5,"rocksdb_writebatch_count","","",null,null],[5,"rocksdb_writebatch_put","","",null,null],[5,"rocksdb_writebatch_put_cf","","",null,null],[5,"rocksdb_writebatch_merge","","",null,null],[5,"rocksdb_writebatch_merge_cf","","",null,null],[5,"rocksdb_writebatch_delete","","",null,null],[5,"rocksdb_writebatch_delete_cf","","",null,null],[5,"rocksdb_writebatch_iterate","","",null,null],[5,"rocksdb_writebatch_data","","",null,null],[5,"rocksdb_options_set_comparator","","",null,null],[5,"rocksdb_comparator_create","","",null,null],[5,"rocksdb_comparator_destroy","","",null,null],[5,"rocksdb_open_column_families","","",null,null],[5,"rocksdb_create_column_family","","",null,null],[5,"rocksdb_drop_column_family","","",null,null],[5,"rocksdb_column_family_handle_destroy","","",null,null],[5,"rocksdb_slicetransform_create","","",null,null],[5,"rocksdb_slicetransform_create_fixed_prefix","","",null,null],[5,"rocksdb_slicetransform_create_noop","","",null,null],[5,"rocksdb_slicetransform_destroy","","",null,null],[5,"rocksdb_get_options_from_string","","",null,null],[6,"DBOptions","","",null,null],[6,"DBInstance","","",null,null],[6,"DBWriteOptions","","",null,null],[6,"DBReadOptions","","",null,null],[6,"DBMergeOperator","","",null,null],[6,"DBBlockBasedTableOptions","","",null,null],[6,"DBCache","","",null,null],[6,"DBFilterPolicy","","",null,null],[6,"DBSnapshot","","",null,null],[6,"DBIterator","","",null,null],[6,"DBCFHandle","","",null,null],[6,"DBWriteBatch","","",null,null],[6,"DBComparator","","",null,null],[6,"DBSliceTransform","","",null,null],[17,"BLOCK_BASED_INDEX_TYPE_BINARY_SEARCH","","",null,null],[17,"BLOCK_BASED_INDEX_TYPE_HASH_SEARCH","","",null,null]],"paths":[[4,"DBCompressionType"],[4,"DBCompactionStyle"],[4,"DBUniversalCompactionStyle"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"str"}],"output":{"name":"demangle"}}],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",null,{"inputs":[{"name":"str"}],"output":{"generics":["demangle","trydemangleerror"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"trydemangleerror"}}],[11,"as_str","","Returns the underlying string that's being demangled.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["rustc_hex"] = {"doc":"Hex binary-to-text encoding","items":[[4,"FromHexError","rustc_hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",0,null],[13,"InvalidHexLength","","The input had an invalid length",0,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",2,{"inputs":[{"name":"self"}],"output":{"generics":["vec","fromhexerror"],"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"generics":["vec","frombase64error"],"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"generics":["vec","fromhexerror"],"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"generics":["buildererror"],"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"generics":["buildererror"],"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"generics":["stackelement"],"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["jsonevent"],"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["json","buildererror"],"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["json","parsererror"],"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["vec"],"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["rusty_fork"] = {"doc":"Rusty-fork provides a way to \"fork\" unit tests into separate processes.","items":[[3,"RustyForkId","rusty_fork","The type of the value produced by `rusty_fork_id!`.",null,null],[3,"ChildWrapper","","Wraps a `std::process::Child` to coordinate state between `std` and `wait_timeout`.",null,null],[3,"ExitStatusWrapper","","Wraps `std::process::ExitStatus` and (if enabled) `wait_timeout::ExitStatus` to give a uniform interface to both.",null,null],[4,"Error","","Enum for errors produced by the rusty-fork crate.",null,null],[13,"UnknownFlag","","An unknown flag was encountered when examining the current process's argument list.",0,null],[13,"DisallowedFlag","","A flag was encountered when examining the current process's argument list which is known but cannot be handled in any sensible way.",0,null],[13,"SpawnError","","Spawning a subprocess failed.",0,null],[5,"fork","","Simulate a process fork.",null,{"inputs":[{"name":"str"},{"name":"id"},{"name":"modifier"},{"name":"parent"},{"name":"child"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rustyforkid"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"rustyforkid"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"rustyforkid"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"fork_test","","Support code for the `rusty_fork_test!` macro and similar.",null,null],[5,"fix_module_path","rusty_fork::fork_test","Transform a string representing a qualified path as generated via `module_path!()` into a qualified path as expected by the standard Rust test harness.",null,{"inputs":[{"name":"str"}],"output":{"name":"str"}}],[11,"fmt","rusty_fork","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"exitstatuswrapper"}}],[11,"success","","Was termination successful? Signal termination is not considered a success, and success is defined as a zero exit status.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",2,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"unix_signal","","Returns the Unix signal which terminated this process.",2,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"inner","","Return a reference to the inner `std::process::Child`.",3,{"inputs":[{"name":"self"}],"output":{"name":"child"}}],[11,"inner_mut","","Return a mutable reference to the inner `std::process::Child`.",3,{"inputs":[{"name":"self"}],"output":{"name":"child"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a SIGKILL on unix platforms.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned processor identifier associated with this child.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it exited with. This function will continue to have the same return value after it has been called at least once.",3,{"inputs":[{"name":"self"}],"output":{"generics":["exitstatuswrapper"],"name":"result"}}],[11,"try_wait","","Attempts to collect the exit status of the child if it has already exited.",3,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining output on the stdout/stderr handles, returning an `Output` instance.",3,{"inputs":[{"name":"self"}],"output":{"generics":["output"],"name":"result"}}],[11,"wait_timeout","","Wait for the child to exit, but only up to the given maximum duration.",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["option"],"name":"result"}}],[6,"Result","","General `Result` type for rusty-fork.",null,null],[14,"rusty_fork_id","","Produce a hashable identifier unique to the particular macro invocation which is stable across processes of the same executable.",null,null],[14,"rusty_fork_test","","Run Rust tests in subprocesses.",null,null],[14,"rusty_fork_test_name","","Given the unqualified name of a `#[test]` function, produce a `&'static str` corresponding to the name of the test as filtered by the standard test harness.",null,null]],"paths":[[4,"Error"],[3,"RustyForkId"],[3,"ExitStatusWrapper"],[3,"ChildWrapper"]]};
searchIndex["scopeguard"] = {"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",null,null],[4,"Always","","Always run on scope exit.",null,null],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"generics":["always"],"name":"scopeguard"}}],[8,"Strategy","","",null,null],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"should_run","","",1,{"inputs":[],"output":{"name":"bool"}}],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",2,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"scopeguard"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"defer","","Macro to create a `ScopeGuard` (always run).",null,null],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",null,null]],"paths":[[8,"Strategy"],[4,"Always"],[3,"ScopeGuard"]]};
searchIndex["secp256k1"] = {"doc":"Secp256k1 Rust bindings for Pieter Wuille's secp256k1 library, which is used for fast and accurate manipulation of ECDSA signatures on the secp256k1 curve. Such signatures are used extensively by the Bitcoin network and its derivatives.","items":[[3,"RecoveryId","secp256k1","A tag used for recovering the public key from a compact signature",null,null],[3,"Signature","","An ECDSA signature",null,null],[3,"RecoverableSignature","","An ECDSA signature with a recovery ID for pubkey recovery",null,null],[3,"Message","","A (hashed) message input to an ECDSA signature",null,null],[3,"Secp256k1","","The secp256k1 engine, used to execute all signature operations",null,null],[4,"Error","","An ECDSA error",null,null],[13,"IncapableContext","","A `Secp256k1` was used for an operation, but it was not created to support this (so necessary precomputations have not been done)",0,null],[13,"IncorrectSignature","","Signature failed verification",0,null],[13,"InvalidMessage","","Badly sized message (\"messages\" are actually fixed-sized digests; see the `MESSAGE_SIZE` constant)",0,null],[13,"InvalidPublicKey","","Bad public key",0,null],[13,"InvalidSignature","","Bad signature",0,null],[13,"InvalidSecretKey","","Bad secret key",0,null],[13,"InvalidRecoveryId","","Bad recovery id",0,null],[4,"ContextFlag","","Flags used to determine the capabilities of a `Secp256k1` object; the more capabilities, the more expensive it is to create.",null,null],[13,"None","","Can neither sign nor verify signatures (cheapest to create, useful for cases not involving signatures, such as creating keys from slices)",1,null],[13,"SignOnly","","Can sign but not verify signatures",1,null],[13,"VerifyOnly","","Can verify but not create signatures",1,null],[13,"Full","","Can verify and create signatures",1,null],[0,"constants","","Constants Constants related to the API and the underlying curve",null,null],[17,"MESSAGE_SIZE","secp256k1::constants","The size (in bytes) of a message",null,null],[17,"SECRET_KEY_SIZE","","The size (in bytes) of a secret key",null,null],[17,"PUBLIC_KEY_SIZE","","The size (in bytes) of a public key array. This only needs to be 65 but must be 72 for compatibility with the `ArrayVec` library.",null,null],[17,"UNCOMPRESSED_PUBLIC_KEY_SIZE","","The size (in bytes) of an uncompressed public key",null,null],[17,"COMPRESSED_PUBLIC_KEY_SIZE","","The size (in bytes) of a compressed public key",null,null],[17,"MAX_SIGNATURE_SIZE","","The maximum size of a signature",null,null],[17,"SCHNORR_SIGNATURE_SIZE","","The size of a Schnorr signature",null,null],[17,"COMPACT_SIGNATURE_SIZE","","The maximum size of a compact signature",null,null],[17,"CURVE_ORDER","","The order of the secp256k1 curve",null,null],[17,"GENERATOR_X","","The X coordinate of the generator",null,null],[17,"GENERATOR_Y","","The Y coordinate of the generator",null,null],[0,"ecdh","secp256k1","ECDH Support for shared secret computations",null,null],[3,"SharedSecret","secp256k1::ecdh","A tag used for recovering the public key from a compact signature",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"sharedsecret"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new shared secret from a pubkey and secret key",2,{"inputs":[{"name":"secp256k1"},{"name":"publickey"},{"name":"secretkey"}],"output":{"name":"sharedsecret"}}],[11,"new_raw","","Creates a new unhashed shared secret from a pubkey and secret key",2,{"inputs":[{"name":"secp256k1"},{"name":"publickey"},{"name":"secretkey"}],"output":{"name":"sharedsecret"}}],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",2,null],[11,"from","","",2,{"inputs":[{"name":"sharedsecret"}],"output":{"name":"sharedsecret"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[0,"ffi","secp256k1","FFI bindings Direct bindings to the underlying C library functions. These should not be needed for most users.",null,null],[3,"Context","secp256k1::ffi","A Secp256k1 context, containing various precomputed values and such needed to do elliptic curve computations. If you create one of these with `secp256k1_context_create` you MUST destroy it with `secp256k1_context_destroy`, or else you will have a memory leak.",null,null],[3,"PublicKey","","Library-internal representation of a Secp256k1 public key",null,null],[3,"Signature","","Library-internal representation of a Secp256k1 signature",null,null],[3,"RecoverableSignature","","Library-internal representation of a Secp256k1 signature + recovery ID",null,null],[3,"SharedSecret","","Library-internal representation of an ECDH shared secret",null,null],[7,"secp256k1_nonce_function_rfc6979","","",null,null],[7,"secp256k1_nonce_function_default","","",null,null],[5,"secp256k1_context_create","","",null,null],[5,"secp256k1_context_clone","","",null,null],[5,"secp256k1_context_destroy","","",null,null],[5,"secp256k1_context_randomize","","",null,null],[5,"secp256k1_ec_pubkey_parse","","",null,null],[5,"secp256k1_ec_pubkey_serialize","","",null,null],[5,"secp256k1_ecdsa_signature_parse_der","","",null,null],[5,"ecdsa_signature_parse_der_lax","","",null,null],[5,"secp256k1_ecdsa_signature_serialize_der","","",null,null],[5,"secp256k1_ecdsa_recoverable_signature_parse_compact","","",null,null],[5,"secp256k1_ecdsa_recoverable_signature_serialize_compact","","",null,null],[5,"secp256k1_ecdsa_recoverable_signature_convert","","",null,null],[5,"secp256k1_ecdsa_signature_normalize","","",null,null],[5,"secp256k1_ecdsa_verify","","",null,null],[5,"secp256k1_ecdsa_sign","","",null,null],[5,"secp256k1_ecdsa_sign_recoverable","","",null,null],[5,"secp256k1_ecdsa_recover","","",null,null],[5,"secp256k1_schnorr_sign","","",null,null],[5,"secp256k1_schnorr_verify","","",null,null],[5,"secp256k1_schnorr_recover","","",null,null],[5,"secp256k1_ec_seckey_verify","","",null,null],[5,"secp256k1_ec_pubkey_create","","",null,null],[5,"secp256k1_ec_privkey_tweak_add","","",null,null],[5,"secp256k1_ec_pubkey_tweak_add","","",null,null],[5,"secp256k1_ec_privkey_tweak_mul","","",null,null],[5,"secp256k1_ec_pubkey_tweak_mul","","",null,null],[5,"secp256k1_ec_pubkey_combine","","",null,null],[5,"secp256k1_ecdh","","",null,null],[5,"secp256k1_ecdh_raw","","",null,null],[5,"secp256k1_ec_privkey_inverse","","",null,null],[6,"NonceFn","","A nonce generation function. Ordinary users of the library never need to see this type; only if you need to control nonce generation do you need to use it. I have deliberately made this hard to do: you have to write your own wrapper around the FFI functions to use it. And it's an unsafe type. Nonces are generated deterministically by RFC6979 by default; there should be no need to ever change this.",null,null],[17,"SECP256K1_START_NONE","","Flag for context to enable no precomputation",null,null],[17,"SECP256K1_START_VERIFY","","Flag for context to enable verification precomputation",null,null],[17,"SECP256K1_START_SIGN","","Flag for context to enable signing precomputation",null,null],[17,"SECP256K1_SER_UNCOMPRESSED","","Flag for keys to indicate uncompressed serialization format",null,null],[17,"SECP256K1_SER_COMPRESSED","","Flag for keys to indicate compressed serialization format",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",4,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",4,null],[11,"len","","Returns the length of the object as an array",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"publickey"}}],[11,"index","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"c_uchar"}}],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"index","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new (zeroed) public key usable for the FFI interface",4,{"inputs":[],"output":{"name":"publickey"}}],[11,"blank","","Create a new (uninitialized) public key usable for the FFI interface",4,{"inputs":[],"output":{"name":"publickey"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",5,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",5,null],[11,"len","","Returns the length of the object as an array",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"index","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"c_uchar"}}],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"index","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",6,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",6,null],[11,"len","","Returns the length of the object as an array",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"recoverablesignature"}}],[11,"index","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"c_uchar"}}],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",5,{"inputs":[],"output":{"name":"signature"}}],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",5,{"inputs":[],"output":{"name":"signature"}}],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",6,{"inputs":[],"output":{"name":"recoverablesignature"}}],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",6,{"inputs":[],"output":{"name":"recoverablesignature"}}],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",7,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",7,null],[11,"len","","Returns the length of the object as an array",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"sharedsecret"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sharedsecret"}}],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"c_uchar"}}],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new (zeroed) signature usable for the FFI interface",7,{"inputs":[],"output":{"name":"sharedsecret"}}],[11,"blank","","Create a new (uninitialized) signature usable for the FFI interface",7,{"inputs":[],"output":{"name":"sharedsecret"}}],[0,"key","secp256k1","Public and secret keys",null,null],[3,"SecretKey","secp256k1::key","Secret 256-bit key used as `x` in an ECDSA signature",null,null],[3,"PublicKey","","A Secp256k1 public key, used for verification of signatures",null,null],[7,"ONE","","The number 1 encoded as a secret key Deprecated; `static` is not what I want; use `ONE_KEY` instead",null,null],[17,"ZERO_KEY","","The number 0 encoded as a secret key",null,null],[17,"ONE_KEY","","The number 1 encoded as a secret key",null,null],[17,"MINUS_ONE_KEY","","The number -1 encoded as a secret key",null,null],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",8,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",8,null],[11,"len","","Returns the length of the object as an array",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"secretkey"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"secretkey"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",8,null],[11,"index","","",8,null],[11,"index","","",8,null],[11,"index","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"publickey"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"new","","Creates a new random secret key",8,{"inputs":[{"name":"secp256k1"},{"name":"r"}],"output":{"name":"secretkey"}}],[11,"from_slice","","Converts a `SECRET_KEY_SIZE`-byte slice to a secret key",8,null],[11,"add_assign","","Adds one secret key to another, modulo the curve order",8,{"inputs":[{"name":"self"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"generics":["error"],"name":"result"}}],[11,"mul_assign","","Multiplies one secret key by another, modulo the curve order",8,{"inputs":[{"name":"self"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"generics":["error"],"name":"result"}}],[11,"inv_assign","","Inverts (1 / self) this secret key.",8,{"inputs":[{"name":"self"},{"name":"secp256k1"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Creates a new zeroed out public key",9,{"inputs":[],"output":{"name":"publickey"}}],[11,"is_valid","","Determines whether a pubkey is valid",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",9,null],[11,"from_secret_key","","Creates a new public key from a secret key.",9,{"inputs":[{"name":"secp256k1"},{"name":"secretkey"}],"output":{"generics":["publickey","error"],"name":"result"}}],[11,"from_slice","","Creates a public key directly from a slice",9,null],[11,"serialize_vec","","Serialize the key as a byte-encoded pair of values. In compressed form the y-coordinate is represented by only a single bit, as x determines it up to one bit.",9,{"inputs":[{"name":"self"},{"name":"secp256k1"},{"name":"bool"}],"output":{"name":"arrayvec"}}],[11,"add_exp_assign","","Adds the pk corresponding to `other` to the pk `self` in place",9,{"inputs":[{"name":"self"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"generics":["error"],"name":"result"}}],[11,"add_assign","","Adds another point on the curve in place",9,{"inputs":[{"name":"self"},{"name":"secp256k1"},{"name":"publickey"}],"output":{"generics":["error"],"name":"result"}}],[11,"mul_assign","","Multiplies this point by `secret` scalar",9,{"inputs":[{"name":"self"},{"name":"secp256k1"},{"name":"secretkey"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"publickey"}],"output":{"name":"publickey"}}],[0,"schnorr","secp256k1","Schnorr signatures",null,null],[3,"Signature","secp256k1::schnorr","A Schnorr signature.",null,null],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",10,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",10,null],[11,"len","","Returns the length of the object as an array",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"index","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",10,null],[11,"index","","",10,null],[11,"index","","",10,null],[11,"index","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","Deserializes a signature from a 64-byte vector",10,null],[11,"serialize","","Serializes a signature to a 64-byte vector",10,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"sign_schnorr","secp256k1","Create a Schnorr signature",11,{"inputs":[{"name":"self"},{"name":"message"},{"name":"secretkey"}],"output":{"generics":["signature","error"],"name":"result"}}],[11,"verify_schnorr","","Verify a Schnorr signature",11,{"inputs":[{"name":"self"},{"name":"message"},{"name":"signature"},{"name":"publickey"}],"output":{"generics":["error"],"name":"result"}}],[11,"recover_schnorr","","Retrieves the public key for which `sig` is a valid signature for `msg`. Requires a verify-capable context.",11,{"inputs":[{"name":"self"},{"name":"message"},{"name":"signature"}],"output":{"generics":["publickey","error"],"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"recoveryid"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"recoveryid"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"recoveryid"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"recoverablesignature"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"recoverablesignature"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i32","","Allows library users to create valid recovery IDs from i32.",12,{"inputs":[{"name":"i32"}],"output":{"generics":["recoveryid","error"],"name":"result"}}],[11,"to_i32","","Allows library users to convert recovery IDs to i32.",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_der","","Converts a DER-encoded byte slice to a signature",13,null],[11,"from_der_lax","","Converts a \"lax DER\"-encoded byte slice to a signature. This is basically only useful for validating signatures in the Bitcoin blockchain from before 2016. It should never be used in new applications. This library does not support serializing to this \"format\"",13,null],[11,"normalize_s","","Normalizes a signature to a \"low S\" form. In ECDSA, signatures are of the form (r, s) where r and s are numbers lying in some finite field. The verification equation will pass for (r, s) iff it passes for (r, -s), so it is possible to ``modify'' signatures in transit by flipping the sign of s. This does not constitute a forgery since the signed message still cannot be changed, but for some applications, changing even the signature itself can be a problem. Such applications require a \"strong signature\". It is believed that ECDSA is a strong signature except for this ambiguity in the sign of s, so to accomodate these applications libsecp256k1 will only accept signatures for which s is in the lower half of the field range. This eliminates the ambiguity.",13,{"inputs":[{"name":"self"},{"name":"secp256k1"}],"output":null}],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",13,null],[11,"as_mut_ptr","","Obtains a raw mutable pointer suitable for use with FFI functions",13,null],[11,"serialize_der","","Serializes the signature in DER format",13,{"inputs":[{"name":"self"},{"name":"secp256k1"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from","","",13,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"from_compact","","Converts a compact-encoded byte slice to a signature. This representation is nonstandard and defined by the libsecp256k1 library.",14,null],[11,"as_ptr","","Obtains a raw pointer suitable for use with FFI functions",14,null],[11,"serialize_compact","","Serializes the recoverable signature in compact format",14,null],[11,"to_standard","","Converts a recoverable signature to a non-recoverable one (this is needed for verification",14,{"inputs":[{"name":"self"},{"name":"secp256k1"}],"output":{"name":"signature"}}],[11,"from","","",14,{"inputs":[{"name":"recoverablesignature"}],"output":{"name":"recoverablesignature"}}],[11,"index","","",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",13,null],[11,"index","","",13,null],[11,"index","","",13,null],[11,"as_ptr","","Converts the object to a raw pointer for FFI interfacing",15,null],[11,"as_mut_ptr","","Converts the object to a mutable raw pointer for FFI interfacing",15,null],[11,"len","","Returns the length of the object as an array",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the object as an array is empty",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"index","","",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",15,null],[11,"index","","",15,null],[11,"index","","",15,null],[11,"index","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","Converts a `MESSAGE_SIZE`-byte slice to a message object",15,null],[11,"from","","",15,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"contextflag"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"contextflag"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"secp256k1"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"secp256k1"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new Secp256k1 context",11,{"inputs":[],"output":{"name":"secp256k1"}}],[11,"with_caps","","Creates a new Secp256k1 context with the specified capabilities",11,{"inputs":[{"name":"contextflag"}],"output":{"name":"secp256k1"}}],[11,"without_caps","","Creates a new Secp256k1 context with no capabilities (just de/serialization)",11,{"inputs":[],"output":{"name":"secp256k1"}}],[11,"randomize","","(Re)randomizes the Secp256k1 context for cheap sidechannel resistence; see comment in libsecp256k1 commit d2275795f by Gregory Maxwell",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"generate_keypair","","Generates a random keypair. Convenience function for `key::SecretKey::new` and `key::PublicKey::from_secret_key`; call those functions directly for batch key generation. Requires a signing-capable context.",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[11,"sign","","Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce Requires a signing-capable context.",11,{"inputs":[{"name":"self"},{"name":"message"},{"name":"secretkey"}],"output":{"generics":["signature","error"],"name":"result"}}],[11,"sign_recoverable","","Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce Requires a signing-capable context.",11,{"inputs":[{"name":"self"},{"name":"message"},{"name":"secretkey"}],"output":{"generics":["recoverablesignature","error"],"name":"result"}}],[11,"recover","","Determines the public key for which `sig` is a valid signature for `msg`. Requires a verify-capable context.",11,{"inputs":[{"name":"self"},{"name":"message"},{"name":"recoverablesignature"}],"output":{"generics":["publickey","error"],"name":"result"}}],[11,"verify","","Checks that `sig` is a valid ECDSA signature for `msg` using the public key `pubkey`. Returns `Ok(true)` on success. Note that this function cannot be used for Bitcoin consensus checking since there may exist signatures which OpenSSL would verify but not libsecp256k1, or vice-versa. Requires a verify-capable context.",11,{"inputs":[{"name":"self"},{"name":"message"},{"name":"signature"},{"name":"publickey"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[4,"Error"],[4,"ContextFlag"],[3,"SharedSecret"],[3,"Context"],[3,"PublicKey"],[3,"Signature"],[3,"RecoverableSignature"],[3,"SharedSecret"],[3,"SecretKey"],[3,"PublicKey"],[3,"Signature"],[3,"Secp256k1"],[3,"RecoveryId"],[3,"Signature"],[3,"RecoverableSignature"],[3,"Message"]]};
searchIndex["semver"] = {"doc":"Semantic version parsing and comparison.","items":[[3,"Version","semver","Represents a version number conforming to the semantic versioning scheme.",null,null],[12,"major","","The major version, to be incremented on incompatible changes.",0,null],[12,"minor","","The minor version, to be incremented when functionality is added in a backwards-compatible manner.",0,null],[12,"patch","","The patch version, to be incremented when backwards-compatible bug fixes are made.",0,null],[12,"pre","","The pre-release version identifier, if one exists.",0,null],[12,"build","","The build metadata, ignored when determining version precedence.",0,null],[3,"VersionReq","","A `VersionReq` is a struct containing a list of predicates that can apply to ranges of version numbers. Matching operations can then be done with the `VersionReq` against a particular version to see if it satisfies some or all of the constraints.",null,null],[4,"Identifier","","An identifier in the pre-release or build metadata.",null,null],[13,"Numeric","","An identifier that's solely numbers.",1,null],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,null],[4,"SemVerError","","An error type for this crate",null,null],[13,"ParseError","","An error ocurred while parsing.",2,null],[4,"ReqParseError","","A `ReqParseError` is returned from methods which parse a string into a `VersionReq`. Each enumeration is one of the possible errors that can occur.",null,null],[13,"InvalidVersionRequirement","","The given version requirement is invalid.",3,null],[13,"OpAlreadySet","","You have already provided an operation, such as `=`, `~`, or `^`. Only use one.",3,null],[13,"InvalidSigil","","The sigil you have written is not correct.",3,null],[13,"VersionComponentsMustBeNumeric","","All components of a version must be numeric.",3,null],[13,"InvalidIdentifier","","There was an error parsing an identifier.",3,null],[13,"MajorVersionRequired","","At least a major version is required.",3,null],[13,"UnimplementedVersionRequirement","","An unimplemented version requirement.",3,null],[13,"DeprecatedVersionRequirement","","This form of requirement is deprecated.",3,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"identifier"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"identifier"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"identifier"}],"output":{"name":"identifier"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"version"}],"output":{"name":"version"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"semvererror"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"semvererror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"semvererror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"semvererror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"semvererror"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"semvererror"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"semvererror"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"semvererror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Contructs the simple case without pre or build.",0,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"version"}}],[11,"parse","","Parse a string into a semver object.",0,{"inputs":[{"name":"str"}],"output":{"generics":["version","semvererror"],"name":"result"}}],[11,"increment_patch","","Increments the patch number for this Version (Must be mutable)",0,{"inputs":[{"name":"self"}],"output":null}],[11,"increment_minor","","Increments the minor version number for this Version (Must be mutable)",0,{"inputs":[{"name":"self"}],"output":null}],[11,"increment_major","","Increments the major version number for this Version (Must be mutable)",0,{"inputs":[{"name":"self"}],"output":null}],[11,"is_prerelease","","Checks to see if the current Version is in pre-release status",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["version","semvererror"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",0,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"versionreq"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"versionreq"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"versionreq"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"versionreq"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"versionreq"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"versionreq"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"versionreq"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"versionreq"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"versionreq"}],"output":{"name":"ordering"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"versionreq"}],"output":{"name":"versionreq"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"reqparseerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"reqparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"reqparseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"reqparseerror"}}],[11,"any","","`any()` is a factory method which creates a `VersionReq` with no constraints. In other words, any version will match against it.",4,{"inputs":[],"output":{"name":"versionreq"}}],[11,"parse","","`parse()` is the main constructor of a `VersionReq`. It takes a string like `\"^1.2.3\"` and turns it into a `VersionReq` that matches that particular constraint.",4,{"inputs":[{"name":"str"}],"output":{"generics":["versionreq","reqparseerror"],"name":"result"}}],[11,"exact","","`exact()` is a factory method which creates a `VersionReq` with one exact constraint.",4,{"inputs":[{"name":"version"}],"output":{"name":"versionreq"}}],[11,"matches","","`matches()` matches a given `Version` against this `VersionReq`.",4,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["versionreq","reqparseerror"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Version"],[4,"Identifier"],[4,"SemVerError"],[4,"ReqParseError"],[3,"VersionReq"]]};
searchIndex["semver_parser"] = {"doc":"","items":[[0,"version","semver_parser","",null,null],[3,"Version","semver_parser::version","",null,null],[12,"major","","",0,null],[12,"minor","","",0,null],[12,"patch","","",0,null],[12,"pre","","",0,null],[12,"build","","",0,null],[4,"Identifier","","",null,null],[13,"Numeric","","An identifier that's solely numbers.",1,null],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,null],[5,"parse","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["version","string"],"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"range","semver_parser","",null,null],[3,"VersionReq","semver_parser::range","",null,null],[12,"predicates","","",2,null],[3,"Predicate","","",null,null],[12,"op","","",3,null],[12,"major","","",3,null],[12,"minor","","",3,null],[12,"patch","","",3,null],[12,"pre","","",3,null],[4,"WildcardVersion","","",null,null],[13,"Major","","",4,null],[13,"Minor","","",4,null],[13,"Patch","","",4,null],[4,"Op","","",null,null],[13,"Ex","","",5,null],[13,"Gt","","",5,null],[13,"GtEq","","",5,null],[13,"Lt","","",5,null],[13,"LtEq","","",5,null],[13,"Tilde","","",5,null],[13,"Compatible","","",5,null],[13,"Wildcard","","",5,null],[5,"parse_predicate","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["predicate","string"],"name":"result"}}],[5,"parse","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["versionreq","string"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"wildcardversion"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"generics":["op","string"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"predicate"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Version"],[4,"Identifier"],[3,"VersionReq"],[3,"Predicate"],[4,"WildcardVersion"],[4,"Op"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",0,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,null],[13,"Char","","The input contained a `char` that was not expected.",0,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,null],[13,"Unit","","The input contained a unit `()` that was not expected.",0,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,null],[13,"Seq","","The input contained a sequence that was not expected.",0,null],[13,"Map","","The input contained a map that was not expected.",0,null],[13,"Enum","","The input contained an enum that was not expected.",0,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"I128Deserializer","","A deserializer holding an `i128`.",null,null],[3,"U128Deserializer","","A deserializer holding a `u128`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",2,null],[11,"deserialize_enum","","",2,null],[11,"deserialize_identifier","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",3,null],[11,"deserialize_enum","","",3,null],[11,"deserialize_identifier","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",4,null],[11,"deserialize_enum","","",4,null],[11,"deserialize_identifier","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",5,null],[11,"deserialize_enum","","",5,null],[11,"deserialize_identifier","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",6,null],[11,"deserialize_enum","","",6,null],[11,"deserialize_identifier","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",7,null],[11,"deserialize_enum","","",7,null],[11,"deserialize_identifier","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",8,null],[11,"deserialize_enum","","",8,null],[11,"deserialize_identifier","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",9,null],[11,"deserialize_enum","","",9,null],[11,"deserialize_identifier","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",10,null],[11,"deserialize_enum","","",10,null],[11,"deserialize_identifier","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",11,null],[11,"deserialize_enum","","",11,null],[11,"deserialize_identifier","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",12,null],[11,"deserialize_enum","","",12,null],[11,"deserialize_identifier","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_identifier","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_identifier","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_identifier","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",18,null],[11,"variant_seed","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",19,null],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_identifier","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Create a new borrowed deserializer from the given string.",20,{"inputs":[{"name":"str"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",20,null],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_identifier","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",21,null],[11,"deserialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_identifier","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",22,null],[11,"deserialize_bool","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_identifier","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",23,null],[11,"deserialize_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_identifier","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",23,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"seqdeserializer"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",24,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"seqaccessdeserializer"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",25,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",26,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_identifier","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key_seed","","",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_entry_seed","","",26,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_element_seed","","",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"mapaccessdeserializer"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",27,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_enum","","",27,null],[11,"deserialize_identifier","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","serde::de","",28,{"inputs":[{"name":"self"}],"output":{"name":"ignoredany"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"ignoredany"}}],[11,"expecting","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",28,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i64","","",28,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u64","","",28,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f64","","",28,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",28,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",28,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",28,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","",28,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_bytes","","",28,null],[11,"deserialize","","",28,{"inputs":[{"name":"d"}],"output":{"generics":["ignoredany"],"name":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",29,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",32,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",34,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","The input contains a boolean.",34,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","The input contains an `i8`.",34,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","The input contains an `i16`.",34,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","The input contains an `i32`.",34,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","The input contains an `i64`.",34,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_i128","","The input contains a `i128`.",34,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"result"}}],[11,"visit_u8","","The input contains a `u8`.",34,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","The input contains a `u16`.",34,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","The input contains a `u32`.",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","The input contains a `u64`.",34,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_u128","","The input contains a `u128`.",34,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"result"}}],[11,"visit_f32","","The input contains an `f32`.",34,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","The input contains an `f64`.",34,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","The input contains a `char`.",34,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",34,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",34,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",34,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",34,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",34,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",34,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","The input contains an optional that is present.",34,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",34,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",34,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","The input contains a key-value map.",34,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_enum","","The input contains an enum.",34,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["option"],"name":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",36,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",37,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",38,null],[10,"unit_variant","","Called when deserializing a variant with no values.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",38,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",38,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",39,null],[10,"into_deserializer","","Convert this value into a deserializer.",39,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",40,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",41,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",42,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,null],[16,"Error","","The error type when some error occurs during serialization.",43,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,null],[10,"serialize_bool","","Serialize a `bool` value.",43,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",43,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",43,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",43,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",43,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_i128","","Serialize an `i128` value.",43,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",43,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",43,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",43,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_u128","","Serialize a `u128` value.",43,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",43,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",43,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",43,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,null],[10,"serialize_none","","Serialize a [`None`] value.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,null],[10,"serialize_element","","Serialize a sequence element.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,null],[10,"serialize_element","","Serialize a tuple element.",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,null],[10,"serialize_field","","Serialize a tuple struct field.",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,null],[10,"serialize_field","","Serialize a tuple variant field.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,null],[10,"serialize_key","","Serialize a map key.",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",48,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",48,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,null],[10,"serialize_field","","Serialize a struct field.",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",49,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",50,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",50,null],[10,"serialize_field","","Serialize a struct variant field.",50,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",50,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",50,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",42,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,null],[16,"Error","","The error type when some error occurs during serialization.",43,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,null],[10,"serialize_bool","","Serialize a `bool` value.",43,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",43,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",43,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",43,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",43,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_i128","","Serialize an `i128` value.",43,{"inputs":[{"name":"self"},{"name":"i128"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",43,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",43,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",43,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_u128","","Serialize a `u128` value.",43,{"inputs":[{"name":"self"},{"name":"u128"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",43,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",43,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",43,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,null],[10,"serialize_none","","Serialize a [`None`] value.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",null,null]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_json"] = {"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"generics":["error"],"name":"result"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[0,"de","","Deserialize JSON data to a Rust data structure.",null,null],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",null,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",null,null],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,null],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,{"inputs":[{"name":"self"}],"output":{"name":"streamdeserializer"}}],[11,"from_str","serde_json","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","serde_json::de","Create a JSON stream deserializer from one of the possible serde_json input sources.",3,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",4,null],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",4,null],[13,"Data","","The error was caused by input data that was semantically incorrect.",4,null],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",4,null],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[11,"line","","One-based line number at which the error was detected.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","One-based column number at which the error was detected.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"classify","","Categorizes the cause of this error.",5,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"category"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"invalid_type","","",5,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"Iter","","An iterator over a serde_json::Map's entries.",null,null],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",null,null],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",null,null],[3,"Keys","","An iterator over a serde_json::Map's keys.",null,null],[3,"Values","","An iterator over a serde_json::Map's values.",null,null],[3,"ValuesMut","","A mutable iterator over a serde_json::Map's values.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",null,null],[13,"Vacant","","A vacant Entry.",6,null],[13,"Occupied","","An occupied Entry.",6,null],[11,"new","","Makes a new empty Map.",7,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",7,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Clears the map, removing all values.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",7,{"inputs":[{"name":"self"},{"name":"string"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["value"],"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Gets an iterator over the entries of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Gets an iterator over mutable values of the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"index_mut","","",7,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_iter","","",7,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"extend","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"key","","Returns a reference to this entry's key.",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",6,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",8,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key in the entry.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get","","Gets a reference to the value in the entry.",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",9,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",9,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",7,null],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"next_back","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"next_back","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `\"`",16,null],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",16,null],[13,"Solidus","","An escaped solidus `/`",16,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",16,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",16,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",16,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",16,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",16,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",16,null],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f64"}],"output":{"name":"result"}}],[11,"write_number_str","","Writes a number that has already been rendered to a string.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char_escape","","Writes a character escape code to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"charescape"}],"output":{"name":"result"}}],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","Called after every array value.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","Called before every object key.",17,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","Called after every object value.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Creates a new JSON serializer.",18,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",18,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",18,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",18,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"compactformatter"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"prettyformatter"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",20,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",20,null],[11,"default","","",20,{"inputs":[],"output":{"name":"self"}}],[11,"begin_array","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","",20,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","",20,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"begin_object_value","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",null,null],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"generics":["value"],"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i128","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u128","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Convert 32-bit floating point number to `Value`",0,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","Convert 64-bit floating point number to `Value`",0,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from","","Convert boolean to `Value`",0,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","Convert `String` to `Value`",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","Convert string slice to `Value`",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","Convert copy-on-write string to `Value`",0,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","Convert map (with string keys) to `Value`",0,{"inputs":[{"generics":["string","value"],"name":"map"}],"output":{"name":"self"}}],[11,"from","","Convert a `Vec` to `Value`",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","Convert a slice to `Value`",0,null],[11,"from_iter","","Convert an iteratable type to a `Value`",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Display a JSON value as a string.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["map"],"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value"],"name":"option"}}],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"value"}}],[11,"clone","serde_json","",2,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",2,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",2,{"inputs":[{"name":"f64"}],"output":{"generics":["number"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"generics":["number"],"name":"result"}}],[11,"deserialize_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u8","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u16","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f32","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_f64","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_i128","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_u128","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_bool","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",2,null],[11,"deserialize_enum","","",2,null],[11,"deserialize_identifier","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",21,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"discard","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"parse_str_raw","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"ignore_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a slice of bytes.",22,null],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"discard","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"parse_str_raw","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"ignore_str","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a UTF-8 string.",23,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"discard","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",23,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",23,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"byte_offset","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"parse_str","","",23,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"parse_str_raw","","",23,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["reference"],"name":"result"}}],[11,"ignore_str","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",null,null]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"Number"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["siphasher"] = {"doc":"","items":[[0,"sip","siphasher","An implementation of SipHash.",null,null],[3,"SipHasher13","siphasher::sip","An implementation of SipHash 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",2,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",0,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",1,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",2,null],[11,"finish","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",1,null],[11,"finish","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"sip128","siphasher","An implementation of SipHash with a 128-bit output.",null,null],[3,"Hash128","siphasher::sip128","A 128-bit (2x64) hash output",null,null],[12,"h1","","",3,null],[12,"h2","","",3,null],[3,"SipHasher13","","An implementation of SipHash128 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash128 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash128 2-4.",null,null],[8,"Hasher128","","",null,null],[10,"finish128","","Return a 128-bit hash",4,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"hash128"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",7,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"finish128","","Return a 128-bit hash",7,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",5,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"finish128","","Return a 128-bit hash",5,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",6,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"finish128","","Return a 128-bit hash",6,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"write","","",7,null],[11,"finish","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",5,null],[11,"finish","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",6,null],[11,"finish","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"into_bytes","","Convert into a 16-bytes vector",3,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}]],"paths":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hash128"],[8,"Hasher128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"]]};
searchIndex["slab"] = {"doc":"Pre-allocated storage for a uniform data type.","items":[[3,"Slab","slab","Pre-allocated storage for a uniform data type",null,null],[3,"VacantEntry","","A handle to an vacant entry in a `Slab`.",null,null],[3,"Iter","","An iterator over the values stored in the `Slab`",null,null],[3,"IterMut","","A mutable iterator over the values stored in the `Slab`",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"slab"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new, empty `Slab`.",0,{"inputs":[],"output":{"name":"slab"}}],[11,"with_capacity","","Construct a new, empty `Slab` with the specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"slab"}}],[11,"capacity","","Returns the number of values the slab can store without reallocating.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more values to be stored without allocating.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity required to store exactly `additional` more values.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the slab as much as possible.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Clear the slab of all values",0,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Returns the number of stored values",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if no values are stored in the slab",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the slab",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator that allows modifying each value.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"get","","Returns a reference to the value associated with the given key",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the value associated with the given key",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_unchecked","","Returns a reference to the value associated with the given key without performing bounds checking.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked_mut","","Returns a mutable reference to the value associated with the given key without performing bounds checking.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Insert a value in the slab, returning key assigned to the value",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"usize"}}],[11,"vacant_entry","","Returns a handle to a vacant entry allowing for further manipulation.",0,{"inputs":[{"name":"self"}],"output":{"name":"vacantentry"}}],[11,"remove","","Removes and returns the value associated with the given key.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"contains","","Returns `true` if a value is associated with the given key.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"retain","","Retain only the elements specified by the predicate.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"insert","","Insert a value in the entry, returning a mutable reference to the value.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"key","","Return the key associated with this entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Slab"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and yields them by value.",null,null],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",null,null],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its items by value.",null,null],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",null,null],[10,"push","","Append an element to the vector.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",null,null],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,null],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","The type of the array's elements.",2,null],[10,"size","","Returns the number of items the array can hold.",2,{"inputs":[],"output":{"name":"usize"}}],[10,"ptr","","Returns a pointer to the first element of the array.",2,null],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",2,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Construct an empty vector",4,{"inputs":[],"output":{"name":"smallvec"}}],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>`.",4,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",4,{"inputs":[{"name":"a"}],"output":{"name":"smallvec"}}],[11,"set_len","","Sets the length of a vector.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"inline_size","","The maximum number of elements this vector can hold inline",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","The number of elements stored in the vector",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector is empty",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","The number of items the vector can hold without reallocating",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Empty the vector and return an iterator over its former contents.",4,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"push","","Append an item to the vector.",4,null],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"grow","","Re-allocate to set the capacity to `max(new_cap, inline_size())`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_slice","","Extracts a slice containing the entire vector.",4,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,null],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",4,null],[11,"clear","","Remove all elements from the vector.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",4,null],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",4,null],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"i"}],"output":null}],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup","","Removes consecutive duplicate elements.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",4,null],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",4,null],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",4,null],[11,"resize","","Resizes the vector so that its length is equal to `len`.",4,null],[11,"from_elem","","Creates a `SmallVec` with `n` copies of `elem`. ``` use smallvec::SmallVec;",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"write","","",4,null],[11,"write_all","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",4,null],[11,"from","","",4,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"from","","",4,{"inputs":[{"name":"a"}],"output":{"name":"smallvec"}}],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"extend_from_slice","","",4,null],[11,"push","","",4,null],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"smallvec"}}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"smallvec"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",4,null],[14,"smallvec","","Creates a [`SmallVec`] containing the arguments.",null,null]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["snappy"] = {"doc":"Snappy compression bindings.","items":[[3,"InvalidInput","snappy","Attempted to decompress an uncompressed buffer.",null,null],[5,"max_compressed_len","","The maximum compressed length given a size.",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"decompressed_len","","How large the given data will be when decompressed.",null,null],[5,"compress","","Compress a buffer using snappy.",null,null],[5,"compress_into","","Compress a buffer using snappy, writing the result into the given output buffer, growing it if necessary. Otherwise, returns the length of the compressed data.",null,null],[5,"decompress","","Decompress a buffer using snappy. Will return an error if the buffer is not snappy-compressed.",null,null],[5,"decompress_into","","Decompress a buffer using snappy, writing the result into the given output buffer, growing it if necessary. Will error if the input buffer is not snappy-compressed. Otherwise, returns the length of the decompressed data.",null,null],[5,"validate_compressed_buffer","","Validate a compressed buffer. True if valid, false if not.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"InvalidInput"]]};
searchIndex["snappy_sys"] = {"doc":"Snappy compression bindings.","items":[[5,"snappy_compress","snappy_sys","",null,null],[5,"snappy_max_compressed_length","","",null,null],[5,"snappy_uncompress","","",null,null],[5,"snappy_uncompressed_length","","",null,null],[5,"snappy_validate_compressed_buffer","","",null,null],[17,"SNAPPY_OK","","",null,null],[17,"SNAPPY_INVALID_INPUT","","",null,null],[17,"SNAPPY_BUFFER_TOO_SMALL","","",null,null]],"paths":[]};
searchIndex["stable_deref_trait"] = {"doc":"This module defines an unsafe marker trait, StableDeref, for container types that deref to a fixed address which is valid even when the containing type is moved. For example, Box, Vec, Rc, Arc and String implement this trait. Additionally, it defines CloneStableDeref for types like Rc where clones deref to the same address.","items":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null]],"paths":[]};
searchIndex["stats"] = {"doc":"Statistical functions and helpers.","items":[[3,"Corpus","stats","Sorted corpus of data.",null,null],[3,"Histogram","","Discretised histogram.",null,null],[12,"bucket_bounds","","Bounds of each bucket.",0,null],[12,"counts","","Count within each bucket.",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"corpus"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"corpus"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"corpus"}],"output":{"name":"bool"}}],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deref","","",1,null],[11,"percentile","","Get given percentile (approximated).",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"median","","Get the median element, if it exists.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","Whether the corpus is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Number of elements in the corpus.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"histogram","","Create a histogram of this corpus if it at least spans the buckets. Bounds are left closed. Excludes outliers.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["histogram"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"histogram"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"histogram"}],"output":{"name":"bool"}}]],"paths":[[3,"Histogram"],[3,"Corpus"]]};
searchIndex["stop_guard"] = {"doc":"Stop guard mod","items":[[3,"StopGuard","stop_guard","Stop guard that will set a stop flag on drop",null,null],[11,"new","","Create a stop guard",0,{"inputs":[],"output":{"name":"stopguard"}}],[11,"share","","Share stop guard between the threads",0,{"inputs":[{"name":"self"}],"output":{"generics":["atomicbool"],"name":"arc"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"StopGuard"]]};
searchIndex["syn"] = {"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tts","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `crate`.",null,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",10,null],[12,"left","","",10,null],[12,"op","","",10,null],[12,"right","","",10,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",11,null],[12,"func","","",11,null],[12,"paren_token","","",11,null],[12,"args","","",11,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",12,null],[12,"expr","","",12,null],[12,"as_token","","",12,null],[12,"ty","","",12,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[12,"attrs","","",13,null],[12,"base","","",13,null],[12,"dot_token","","",13,null],[12,"member","","",13,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",14,null],[12,"expr","","",14,null],[12,"bracket_token","","",14,null],[12,"index","","",14,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",15,null],[12,"lit","","",15,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",16,null],[12,"paren_token","","",16,null],[12,"expr","","",16,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",17,null],[12,"qself","","",17,null],[12,"path","","",17,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",null,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",18,null],[12,"op","","",18,null],[12,"expr","","",18,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",19,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",20,null],[12,"span","","",20,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",21,null],[12,"lt_token","","",21,null],[12,"lifetimes","","",21,null],[12,"gt_token","","",21,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",22,null],[12,"const_token","","",22,null],[12,"ident","","",22,null],[12,"colon_token","","",22,null],[12,"ty","","",22,null],[12,"eq_token","","",22,null],[12,"default","","",22,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",23,null],[12,"params","","",23,null],[12,"gt_token","","",23,null],[12,"where_clause","","",23,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",24,null],[12,"lifetime","","",24,null],[12,"colon_token","","",24,null],[12,"bounds","","",24,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",25,null],[12,"eq_token","","",25,null],[12,"rhs_ty","","",25,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",26,null],[12,"colon_token","","",26,null],[12,"bounds","","",26,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",27,null],[12,"bounded_ty","","The type being bounded",27,null],[12,"colon_token","","",27,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",27,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",28,null],[12,"modifier","","",28,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",28,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",28,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",29,null],[12,"ident","","",29,null],[12,"colon_token","","",29,null],[12,"bounds","","",29,null],[12,"eq_token","","",29,null],[12,"default","","",29,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",30,null],[12,"predicates","","",30,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[12,"apostrophe","","",31,null],[12,"ident","","",31,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",32,null],[12,"span","","",32,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",33,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",34,null],[12,"bang_token","","",34,null],[12,"delimiter","","",34,null],[12,"tts","","",34,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",35,null],[12,"brace_token","","",35,null],[12,"variants","","",35,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",36,null],[12,"fields","","",36,null],[12,"semi_token","","",36,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",37,null],[12,"fields","","",37,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",38,null],[12,"vis","","Visibility of the struct or enum.",38,null],[12,"ident","","Name of the struct or enum.",38,null],[12,"generics","","Generics required to complete the definition.",38,null],[12,"data","","Data within the struct or enum.",38,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",39,null],[12,"name","","",39,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",40,null],[12,"ty","","",40,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",41,null],[12,"elem","","",41,null],[12,"semi_token","","",41,null],[12,"len","","",41,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",42,null],[12,"abi","","",42,null],[12,"fn_token","","",42,null],[12,"lifetimes","","",42,null],[12,"paren_token","","",42,null],[12,"inputs","","",42,null],[12,"variadic","","",42,null],[12,"output","","",42,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",43,null],[12,"elem","","",43,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",44,null],[12,"bounds","","",44,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",45,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",46,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",47,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",48,null],[12,"elem","","",48,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",49,null],[12,"path","","",49,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",50,null],[12,"const_token","","",50,null],[12,"mutability","","",50,null],[12,"elem","","",50,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",51,null],[12,"lifetime","","",51,null],[12,"mutability","","",51,null],[12,"elem","","",51,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",52,null],[12,"elem","","",52,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",53,null],[12,"bounds","","",53,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",54,null],[12,"elems","","",54,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",55,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",56,null],[12,"1","","",56,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",57,null],[12,"lt_token","","",57,null],[12,"args","","",57,null],[12,"gt_token","","",57,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",58,null],[12,"eq_token","","",58,null],[12,"ty","","",58,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",59,null],[12,"inputs","","`(A, B)`",59,null],[12,"output","","`C`",59,null],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",60,null],[12,"segments","","",60,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",61,null],[12,"arguments","","",61,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",62,null],[12,"ty","","",62,null],[12,"position","","",62,null],[12,"as_token","","",62,null],[12,"gt_token","","",62,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",63,null],[13,"Inner","","",63,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",64,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",64,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",64,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",65,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",65,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",66,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",66,null],[13,"Unit","","Unit struct or unit variant such as `None`.",66,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",67,null],[13,"Crate","","A crate-level visibility: `crate`.",67,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",67,null],[13,"Inherited","","An inherited visibility, which usually means private.",67,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",68,null],[13,"InPlace","","A placement expression: `place <- value`.",68,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",68,null],[13,"Call","","A function call expression: `invoke(a, b)`.",68,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",68,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",68,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",68,null],[13,"Unary","","A unary operation: `!x`, `*x`.",68,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",68,null],[13,"Cast","","A cast expression: `foo as f64`.",68,null],[13,"Type","","A type ascription expression: `foo: f64`.",68,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",68,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",68,null],[13,"While","","A while loop: `while expr { ... }`.",68,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",68,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",68,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",68,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",68,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",68,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",68,null],[13,"Block","","A blocked scope: `{ ... }`.",68,null],[13,"Assign","","An assignment expression: `a = compute()`.",68,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",68,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",68,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",68,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",68,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",68,null],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",68,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",68,null],[13,"Continue","","A `continue`, with an optional label.",68,null],[13,"Return","","A `return`, with an optional value to be returned.",68,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",68,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",68,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",68,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",68,null],[13,"Group","","An expression contained within invisible delimiters.",68,null],[13,"Try","","A try-expression: `expr?`.",68,null],[13,"Catch","","A catch expression: `do catch { ... }`.",68,null],[13,"Yield","","A yield expression: `yield expr`.",68,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",68,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",69,null],[13,"Unnamed","","An unnamed field like `self.0`.",69,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",70,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",70,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",70,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",71,null],[13,"Maybe","","",71,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",72,null],[13,"Lifetime","","",72,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",73,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",73,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",73,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",74,null],[13,"F64","","",74,null],[13,"None","","",74,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",75,null],[13,"I16","","",75,null],[13,"I32","","",75,null],[13,"I64","","",75,null],[13,"I128","","",75,null],[13,"Isize","","",75,null],[13,"U8","","",75,null],[13,"U16","","",75,null],[13,"U32","","",75,null],[13,"U64","","",75,null],[13,"U128","","",75,null],[13,"Usize","","",75,null],[13,"None","","",75,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",76,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",76,null],[13,"Byte","","A byte literal: `b'f'`.",76,null],[13,"Char","","A character literal: `'a'`.",76,null],[13,"Int","","An integer literal: `1` or `1u16`.",76,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",76,null],[13,"Bool","","A boolean literal: `true` or `false`.",76,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",76,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",77,null],[13,"Raw","","A raw string like `r##\"data\"##`.",77,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",78,null],[13,"Brace","","",78,null],[13,"Bracket","","",78,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",79,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",79,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",79,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",80,null],[13,"Sub","","The `-` operator (subtraction)",80,null],[13,"Mul","","The `*` operator (multiplication)",80,null],[13,"Div","","The `/` operator (division)",80,null],[13,"Rem","","The `%` operator (modulus)",80,null],[13,"And","","The `&&` operator (logical and)",80,null],[13,"Or","","The `||` operator (logical or)",80,null],[13,"BitXor","","The `^` operator (bitwise xor)",80,null],[13,"BitAnd","","The `&` operator (bitwise and)",80,null],[13,"BitOr","","The `|` operator (bitwise or)",80,null],[13,"Shl","","The `<<` operator (shift left)",80,null],[13,"Shr","","The `>>` operator (shift right)",80,null],[13,"Eq","","The `==` operator (equality)",80,null],[13,"Lt","","The `<` operator (less than)",80,null],[13,"Le","","The `<=` operator (less than or equal to)",80,null],[13,"Ne","","The `!=` operator (not equal to)",80,null],[13,"Ge","","The `>=` operator (greater than or equal to)",80,null],[13,"Gt","","The `>` operator (greater than)",80,null],[13,"AddEq","","The `+=` operator",80,null],[13,"SubEq","","The `-=` operator",80,null],[13,"MulEq","","The `*=` operator",80,null],[13,"DivEq","","The `/=` operator",80,null],[13,"RemEq","","The `%=` operator",80,null],[13,"BitXorEq","","The `^=` operator",80,null],[13,"BitAndEq","","The `&=` operator",80,null],[13,"BitOrEq","","The `|=` operator",80,null],[13,"ShlEq","","The `<<=` operator",80,null],[13,"ShrEq","","The `>>=` operator",80,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",81,null],[13,"Not","","The `!` operator for logical inversion",81,null],[13,"Neg","","The `-` operator for negation",81,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",82,null],[13,"Wild","","Argument not given a name, matched with `_`.",82,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",83,null],[13,"Type","","A particular type is returned.",83,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",84,null],[13,"Array","","A fixed size array type: `[T; n]`.",84,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",84,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",84,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",84,null],[13,"Never","","The never type: `!`.",84,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",84,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",84,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",84,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",84,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",84,null],[13,"Group","","A type contained within invisible delimiters.",84,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",84,null],[13,"Macro","","A macro in the type position.",84,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",84,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",85,null],[13,"Type","","A type argument.",85,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",85,null],[13,"Const","","A const expression. Must be inside of a block.",85,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",86,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",86,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",86,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",null,{"inputs":[{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",null,{"inputs":[{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",null,{"inputs":[{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",null,null],[3,"Underscore","syn::token","`_`",null,null],[12,"0","","",87,null],[3,"Apostrophe","","`'`",null,null],[12,"0","","",88,null],[3,"Add","","`+`",null,null],[12,"0","","",89,null],[3,"AddEq","","`+=`",null,null],[12,"0","","",90,null],[3,"And","","`&`",null,null],[12,"0","","",91,null],[3,"AndAnd","","`&&`",null,null],[12,"0","","",92,null],[3,"AndEq","","`&=`",null,null],[12,"0","","",93,null],[3,"At","","`@`",null,null],[12,"0","","",94,null],[3,"Bang","","`!`",null,null],[12,"0","","",95,null],[3,"Caret","","`^`",null,null],[12,"0","","",96,null],[3,"CaretEq","","`^=`",null,null],[12,"0","","",97,null],[3,"Colon","","`:`",null,null],[12,"0","","",98,null],[3,"Colon2","","`::`",null,null],[12,"0","","",99,null],[3,"Comma","","`,`",null,null],[12,"0","","",100,null],[3,"Div","","`/`",null,null],[12,"0","","",101,null],[3,"DivEq","","`/=`",null,null],[12,"0","","",102,null],[3,"Dollar","","`$`",null,null],[12,"0","","",103,null],[3,"Dot","","`.`",null,null],[12,"0","","",104,null],[3,"Dot2","","`..`",null,null],[12,"0","","",105,null],[3,"Dot3","","`...`",null,null],[12,"0","","",106,null],[3,"DotDotEq","","`..=`",null,null],[12,"0","","",107,null],[3,"Eq","","`=`",null,null],[12,"0","","",108,null],[3,"EqEq","","`==`",null,null],[12,"0","","",109,null],[3,"Ge","","`>=`",null,null],[12,"0","","",110,null],[3,"Gt","","`>`",null,null],[12,"0","","",111,null],[3,"Le","","`<=`",null,null],[12,"0","","",112,null],[3,"Lt","","`<`",null,null],[12,"0","","",113,null],[3,"MulEq","","`*=`",null,null],[12,"0","","",114,null],[3,"Ne","","`!=`",null,null],[12,"0","","",115,null],[3,"Or","","`|`",null,null],[12,"0","","",116,null],[3,"OrEq","","`|=`",null,null],[12,"0","","",117,null],[3,"OrOr","","`||`",null,null],[12,"0","","",118,null],[3,"Pound","","`#`",null,null],[12,"0","","",119,null],[3,"Question","","`?`",null,null],[12,"0","","",120,null],[3,"RArrow","","`->`",null,null],[12,"0","","",121,null],[3,"LArrow","","`<-`",null,null],[12,"0","","",122,null],[3,"Rem","","`%`",null,null],[12,"0","","",123,null],[3,"RemEq","","`%=`",null,null],[12,"0","","",124,null],[3,"FatArrow","","`=>`",null,null],[12,"0","","",125,null],[3,"Semi","","`;`",null,null],[12,"0","","",126,null],[3,"Shl","","`<<`",null,null],[12,"0","","",127,null],[3,"ShlEq","","`<<=`",null,null],[12,"0","","",128,null],[3,"Shr","","`>>`",null,null],[12,"0","","",129,null],[3,"ShrEq","","`>>=`",null,null],[12,"0","","",130,null],[3,"Star","","`*`",null,null],[12,"0","","",131,null],[3,"Sub","","`-`",null,null],[12,"0","","",132,null],[3,"SubEq","","`-=`",null,null],[12,"0","","",133,null],[3,"Brace","","`{...}`",null,null],[12,"0","","",134,null],[3,"Bracket","","`[...]`",null,null],[12,"0","","",135,null],[3,"Paren","","`(...)`",null,null],[12,"0","","",136,null],[3,"Group","","None-delimited group",null,null],[12,"0","","",137,null],[3,"As","","`as`",null,null],[12,"0","","",138,null],[3,"Auto","","`auto`",null,null],[12,"0","","",139,null],[3,"Box","","`box`",null,null],[12,"0","","",140,null],[3,"Break","","`break`",null,null],[12,"0","","",141,null],[3,"CapSelf","","`Self`",null,null],[12,"0","","",142,null],[3,"Catch","","`catch`",null,null],[12,"0","","",143,null],[3,"Const","","`const`",null,null],[12,"0","","",144,null],[3,"Continue","","`continue`",null,null],[12,"0","","",145,null],[3,"Crate","","`crate`",null,null],[12,"0","","",146,null],[3,"Default","","`default`",null,null],[12,"0","","",147,null],[3,"Do","","`do`",null,null],[12,"0","","",148,null],[3,"Dyn","","`dyn`",null,null],[12,"0","","",149,null],[3,"Else","","`else`",null,null],[12,"0","","",150,null],[3,"Enum","","`enum`",null,null],[12,"0","","",151,null],[3,"Extern","","`extern`",null,null],[12,"0","","",152,null],[3,"Fn","","`fn`",null,null],[12,"0","","",153,null],[3,"For","","`for`",null,null],[12,"0","","",154,null],[3,"If","","`if`",null,null],[12,"0","","",155,null],[3,"Impl","","`impl`",null,null],[12,"0","","",156,null],[3,"In","","`in`",null,null],[12,"0","","",157,null],[3,"Let","","`let`",null,null],[12,"0","","",158,null],[3,"Loop","","`loop`",null,null],[12,"0","","",159,null],[3,"Macro","","`macro`",null,null],[12,"0","","",160,null],[3,"Match","","`match`",null,null],[12,"0","","",161,null],[3,"Mod","","`mod`",null,null],[12,"0","","",162,null],[3,"Move","","`move`",null,null],[12,"0","","",163,null],[3,"Mut","","`mut`",null,null],[12,"0","","",164,null],[3,"Pub","","`pub`",null,null],[12,"0","","",165,null],[3,"Ref","","`ref`",null,null],[12,"0","","",166,null],[3,"Return","","`return`",null,null],[12,"0","","",167,null],[3,"Self_","","`self`",null,null],[12,"0","","",168,null],[3,"Static","","`static`",null,null],[12,"0","","",169,null],[3,"Struct","","`struct`",null,null],[12,"0","","",170,null],[3,"Super","","`super`",null,null],[12,"0","","",171,null],[3,"Trait","","`trait`",null,null],[12,"0","","",172,null],[3,"Type","","`type`",null,null],[12,"0","","",173,null],[3,"Union","","`union`",null,null],[12,"0","","",174,null],[3,"Unsafe","","`unsafe`",null,null],[12,"0","","",175,null],[3,"Use","","`use`",null,null],[12,"0","","",176,null],[3,"Where","","`where`",null,null],[12,"0","","",177,null],[3,"While","","`while`",null,null],[12,"0","","",178,null],[3,"Yield","","`yield`",null,null],[12,"0","","",179,null],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"underscore"}}],[11,"new","","",87,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",87,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",87,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"to_tokens","","",87,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",87,{"inputs":[{"name":"cursor"}],"output":{"generics":["underscore"],"name":"presult"}}],[11,"description","","",87,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"apostrophe"}}],[11,"new","","",88,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",88,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",88,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"to_tokens","","",88,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",88,{"inputs":[{"name":"cursor"}],"output":{"generics":["apostrophe"],"name":"presult"}}],[11,"description","","",88,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"add"}}],[11,"new","","",89,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",89,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",89,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"addeq"}}],[11,"new","","",90,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",90,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"and"}}],[11,"new","","",91,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",91,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"andand"}}],[11,"new","","",92,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",92,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"andeq"}}],[11,"new","","",93,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",93,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",93,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"at"}}],[11,"new","","",94,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",94,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",94,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bang"}}],[11,"new","","",95,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",95,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"caret"}}],[11,"new","","",96,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",96,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",96,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"careteq"}}],[11,"new","","",97,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",97,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",97,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"colon"}}],[11,"new","","",98,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",98,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"colon2"}}],[11,"new","","",99,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",99,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"comma"}}],[11,"new","","",100,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",100,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",100,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"div"}}],[11,"new","","",101,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",101,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",101,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"diveq"}}],[11,"new","","",102,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",102,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"dollar"}}],[11,"new","","",103,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",103,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"dot"}}],[11,"new","","",104,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",104,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"dot2"}}],[11,"new","","",105,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",105,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",105,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"dot3"}}],[11,"new","","",106,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",106,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",106,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"dotdoteq"}}],[11,"new","","",107,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",107,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",107,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"eq"}}],[11,"new","","",108,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",108,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",108,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"eqeq"}}],[11,"new","","",109,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",109,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",109,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"ge"}}],[11,"new","","",110,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",110,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",110,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"gt"}}],[11,"new","","",111,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",111,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",111,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"le"}}],[11,"new","","",112,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",112,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",112,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"lt"}}],[11,"new","","",113,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",113,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",113,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"muleq"}}],[11,"new","","",114,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",114,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",114,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"ne"}}],[11,"new","","",115,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"or"}}],[11,"new","","",116,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",116,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",116,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"oreq"}}],[11,"new","","",117,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",117,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",117,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"oror"}}],[11,"new","","",118,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",118,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",118,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"pound"}}],[11,"new","","",119,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",119,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",119,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"question"}}],[11,"new","","",120,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",120,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",120,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"rarrow"}}],[11,"new","","",121,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",121,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",121,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"larrow"}}],[11,"new","","",122,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",122,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",122,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"rem"}}],[11,"new","","",123,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",123,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",123,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"remeq"}}],[11,"new","","",124,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",124,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",124,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"fatarrow"}}],[11,"new","","",125,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",125,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",125,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"semi"}}],[11,"new","","",126,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",126,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",126,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"shl"}}],[11,"new","","",127,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",127,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",127,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"shleq"}}],[11,"new","","",128,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",128,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",128,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"shr"}}],[11,"new","","",129,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",129,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",129,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"shreq"}}],[11,"new","","",130,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",130,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",130,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"new","","",131,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",131,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",131,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"sub"}}],[11,"new","","",132,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",132,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",132,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"subeq"}}],[11,"new","","",133,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",133,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",133,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"to_tokens","","",89,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",89,{"inputs":[{"name":"cursor"}],"output":{"generics":["add"],"name":"presult"}}],[11,"description","","",89,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",90,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",90,{"inputs":[{"name":"cursor"}],"output":{"generics":["addeq"],"name":"presult"}}],[11,"description","","",90,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",91,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",91,{"inputs":[{"name":"cursor"}],"output":{"generics":["and"],"name":"presult"}}],[11,"description","","",91,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",92,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",92,{"inputs":[{"name":"cursor"}],"output":{"generics":["andand"],"name":"presult"}}],[11,"description","","",92,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",93,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",93,{"inputs":[{"name":"cursor"}],"output":{"generics":["andeq"],"name":"presult"}}],[11,"description","","",93,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",94,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",94,{"inputs":[{"name":"cursor"}],"output":{"generics":["at"],"name":"presult"}}],[11,"description","","",94,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",95,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",95,{"inputs":[{"name":"cursor"}],"output":{"generics":["bang"],"name":"presult"}}],[11,"description","","",95,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",96,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",96,{"inputs":[{"name":"cursor"}],"output":{"generics":["caret"],"name":"presult"}}],[11,"description","","",96,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",97,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",97,{"inputs":[{"name":"cursor"}],"output":{"generics":["careteq"],"name":"presult"}}],[11,"description","","",97,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",98,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",98,{"inputs":[{"name":"cursor"}],"output":{"generics":["colon"],"name":"presult"}}],[11,"description","","",98,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",99,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",99,{"inputs":[{"name":"cursor"}],"output":{"generics":["colon2"],"name":"presult"}}],[11,"description","","",99,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",100,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",100,{"inputs":[{"name":"cursor"}],"output":{"generics":["comma"],"name":"presult"}}],[11,"description","","",100,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",101,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",101,{"inputs":[{"name":"cursor"}],"output":{"generics":["div"],"name":"presult"}}],[11,"description","","",101,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",102,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",102,{"inputs":[{"name":"cursor"}],"output":{"generics":["diveq"],"name":"presult"}}],[11,"description","","",102,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",103,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",103,{"inputs":[{"name":"cursor"}],"output":{"generics":["dollar"],"name":"presult"}}],[11,"description","","",103,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",104,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",104,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot"],"name":"presult"}}],[11,"description","","",104,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",105,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",105,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot2"],"name":"presult"}}],[11,"description","","",105,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",106,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",106,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot3"],"name":"presult"}}],[11,"description","","",106,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",107,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",107,{"inputs":[{"name":"cursor"}],"output":{"generics":["dotdoteq"],"name":"presult"}}],[11,"description","","",107,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",108,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",108,{"inputs":[{"name":"cursor"}],"output":{"generics":["eq"],"name":"presult"}}],[11,"description","","",108,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",109,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",109,{"inputs":[{"name":"cursor"}],"output":{"generics":["eqeq"],"name":"presult"}}],[11,"description","","",109,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",110,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",110,{"inputs":[{"name":"cursor"}],"output":{"generics":["ge"],"name":"presult"}}],[11,"description","","",110,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",111,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",111,{"inputs":[{"name":"cursor"}],"output":{"generics":["gt"],"name":"presult"}}],[11,"description","","",111,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",112,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",112,{"inputs":[{"name":"cursor"}],"output":{"generics":["le"],"name":"presult"}}],[11,"description","","",112,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",113,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",113,{"inputs":[{"name":"cursor"}],"output":{"generics":["lt"],"name":"presult"}}],[11,"description","","",113,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",114,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",114,{"inputs":[{"name":"cursor"}],"output":{"generics":["muleq"],"name":"presult"}}],[11,"description","","",114,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",115,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",115,{"inputs":[{"name":"cursor"}],"output":{"generics":["ne"],"name":"presult"}}],[11,"description","","",115,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",116,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",116,{"inputs":[{"name":"cursor"}],"output":{"generics":["or"],"name":"presult"}}],[11,"description","","",116,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",117,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",117,{"inputs":[{"name":"cursor"}],"output":{"generics":["oreq"],"name":"presult"}}],[11,"description","","",117,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",118,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",118,{"inputs":[{"name":"cursor"}],"output":{"generics":["oror"],"name":"presult"}}],[11,"description","","",118,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",119,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",119,{"inputs":[{"name":"cursor"}],"output":{"generics":["pound"],"name":"presult"}}],[11,"description","","",119,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",120,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",120,{"inputs":[{"name":"cursor"}],"output":{"generics":["question"],"name":"presult"}}],[11,"description","","",120,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",121,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",121,{"inputs":[{"name":"cursor"}],"output":{"generics":["rarrow"],"name":"presult"}}],[11,"description","","",121,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",122,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",122,{"inputs":[{"name":"cursor"}],"output":{"generics":["larrow"],"name":"presult"}}],[11,"description","","",122,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",123,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",123,{"inputs":[{"name":"cursor"}],"output":{"generics":["rem"],"name":"presult"}}],[11,"description","","",123,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",124,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",124,{"inputs":[{"name":"cursor"}],"output":{"generics":["remeq"],"name":"presult"}}],[11,"description","","",124,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",125,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",125,{"inputs":[{"name":"cursor"}],"output":{"generics":["fatarrow"],"name":"presult"}}],[11,"description","","",125,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",126,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",126,{"inputs":[{"name":"cursor"}],"output":{"generics":["semi"],"name":"presult"}}],[11,"description","","",126,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",127,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",127,{"inputs":[{"name":"cursor"}],"output":{"generics":["shl"],"name":"presult"}}],[11,"description","","",127,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",128,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",128,{"inputs":[{"name":"cursor"}],"output":{"generics":["shleq"],"name":"presult"}}],[11,"description","","",128,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",129,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",129,{"inputs":[{"name":"cursor"}],"output":{"generics":["shr"],"name":"presult"}}],[11,"description","","",129,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",130,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",130,{"inputs":[{"name":"cursor"}],"output":{"generics":["shreq"],"name":"presult"}}],[11,"description","","",130,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",131,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",131,{"inputs":[{"name":"cursor"}],"output":{"generics":["star"],"name":"presult"}}],[11,"description","","",131,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",132,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",132,{"inputs":[{"name":"cursor"}],"output":{"generics":["sub"],"name":"presult"}}],[11,"description","","",132,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",133,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",133,{"inputs":[{"name":"cursor"}],"output":{"generics":["subeq"],"name":"presult"}}],[11,"description","","",133,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"brace"}}],[11,"default","","",134,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",134,{"inputs":[{"name":"self"},{"name":"tokenstream"},{"name":"f"}],"output":null}],[11,"parse","","",134,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",134,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"bracket"}}],[11,"default","","",135,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",135,{"inputs":[{"name":"self"},{"name":"tokenstream"},{"name":"f"}],"output":null}],[11,"parse","","",135,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",135,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"paren"}}],[11,"default","","",136,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",136,{"inputs":[{"name":"self"},{"name":"tokenstream"},{"name":"f"}],"output":null}],[11,"parse","","",136,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",136,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"default","","",137,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",137,{"inputs":[{"name":"self"},{"name":"tokenstream"},{"name":"f"}],"output":null}],[11,"parse","","",137,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",137,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"as"}}],[11,"default","","",138,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",138,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",138,{"inputs":[{"name":"cursor"}],"output":{"generics":["as"],"name":"presult"}}],[11,"description","","",138,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",138,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"auto"}}],[11,"default","","",139,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",139,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",139,{"inputs":[{"name":"cursor"}],"output":{"generics":["auto"],"name":"presult"}}],[11,"description","","",139,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",139,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"default","","",140,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",140,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",140,{"inputs":[{"name":"cursor"}],"output":{"generics":["box"],"name":"presult"}}],[11,"description","","",140,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",140,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"break"}}],[11,"default","","",141,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",141,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",141,{"inputs":[{"name":"cursor"}],"output":{"generics":["break"],"name":"presult"}}],[11,"description","","",141,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",141,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"capself"}}],[11,"default","","",142,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",142,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",142,{"inputs":[{"name":"cursor"}],"output":{"generics":["capself"],"name":"presult"}}],[11,"description","","",142,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",142,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"catch"}}],[11,"default","","",143,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",143,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",143,{"inputs":[{"name":"cursor"}],"output":{"generics":["catch"],"name":"presult"}}],[11,"description","","",143,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",143,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"const"}}],[11,"default","","",144,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",144,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",144,{"inputs":[{"name":"cursor"}],"output":{"generics":["const"],"name":"presult"}}],[11,"description","","",144,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",144,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"continue"}}],[11,"default","","",145,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",145,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",145,{"inputs":[{"name":"cursor"}],"output":{"generics":["continue"],"name":"presult"}}],[11,"description","","",145,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",145,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"default","","",146,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",146,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",146,{"inputs":[{"name":"cursor"}],"output":{"generics":["crate"],"name":"presult"}}],[11,"description","","",146,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",146,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"default","","",147,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",147,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",147,{"inputs":[{"name":"cursor"}],"output":{"generics":["default"],"name":"presult"}}],[11,"description","","",147,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",147,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"do"}}],[11,"default","","",148,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",148,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",148,{"inputs":[{"name":"cursor"}],"output":{"generics":["do"],"name":"presult"}}],[11,"description","","",148,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",148,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"dyn"}}],[11,"default","","",149,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",149,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",149,{"inputs":[{"name":"cursor"}],"output":{"generics":["dyn"],"name":"presult"}}],[11,"description","","",149,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",149,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"else"}}],[11,"default","","",150,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",150,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",150,{"inputs":[{"name":"cursor"}],"output":{"generics":["else"],"name":"presult"}}],[11,"description","","",150,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",150,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"enum"}}],[11,"default","","",151,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",151,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",151,{"inputs":[{"name":"cursor"}],"output":{"generics":["enum"],"name":"presult"}}],[11,"description","","",151,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",151,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"extern"}}],[11,"default","","",152,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",152,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",152,{"inputs":[{"name":"cursor"}],"output":{"generics":["extern"],"name":"presult"}}],[11,"description","","",152,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",152,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"fn"}}],[11,"default","","",153,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",153,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",153,{"inputs":[{"name":"cursor"}],"output":{"generics":["fn"],"name":"presult"}}],[11,"description","","",153,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",153,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"for"}}],[11,"default","","",154,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",154,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",154,{"inputs":[{"name":"cursor"}],"output":{"generics":["for"],"name":"presult"}}],[11,"description","","",154,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",154,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"if"}}],[11,"default","","",155,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",155,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",155,{"inputs":[{"name":"cursor"}],"output":{"generics":["if"],"name":"presult"}}],[11,"description","","",155,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",155,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"impl"}}],[11,"default","","",156,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",156,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",156,{"inputs":[{"name":"cursor"}],"output":{"generics":["impl"],"name":"presult"}}],[11,"description","","",156,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",156,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"in"}}],[11,"default","","",157,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",157,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",157,{"inputs":[{"name":"cursor"}],"output":{"generics":["in"],"name":"presult"}}],[11,"description","","",157,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",157,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"let"}}],[11,"default","","",158,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",158,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",158,{"inputs":[{"name":"cursor"}],"output":{"generics":["let"],"name":"presult"}}],[11,"description","","",158,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",158,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"loop"}}],[11,"default","","",159,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",159,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",159,{"inputs":[{"name":"cursor"}],"output":{"generics":["loop"],"name":"presult"}}],[11,"description","","",159,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",159,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"default","","",160,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",160,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",160,{"inputs":[{"name":"cursor"}],"output":{"generics":["macro"],"name":"presult"}}],[11,"description","","",160,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",160,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"default","","",161,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",161,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",161,{"inputs":[{"name":"cursor"}],"output":{"generics":["match"],"name":"presult"}}],[11,"description","","",161,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",161,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"default","","",162,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",162,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",162,{"inputs":[{"name":"cursor"}],"output":{"generics":["mod"],"name":"presult"}}],[11,"description","","",162,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",162,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"move"}}],[11,"default","","",163,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",163,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",163,{"inputs":[{"name":"cursor"}],"output":{"generics":["move"],"name":"presult"}}],[11,"description","","",163,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",163,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"mut"}}],[11,"default","","",164,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",164,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",164,{"inputs":[{"name":"cursor"}],"output":{"generics":["mut"],"name":"presult"}}],[11,"description","","",164,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",164,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"pub"}}],[11,"default","","",165,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",165,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",165,{"inputs":[{"name":"cursor"}],"output":{"generics":["pub"],"name":"presult"}}],[11,"description","","",165,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",165,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"default","","",166,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",166,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",166,{"inputs":[{"name":"cursor"}],"output":{"generics":["ref"],"name":"presult"}}],[11,"description","","",166,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",166,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"return"}}],[11,"default","","",167,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",167,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",167,{"inputs":[{"name":"cursor"}],"output":{"generics":["return"],"name":"presult"}}],[11,"description","","",167,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",167,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"self_"}}],[11,"default","","",168,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",168,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",168,{"inputs":[{"name":"cursor"}],"output":{"generics":["self_"],"name":"presult"}}],[11,"description","","",168,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",168,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"static"}}],[11,"default","","",169,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",169,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",169,{"inputs":[{"name":"cursor"}],"output":{"generics":["static"],"name":"presult"}}],[11,"description","","",169,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",169,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"default","","",170,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",170,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",170,{"inputs":[{"name":"cursor"}],"output":{"generics":["struct"],"name":"presult"}}],[11,"description","","",170,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",170,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"super"}}],[11,"default","","",171,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",171,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",171,{"inputs":[{"name":"cursor"}],"output":{"generics":["super"],"name":"presult"}}],[11,"description","","",171,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",171,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"trait"}}],[11,"default","","",172,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",172,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",172,{"inputs":[{"name":"cursor"}],"output":{"generics":["trait"],"name":"presult"}}],[11,"description","","",172,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",172,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"default","","",173,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",173,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",173,{"inputs":[{"name":"cursor"}],"output":{"generics":["type"],"name":"presult"}}],[11,"description","","",173,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",173,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"default","","",174,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",174,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",174,{"inputs":[{"name":"cursor"}],"output":{"generics":["union"],"name":"presult"}}],[11,"description","","",174,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",174,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"unsafe"}}],[11,"default","","",175,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",175,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",175,{"inputs":[{"name":"cursor"}],"output":{"generics":["unsafe"],"name":"presult"}}],[11,"description","","",175,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",175,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"use"}}],[11,"default","","",176,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",176,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",176,{"inputs":[{"name":"cursor"}],"output":{"generics":["use"],"name":"presult"}}],[11,"description","","",176,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",176,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"where"}}],[11,"default","","",177,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",177,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",177,{"inputs":[{"name":"cursor"}],"output":{"generics":["where"],"name":"presult"}}],[11,"description","","",177,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",177,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"while"}}],[11,"default","","",178,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",178,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",178,{"inputs":[{"name":"cursor"}],"output":{"generics":["while"],"name":"presult"}}],[11,"description","","",178,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",178,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"yield"}}],[11,"default","","",179,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",179,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",179,{"inputs":[{"name":"cursor"}],"output":{"generics":["yield"],"name":"presult"}}],[11,"description","","",179,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",179,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"from","syn","",180,{"inputs":[{"name":"self_"}],"output":{"name":"ident"}}],[11,"from","","",180,{"inputs":[{"name":"capself"}],"output":{"name":"ident"}}],[11,"from","","",180,{"inputs":[{"name":"super"}],"output":{"name":"ident"}}],[11,"from","","",180,{"inputs":[{"name":"crate"}],"output":{"name":"ident"}}],[11,"parse_inner","","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_outer","","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,{"inputs":[{"name":"self"}],"output":{"generics":["meta"],"name":"option"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"meta"}}],[11,"from","","",64,{"inputs":[{"name":"ident"}],"output":{"name":"meta"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"metalist"}}],[11,"from","","",64,{"inputs":[{"name":"metalist"}],"output":{"name":"meta"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"metanamevalue"}}],[11,"from","","",64,{"inputs":[{"name":"metanamevalue"}],"output":{"name":"meta"}}],[11,"to_tokens","","",64,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"name","","Returns the identifier that begins this structured meta item.",64,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"nestedmeta"}}],[11,"from","","",65,{"inputs":[{"name":"meta"}],"output":{"name":"nestedmeta"}}],[11,"from","","",65,{"inputs":[{"name":"lit"}],"output":{"name":"nestedmeta"}}],[11,"to_tokens","","",65,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",6,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",6,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",4,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",4,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",5,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",5,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_named","","",3,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_unnamed","","",3,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",67,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",67,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"fields"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fieldsnamed"}}],[11,"from","","",66,{"inputs":[{"name":"fieldsnamed"}],"output":{"name":"fields"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fieldsunnamed"}}],[11,"from","","",66,{"inputs":[{"name":"fieldsunnamed"}],"output":{"name":"fields"}}],[11,"to_tokens","","",66,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,{"inputs":[{"name":"self"}],"output":{"generics":["field"],"name":"iter"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vispublic"}}],[11,"from","","",67,{"inputs":[{"name":"vispublic"}],"output":{"name":"visibility"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"viscrate"}}],[11,"from","","",67,{"inputs":[{"name":"viscrate"}],"output":{"name":"visibility"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"visrestricted"}}],[11,"from","","",67,{"inputs":[{"name":"visrestricted"}],"output":{"name":"visibility"}}],[11,"to_tokens","","",67,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",68,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",68,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",15,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",15,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",16,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",16,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",17,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",17,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",69,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",69,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",20,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",20,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",69,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",14,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"exprbox"}}],[11,"from","","",68,{"inputs":[{"name":"exprbox"}],"output":{"name":"expr"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"exprinplace"}}],[11,"from","","",68,{"inputs":[{"name":"exprinplace"}],"output":{"name":"expr"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"exprarray"}}],[11,"from","","",68,{"inputs":[{"name":"exprarray"}],"output":{"name":"expr"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"exprcall"}}],[11,"from","","",68,{"inputs":[{"name":"exprcall"}],"output":{"name":"expr"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"exprmethodcall"}}],[11,"from","","",68,{"inputs":[{"name":"exprmethodcall"}],"output":{"name":"expr"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"exprtuple"}}],[11,"from","","",68,{"inputs":[{"name":"exprtuple"}],"output":{"name":"expr"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"exprbinary"}}],[11,"from","","",68,{"inputs":[{"name":"exprbinary"}],"output":{"name":"expr"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"exprunary"}}],[11,"from","","",68,{"inputs":[{"name":"exprunary"}],"output":{"name":"expr"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"exprlit"}}],[11,"from","","",68,{"inputs":[{"name":"exprlit"}],"output":{"name":"expr"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exprcast"}}],[11,"from","","",68,{"inputs":[{"name":"exprcast"}],"output":{"name":"expr"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"exprtype"}}],[11,"from","","",68,{"inputs":[{"name":"exprtype"}],"output":{"name":"expr"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"exprif"}}],[11,"from","","",68,{"inputs":[{"name":"exprif"}],"output":{"name":"expr"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"expriflet"}}],[11,"from","","",68,{"inputs":[{"name":"expriflet"}],"output":{"name":"expr"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"exprwhile"}}],[11,"from","","",68,{"inputs":[{"name":"exprwhile"}],"output":{"name":"expr"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"exprwhilelet"}}],[11,"from","","",68,{"inputs":[{"name":"exprwhilelet"}],"output":{"name":"expr"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"exprforloop"}}],[11,"from","","",68,{"inputs":[{"name":"exprforloop"}],"output":{"name":"expr"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"exprloop"}}],[11,"from","","",68,{"inputs":[{"name":"exprloop"}],"output":{"name":"expr"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"exprmatch"}}],[11,"from","","",68,{"inputs":[{"name":"exprmatch"}],"output":{"name":"expr"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"exprclosure"}}],[11,"from","","",68,{"inputs":[{"name":"exprclosure"}],"output":{"name":"expr"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"exprunsafe"}}],[11,"from","","",68,{"inputs":[{"name":"exprunsafe"}],"output":{"name":"expr"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"exprblock"}}],[11,"from","","",68,{"inputs":[{"name":"exprblock"}],"output":{"name":"expr"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"exprassign"}}],[11,"from","","",68,{"inputs":[{"name":"exprassign"}],"output":{"name":"expr"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"exprassignop"}}],[11,"from","","",68,{"inputs":[{"name":"exprassignop"}],"output":{"name":"expr"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exprfield"}}],[11,"from","","",68,{"inputs":[{"name":"exprfield"}],"output":{"name":"expr"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"exprindex"}}],[11,"from","","",68,{"inputs":[{"name":"exprindex"}],"output":{"name":"expr"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"exprrange"}}],[11,"from","","",68,{"inputs":[{"name":"exprrange"}],"output":{"name":"expr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"exprpath"}}],[11,"from","","",68,{"inputs":[{"name":"exprpath"}],"output":{"name":"expr"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"exprreference"}}],[11,"from","","",68,{"inputs":[{"name":"exprreference"}],"output":{"name":"expr"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"exprbreak"}}],[11,"from","","",68,{"inputs":[{"name":"exprbreak"}],"output":{"name":"expr"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"exprcontinue"}}],[11,"from","","",68,{"inputs":[{"name":"exprcontinue"}],"output":{"name":"expr"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"exprreturn"}}],[11,"from","","",68,{"inputs":[{"name":"exprreturn"}],"output":{"name":"expr"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"exprmacro"}}],[11,"from","","",68,{"inputs":[{"name":"exprmacro"}],"output":{"name":"expr"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"exprstruct"}}],[11,"from","","",68,{"inputs":[{"name":"exprstruct"}],"output":{"name":"expr"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"exprrepeat"}}],[11,"from","","",68,{"inputs":[{"name":"exprrepeat"}],"output":{"name":"expr"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"exprparen"}}],[11,"from","","",68,{"inputs":[{"name":"exprparen"}],"output":{"name":"expr"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"exprgroup"}}],[11,"from","","",68,{"inputs":[{"name":"exprgroup"}],"output":{"name":"expr"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"exprtry"}}],[11,"from","","",68,{"inputs":[{"name":"exprtry"}],"output":{"name":"expr"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"exprcatch"}}],[11,"from","","",68,{"inputs":[{"name":"exprcatch"}],"output":{"name":"expr"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"expryield"}}],[11,"from","","",68,{"inputs":[{"name":"expryield"}],"output":{"name":"expr"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"exprverbatim"}}],[11,"from","","",68,{"inputs":[{"name":"exprverbatim"}],"output":{"name":"expr"}}],[11,"to_tokens","","",68,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"member"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"from","","",20,{"inputs":[{"name":"usize"}],"output":{"name":"index"}}],[11,"parse","","",23,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",23,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",70,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",70,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",24,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",24,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",21,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",21,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",29,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",29,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",72,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",72,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",28,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",28,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",71,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",71,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",22,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",22,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",30,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",30,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",73,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",73,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",211,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",212,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",213,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",21,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",28,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",71,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",26,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"generics"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"genericparam"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"typeparam"}}],[11,"from","","",70,{"inputs":[{"name":"typeparam"}],"output":{"name":"genericparam"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"from","","",70,{"inputs":[{"name":"lifetimedef"}],"output":{"name":"genericparam"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"constparam"}}],[11,"from","","",70,{"inputs":[{"name":"constparam"}],"output":{"name":"genericparam"}}],[11,"to_tokens","","",70,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",23,{"inputs":[{"name":"self"}],"output":{"name":"typeparams"}}],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",23,{"inputs":[{"name":"self"}],"output":{"name":"typeparamsmut"}}],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",23,{"inputs":[{"name":"self"}],"output":{"name":"lifetimes"}}],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",23,{"inputs":[{"name":"self"}],"output":{"name":"lifetimesmut"}}],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",23,{"inputs":[{"name":"self"}],"output":{"name":"constparams"}}],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",23,{"inputs":[{"name":"self"}],"output":{"name":"constparamsmut"}}],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",23,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"implgenerics"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"typegenerics"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",23,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",212,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"boundlifetimes"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"boundlifetimes"}}],[11,"new","","",24,{"inputs":[{"name":"lifetime"}],"output":{"name":"self"}}],[11,"from","","",29,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"typeparambound"}}],[11,"from","","",72,{"inputs":[{"name":"traitbound"}],"output":{"name":"typeparambound"}}],[11,"from","","",72,{"inputs":[{"name":"lifetime"}],"output":{"name":"typeparambound"}}],[11,"to_tokens","","",72,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"traitbound"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"predicatetype"}}],[11,"from","","",73,{"inputs":[{"name":"predicatetype"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"predicatelifetime"}}],[11,"from","","",73,{"inputs":[{"name":"predicatelifetime"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"predicateeq"}}],[11,"from","","",73,{"inputs":[{"name":"predicateeq"}],"output":{"name":"wherepredicate"}}],[11,"to_tokens","","",73,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"parse","","",31,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",31,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"new","","",31,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",31,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"hash","","",31,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"parse","","",76,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",76,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",214,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",214,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",215,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",215,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",216,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",216,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",217,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",217,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",218,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",218,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",219,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",219,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",32,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",32,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",214,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",215,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",216,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",217,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",218,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",219,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",76,{"inputs":[{"name":"literal"}],"output":{"name":"self"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"litstr"}}],[11,"from","","",76,{"inputs":[{"name":"litstr"}],"output":{"name":"lit"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"litbytestr"}}],[11,"from","","",76,{"inputs":[{"name":"litbytestr"}],"output":{"name":"lit"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"litbyte"}}],[11,"from","","",76,{"inputs":[{"name":"litbyte"}],"output":{"name":"lit"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"litchar"}}],[11,"from","","",76,{"inputs":[{"name":"litchar"}],"output":{"name":"lit"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"litint"}}],[11,"from","","",76,{"inputs":[{"name":"litint"}],"output":{"name":"lit"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"litfloat"}}],[11,"from","","",76,{"inputs":[{"name":"litfloat"}],"output":{"name":"lit"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"litbool"}}],[11,"from","","",76,{"inputs":[{"name":"litbool"}],"output":{"name":"lit"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"litverbatim"}}],[11,"from","","",76,{"inputs":[{"name":"litverbatim"}],"output":{"name":"lit"}}],[11,"to_tokens","","",76,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"new","","",214,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",214,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","Parse a syntax tree node from the content of this string literal.",214,{"inputs":[{"name":"self"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"span","","",214,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",214,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",215,null],[11,"value","","",215,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"span","","",215,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",215,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",216,{"inputs":[{"name":"u8"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",216,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"span","","",216,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",216,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",217,{"inputs":[{"name":"char"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",217,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"span","","",217,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",217,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",218,{"inputs":[{"name":"u64"},{"name":"intsuffix"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",218,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"suffix","","",218,{"inputs":[{"name":"self"}],"output":{"name":"intsuffix"}}],[11,"span","","",218,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",218,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"new","","",219,{"inputs":[{"name":"f64"},{"name":"floatsuffix"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",219,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"suffix","","",219,{"inputs":[{"name":"self"}],"output":{"name":"floatsuffix"}}],[11,"span","","",219,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",219,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"span","","",33,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","",33,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"intsuffix"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"floatsuffix"}}],[11,"parse","","",34,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",34,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",34,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"macrodelimiter"}}],[11,"parse","","",38,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",38,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",38,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"datastruct"}}],[11,"from","","",79,{"inputs":[{"name":"datastruct"}],"output":{"name":"data"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dataenum"}}],[11,"from","","",79,{"inputs":[{"name":"dataenum"}],"output":{"name":"data"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"dataunion"}}],[11,"from","","",79,{"inputs":[{"name":"dataunion"}],"output":{"name":"data"}}],[11,"parse_binop","","",80,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",81,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",81,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",80,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",81,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"parse","","",84,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",84,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",84,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",52,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",52,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",41,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",41,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",50,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",50,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",51,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",51,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",42,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",42,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",47,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",47,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",45,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",45,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",54,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",54,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",46,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",46,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",49,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",49,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",83,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",83,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",83,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",53,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",53,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",53,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",44,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",44,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",43,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",43,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",48,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",48,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",40,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",40,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",82,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",82,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",39,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",39,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",49,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",45,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",83,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",40,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",82,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"typeslice"}}],[11,"from","","",84,{"inputs":[{"name":"typeslice"}],"output":{"name":"type"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"typearray"}}],[11,"from","","",84,{"inputs":[{"name":"typearray"}],"output":{"name":"type"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"typeptr"}}],[11,"from","","",84,{"inputs":[{"name":"typeptr"}],"output":{"name":"type"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"typereference"}}],[11,"from","","",84,{"inputs":[{"name":"typereference"}],"output":{"name":"type"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"typebarefn"}}],[11,"from","","",84,{"inputs":[{"name":"typebarefn"}],"output":{"name":"type"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"typenever"}}],[11,"from","","",84,{"inputs":[{"name":"typenever"}],"output":{"name":"type"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"typetuple"}}],[11,"from","","",84,{"inputs":[{"name":"typetuple"}],"output":{"name":"type"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"typepath"}}],[11,"from","","",84,{"inputs":[{"name":"typepath"}],"output":{"name":"type"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"typetraitobject"}}],[11,"from","","",84,{"inputs":[{"name":"typetraitobject"}],"output":{"name":"type"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"typeimpltrait"}}],[11,"from","","",84,{"inputs":[{"name":"typeimpltrait"}],"output":{"name":"type"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"typeparen"}}],[11,"from","","",84,{"inputs":[{"name":"typeparen"}],"output":{"name":"type"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"typegroup"}}],[11,"from","","",84,{"inputs":[{"name":"typegroup"}],"output":{"name":"type"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"typeinfer"}}],[11,"from","","",84,{"inputs":[{"name":"typeinfer"}],"output":{"name":"type"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"typemacro"}}],[11,"from","","",84,{"inputs":[{"name":"typemacro"}],"output":{"name":"type"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"typeverbatim"}}],[11,"from","","",84,{"inputs":[{"name":"typeverbatim"}],"output":{"name":"type"}}],[11,"to_tokens","","",84,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"barefnargname"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"returntype"}}],[11,"parse","","",60,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",60,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",85,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",57,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",57,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",59,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",59,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",61,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",61,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",58,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",58,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_mod_style","","",60,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"to_tokens","","",60,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",61,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",86,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",85,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",58,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",59,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"global","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"pathtokens"}}],[11,"from","","",60,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"from","","",61,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"patharguments"}}],[11,"default","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"genericargument"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedgenericarguments"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"binding"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedgenericarguments"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenbuffer"}}],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenbuffer"}}],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",220,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"eq","","",221,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",221,{"inputs":[],"output":{"name":"self"}}],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",221,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",221,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"option"}}],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",221,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",221,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",221,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",222,null],[13,"End","","",222,null],[11,"to_tokens","","",223,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"to_tokens","","",222,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":null}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"punctuated"}}],[11,"new","","Creates an empty punctuated sequence.",223,{"inputs":[],"output":{"name":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",223,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",223,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",223,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",223,{"inputs":[{"name":"self"}],"output":{"name":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",223,{"inputs":[{"name":"self"}],"output":{"name":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",223,{"inputs":[{"name":"self"}],"output":{"name":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",223,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",223,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",223,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"insert","","Inserts an element at position `index`.",223,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"from_iter","","",223,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",223,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",223,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",223,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"into_iter","","",223,null],[11,"default","","",223,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",224,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",224,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",225,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",225,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",226,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",226,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",227,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",227,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",228,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",228,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",229,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",229,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",222,{"inputs":[{"name":"t"},{"name":"option"}],"output":{"name":"self"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",222,null],[11,"index","","",223,null],[11,"index_mut","","",223,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,null],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",null,null],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[0,"ext","","Extension traits that are made available within the `call!` parser.",null,null],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",null,null],[10,"parse_any","","Parses any identifier including keywords.",230,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_any","syn","",180,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[6,"PResult","syn::synom","The result of a `Synom` parser.",null,null],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",null,null],[10,"parse","","",231,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","A short name of the type being parsed.",231,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",null,null],[16,"Output","","",232,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",232,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",232,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",232,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse","syn","",180,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",180,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",233,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[5,"visit_abi","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"abi"}],"output":null}],[5,"visit_angle_bracketed_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"anglebracketedgenericarguments"}],"output":null}],[5,"visit_attr_style","","",null,{"inputs":[{"name":"v"},{"name":"attrstyle"}],"output":null}],[5,"visit_attribute","","",null,{"inputs":[{"name":"v"},{"name":"attribute"}],"output":null}],[5,"visit_bare_fn_arg","","",null,{"inputs":[{"name":"v"},{"name":"barefnarg"}],"output":null}],[5,"visit_bare_fn_arg_name","","",null,{"inputs":[{"name":"v"},{"name":"barefnargname"}],"output":null}],[5,"visit_bin_op","","",null,{"inputs":[{"name":"v"},{"name":"binop"}],"output":null}],[5,"visit_binding","","",null,{"inputs":[{"name":"v"},{"name":"binding"}],"output":null}],[5,"visit_bound_lifetimes","","",null,{"inputs":[{"name":"v"},{"name":"boundlifetimes"}],"output":null}],[5,"visit_const_param","","",null,{"inputs":[{"name":"v"},{"name":"constparam"}],"output":null}],[5,"visit_data","","",null,{"inputs":[{"name":"v"},{"name":"data"}],"output":null}],[5,"visit_data_enum","","",null,{"inputs":[{"name":"v"},{"name":"dataenum"}],"output":null}],[5,"visit_data_struct","","",null,{"inputs":[{"name":"v"},{"name":"datastruct"}],"output":null}],[5,"visit_data_union","","",null,{"inputs":[{"name":"v"},{"name":"dataunion"}],"output":null}],[5,"visit_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"visit_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"visit_expr_binary","","",null,{"inputs":[{"name":"v"},{"name":"exprbinary"}],"output":null}],[5,"visit_expr_call","","",null,{"inputs":[{"name":"v"},{"name":"exprcall"}],"output":null}],[5,"visit_expr_cast","","",null,{"inputs":[{"name":"v"},{"name":"exprcast"}],"output":null}],[5,"visit_expr_field","","",null,{"inputs":[{"name":"v"},{"name":"exprfield"}],"output":null}],[5,"visit_expr_index","","",null,{"inputs":[{"name":"v"},{"name":"exprindex"}],"output":null}],[5,"visit_expr_lit","","",null,{"inputs":[{"name":"v"},{"name":"exprlit"}],"output":null}],[5,"visit_expr_paren","","",null,{"inputs":[{"name":"v"},{"name":"exprparen"}],"output":null}],[5,"visit_expr_path","","",null,{"inputs":[{"name":"v"},{"name":"exprpath"}],"output":null}],[5,"visit_expr_unary","","",null,{"inputs":[{"name":"v"},{"name":"exprunary"}],"output":null}],[5,"visit_expr_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"exprverbatim"}],"output":null}],[5,"visit_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"visit_fields","","",null,{"inputs":[{"name":"v"},{"name":"fields"}],"output":null}],[5,"visit_fields_named","","",null,{"inputs":[{"name":"v"},{"name":"fieldsnamed"}],"output":null}],[5,"visit_fields_unnamed","","",null,{"inputs":[{"name":"v"},{"name":"fieldsunnamed"}],"output":null}],[5,"visit_generic_argument","","",null,{"inputs":[{"name":"v"},{"name":"genericargument"}],"output":null}],[5,"visit_generic_param","","",null,{"inputs":[{"name":"v"},{"name":"genericparam"}],"output":null}],[5,"visit_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"visit_ident","","",null,{"inputs":[{"name":"v"},{"name":"ident"}],"output":null}],[5,"visit_index","","",null,{"inputs":[{"name":"v"},{"name":"index"}],"output":null}],[5,"visit_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"visit_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"visit_lit","","",null,{"inputs":[{"name":"v"},{"name":"lit"}],"output":null}],[5,"visit_lit_bool","","",null,{"inputs":[{"name":"v"},{"name":"litbool"}],"output":null}],[5,"visit_lit_byte","","",null,{"inputs":[{"name":"v"},{"name":"litbyte"}],"output":null}],[5,"visit_lit_byte_str","","",null,{"inputs":[{"name":"v"},{"name":"litbytestr"}],"output":null}],[5,"visit_lit_char","","",null,{"inputs":[{"name":"v"},{"name":"litchar"}],"output":null}],[5,"visit_lit_float","","",null,{"inputs":[{"name":"v"},{"name":"litfloat"}],"output":null}],[5,"visit_lit_int","","",null,{"inputs":[{"name":"v"},{"name":"litint"}],"output":null}],[5,"visit_lit_str","","",null,{"inputs":[{"name":"v"},{"name":"litstr"}],"output":null}],[5,"visit_lit_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"litverbatim"}],"output":null}],[5,"visit_macro","","",null,{"inputs":[{"name":"v"},{"name":"macro"}],"output":null}],[5,"visit_macro_delimiter","","",null,{"inputs":[{"name":"v"},{"name":"macrodelimiter"}],"output":null}],[5,"visit_member","","",null,{"inputs":[{"name":"v"},{"name":"member"}],"output":null}],[5,"visit_meta","","",null,{"inputs":[{"name":"v"},{"name":"meta"}],"output":null}],[5,"visit_meta_list","","",null,{"inputs":[{"name":"v"},{"name":"metalist"}],"output":null}],[5,"visit_meta_name_value","","",null,{"inputs":[{"name":"v"},{"name":"metanamevalue"}],"output":null}],[5,"visit_nested_meta","","",null,{"inputs":[{"name":"v"},{"name":"nestedmeta"}],"output":null}],[5,"visit_parenthesized_generic_arguments","","",null,{"inputs":[{"name":"v"},{"name":"parenthesizedgenericarguments"}],"output":null}],[5,"visit_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"visit_path_arguments","","",null,{"inputs":[{"name":"v"},{"name":"patharguments"}],"output":null}],[5,"visit_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"visit_predicate_eq","","",null,{"inputs":[{"name":"v"},{"name":"predicateeq"}],"output":null}],[5,"visit_predicate_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"predicatelifetime"}],"output":null}],[5,"visit_predicate_type","","",null,{"inputs":[{"name":"v"},{"name":"predicatetype"}],"output":null}],[5,"visit_qself","","",null,{"inputs":[{"name":"v"},{"name":"qself"}],"output":null}],[5,"visit_return_type","","",null,{"inputs":[{"name":"v"},{"name":"returntype"}],"output":null}],[5,"visit_span","","",null,{"inputs":[{"name":"v"},{"name":"span"}],"output":null}],[5,"visit_trait_bound","","",null,{"inputs":[{"name":"v"},{"name":"traitbound"}],"output":null}],[5,"visit_trait_bound_modifier","","",null,{"inputs":[{"name":"v"},{"name":"traitboundmodifier"}],"output":null}],[5,"visit_type","","",null,{"inputs":[{"name":"v"},{"name":"type"}],"output":null}],[5,"visit_type_array","","",null,{"inputs":[{"name":"v"},{"name":"typearray"}],"output":null}],[5,"visit_type_bare_fn","","",null,{"inputs":[{"name":"v"},{"name":"typebarefn"}],"output":null}],[5,"visit_type_group","","",null,{"inputs":[{"name":"v"},{"name":"typegroup"}],"output":null}],[5,"visit_type_impl_trait","","",null,{"inputs":[{"name":"v"},{"name":"typeimpltrait"}],"output":null}],[5,"visit_type_infer","","",null,{"inputs":[{"name":"v"},{"name":"typeinfer"}],"output":null}],[5,"visit_type_macro","","",null,{"inputs":[{"name":"v"},{"name":"typemacro"}],"output":null}],[5,"visit_type_never","","",null,{"inputs":[{"name":"v"},{"name":"typenever"}],"output":null}],[5,"visit_type_param","","",null,{"inputs":[{"name":"v"},{"name":"typeparam"}],"output":null}],[5,"visit_type_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typeparambound"}],"output":null}],[5,"visit_type_paren","","",null,{"inputs":[{"name":"v"},{"name":"typeparen"}],"output":null}],[5,"visit_type_path","","",null,{"inputs":[{"name":"v"},{"name":"typepath"}],"output":null}],[5,"visit_type_ptr","","",null,{"inputs":[{"name":"v"},{"name":"typeptr"}],"output":null}],[5,"visit_type_reference","","",null,{"inputs":[{"name":"v"},{"name":"typereference"}],"output":null}],[5,"visit_type_slice","","",null,{"inputs":[{"name":"v"},{"name":"typeslice"}],"output":null}],[5,"visit_type_trait_object","","",null,{"inputs":[{"name":"v"},{"name":"typetraitobject"}],"output":null}],[5,"visit_type_tuple","","",null,{"inputs":[{"name":"v"},{"name":"typetuple"}],"output":null}],[5,"visit_type_verbatim","","",null,{"inputs":[{"name":"v"},{"name":"typeverbatim"}],"output":null}],[5,"visit_un_op","","",null,{"inputs":[{"name":"v"},{"name":"unop"}],"output":null}],[5,"visit_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"}],"output":null}],[5,"visit_vis_crate","","",null,{"inputs":[{"name":"v"},{"name":"viscrate"}],"output":null}],[5,"visit_vis_public","","",null,{"inputs":[{"name":"v"},{"name":"vispublic"}],"output":null}],[5,"visit_vis_restricted","","",null,{"inputs":[{"name":"v"},{"name":"visrestricted"}],"output":null}],[5,"visit_visibility","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[5,"visit_where_clause","","",null,{"inputs":[{"name":"v"},{"name":"whereclause"}],"output":null}],[5,"visit_where_predicate","","",null,{"inputs":[{"name":"v"},{"name":"wherepredicate"}],"output":null}],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[11,"visit_abi","","",234,{"inputs":[{"name":"self"},{"name":"abi"}],"output":null}],[11,"visit_angle_bracketed_generic_arguments","","",234,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":null}],[11,"visit_attr_style","","",234,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":null}],[11,"visit_attribute","","",234,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_bare_fn_arg","","",234,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":null}],[11,"visit_bare_fn_arg_name","","",234,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":null}],[11,"visit_bin_op","","",234,{"inputs":[{"name":"self"},{"name":"binop"}],"output":null}],[11,"visit_binding","","",234,{"inputs":[{"name":"self"},{"name":"binding"}],"output":null}],[11,"visit_bound_lifetimes","","",234,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":null}],[11,"visit_const_param","","",234,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":null}],[11,"visit_data","","",234,{"inputs":[{"name":"self"},{"name":"data"}],"output":null}],[11,"visit_data_enum","","",234,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":null}],[11,"visit_data_struct","","",234,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":null}],[11,"visit_data_union","","",234,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":null}],[11,"visit_derive_input","","",234,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_expr","","",234,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_binary","","",234,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":null}],[11,"visit_expr_call","","",234,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":null}],[11,"visit_expr_cast","","",234,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":null}],[11,"visit_expr_field","","",234,{"inputs":[{"name":"self"},{"name":"exprfield"}],"output":null}],[11,"visit_expr_index","","",234,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":null}],[11,"visit_expr_lit","","",234,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":null}],[11,"visit_expr_paren","","",234,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":null}],[11,"visit_expr_path","","",234,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":null}],[11,"visit_expr_unary","","",234,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":null}],[11,"visit_expr_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"exprverbatim"}],"output":null}],[11,"visit_field","","",234,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_fields","","",234,{"inputs":[{"name":"self"},{"name":"fields"}],"output":null}],[11,"visit_fields_named","","",234,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":null}],[11,"visit_fields_unnamed","","",234,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":null}],[11,"visit_generic_argument","","",234,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":null}],[11,"visit_generic_param","","",234,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":null}],[11,"visit_generics","","",234,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ident","","",234,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_index","","",234,{"inputs":[{"name":"self"},{"name":"index"}],"output":null}],[11,"visit_lifetime","","",234,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",234,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_lit","","",234,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_lit_bool","","",234,{"inputs":[{"name":"self"},{"name":"litbool"}],"output":null}],[11,"visit_lit_byte","","",234,{"inputs":[{"name":"self"},{"name":"litbyte"}],"output":null}],[11,"visit_lit_byte_str","","",234,{"inputs":[{"name":"self"},{"name":"litbytestr"}],"output":null}],[11,"visit_lit_char","","",234,{"inputs":[{"name":"self"},{"name":"litchar"}],"output":null}],[11,"visit_lit_float","","",234,{"inputs":[{"name":"self"},{"name":"litfloat"}],"output":null}],[11,"visit_lit_int","","",234,{"inputs":[{"name":"self"},{"name":"litint"}],"output":null}],[11,"visit_lit_str","","",234,{"inputs":[{"name":"self"},{"name":"litstr"}],"output":null}],[11,"visit_lit_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"litverbatim"}],"output":null}],[11,"visit_macro","","",234,{"inputs":[{"name":"self"},{"name":"macro"}],"output":null}],[11,"visit_macro_delimiter","","",234,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":null}],[11,"visit_member","","",234,{"inputs":[{"name":"self"},{"name":"member"}],"output":null}],[11,"visit_meta","","",234,{"inputs":[{"name":"self"},{"name":"meta"}],"output":null}],[11,"visit_meta_list","","",234,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":null}],[11,"visit_meta_name_value","","",234,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":null}],[11,"visit_nested_meta","","",234,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":null}],[11,"visit_parenthesized_generic_arguments","","",234,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":null}],[11,"visit_path","","",234,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_arguments","","",234,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":null}],[11,"visit_path_segment","","",234,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_predicate_eq","","",234,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":null}],[11,"visit_predicate_lifetime","","",234,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":null}],[11,"visit_predicate_type","","",234,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":null}],[11,"visit_qself","","",234,{"inputs":[{"name":"self"},{"name":"qself"}],"output":null}],[11,"visit_return_type","","",234,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_span","","",234,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"visit_trait_bound","","",234,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":null}],[11,"visit_trait_bound_modifier","","",234,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_type","","",234,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_array","","",234,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":null}],[11,"visit_type_bare_fn","","",234,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":null}],[11,"visit_type_group","","",234,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":null}],[11,"visit_type_impl_trait","","",234,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":null}],[11,"visit_type_infer","","",234,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":null}],[11,"visit_type_macro","","",234,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":null}],[11,"visit_type_never","","",234,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":null}],[11,"visit_type_param","","",234,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":null}],[11,"visit_type_param_bound","","",234,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":null}],[11,"visit_type_paren","","",234,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":null}],[11,"visit_type_path","","",234,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":null}],[11,"visit_type_ptr","","",234,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":null}],[11,"visit_type_reference","","",234,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":null}],[11,"visit_type_slice","","",234,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":null}],[11,"visit_type_trait_object","","",234,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":null}],[11,"visit_type_tuple","","",234,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":null}],[11,"visit_type_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"typeverbatim"}],"output":null}],[11,"visit_un_op","","",234,{"inputs":[{"name":"self"},{"name":"unop"}],"output":null}],[11,"visit_variant","","",234,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[11,"visit_vis_crate","","",234,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":null}],[11,"visit_vis_public","","",234,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":null}],[11,"visit_vis_restricted","","",234,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":null}],[11,"visit_visibility","","",234,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_where_clause","","",234,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":null}],[11,"visit_where_predicate","","",234,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}],[11,"fmt","syn::synom","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",235,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",235,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"custom_keyword","","Parse the given word as a keyword.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",180,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"ident"}}],[11,"span","","Returns the span of this `Ident`.",180,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",180,null],[11,"cmp","","",180,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",180,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"hash","","",180,null],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_tokens","","",180,null],[11,"visit_abi","syn::visit","",234,{"inputs":[{"name":"self"},{"name":"abi"}],"output":null}],[11,"visit_angle_bracketed_generic_arguments","","",234,{"inputs":[{"name":"self"},{"name":"anglebracketedgenericarguments"}],"output":null}],[11,"visit_attr_style","","",234,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":null}],[11,"visit_attribute","","",234,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_bare_fn_arg","","",234,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":null}],[11,"visit_bare_fn_arg_name","","",234,{"inputs":[{"name":"self"},{"name":"barefnargname"}],"output":null}],[11,"visit_bin_op","","",234,{"inputs":[{"name":"self"},{"name":"binop"}],"output":null}],[11,"visit_binding","","",234,{"inputs":[{"name":"self"},{"name":"binding"}],"output":null}],[11,"visit_bound_lifetimes","","",234,{"inputs":[{"name":"self"},{"name":"boundlifetimes"}],"output":null}],[11,"visit_const_param","","",234,{"inputs":[{"name":"self"},{"name":"constparam"}],"output":null}],[11,"visit_data","","",234,{"inputs":[{"name":"self"},{"name":"data"}],"output":null}],[11,"visit_data_enum","","",234,{"inputs":[{"name":"self"},{"name":"dataenum"}],"output":null}],[11,"visit_data_struct","","",234,{"inputs":[{"name":"self"},{"name":"datastruct"}],"output":null}],[11,"visit_data_union","","",234,{"inputs":[{"name":"self"},{"name":"dataunion"}],"output":null}],[11,"visit_derive_input","","",234,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_expr","","",234,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_binary","","",234,{"inputs":[{"name":"self"},{"name":"exprbinary"}],"output":null}],[11,"visit_expr_call","","",234,{"inputs":[{"name":"self"},{"name":"exprcall"}],"output":null}],[11,"visit_expr_cast","","",234,{"inputs":[{"name":"self"},{"name":"exprcast"}],"output":null}],[11,"visit_expr_field","","",234,{"inputs":[{"name":"self"},{"name":"exprfield"}],"output":null}],[11,"visit_expr_index","","",234,{"inputs":[{"name":"self"},{"name":"exprindex"}],"output":null}],[11,"visit_expr_lit","","",234,{"inputs":[{"name":"self"},{"name":"exprlit"}],"output":null}],[11,"visit_expr_paren","","",234,{"inputs":[{"name":"self"},{"name":"exprparen"}],"output":null}],[11,"visit_expr_path","","",234,{"inputs":[{"name":"self"},{"name":"exprpath"}],"output":null}],[11,"visit_expr_unary","","",234,{"inputs":[{"name":"self"},{"name":"exprunary"}],"output":null}],[11,"visit_expr_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"exprverbatim"}],"output":null}],[11,"visit_field","","",234,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_fields","","",234,{"inputs":[{"name":"self"},{"name":"fields"}],"output":null}],[11,"visit_fields_named","","",234,{"inputs":[{"name":"self"},{"name":"fieldsnamed"}],"output":null}],[11,"visit_fields_unnamed","","",234,{"inputs":[{"name":"self"},{"name":"fieldsunnamed"}],"output":null}],[11,"visit_generic_argument","","",234,{"inputs":[{"name":"self"},{"name":"genericargument"}],"output":null}],[11,"visit_generic_param","","",234,{"inputs":[{"name":"self"},{"name":"genericparam"}],"output":null}],[11,"visit_generics","","",234,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ident","","",234,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_index","","",234,{"inputs":[{"name":"self"},{"name":"index"}],"output":null}],[11,"visit_lifetime","","",234,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",234,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_lit","","",234,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_lit_bool","","",234,{"inputs":[{"name":"self"},{"name":"litbool"}],"output":null}],[11,"visit_lit_byte","","",234,{"inputs":[{"name":"self"},{"name":"litbyte"}],"output":null}],[11,"visit_lit_byte_str","","",234,{"inputs":[{"name":"self"},{"name":"litbytestr"}],"output":null}],[11,"visit_lit_char","","",234,{"inputs":[{"name":"self"},{"name":"litchar"}],"output":null}],[11,"visit_lit_float","","",234,{"inputs":[{"name":"self"},{"name":"litfloat"}],"output":null}],[11,"visit_lit_int","","",234,{"inputs":[{"name":"self"},{"name":"litint"}],"output":null}],[11,"visit_lit_str","","",234,{"inputs":[{"name":"self"},{"name":"litstr"}],"output":null}],[11,"visit_lit_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"litverbatim"}],"output":null}],[11,"visit_macro","","",234,{"inputs":[{"name":"self"},{"name":"macro"}],"output":null}],[11,"visit_macro_delimiter","","",234,{"inputs":[{"name":"self"},{"name":"macrodelimiter"}],"output":null}],[11,"visit_member","","",234,{"inputs":[{"name":"self"},{"name":"member"}],"output":null}],[11,"visit_meta","","",234,{"inputs":[{"name":"self"},{"name":"meta"}],"output":null}],[11,"visit_meta_list","","",234,{"inputs":[{"name":"self"},{"name":"metalist"}],"output":null}],[11,"visit_meta_name_value","","",234,{"inputs":[{"name":"self"},{"name":"metanamevalue"}],"output":null}],[11,"visit_nested_meta","","",234,{"inputs":[{"name":"self"},{"name":"nestedmeta"}],"output":null}],[11,"visit_parenthesized_generic_arguments","","",234,{"inputs":[{"name":"self"},{"name":"parenthesizedgenericarguments"}],"output":null}],[11,"visit_path","","",234,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_arguments","","",234,{"inputs":[{"name":"self"},{"name":"patharguments"}],"output":null}],[11,"visit_path_segment","","",234,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_predicate_eq","","",234,{"inputs":[{"name":"self"},{"name":"predicateeq"}],"output":null}],[11,"visit_predicate_lifetime","","",234,{"inputs":[{"name":"self"},{"name":"predicatelifetime"}],"output":null}],[11,"visit_predicate_type","","",234,{"inputs":[{"name":"self"},{"name":"predicatetype"}],"output":null}],[11,"visit_qself","","",234,{"inputs":[{"name":"self"},{"name":"qself"}],"output":null}],[11,"visit_return_type","","",234,{"inputs":[{"name":"self"},{"name":"returntype"}],"output":null}],[11,"visit_span","","",234,{"inputs":[{"name":"self"},{"name":"span"}],"output":null}],[11,"visit_trait_bound","","",234,{"inputs":[{"name":"self"},{"name":"traitbound"}],"output":null}],[11,"visit_trait_bound_modifier","","",234,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_type","","",234,{"inputs":[{"name":"self"},{"name":"type"}],"output":null}],[11,"visit_type_array","","",234,{"inputs":[{"name":"self"},{"name":"typearray"}],"output":null}],[11,"visit_type_bare_fn","","",234,{"inputs":[{"name":"self"},{"name":"typebarefn"}],"output":null}],[11,"visit_type_group","","",234,{"inputs":[{"name":"self"},{"name":"typegroup"}],"output":null}],[11,"visit_type_impl_trait","","",234,{"inputs":[{"name":"self"},{"name":"typeimpltrait"}],"output":null}],[11,"visit_type_infer","","",234,{"inputs":[{"name":"self"},{"name":"typeinfer"}],"output":null}],[11,"visit_type_macro","","",234,{"inputs":[{"name":"self"},{"name":"typemacro"}],"output":null}],[11,"visit_type_never","","",234,{"inputs":[{"name":"self"},{"name":"typenever"}],"output":null}],[11,"visit_type_param","","",234,{"inputs":[{"name":"self"},{"name":"typeparam"}],"output":null}],[11,"visit_type_param_bound","","",234,{"inputs":[{"name":"self"},{"name":"typeparambound"}],"output":null}],[11,"visit_type_paren","","",234,{"inputs":[{"name":"self"},{"name":"typeparen"}],"output":null}],[11,"visit_type_path","","",234,{"inputs":[{"name":"self"},{"name":"typepath"}],"output":null}],[11,"visit_type_ptr","","",234,{"inputs":[{"name":"self"},{"name":"typeptr"}],"output":null}],[11,"visit_type_reference","","",234,{"inputs":[{"name":"self"},{"name":"typereference"}],"output":null}],[11,"visit_type_slice","","",234,{"inputs":[{"name":"self"},{"name":"typeslice"}],"output":null}],[11,"visit_type_trait_object","","",234,{"inputs":[{"name":"self"},{"name":"typetraitobject"}],"output":null}],[11,"visit_type_tuple","","",234,{"inputs":[{"name":"self"},{"name":"typetuple"}],"output":null}],[11,"visit_type_verbatim","","",234,{"inputs":[{"name":"self"},{"name":"typeverbatim"}],"output":null}],[11,"visit_un_op","","",234,{"inputs":[{"name":"self"},{"name":"unop"}],"output":null}],[11,"visit_variant","","",234,{"inputs":[{"name":"self"},{"name":"variant"}],"output":null}],[11,"visit_vis_crate","","",234,{"inputs":[{"name":"self"},{"name":"viscrate"}],"output":null}],[11,"visit_vis_public","","",234,{"inputs":[{"name":"self"},{"name":"vispublic"}],"output":null}],[11,"visit_vis_restricted","","",234,{"inputs":[{"name":"self"},{"name":"visrestricted"}],"output":null}],[11,"visit_visibility","","",234,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_where_clause","","",234,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":null}],[11,"visit_where_predicate","","",234,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":null}]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Ident"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprCatch"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[8,"Visit"],[3,"ParseError"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["synstructure"] = {"doc":"This crate provides helper types for matching against enum variants, and extracting bindings to each of the fields in the deriving Struct or Enum in a generic way.","items":[[3,"BindingInfo","synstructure","Information about a specific binding. This contains both an `Ident` reference to the given field, and the syn `&'a Field` descriptor for that field.",null,null],[12,"binding","","The name which this BindingInfo will bind to.",0,null],[12,"style","","The type of binding which this BindingInfo will create.",0,null],[3,"VariantAst","","This type is similar to `syn`'s `Variant` type, however each of the fields are references rather than owned. When this is used as the AST for a real variant, this struct simply borrows the fields of the `syn` `Variant`, however this type may also be used as the sole variant for astruct.",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"data","","",1,null],[12,"discriminant","","",1,null],[3,"VariantInfo","","A wrapper around a `syn` `DeriveInput`'s variant which provides utilities for destructuring `Variant`s with `match` expressions.",null,null],[12,"prefix","","",2,null],[3,"Structure","","A wrapper around a `syn` `DeriveInput` which provides utilities for creating custom derive trait implementations.",null,null],[4,"BindStyle","","The type of binding to use when generating a pattern.",null,null],[13,"Move","","`x`",3,null],[13,"MoveMut","","`mut x`",3,null],[13,"Ref","","`ref x`",3,null],[13,"RefMut","","`ref mut x`",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bindstyle"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bindstyle"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bindinginfo"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bindinginfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bindinginfo"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `BindingInfo` references",0,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"pat","","Generates the pattern fragment for this field binding.",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",0,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"vec"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"variantast"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"variantast"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"variantast"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variantinfo"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"bindings","","Returns a slice of the bindings in this Variant.",2,null],[11,"bindings_mut","","Returns a mut slice of the bindings in this Variant.",2,null],[11,"ast","","Returns a `VariantAst` object which contains references to the underlying `syn` AST node which this `Variant` was created from.",2,{"inputs":[{"name":"self"}],"output":{"name":"variantast"}}],[11,"omitted_bindings","","True if any bindings were omitted due to a `filter` call.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pat","","Generates the match-arm pattern which could be used to match against this Variant.",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"construct","","Generates the token stream required to construct the current variant.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating a `match` arm which evaluates the returned tokens.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating a `match` arm which evaluates to the resulting tokens.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"filter","","Filter the bindings created by this `Variant` object. This has 2 effects:",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"remove_binding","","Remove the binding at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"vec"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"structure"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"structure"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"structure"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"new","","Create a new `Structure` with the variants and fields from the passed-in `DeriveInput`.",4,{"inputs":[{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"variants","","Returns a slice of the variants in this Structure.",4,null],[11,"variants_mut","","Returns a mut slice of the variants in this Structure.",4,null],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `Structure` was created from.",4,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"omitted_variants","","True if any variants were omitted due to a `filter_variants` call.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating `match` arms which evaluate the returned tokens.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating `match` arms which evaluate to the resulting tokens.",4,{"inputs":[{"name":"self"},{"name":"i"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"each_variant","","Runs the passed-in function once for each variant, passing in a `VariantInfo`. and generating `match` arms which evaluate the returned tokens.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"filter","","Filter the bindings created by this `Structure` object. This has 2 effects:",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"filter_variants","","Filter the variants matched by this `Structure` object. This has 2 effects:",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"remove_variant","","Remove the variant at the given index.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are refrenced in the types of non-filtered fields / variants.",4,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"vec"}}],[11,"add_trait_bounds","","Add trait bounds for a trait with the given path for each type parmaeter referenced in the types of non-filtered fields.",4,{"inputs":[{"name":"self"},{"name":"typarambound"},{"name":"vec"}],"output":null}],[11,"bound_impl","","Creates an `impl` block with the required generic type fields filled in to implement the trait `path`.",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[11,"unsafe_bound_impl","","This method is the same as `bound_impl`, except also includes the `unsafe` keyword for implementing unsafe traits.",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[11,"unbound_impl","","This method is like `bound_impl` but doesn't add the additional bounds to the where clause.",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[11,"unsafe_unbound_impl","","This method is the same as `unbound_impl`, except also includes the `unsafe` keyword for implementing unsafe traits.",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[14,"decl_derive","","The `decl_derive!` macro declares a custom derive wrapper. It will parse the incoming TokenStream into a `synstructure::Structure` object, and pass it into the inner function.",null,null],[14,"test_derive","","Run a test on a custom derive. This macro expands both the original struct and the expansion to ensure that they compile correctly, and confirms that feeding the original struct into the named derive will produce the written output.",null,null]],"paths":[[3,"BindingInfo"],[3,"VariantAst"],[3,"VariantInfo"],[4,"BindStyle"],[3,"Structure"]]};
searchIndex["tempdir"] = {"doc":"Temporary directories of files.","items":[[3,"TempDir","tempdir","A directory in the filesystem that is automatically deleted when it goes out of scope.",null,null],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose name will have the prefix, `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",0,{"inputs":[{"name":"str"}],"output":{"generics":["tempdir"],"name":"result"}}],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name will have the prefix `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",0,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"generics":["tempdir"],"name":"result"}}],[11,"path","","Accesses the [`Path`] to the temporary directory.",0,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","","Unwraps the [`Path`] contained in the `TempDir` and returns it. This destroys the `TempDir` without deleting the directory represented by the returned `Path`.",0,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"close","","Closes and removes the temporary directory, returing a `Result`.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"TempDir"]]};
searchIndex["tempfile"] = {"doc":"Temporary files and directories.","items":[[3,"TempDir","tempfile","A directory in the filesystem that is automatically deleted when it goes out of scope.",null,null],[3,"NamedTempFile","","A named temporary file.",null,null],[3,"PersistError","","Error returned when persisting a temporary file fails.",null,null],[12,"error","","The underlying IO error.",0,null],[12,"file","","The temporary file that couldn't be persisted.",0,null],[3,"TempPath","","A path to a named temporary file without an open file handle.",null,null],[3,"Builder","","Create a new temporary file or directory with custom parameters.",null,null],[5,"tempdir","","Create a new temporary directory.",null,{"inputs":[],"output":{"generics":["tempdir"],"name":"result"}}],[5,"tempdir_in","","Create a new temporary directory.",null,{"inputs":[{"name":"p"}],"output":{"generics":["tempdir"],"name":"result"}}],[5,"tempfile","","Create a new temporary file.",null,{"inputs":[],"output":{"generics":["file"],"name":"result"}}],[5,"tempfile_in","","Create a new temporary file in the specified directory.",null,{"inputs":[{"name":"p"}],"output":{"generics":["file"],"name":"result"}}],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()`.",1,{"inputs":[],"output":{"generics":["tempdir"],"name":"result"}}],[11,"new_in","","Attempts to make a temporary directory inside of `dir`. The directory and everything inside it will be automatically  deleted once the returned `TempDir` is destroyed.",1,{"inputs":[{"name":"p"}],"output":{"generics":["tempdir"],"name":"result"}}],[11,"path","","Accesses the [`Path`] to the temporary directory.",1,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","","Persist the temporary directory to disk, returning the [`PathBuf`] where it is located.",1,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"close","","Closes and removes the temporary directory, returing a `Result`.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Close and remove the temporary file.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"persist","","Persist the temporary file at the target path.",2,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathpersisterror"],"name":"result"}}],[11,"persist_noclobber","","Persist the temporary file at the target path iff no file exists there.",2,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathpersisterror"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"osstr"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"persisterror"}],"output":{"name":"namedtempfile"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"new","","Create a new named temporary file.",3,{"inputs":[],"output":{"generics":["namedtempfile"],"name":"result"}}],[11,"new_in","","Create a new named temporary file in the specified directory.",3,{"inputs":[{"name":"p"}],"output":{"generics":["namedtempfile"],"name":"result"}}],[11,"path","","Get the temporary file's path.",3,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"close","","Close and remove the temporary file.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"persist","","Persist the temporary file at the target path.",3,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["file","persisterror"],"name":"result"}}],[11,"persist_noclobber","","Persist the temporary file at the target path iff no file exists there.",3,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["file","persisterror"],"name":"result"}}],[11,"reopen","","Reopen the temporary file.",3,{"inputs":[{"name":"self"}],"output":{"generics":["file"],"name":"result"}}],[11,"as_file","","Get a reference to the underlying file.",3,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"as_file_mut","","Get a mutable reference to the underlying file.",3,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"into_file","","Convert the temporary file into a `std::fs::File`.",3,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"into_temp_path","","Closes the file, leaving only the temporary file path.",3,{"inputs":[{"name":"self"}],"output":{"name":"temppath"}}],[11,"read","","",3,null],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"seek","","",3,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64"],"name":"result"}}],[11,"as_raw_fd","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"builder"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"builder"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"builder"}],"output":{"name":"bool"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create a new `Builder`.",4,{"inputs":[],"output":{"name":"self"}}],[11,"prefix","","Set a custom filename prefix.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"suffix","","Set a custom filename suffix.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"rand_bytes","","Set the number of random bytes.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"tempfile","","Create the named temporary file.",4,{"inputs":[{"name":"self"}],"output":{"generics":["namedtempfile"],"name":"result"}}],[11,"tempfile_in","","Create the named temporary file in the specified directory.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["namedtempfile"],"name":"result"}}],[11,"tempdir","","Attempts to make a temporary directory inside of `env::temp_dir()` whose name will have the prefix, `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",4,{"inputs":[{"name":"self"}],"output":{"generics":["tempdir"],"name":"result"}}],[11,"tempdir_in","","Attempts to make a temporary directory inside of `dir`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["tempdir"],"name":"result"}}]],"paths":[[3,"PersistError"],[3,"TempDir"],[3,"TempPath"],[3,"NamedTempFile"],[3,"Builder"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"inputs":[{"name":"self"}],"output":{"name":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["tm","parseerror"],"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"generics":["duration","outofrangeerror"],"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"generics":["stdduration","outofrangeerror"],"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["tmfmt","parseerror"],"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["timer"] = {"doc":"A simple timer, used to enqueue operations meant to be executed at a given time or after a given delay.","items":[[3,"TimerBase","timer","Shared coordination logic for timer threads.",null,null],[3,"Timer","","A timer, used to schedule execution of callbacks at a later date.",null,null],[3,"MessageTimer","","A timer, used to schedule delivery of messages at a later date.",null,null],[3,"Guard","","A value scoping a schedule. When this value is dropped, the schedule is cancelled.",null,null],[11,"drop","","Stop the timer threads.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"schedule_with_delay","","",0,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"t"}],"output":{"name":"guard"}}],[11,"schedule_with_date","","",0,{"inputs":[{"name":"self"},{"name":"datetime"},{"name":"t"}],"output":{"name":"guard"}}],[11,"schedule_repeating","","",0,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"t"}],"output":{"name":"guard"}}],[11,"schedule","","",0,{"inputs":[{"name":"self"},{"name":"datetime"},{"generics":["duration"],"name":"option"},{"name":"t"}],"output":{"name":"guard"}}],[11,"new","","Create a timer.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","As `new()`, but with a manually specified initial capaicty.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"schedule_with_delay","","Schedule a callback for execution after a delay.",1,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"f"}],"output":{"name":"guard"}}],[11,"schedule_with_date","","Schedule a callback for execution at a given date.",1,{"inputs":[{"name":"self"},{"name":"datetime"},{"name":"f"}],"output":{"name":"guard"}}],[11,"schedule_repeating","","Schedule a callback for execution once per interval.",1,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"f"}],"output":{"name":"guard"}}],[11,"schedule","","Schedule a callback for execution at a given time, then once per interval. A typical use case is to execute code once per day at 12am.",1,{"inputs":[{"name":"self"},{"name":"datetime"},{"generics":["duration"],"name":"option"},{"name":"f"}],"output":{"name":"guard"}}],[11,"new","","Create a message timer.",2,{"inputs":[{"name":"sender"}],"output":{"name":"self"}}],[11,"with_capacity","","As `new()`, but with a manually specified initial capaicty.",2,{"inputs":[{"name":"sender"},{"name":"usize"}],"output":{"name":"self"}}],[11,"schedule_with_delay","","Schedule a message for delivery after a delay.",2,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"t"}],"output":{"name":"guard"}}],[11,"schedule_with_date","","Schedule a message for delivery at a given date.",2,{"inputs":[{"name":"self"},{"name":"datetime"},{"name":"t"}],"output":{"name":"guard"}}],[11,"schedule_repeating","","Schedule a message for delivery once per interval.",2,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"t"}],"output":{"name":"guard"}}],[11,"schedule","","Schedule a message for delivery at a given time, then once per interval. A typical use case is to execute code once per day at 12am.",2,{"inputs":[{"name":"self"},{"name":"datetime"},{"generics":["duration"],"name":"option"},{"name":"t"}],"output":{"name":"guard"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"guard"}}],[11,"ignore","","Ignores the guard, preventing it from disabling the scheduled item. This can be used to avoid maintaining a Guard handle for items that will never be cancelled.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","Cancel a schedule.",3,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"TimerBase"],[3,"Timer"],[3,"MessageTimer"],[3,"Guard"]]};
searchIndex["tiny_keccak"] = {"doc":"An implementation of the FIPS-202-defined SHA-3 and SHAKE functions.","items":[[3,"Keccak","tiny_keccak","This structure should be used to create keccak/sha3 hash.",null,null],[3,"XofReader","","",null,null],[5,"keccakf","","keccak-f[1600]",null,null],[5,"shake128","","",null,null],[5,"shake256","","",null,null],[5,"keccak224","","",null,null],[5,"keccak256","","",null,null],[5,"keccak384","","",null,null],[5,"keccak512","","",null,null],[5,"sha3_224","","",null,null],[5,"sha3_256","","",null,null],[5,"sha3_384","","",null,null],[5,"sha3_512","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",0,{"inputs":[{"name":"usize"},{"name":"u8"}],"output":{"name":"keccak"}}],[11,"new_shake128","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"shake128","","",0,null],[11,"new_shake256","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"shake256","","",0,null],[11,"new_keccak224","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"keccak224","","",0,null],[11,"new_keccak256","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"keccak256","","",0,null],[11,"new_keccak384","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"keccak384","","",0,null],[11,"new_keccak512","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"keccak512","","",0,null],[11,"new_sha3_224","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"sha3_224","","",0,null],[11,"new_sha3_256","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"sha3_256","","",0,null],[11,"new_sha3_384","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"sha3_384","","",0,null],[11,"new_sha3_512","","",0,{"inputs":[],"output":{"name":"keccak"}}],[11,"sha3_512","","",0,null],[11,"update","","",0,null],[11,"keccakf","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"finalize","","",0,null],[11,"absorb","","",0,null],[11,"pad","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"fill_block","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"squeeze","","",0,null],[11,"xof","","",0,{"inputs":[{"name":"self"}],"output":{"name":"xofreader"}}],[11,"squeeze","","",1,null]],"paths":[[3,"Keccak"],[3,"XofReader"]]};
searchIndex["trace_time"] = {"doc":"Performance timer with logging","items":[[3,"PerfTimer","trace_time","Performance timer with logging. Starts measuring time in the constructor, prints elapsed time in the destructor or when `stop` is called.",null,null],[11,"new","","Create an instance with given name.",0,{"inputs":[{"name":"str"}],"output":{"name":"perftimer"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[14,"trace_time","","",null,null]],"paths":[[3,"PerfTimer"]]};
searchIndex["transaction_pool"] = {"doc":"Generic Transaction Pool","items":[[3,"Error","transaction_pool","The Error type.",null,null],[12,"0","","The kind of the error.",0,null],[3,"NoopListener","","A no-op implementation of `Listener`.",null,null],[3,"Options","","Transaction Pool options.",null,null],[12,"max_count","","Maximal number of transactions in the pool.",1,null],[12,"max_per_sender","","Maximal number of transactions from single sender.",1,null],[12,"max_mem_usage","","Maximal memory usage.",1,null],[3,"Pool","","A transaction pool.",null,null],[3,"PendingIterator","","An iterator over all pending (ready) transactions. NOTE: the transactions are not removed from the queue. You might remove them later by calling `cull`.",null,null],[3,"Transaction","","Internal representation of transaction.",null,null],[12,"insertion_id","","Sequential id of the transaction",2,null],[12,"transaction","","Shared transaction",2,null],[3,"LightStatus","","Light pool status. This status is cheap to compute and can be called frequently.",null,null],[12,"mem_usage","","Memory usage in bytes.",3,null],[12,"transaction_count","","Total number of transactions in the pool.",3,null],[12,"senders","","Number of unique senders in the pool.",3,null],[3,"Status","","A full queue status. To compute this status it is required to provide `Ready`. NOTE: To compute the status we need to visit each transaction in the pool.",null,null],[12,"stalled","","Number of stalled transactions.",4,null],[12,"pending","","Number of pending (ready) transactions.",4,null],[12,"future","","Number of future (not ready) transactions.",4,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",5,null],[13,"AlreadyImported","","Transaction is already imported",5,null],[13,"TooCheapToEnter","","Transaction is too cheap to enter the queue",5,null],[13,"TooCheapToReplace","","Transaction is too cheap to replace existing transaction that occupies the same slot.",5,null],[4,"Readiness","","Transaction readiness.",null,null],[13,"Stale","","The transaction is stale (and should/will be removed from the pool).",6,null],[13,"Ready","","The transaction is ready to be included in pending set.",6,null],[13,"Future","","The transaction is not yet ready.",6,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",0,null],[11,"with_chain","","",0,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",0,null],[11,"iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"extract_backtrace","","",0,{"inputs":[{"name":"error"}],"output":{"generics":["internalbacktrace"],"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",0,{"inputs":[{"generics":["error"],"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",0,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",0,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","A short description of the error. This method is identical to `Error::description()`",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"options"}],"output":{"name":"bool"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deref","","",2,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"with_options","","Creates a new `Pool` with given options and default `Scoring` and `Listener`.",8,{"inputs":[{"name":"options"}],"output":{"name":"self"}}],[11,"with_scoring","","Creates a new `Pool` with given `Scoring` and options.",8,{"inputs":[{"name":"s"},{"name":"options"}],"output":{"name":"self"}}],[11,"new","","Creates new `Pool` with given `Scoring`, `Listener` and options.",8,{"inputs":[{"name":"l"},{"name":"s"},{"name":"options"}],"output":{"name":"self"}}],[11,"import","","Attempts to import new transaction to the pool, returns a `Arc<T>` or an `Error`.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["arc","error"],"name":"result"}}],[11,"clear","","Clears pool from all transactions. This causes a listener notification that all transactions were dropped. NOTE: the drop-notification order will be arbitrary.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Removes single transaction from the pool. Depending on the `is_invalid` flag the listener will either get a `cancelled` or `invalid` notification.",8,null],[11,"cull","","Removes all stalled transactions from given sender list (or from all senders).",8,{"inputs":[{"name":"self"},{"name":"option"},{"name":"r"}],"output":{"name":"usize"}}],[11,"find","","Returns a transaction if it's part of the pool or `None` otherwise.",8,null],[11,"worst_transaction","","Returns worst transaction in the queue (if any).",8,{"inputs":[{"name":"self"}],"output":{"generics":["arc"],"name":"option"}}],[11,"is_full","","Returns true if the pool is at it's capacity.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"senders","","Returns senders ordered by priority of their transactions.",8,null],[11,"pending","","Returns an iterator of pending (ready) transactions.",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"pendingiterator"}}],[11,"pending_from_sender","","Returns pending (ready) transactions from given sender.",8,null],[11,"unordered_pending","","Returns unprioritized list of ready transactions.",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"unorderediterator"}}],[11,"update_scores","","Update score of transactions of a particular sender.",8,null],[11,"status","","Computes the full status of the pool (including readiness).",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"status"}}],[11,"light_status","","Returns light status of the pool.",8,{"inputs":[{"name":"self"}],"output":{"name":"lightstatus"}}],[11,"options","","Returns current pool options.",8,{"inputs":[{"name":"self"}],"output":{"name":"options"}}],[11,"listener","","Borrows listener instance.",8,{"inputs":[{"name":"self"}],"output":{"name":"l"}}],[11,"scoring","","Borrows scoring instance.",8,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"listener_mut","","Borrows listener mutably.",8,{"inputs":[{"name":"self"}],"output":{"name":"l"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"readiness"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"readiness"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"lightstatus"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"lightstatus"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"lightstatus"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"lightstatus"}],"output":{"name":"bool"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"status"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[0,"scoring","","A transactions ordering abstraction.",null,null],[3,"ScoreWithRef","transaction_pool::scoring","A score with a reference to the transaction.",null,null],[12,"score","","Score",10,null],[12,"transaction","","Shared transaction",10,null],[4,"Choice","","Represents a decision what to do with a new transaction that tries to enter the pool.",null,null],[13,"RejectNew","","New transaction should be rejected (i.e. the old transaction that occupies the same spot is better).",11,null],[13,"ReplaceOld","","The old transaction should be dropped in favour of the new one.",11,null],[13,"InsertNew","","The new transaction should be inserted and both (old and new) should stay in the pool.",11,null],[4,"Change","","Describes a reason why the `Score` of transactions should be updated. The `Scoring` implementations can use this information to update the `Score` table more efficiently.",null,null],[13,"InsertedAt","","New transaction has been inserted at given index. The Score at that index is initialized with default value and needs to be filled in.",12,null],[13,"RemovedAt","","The transaction has been removed at given index and other transactions shifted to it's place. The scores were removed and shifted as well. For simple scoring algorithms no action is required here.",12,null],[13,"ReplacedAt","","The transaction at given index has replaced a previous transaction. The score at that index needs to be update (it contains value from previous transaction).",12,null],[13,"Culled","","Given number of stalled transactions has been culled from the beginning. The scores has been removed from the beginning as well. For simple scoring algorithms no action is required here.",12,null],[13,"Event","","Custom event to update the score triggered outside of the pool. Handling this event is up to scoring implementation.",12,null],[8,"Scoring","","A transaction ordering.",null,null],[16,"Score","","A score of a transaction.",13,null],[16,"Event","","Custom scoring update event type.",13,null],[10,"compare","","Decides on ordering of `T`s from a particular sender.",13,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"ordering"}}],[10,"choose","","Decides how to deal with two transactions from a sender that seem to occupy the same slot in the queue.",13,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"choice"}}],[10,"update_scores","","Updates the transaction scores given a list of transactions and a change to previous scoring. NOTE: you can safely assume that both slices have the same length. (i.e. score at index `i` represents transaction at the same index)",13,null],[10,"should_replace","","Decides if `new` should push out `old` transaction from the pool.",13,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"choice"}}],[11,"should_ignore_sender_limit","","Decides if the transaction should ignore per-sender limit in the pool.",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"choice"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"choice"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"change"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"change"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"change"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `ScoreWithRef`",10,{"inputs":[{"name":"s"},{"name":"transaction"}],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[8,"Listener","transaction_pool","Transaction pool listener.",null,null],[11,"added","","The transaction has been successfuly added to the pool. If second argument is `Some` the transaction has took place of some other transaction which was already in pool. NOTE: You won't be notified about drop of `old` transaction separately.",14,{"inputs":[{"name":"self"},{"name":"arc"},{"generics":["arc"],"name":"option"}],"output":null}],[11,"rejected","","The transaction was rejected from the pool. It means that it was too cheap to replace any transaction already in the pool.",14,{"inputs":[{"name":"self"},{"name":"arc"},{"name":"errorkind"}],"output":null}],[11,"dropped","","The transaction was pushed out from the pool because of the limit.",14,{"inputs":[{"name":"self"},{"name":"arc"},{"name":"option"}],"output":null}],[11,"invalid","","The transaction was marked as invalid by executor.",14,{"inputs":[{"name":"self"},{"name":"arc"}],"output":null}],[11,"canceled","","The transaction has been canceled.",14,{"inputs":[{"name":"self"},{"name":"arc"}],"output":null}],[11,"mined","","The transaction has been mined.",14,{"inputs":[{"name":"self"},{"name":"arc"}],"output":null}],[8,"Ready","","A readiness indicator.",null,null],[10,"is_ready","","Returns true if transaction is ready to be included in pending block, given all previous transactions that were ready are already included.",15,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"readiness"}}],[8,"Verifier","","Transaction verification.",null,null],[16,"Error","","Verification error.",16,null],[16,"VerifiedTransaction","","Verified transaction.",16,null],[10,"verify_transaction","","Verifies a `UnverifiedTransaction` and produces `VerifiedTransaction` instance.",16,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"result"}}],[8,"VerifiedTransaction","","Already verified transaction that can be safely queued.",null,null],[16,"Hash","","Transaction hash type.",17,null],[16,"Sender","","Transaction sender type.",17,null],[10,"hash","","Transaction hash",17,null],[10,"mem_usage","","Memory usage",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"sender","","Transaction sender",17,null],[11,"added","","The transaction has been successfuly added to the pool. If second argument is `Some` the transaction has took place of some other transaction which was already in pool. NOTE: You won't be notified about drop of `old` transaction separately.",14,{"inputs":[{"name":"self"},{"name":"arc"},{"generics":["arc"],"name":"option"}],"output":null}],[11,"rejected","","The transaction was rejected from the pool. It means that it was too cheap to replace any transaction already in the pool.",14,{"inputs":[{"name":"self"},{"name":"arc"},{"name":"errorkind"}],"output":null}],[11,"dropped","","The transaction was pushed out from the pool because of the limit.",14,{"inputs":[{"name":"self"},{"name":"arc"},{"name":"option"}],"output":null}],[11,"invalid","","The transaction was marked as invalid by executor.",14,{"inputs":[{"name":"self"},{"name":"arc"}],"output":null}],[11,"canceled","","The transaction has been canceled.",14,{"inputs":[{"name":"self"},{"name":"arc"}],"output":null}],[11,"mined","","The transaction has been mined.",14,{"inputs":[{"name":"self"},{"name":"arc"}],"output":null}]],"paths":[[3,"Error"],[3,"Options"],[3,"Transaction"],[3,"LightStatus"],[3,"Status"],[4,"ErrorKind"],[4,"Readiness"],[3,"NoopListener"],[3,"Pool"],[3,"PendingIterator"],[3,"ScoreWithRef"],[4,"Choice"],[4,"Change"],[8,"Scoring"],[8,"Listener"],[8,"Ready"],[8,"Verifier"],[8,"VerifiedTransaction"]]};
searchIndex["trezor_sys"] = {"doc":"","items":[[0,"messages","trezor_sys","",null,null],[3,"Initialize","trezor_sys::messages","",null,null],[3,"GetFeatures","","",null,null],[3,"Features","","",null,null],[3,"ClearSession","","",null,null],[3,"ApplySettings","","",null,null],[3,"ApplyFlags","","",null,null],[3,"ChangePin","","",null,null],[3,"Ping","","",null,null],[3,"Success","","",null,null],[3,"Failure","","",null,null],[3,"ButtonRequest","","",null,null],[3,"ButtonAck","","",null,null],[3,"PinMatrixRequest","","",null,null],[3,"PinMatrixAck","","",null,null],[3,"Cancel","","",null,null],[3,"PassphraseRequest","","",null,null],[3,"PassphraseAck","","",null,null],[3,"GetEntropy","","",null,null],[3,"Entropy","","",null,null],[3,"GetPublicKey","","",null,null],[3,"PublicKey","","",null,null],[3,"GetAddress","","",null,null],[3,"EthereumGetAddress","","",null,null],[3,"Address","","",null,null],[3,"EthereumAddress","","",null,null],[3,"WipeDevice","","",null,null],[3,"LoadDevice","","",null,null],[3,"ResetDevice","","",null,null],[3,"BackupDevice","","",null,null],[3,"EntropyRequest","","",null,null],[3,"EntropyAck","","",null,null],[3,"RecoveryDevice","","",null,null],[3,"WordRequest","","",null,null],[3,"WordAck","","",null,null],[3,"SignMessage","","",null,null],[3,"VerifyMessage","","",null,null],[3,"MessageSignature","","",null,null],[3,"EncryptMessage","","",null,null],[3,"EncryptedMessage","","",null,null],[3,"DecryptMessage","","",null,null],[3,"DecryptedMessage","","",null,null],[3,"CipherKeyValue","","",null,null],[3,"CipheredKeyValue","","",null,null],[3,"EstimateTxSize","","",null,null],[3,"TxSize","","",null,null],[3,"SignTx","","",null,null],[3,"SimpleSignTx","","",null,null],[3,"TxRequest","","",null,null],[3,"TxAck","","",null,null],[3,"EthereumSignTx","","",null,null],[3,"EthereumTxRequest","","",null,null],[3,"EthereumTxAck","","",null,null],[3,"EthereumSignMessage","","",null,null],[3,"EthereumVerifyMessage","","",null,null],[3,"EthereumMessageSignature","","",null,null],[3,"SignIdentity","","",null,null],[3,"SignedIdentity","","",null,null],[3,"GetECDHSessionKey","","",null,null],[3,"ECDHSessionKey","","",null,null],[3,"SetU2FCounter","","",null,null],[3,"FirmwareErase","","",null,null],[3,"FirmwareRequest","","",null,null],[3,"FirmwareUpload","","",null,null],[3,"SelfTest","","",null,null],[3,"DebugLinkDecision","","",null,null],[3,"DebugLinkGetState","","",null,null],[3,"DebugLinkState","","",null,null],[3,"DebugLinkStop","","",null,null],[3,"DebugLinkLog","","",null,null],[3,"DebugLinkMemoryRead","","",null,null],[3,"DebugLinkMemory","","",null,null],[3,"DebugLinkMemoryWrite","","",null,null],[3,"DebugLinkFlashErase","","",null,null],[4,"MessageType","","",null,null],[13,"MessageType_Initialize","","",0,null],[13,"MessageType_Ping","","",0,null],[13,"MessageType_Success","","",0,null],[13,"MessageType_Failure","","",0,null],[13,"MessageType_ChangePin","","",0,null],[13,"MessageType_WipeDevice","","",0,null],[13,"MessageType_FirmwareErase","","",0,null],[13,"MessageType_FirmwareUpload","","",0,null],[13,"MessageType_FirmwareRequest","","",0,null],[13,"MessageType_GetEntropy","","",0,null],[13,"MessageType_Entropy","","",0,null],[13,"MessageType_GetPublicKey","","",0,null],[13,"MessageType_PublicKey","","",0,null],[13,"MessageType_LoadDevice","","",0,null],[13,"MessageType_ResetDevice","","",0,null],[13,"MessageType_SignTx","","",0,null],[13,"MessageType_SimpleSignTx","","",0,null],[13,"MessageType_Features","","",0,null],[13,"MessageType_PinMatrixRequest","","",0,null],[13,"MessageType_PinMatrixAck","","",0,null],[13,"MessageType_Cancel","","",0,null],[13,"MessageType_TxRequest","","",0,null],[13,"MessageType_TxAck","","",0,null],[13,"MessageType_CipherKeyValue","","",0,null],[13,"MessageType_ClearSession","","",0,null],[13,"MessageType_ApplySettings","","",0,null],[13,"MessageType_ButtonRequest","","",0,null],[13,"MessageType_ButtonAck","","",0,null],[13,"MessageType_ApplyFlags","","",0,null],[13,"MessageType_GetAddress","","",0,null],[13,"MessageType_Address","","",0,null],[13,"MessageType_SelfTest","","",0,null],[13,"MessageType_BackupDevice","","",0,null],[13,"MessageType_EntropyRequest","","",0,null],[13,"MessageType_EntropyAck","","",0,null],[13,"MessageType_SignMessage","","",0,null],[13,"MessageType_VerifyMessage","","",0,null],[13,"MessageType_MessageSignature","","",0,null],[13,"MessageType_PassphraseRequest","","",0,null],[13,"MessageType_PassphraseAck","","",0,null],[13,"MessageType_EstimateTxSize","","",0,null],[13,"MessageType_TxSize","","",0,null],[13,"MessageType_RecoveryDevice","","",0,null],[13,"MessageType_WordRequest","","",0,null],[13,"MessageType_WordAck","","",0,null],[13,"MessageType_CipheredKeyValue","","",0,null],[13,"MessageType_EncryptMessage","","",0,null],[13,"MessageType_EncryptedMessage","","",0,null],[13,"MessageType_DecryptMessage","","",0,null],[13,"MessageType_DecryptedMessage","","",0,null],[13,"MessageType_SignIdentity","","",0,null],[13,"MessageType_SignedIdentity","","",0,null],[13,"MessageType_GetFeatures","","",0,null],[13,"MessageType_EthereumGetAddress","","",0,null],[13,"MessageType_EthereumAddress","","",0,null],[13,"MessageType_EthereumSignTx","","",0,null],[13,"MessageType_EthereumTxRequest","","",0,null],[13,"MessageType_EthereumTxAck","","",0,null],[13,"MessageType_GetECDHSessionKey","","",0,null],[13,"MessageType_ECDHSessionKey","","",0,null],[13,"MessageType_SetU2FCounter","","",0,null],[13,"MessageType_EthereumSignMessage","","",0,null],[13,"MessageType_EthereumVerifyMessage","","",0,null],[13,"MessageType_EthereumMessageSignature","","",0,null],[13,"MessageType_DebugLinkDecision","","",0,null],[13,"MessageType_DebugLinkGetState","","",0,null],[13,"MessageType_DebugLinkState","","",0,null],[13,"MessageType_DebugLinkStop","","",0,null],[13,"MessageType_DebugLinkLog","","",0,null],[13,"MessageType_DebugLinkMemoryRead","","",0,null],[13,"MessageType_DebugLinkMemory","","",0,null],[13,"MessageType_DebugLinkMemoryWrite","","",0,null],[13,"MessageType_DebugLinkFlashErase","","",0,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"initialize"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"initialize"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"initialize"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"initialize"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"initialize"}}],[11,"default_instance","","",1,{"inputs":[],"output":{"name":"initialize"}}],[11,"is_initialized","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",1,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",1,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",1,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",1,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",1,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"initialize"}}],[11,"descriptor_static","","",1,{"inputs":[{"generics":["initialize"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"getfeatures"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"getfeatures"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"getfeatures"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"getfeatures"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"getfeatures"}}],[11,"default_instance","","",2,{"inputs":[],"output":{"name":"getfeatures"}}],[11,"is_initialized","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",2,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",2,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",2,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",2,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",2,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"getfeatures"}}],[11,"descriptor_static","","",2,{"inputs":[{"generics":["getfeatures"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"features"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"features"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"features"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"features"}}],[11,"new","","",3,{"inputs":[],"output":{"name":"features"}}],[11,"default_instance","","",3,{"inputs":[],"output":{"name":"features"}}],[11,"clear_vendor","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_vendor","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_vendor","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_vendor","","",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_vendor","","",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_vendor","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_major_version","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_major_version","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_major_version","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_major_version","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_minor_version","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_minor_version","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_minor_version","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_minor_version","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_patch_version","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_patch_version","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_patch_version","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_patch_version","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_bootloader_mode","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_bootloader_mode","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_bootloader_mode","","",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_bootloader_mode","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_device_id","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_device_id","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_device_id","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_device_id","","",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_device_id","","",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_device_id","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_pin_protection","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_pin_protection","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_pin_protection","","",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_pin_protection","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_passphrase_protection","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_passphrase_protection","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_passphrase_protection","","",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_passphrase_protection","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_language","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_language","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_language","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_language","","",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_language","","",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_language","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_label","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_label","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_label","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_label","","",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_label","","",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_label","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_coins","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"set_coins","","",3,{"inputs":[{"name":"self"},{"generics":["cointype"],"name":"repeatedfield"}],"output":null}],[11,"mut_coins","","",3,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_coins","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["cointype"],"name":"repeatedfield"}}],[11,"get_coins","","",3,null],[11,"clear_initialized","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_initialized","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_initialized","","",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_initialized","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_revision","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_revision","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_revision","","",3,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_revision","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_revision","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_revision","","",3,null],[11,"clear_bootloader_hash","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_bootloader_hash","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_bootloader_hash","","",3,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_bootloader_hash","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_bootloader_hash","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_bootloader_hash","","",3,null],[11,"clear_imported","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_imported","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_imported","","",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_imported","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_pin_cached","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_pin_cached","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_pin_cached","","",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_pin_cached","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_passphrase_cached","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_passphrase_cached","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_passphrase_cached","","",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_passphrase_cached","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_firmware_present","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_firmware_present","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_firmware_present","","",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_firmware_present","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_needs_backup","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_needs_backup","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_needs_backup","","",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_needs_backup","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_flags","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"has_flags","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_flags","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_flags","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",3,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",3,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",3,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",3,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",3,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",3,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",3,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",3,{"inputs":[],"output":{"name":"features"}}],[11,"descriptor_static","","",3,{"inputs":[{"generics":["features"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"clearsession"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"clearsession"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"clearsession"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"clearsession"}}],[11,"new","","",4,{"inputs":[],"output":{"name":"clearsession"}}],[11,"default_instance","","",4,{"inputs":[],"output":{"name":"clearsession"}}],[11,"is_initialized","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",4,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",4,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",4,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",4,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",4,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",4,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",4,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",4,{"inputs":[],"output":{"name":"clearsession"}}],[11,"descriptor_static","","",4,{"inputs":[{"generics":["clearsession"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"applysettings"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"applysettings"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"applysettings"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"applysettings"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"applysettings"}}],[11,"default_instance","","",5,{"inputs":[],"output":{"name":"applysettings"}}],[11,"clear_language","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"has_language","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_language","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_language","","",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_language","","",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_language","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_label","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"has_label","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_label","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_label","","",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_label","","",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_label","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_use_passphrase","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"has_use_passphrase","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_use_passphrase","","",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_use_passphrase","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_homescreen","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"has_homescreen","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_homescreen","","",5,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_homescreen","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_homescreen","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_homescreen","","",5,null],[11,"is_initialized","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",5,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",5,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",5,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",5,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",5,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",5,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",5,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",5,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"applysettings"}}],[11,"descriptor_static","","",5,{"inputs":[{"generics":["applysettings"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"applyflags"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"applyflags"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"applyflags"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"applyflags"}}],[11,"new","","",6,{"inputs":[],"output":{"name":"applyflags"}}],[11,"default_instance","","",6,{"inputs":[],"output":{"name":"applyflags"}}],[11,"clear_flags","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"has_flags","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_flags","","",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_flags","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",6,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",6,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",6,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",6,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",6,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",6,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",6,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",6,{"inputs":[],"output":{"name":"applyflags"}}],[11,"descriptor_static","","",6,{"inputs":[{"generics":["applyflags"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"changepin"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"changepin"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"changepin"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"changepin"}}],[11,"new","","",7,{"inputs":[],"output":{"name":"changepin"}}],[11,"default_instance","","",7,{"inputs":[],"output":{"name":"changepin"}}],[11,"clear_remove","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"has_remove","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_remove","","",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_remove","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",7,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",7,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",7,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",7,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",7,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",7,{"inputs":[],"output":{"name":"changepin"}}],[11,"descriptor_static","","",7,{"inputs":[{"generics":["changepin"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"ping"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"ping"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ping"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"ping"}}],[11,"new","","",8,{"inputs":[],"output":{"name":"ping"}}],[11,"default_instance","","",8,{"inputs":[],"output":{"name":"ping"}}],[11,"clear_message","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message","","",8,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_message","","",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_message","","",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_message","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_button_protection","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"has_button_protection","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_button_protection","","",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_button_protection","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_pin_protection","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"has_pin_protection","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_pin_protection","","",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_pin_protection","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_passphrase_protection","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"has_passphrase_protection","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_passphrase_protection","","",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_passphrase_protection","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",8,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",8,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",8,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",8,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",8,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",8,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",8,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",8,{"inputs":[],"output":{"name":"ping"}}],[11,"descriptor_static","","",8,{"inputs":[{"generics":["ping"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"success"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"success"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"success"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"success"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"success"}}],[11,"default_instance","","",9,{"inputs":[],"output":{"name":"success"}}],[11,"clear_message","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message","","",9,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_message","","",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_message","","",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_message","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",9,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",9,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",9,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",9,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",9,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",9,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",9,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"success"}}],[11,"descriptor_static","","",9,{"inputs":[{"generics":["success"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"failure"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"failure"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"failure"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"failure"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"failure"}}],[11,"default_instance","","",10,{"inputs":[],"output":{"name":"failure"}}],[11,"clear_code","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_code","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_code","","",10,{"inputs":[{"name":"self"},{"name":"failuretype"}],"output":null}],[11,"get_code","","",10,{"inputs":[{"name":"self"}],"output":{"name":"failuretype"}}],[11,"clear_message","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message","","",10,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_message","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_message","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_message","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",10,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",10,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",10,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",10,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",10,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"failure"}}],[11,"descriptor_static","","",10,{"inputs":[{"generics":["failure"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"buttonrequest"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"buttonrequest"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"buttonrequest"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"buttonrequest"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"buttonrequest"}}],[11,"default_instance","","",11,{"inputs":[],"output":{"name":"buttonrequest"}}],[11,"clear_code","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_code","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_code","","",11,{"inputs":[{"name":"self"},{"name":"buttonrequesttype"}],"output":null}],[11,"get_code","","",11,{"inputs":[{"name":"self"}],"output":{"name":"buttonrequesttype"}}],[11,"clear_data","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_data","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_data","","",11,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_data","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_data","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_data","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",11,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",11,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",11,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",11,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",11,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"buttonrequest"}}],[11,"descriptor_static","","",11,{"inputs":[{"generics":["buttonrequest"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"buttonack"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"buttonack"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"buttonack"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"buttonack"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"buttonack"}}],[11,"default_instance","","",12,{"inputs":[],"output":{"name":"buttonack"}}],[11,"is_initialized","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",12,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",12,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",12,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",12,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",12,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",12,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",12,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"buttonack"}}],[11,"descriptor_static","","",12,{"inputs":[{"generics":["buttonack"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"pinmatrixrequest"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"pinmatrixrequest"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"pinmatrixrequest"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"pinmatrixrequest"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"pinmatrixrequest"}}],[11,"default_instance","","",13,{"inputs":[],"output":{"name":"pinmatrixrequest"}}],[11,"clear_field_type","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"has_field_type","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_field_type","","",13,{"inputs":[{"name":"self"},{"name":"pinmatrixrequesttype"}],"output":null}],[11,"get_field_type","","",13,{"inputs":[{"name":"self"}],"output":{"name":"pinmatrixrequesttype"}}],[11,"is_initialized","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",13,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",13,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",13,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",13,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",13,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"pinmatrixrequest"}}],[11,"descriptor_static","","",13,{"inputs":[{"generics":["pinmatrixrequest"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"pinmatrixack"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"pinmatrixack"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"pinmatrixack"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"pinmatrixack"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"pinmatrixack"}}],[11,"default_instance","","",14,{"inputs":[],"output":{"name":"pinmatrixack"}}],[11,"clear_pin","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_pin","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_pin","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_pin","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_pin","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_pin","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",14,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",14,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",14,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",14,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",14,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",14,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",14,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"pinmatrixack"}}],[11,"descriptor_static","","",14,{"inputs":[{"generics":["pinmatrixack"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"cancel"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"cancel"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"cancel"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"cancel"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"cancel"}}],[11,"default_instance","","",15,{"inputs":[],"output":{"name":"cancel"}}],[11,"is_initialized","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",15,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",15,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",15,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",15,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",15,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",15,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",15,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",15,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"cancel"}}],[11,"descriptor_static","","",15,{"inputs":[{"generics":["cancel"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"passphraserequest"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"passphraserequest"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"passphraserequest"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"passphraserequest"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"passphraserequest"}}],[11,"default_instance","","",16,{"inputs":[],"output":{"name":"passphraserequest"}}],[11,"is_initialized","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",16,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",16,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",16,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",16,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",16,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",16,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",16,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"passphraserequest"}}],[11,"descriptor_static","","",16,{"inputs":[{"generics":["passphraserequest"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"passphraseack"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"passphraseack"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"passphraseack"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"passphraseack"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"passphraseack"}}],[11,"default_instance","","",17,{"inputs":[],"output":{"name":"passphraseack"}}],[11,"clear_passphrase","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"has_passphrase","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_passphrase","","",17,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_passphrase","","",17,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_passphrase","","",17,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_passphrase","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",17,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",17,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",17,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",17,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",17,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",17,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",17,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"passphraseack"}}],[11,"descriptor_static","","",17,{"inputs":[{"generics":["passphraseack"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"getentropy"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"getentropy"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"getentropy"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"getentropy"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"getentropy"}}],[11,"default_instance","","",18,{"inputs":[],"output":{"name":"getentropy"}}],[11,"clear_size","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"has_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_size","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",18,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",18,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",18,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",18,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",18,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",18,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",18,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"getentropy"}}],[11,"descriptor_static","","",18,{"inputs":[{"generics":["getentropy"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"entropy"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"entropy"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"entropy"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"entropy"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"entropy"}}],[11,"default_instance","","",19,{"inputs":[],"output":{"name":"entropy"}}],[11,"clear_entropy","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_entropy","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_entropy","","",19,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_entropy","","",19,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_entropy","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_entropy","","",19,null],[11,"is_initialized","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",19,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",19,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",19,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",19,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",19,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",19,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",19,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"entropy"}}],[11,"descriptor_static","","",19,{"inputs":[{"generics":["entropy"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"getpublickey"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"getpublickey"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"getpublickey"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"getpublickey"}}],[11,"new","","",20,{"inputs":[],"output":{"name":"getpublickey"}}],[11,"default_instance","","",20,{"inputs":[],"output":{"name":"getpublickey"}}],[11,"clear_address_n","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"set_address_n","","",20,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"vec"}],"output":null}],[11,"mut_address_n","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_address_n","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"vec"}}],[11,"get_address_n","","",20,null],[11,"clear_ecdsa_curve_name","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_ecdsa_curve_name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ecdsa_curve_name","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_ecdsa_curve_name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_ecdsa_curve_name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_ecdsa_curve_name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_show_display","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_show_display","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_show_display","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_show_display","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_coin_name","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_coin_name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_coin_name","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_coin_name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_coin_name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_coin_name","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",20,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",20,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",20,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",20,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",20,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",20,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",20,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",20,{"inputs":[],"output":{"name":"getpublickey"}}],[11,"descriptor_static","","",20,{"inputs":[{"generics":["getpublickey"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"publickey"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"publickey"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"publickey"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"publickey"}}],[11,"default_instance","","",21,{"inputs":[],"output":{"name":"publickey"}}],[11,"clear_node","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"has_node","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_node","","",21,{"inputs":[{"name":"self"},{"name":"hdnodetype"}],"output":null}],[11,"mut_node","","",21,{"inputs":[{"name":"self"}],"output":{"name":"hdnodetype"}}],[11,"take_node","","",21,{"inputs":[{"name":"self"}],"output":{"name":"hdnodetype"}}],[11,"get_node","","",21,{"inputs":[{"name":"self"}],"output":{"name":"hdnodetype"}}],[11,"clear_xpub","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"has_xpub","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_xpub","","",21,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_xpub","","",21,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_xpub","","",21,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_xpub","","",21,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",21,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",21,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",21,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",21,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",21,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",21,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",21,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"publickey"}}],[11,"descriptor_static","","",21,{"inputs":[{"generics":["publickey"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"getaddress"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"getaddress"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"getaddress"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"getaddress"}}],[11,"new","","",22,{"inputs":[],"output":{"name":"getaddress"}}],[11,"default_instance","","",22,{"inputs":[],"output":{"name":"getaddress"}}],[11,"clear_address_n","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"set_address_n","","",22,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"vec"}],"output":null}],[11,"mut_address_n","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_address_n","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"vec"}}],[11,"get_address_n","","",22,null],[11,"clear_coin_name","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_coin_name","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_coin_name","","",22,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_coin_name","","",22,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_coin_name","","",22,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_coin_name","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_show_display","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_show_display","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_show_display","","",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_show_display","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_multisig","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_multisig","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_multisig","","",22,{"inputs":[{"name":"self"},{"name":"multisigredeemscripttype"}],"output":null}],[11,"mut_multisig","","",22,{"inputs":[{"name":"self"}],"output":{"name":"multisigredeemscripttype"}}],[11,"take_multisig","","",22,{"inputs":[{"name":"self"}],"output":{"name":"multisigredeemscripttype"}}],[11,"get_multisig","","",22,{"inputs":[{"name":"self"}],"output":{"name":"multisigredeemscripttype"}}],[11,"clear_script_type","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_script_type","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_script_type","","",22,{"inputs":[{"name":"self"},{"name":"inputscripttype"}],"output":null}],[11,"get_script_type","","",22,{"inputs":[{"name":"self"}],"output":{"name":"inputscripttype"}}],[11,"is_initialized","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",22,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",22,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",22,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",22,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",22,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",22,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",22,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",22,{"inputs":[],"output":{"name":"getaddress"}}],[11,"descriptor_static","","",22,{"inputs":[{"generics":["getaddress"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"ethereumgetaddress"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"ethereumgetaddress"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"ethereumgetaddress"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"ethereumgetaddress"}}],[11,"new","","",23,{"inputs":[],"output":{"name":"ethereumgetaddress"}}],[11,"default_instance","","",23,{"inputs":[],"output":{"name":"ethereumgetaddress"}}],[11,"clear_address_n","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"set_address_n","","",23,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"vec"}],"output":null}],[11,"mut_address_n","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_address_n","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"vec"}}],[11,"get_address_n","","",23,null],[11,"clear_show_display","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"has_show_display","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_show_display","","",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_show_display","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",23,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",23,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",23,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",23,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",23,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",23,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",23,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",23,{"inputs":[],"output":{"name":"ethereumgetaddress"}}],[11,"descriptor_static","","",23,{"inputs":[{"generics":["ethereumgetaddress"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"address"}}],[11,"new","","",24,{"inputs":[],"output":{"name":"address"}}],[11,"default_instance","","",24,{"inputs":[],"output":{"name":"address"}}],[11,"clear_address","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"has_address","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_address","","",24,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_address","","",24,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_address","","",24,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_address","","",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",24,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",24,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",24,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",24,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",24,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",24,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",24,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",24,{"inputs":[],"output":{"name":"address"}}],[11,"descriptor_static","","",24,{"inputs":[{"generics":["address"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"ethereumaddress"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"ethereumaddress"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"ethereumaddress"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"ethereumaddress"}}],[11,"new","","",25,{"inputs":[],"output":{"name":"ethereumaddress"}}],[11,"default_instance","","",25,{"inputs":[],"output":{"name":"ethereumaddress"}}],[11,"clear_address","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"has_address","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_address","","",25,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_address","","",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_address","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_address","","",25,null],[11,"is_initialized","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",25,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",25,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",25,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",25,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",25,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",25,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",25,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",25,{"inputs":[],"output":{"name":"ethereumaddress"}}],[11,"descriptor_static","","",25,{"inputs":[{"generics":["ethereumaddress"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"wipedevice"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"wipedevice"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"wipedevice"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"wipedevice"}}],[11,"new","","",26,{"inputs":[],"output":{"name":"wipedevice"}}],[11,"default_instance","","",26,{"inputs":[],"output":{"name":"wipedevice"}}],[11,"is_initialized","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",26,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",26,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",26,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",26,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",26,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",26,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",26,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",26,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",26,{"inputs":[],"output":{"name":"wipedevice"}}],[11,"descriptor_static","","",26,{"inputs":[{"generics":["wipedevice"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"loaddevice"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"loaddevice"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"loaddevice"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"loaddevice"}}],[11,"new","","",27,{"inputs":[],"output":{"name":"loaddevice"}}],[11,"default_instance","","",27,{"inputs":[],"output":{"name":"loaddevice"}}],[11,"clear_mnemonic","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"has_mnemonic","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_mnemonic","","",27,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_mnemonic","","",27,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_mnemonic","","",27,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_mnemonic","","",27,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_node","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"has_node","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_node","","",27,{"inputs":[{"name":"self"},{"name":"hdnodetype"}],"output":null}],[11,"mut_node","","",27,{"inputs":[{"name":"self"}],"output":{"name":"hdnodetype"}}],[11,"take_node","","",27,{"inputs":[{"name":"self"}],"output":{"name":"hdnodetype"}}],[11,"get_node","","",27,{"inputs":[{"name":"self"}],"output":{"name":"hdnodetype"}}],[11,"clear_pin","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"has_pin","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_pin","","",27,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_pin","","",27,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_pin","","",27,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_pin","","",27,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_passphrase_protection","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"has_passphrase_protection","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_passphrase_protection","","",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_passphrase_protection","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_language","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"has_language","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_language","","",27,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_language","","",27,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_language","","",27,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_language","","",27,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_label","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"has_label","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_label","","",27,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_label","","",27,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_label","","",27,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_label","","",27,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_skip_checksum","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"has_skip_checksum","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_skip_checksum","","",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_skip_checksum","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_u2f_counter","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"has_u2f_counter","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_u2f_counter","","",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_u2f_counter","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",27,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",27,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",27,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",27,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",27,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",27,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",27,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",27,{"inputs":[],"output":{"name":"loaddevice"}}],[11,"descriptor_static","","",27,{"inputs":[{"generics":["loaddevice"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"resetdevice"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"resetdevice"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"resetdevice"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"resetdevice"}}],[11,"new","","",28,{"inputs":[],"output":{"name":"resetdevice"}}],[11,"default_instance","","",28,{"inputs":[],"output":{"name":"resetdevice"}}],[11,"clear_display_random","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_display_random","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_display_random","","",28,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_display_random","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_strength","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_strength","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_strength","","",28,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_strength","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_passphrase_protection","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_passphrase_protection","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_passphrase_protection","","",28,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_passphrase_protection","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_pin_protection","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_pin_protection","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_pin_protection","","",28,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_pin_protection","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_language","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_language","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_language","","",28,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_language","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_language","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_language","","",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_label","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_label","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_label","","",28,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_label","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_label","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_label","","",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_u2f_counter","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_u2f_counter","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_u2f_counter","","",28,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_u2f_counter","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_skip_backup","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_skip_backup","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_skip_backup","","",28,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_skip_backup","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",28,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",28,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",28,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",28,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",28,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",28,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",28,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",28,{"inputs":[],"output":{"name":"resetdevice"}}],[11,"descriptor_static","","",28,{"inputs":[{"generics":["resetdevice"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"backupdevice"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"backupdevice"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"backupdevice"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"backupdevice"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"backupdevice"}}],[11,"default_instance","","",29,{"inputs":[],"output":{"name":"backupdevice"}}],[11,"is_initialized","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",29,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",29,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",29,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",29,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",29,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",29,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",29,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"backupdevice"}}],[11,"descriptor_static","","",29,{"inputs":[{"generics":["backupdevice"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"entropyrequest"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"entropyrequest"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"entropyrequest"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"entropyrequest"}}],[11,"new","","",30,{"inputs":[],"output":{"name":"entropyrequest"}}],[11,"default_instance","","",30,{"inputs":[],"output":{"name":"entropyrequest"}}],[11,"is_initialized","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",30,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",30,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",30,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",30,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",30,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",30,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",30,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",30,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",30,{"inputs":[],"output":{"name":"entropyrequest"}}],[11,"descriptor_static","","",30,{"inputs":[{"generics":["entropyrequest"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"entropyack"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"entropyack"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"entropyack"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"entropyack"}}],[11,"new","","",31,{"inputs":[],"output":{"name":"entropyack"}}],[11,"default_instance","","",31,{"inputs":[],"output":{"name":"entropyack"}}],[11,"clear_entropy","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"has_entropy","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_entropy","","",31,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_entropy","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_entropy","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_entropy","","",31,null],[11,"is_initialized","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",31,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",31,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",31,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",31,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",31,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",31,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",31,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",31,{"inputs":[],"output":{"name":"entropyack"}}],[11,"descriptor_static","","",31,{"inputs":[{"generics":["entropyack"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"recoverydevice"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"recoverydevice"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"recoverydevice"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"recoverydevice"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"recoverydevice"}}],[11,"default_instance","","",32,{"inputs":[],"output":{"name":"recoverydevice"}}],[11,"clear_word_count","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"has_word_count","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_word_count","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_word_count","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_passphrase_protection","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"has_passphrase_protection","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_passphrase_protection","","",32,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_passphrase_protection","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_pin_protection","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"has_pin_protection","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_pin_protection","","",32,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_pin_protection","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_language","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"has_language","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_language","","",32,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_language","","",32,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_language","","",32,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_language","","",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_label","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"has_label","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_label","","",32,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_label","","",32,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_label","","",32,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_label","","",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_enforce_wordlist","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"has_enforce_wordlist","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_enforce_wordlist","","",32,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_enforce_wordlist","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_field_type","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"has_field_type","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_field_type","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_field_type","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_u2f_counter","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"has_u2f_counter","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_u2f_counter","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_u2f_counter","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_dry_run","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"has_dry_run","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_dry_run","","",32,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_dry_run","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",32,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",32,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",32,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",32,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",32,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",32,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",32,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"recoverydevice"}}],[11,"descriptor_static","","",32,{"inputs":[{"generics":["recoverydevice"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"wordrequest"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"wordrequest"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"wordrequest"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"wordrequest"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"wordrequest"}}],[11,"default_instance","","",33,{"inputs":[],"output":{"name":"wordrequest"}}],[11,"clear_field_type","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"has_field_type","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_field_type","","",33,{"inputs":[{"name":"self"},{"name":"wordrequesttype"}],"output":null}],[11,"get_field_type","","",33,{"inputs":[{"name":"self"}],"output":{"name":"wordrequesttype"}}],[11,"is_initialized","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",33,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",33,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",33,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",33,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",33,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",33,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",33,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"wordrequest"}}],[11,"descriptor_static","","",33,{"inputs":[{"generics":["wordrequest"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"wordack"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"wordack"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"wordack"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"wordack"}}],[11,"new","","",34,{"inputs":[],"output":{"name":"wordack"}}],[11,"default_instance","","",34,{"inputs":[],"output":{"name":"wordack"}}],[11,"clear_word","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"has_word","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_word","","",34,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_word","","",34,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_word","","",34,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_word","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",34,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",34,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",34,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",34,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",34,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",34,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",34,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",34,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",34,{"inputs":[],"output":{"name":"wordack"}}],[11,"descriptor_static","","",34,{"inputs":[{"generics":["wordack"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"signmessage"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"signmessage"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"signmessage"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"signmessage"}}],[11,"new","","",35,{"inputs":[],"output":{"name":"signmessage"}}],[11,"default_instance","","",35,{"inputs":[],"output":{"name":"signmessage"}}],[11,"clear_address_n","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"set_address_n","","",35,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"vec"}],"output":null}],[11,"mut_address_n","","",35,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_address_n","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"vec"}}],[11,"get_address_n","","",35,null],[11,"clear_message","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message","","",35,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_message","","",35,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_message","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_message","","",35,null],[11,"clear_coin_name","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"has_coin_name","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_coin_name","","",35,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_coin_name","","",35,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_coin_name","","",35,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_coin_name","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_script_type","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"has_script_type","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_script_type","","",35,{"inputs":[{"name":"self"},{"name":"inputscripttype"}],"output":null}],[11,"get_script_type","","",35,{"inputs":[{"name":"self"}],"output":{"name":"inputscripttype"}}],[11,"is_initialized","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",35,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",35,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",35,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",35,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",35,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",35,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",35,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",35,{"inputs":[],"output":{"name":"signmessage"}}],[11,"descriptor_static","","",35,{"inputs":[{"generics":["signmessage"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"verifymessage"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"verifymessage"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"verifymessage"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"verifymessage"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"verifymessage"}}],[11,"default_instance","","",36,{"inputs":[],"output":{"name":"verifymessage"}}],[11,"clear_address","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_address","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_address","","",36,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_address","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_address","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_address","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_signature","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_signature","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_signature","","",36,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_signature","","",36,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_signature","","",36,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_signature","","",36,null],[11,"clear_message","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message","","",36,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_message","","",36,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_message","","",36,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_message","","",36,null],[11,"clear_coin_name","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_coin_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_coin_name","","",36,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_coin_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_coin_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_coin_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",36,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",36,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",36,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",36,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",36,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",36,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",36,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",36,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"verifymessage"}}],[11,"descriptor_static","","",36,{"inputs":[{"generics":["verifymessage"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"messagesignature"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"messagesignature"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"messagesignature"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"messagesignature"}}],[11,"new","","",37,{"inputs":[],"output":{"name":"messagesignature"}}],[11,"default_instance","","",37,{"inputs":[],"output":{"name":"messagesignature"}}],[11,"clear_address","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"has_address","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_address","","",37,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_address","","",37,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_address","","",37,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_address","","",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_signature","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"has_signature","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_signature","","",37,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_signature","","",37,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_signature","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_signature","","",37,null],[11,"is_initialized","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",37,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",37,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",37,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",37,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",37,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",37,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",37,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",37,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",37,{"inputs":[],"output":{"name":"messagesignature"}}],[11,"descriptor_static","","",37,{"inputs":[{"generics":["messagesignature"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",37,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"encryptmessage"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"encryptmessage"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"encryptmessage"}}],[11,"default","","",38,{"inputs":[],"output":{"name":"encryptmessage"}}],[11,"new","","",38,{"inputs":[],"output":{"name":"encryptmessage"}}],[11,"default_instance","","",38,{"inputs":[],"output":{"name":"encryptmessage"}}],[11,"clear_pubkey","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"has_pubkey","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_pubkey","","",38,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_pubkey","","",38,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_pubkey","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_pubkey","","",38,null],[11,"clear_message","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message","","",38,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_message","","",38,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_message","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_message","","",38,null],[11,"clear_display_only","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"has_display_only","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_display_only","","",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_display_only","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_address_n","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"set_address_n","","",38,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"vec"}],"output":null}],[11,"mut_address_n","","",38,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_address_n","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"vec"}}],[11,"get_address_n","","",38,null],[11,"clear_coin_name","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"has_coin_name","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_coin_name","","",38,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_coin_name","","",38,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_coin_name","","",38,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_coin_name","","",38,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",38,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",38,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",38,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",38,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",38,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",38,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",38,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",38,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",38,{"inputs":[],"output":{"name":"encryptmessage"}}],[11,"descriptor_static","","",38,{"inputs":[{"generics":["encryptmessage"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",38,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"encryptedmessage"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"encryptedmessage"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"encryptedmessage"}}],[11,"default","","",39,{"inputs":[],"output":{"name":"encryptedmessage"}}],[11,"new","","",39,{"inputs":[],"output":{"name":"encryptedmessage"}}],[11,"default_instance","","",39,{"inputs":[],"output":{"name":"encryptedmessage"}}],[11,"clear_nonce","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"has_nonce","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_nonce","","",39,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_nonce","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_nonce","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_nonce","","",39,null],[11,"clear_message","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message","","",39,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_message","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_message","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_message","","",39,null],[11,"clear_hmac","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"has_hmac","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_hmac","","",39,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_hmac","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_hmac","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_hmac","","",39,null],[11,"is_initialized","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",39,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",39,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",39,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",39,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",39,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",39,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",39,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",39,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",39,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",39,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",39,{"inputs":[],"output":{"name":"encryptedmessage"}}],[11,"descriptor_static","","",39,{"inputs":[{"generics":["encryptedmessage"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"decryptmessage"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"decryptmessage"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"decryptmessage"}}],[11,"default","","",40,{"inputs":[],"output":{"name":"decryptmessage"}}],[11,"new","","",40,{"inputs":[],"output":{"name":"decryptmessage"}}],[11,"default_instance","","",40,{"inputs":[],"output":{"name":"decryptmessage"}}],[11,"clear_address_n","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"set_address_n","","",40,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"vec"}],"output":null}],[11,"mut_address_n","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_address_n","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"vec"}}],[11,"get_address_n","","",40,null],[11,"clear_nonce","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"has_nonce","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_nonce","","",40,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_nonce","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_nonce","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_nonce","","",40,null],[11,"clear_message","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message","","",40,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_message","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_message","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_message","","",40,null],[11,"clear_hmac","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"has_hmac","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_hmac","","",40,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_hmac","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_hmac","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_hmac","","",40,null],[11,"is_initialized","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",40,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",40,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",40,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",40,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",40,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",40,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",40,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",40,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",40,{"inputs":[],"output":{"name":"decryptmessage"}}],[11,"descriptor_static","","",40,{"inputs":[{"generics":["decryptmessage"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"decryptedmessage"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"decryptedmessage"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"decryptedmessage"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"decryptedmessage"}}],[11,"new","","",41,{"inputs":[],"output":{"name":"decryptedmessage"}}],[11,"default_instance","","",41,{"inputs":[],"output":{"name":"decryptedmessage"}}],[11,"clear_message","","",41,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message","","",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message","","",41,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_message","","",41,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_message","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_message","","",41,null],[11,"clear_address","","",41,{"inputs":[{"name":"self"}],"output":null}],[11,"has_address","","",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_address","","",41,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_address","","",41,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_address","","",41,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_address","","",41,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",41,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",41,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",41,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",41,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",41,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",41,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",41,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",41,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",41,{"inputs":[],"output":{"name":"decryptedmessage"}}],[11,"descriptor_static","","",41,{"inputs":[{"generics":["decryptedmessage"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",41,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"cipherkeyvalue"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"cipherkeyvalue"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"cipherkeyvalue"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"cipherkeyvalue"}}],[11,"new","","",42,{"inputs":[],"output":{"name":"cipherkeyvalue"}}],[11,"default_instance","","",42,{"inputs":[],"output":{"name":"cipherkeyvalue"}}],[11,"clear_address_n","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"set_address_n","","",42,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"vec"}],"output":null}],[11,"mut_address_n","","",42,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_address_n","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"vec"}}],[11,"get_address_n","","",42,null],[11,"clear_key","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"has_key","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_key","","",42,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_key","","",42,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_key","","",42,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_key","","",42,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_value","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"has_value","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_value","","",42,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_value","","",42,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_value","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_value","","",42,null],[11,"clear_encrypt","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"has_encrypt","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_encrypt","","",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_encrypt","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_ask_on_encrypt","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"has_ask_on_encrypt","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ask_on_encrypt","","",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_ask_on_encrypt","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_ask_on_decrypt","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"has_ask_on_decrypt","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ask_on_decrypt","","",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_ask_on_decrypt","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_iv","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"has_iv","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_iv","","",42,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_iv","","",42,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_iv","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_iv","","",42,null],[11,"is_initialized","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",42,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",42,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",42,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",42,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",42,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",42,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",42,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",42,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",42,{"inputs":[],"output":{"name":"cipherkeyvalue"}}],[11,"descriptor_static","","",42,{"inputs":[{"generics":["cipherkeyvalue"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",42,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"cipheredkeyvalue"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"cipheredkeyvalue"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"cipheredkeyvalue"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"cipheredkeyvalue"}}],[11,"new","","",43,{"inputs":[],"output":{"name":"cipheredkeyvalue"}}],[11,"default_instance","","",43,{"inputs":[],"output":{"name":"cipheredkeyvalue"}}],[11,"clear_value","","",43,{"inputs":[{"name":"self"}],"output":null}],[11,"has_value","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_value","","",43,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_value","","",43,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_value","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_value","","",43,null],[11,"is_initialized","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",43,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",43,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",43,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",43,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",43,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",43,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",43,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",43,{"inputs":[],"output":{"name":"cipheredkeyvalue"}}],[11,"descriptor_static","","",43,{"inputs":[{"generics":["cipheredkeyvalue"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",43,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"estimatetxsize"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"estimatetxsize"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"estimatetxsize"}}],[11,"default","","",44,{"inputs":[],"output":{"name":"estimatetxsize"}}],[11,"new","","",44,{"inputs":[],"output":{"name":"estimatetxsize"}}],[11,"default_instance","","",44,{"inputs":[],"output":{"name":"estimatetxsize"}}],[11,"clear_outputs_count","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"has_outputs_count","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_outputs_count","","",44,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_outputs_count","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_inputs_count","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"has_inputs_count","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_inputs_count","","",44,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_inputs_count","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_coin_name","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"has_coin_name","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_coin_name","","",44,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_coin_name","","",44,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_coin_name","","",44,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_coin_name","","",44,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",44,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",44,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",44,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",44,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",44,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",44,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",44,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",44,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",44,{"inputs":[],"output":{"name":"estimatetxsize"}}],[11,"descriptor_static","","",44,{"inputs":[{"generics":["estimatetxsize"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"txsize"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"txsize"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"txsize"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"txsize"}}],[11,"new","","",45,{"inputs":[],"output":{"name":"txsize"}}],[11,"default_instance","","",45,{"inputs":[],"output":{"name":"txsize"}}],[11,"clear_tx_size","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tx_size","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tx_size","","",45,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_tx_size","","",45,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",45,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",45,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",45,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",45,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",45,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",45,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",45,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",45,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",45,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",45,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",45,{"inputs":[],"output":{"name":"txsize"}}],[11,"descriptor_static","","",45,{"inputs":[{"generics":["txsize"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"signtx"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"signtx"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"signtx"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"signtx"}}],[11,"new","","",46,{"inputs":[],"output":{"name":"signtx"}}],[11,"default_instance","","",46,{"inputs":[],"output":{"name":"signtx"}}],[11,"clear_outputs_count","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"has_outputs_count","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_outputs_count","","",46,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_outputs_count","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_inputs_count","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"has_inputs_count","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_inputs_count","","",46,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_inputs_count","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_coin_name","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"has_coin_name","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_coin_name","","",46,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_coin_name","","",46,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_coin_name","","",46,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_coin_name","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_version","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"has_version","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_version","","",46,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_version","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_lock_time","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"has_lock_time","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_lock_time","","",46,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_lock_time","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",46,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",46,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",46,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",46,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",46,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",46,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",46,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",46,{"inputs":[],"output":{"name":"signtx"}}],[11,"descriptor_static","","",46,{"inputs":[{"generics":["signtx"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"simplesigntx"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"simplesigntx"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"simplesigntx"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"simplesigntx"}}],[11,"new","","",47,{"inputs":[],"output":{"name":"simplesigntx"}}],[11,"default_instance","","",47,{"inputs":[],"output":{"name":"simplesigntx"}}],[11,"clear_inputs","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"set_inputs","","",47,{"inputs":[{"name":"self"},{"generics":["txinputtype"],"name":"repeatedfield"}],"output":null}],[11,"mut_inputs","","",47,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_inputs","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["txinputtype"],"name":"repeatedfield"}}],[11,"get_inputs","","",47,null],[11,"clear_outputs","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"set_outputs","","",47,{"inputs":[{"name":"self"},{"generics":["txoutputtype"],"name":"repeatedfield"}],"output":null}],[11,"mut_outputs","","",47,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_outputs","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["txoutputtype"],"name":"repeatedfield"}}],[11,"get_outputs","","",47,null],[11,"clear_transactions","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"set_transactions","","",47,{"inputs":[{"name":"self"},{"generics":["transactiontype"],"name":"repeatedfield"}],"output":null}],[11,"mut_transactions","","",47,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_transactions","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["transactiontype"],"name":"repeatedfield"}}],[11,"get_transactions","","",47,null],[11,"clear_coin_name","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"has_coin_name","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_coin_name","","",47,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_coin_name","","",47,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_coin_name","","",47,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_coin_name","","",47,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_version","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"has_version","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_version","","",47,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_version","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_lock_time","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"has_lock_time","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_lock_time","","",47,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_lock_time","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",47,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",47,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",47,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",47,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",47,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",47,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",47,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",47,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",47,{"inputs":[],"output":{"name":"simplesigntx"}}],[11,"descriptor_static","","",47,{"inputs":[{"generics":["simplesigntx"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"txrequest"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"txrequest"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"txrequest"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"txrequest"}}],[11,"new","","",48,{"inputs":[],"output":{"name":"txrequest"}}],[11,"default_instance","","",48,{"inputs":[],"output":{"name":"txrequest"}}],[11,"clear_request_type","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"has_request_type","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_request_type","","",48,{"inputs":[{"name":"self"},{"name":"requesttype"}],"output":null}],[11,"get_request_type","","",48,{"inputs":[{"name":"self"}],"output":{"name":"requesttype"}}],[11,"clear_details","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"has_details","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_details","","",48,{"inputs":[{"name":"self"},{"name":"txrequestdetailstype"}],"output":null}],[11,"mut_details","","",48,{"inputs":[{"name":"self"}],"output":{"name":"txrequestdetailstype"}}],[11,"take_details","","",48,{"inputs":[{"name":"self"}],"output":{"name":"txrequestdetailstype"}}],[11,"get_details","","",48,{"inputs":[{"name":"self"}],"output":{"name":"txrequestdetailstype"}}],[11,"clear_serialized","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"has_serialized","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_serialized","","",48,{"inputs":[{"name":"self"},{"name":"txrequestserializedtype"}],"output":null}],[11,"mut_serialized","","",48,{"inputs":[{"name":"self"}],"output":{"name":"txrequestserializedtype"}}],[11,"take_serialized","","",48,{"inputs":[{"name":"self"}],"output":{"name":"txrequestserializedtype"}}],[11,"get_serialized","","",48,{"inputs":[{"name":"self"}],"output":{"name":"txrequestserializedtype"}}],[11,"is_initialized","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",48,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",48,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",48,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",48,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",48,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",48,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",48,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",48,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",48,{"inputs":[],"output":{"name":"txrequest"}}],[11,"descriptor_static","","",48,{"inputs":[{"generics":["txrequest"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"txack"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"txack"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"txack"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"txack"}}],[11,"new","","",49,{"inputs":[],"output":{"name":"txack"}}],[11,"default_instance","","",49,{"inputs":[],"output":{"name":"txack"}}],[11,"clear_tx","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tx","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tx","","",49,{"inputs":[{"name":"self"},{"name":"transactiontype"}],"output":null}],[11,"mut_tx","","",49,{"inputs":[{"name":"self"}],"output":{"name":"transactiontype"}}],[11,"take_tx","","",49,{"inputs":[{"name":"self"}],"output":{"name":"transactiontype"}}],[11,"get_tx","","",49,{"inputs":[{"name":"self"}],"output":{"name":"transactiontype"}}],[11,"is_initialized","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",49,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",49,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",49,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",49,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",49,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",49,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",49,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",49,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",49,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",49,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",49,{"inputs":[],"output":{"name":"txack"}}],[11,"descriptor_static","","",49,{"inputs":[{"generics":["txack"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"ethereumsigntx"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"ethereumsigntx"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ethereumsigntx"}}],[11,"default","","",50,{"inputs":[],"output":{"name":"ethereumsigntx"}}],[11,"new","","",50,{"inputs":[],"output":{"name":"ethereumsigntx"}}],[11,"default_instance","","",50,{"inputs":[],"output":{"name":"ethereumsigntx"}}],[11,"clear_address_n","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"set_address_n","","",50,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"vec"}],"output":null}],[11,"mut_address_n","","",50,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_address_n","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"vec"}}],[11,"get_address_n","","",50,null],[11,"clear_nonce","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"has_nonce","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_nonce","","",50,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_nonce","","",50,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_nonce","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_nonce","","",50,null],[11,"clear_gas_price","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"has_gas_price","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_gas_price","","",50,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_gas_price","","",50,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_gas_price","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_gas_price","","",50,null],[11,"clear_gas_limit","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"has_gas_limit","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_gas_limit","","",50,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_gas_limit","","",50,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_gas_limit","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_gas_limit","","",50,null],[11,"clear_to","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"has_to","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_to","","",50,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_to","","",50,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_to","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_to","","",50,null],[11,"clear_value","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"has_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_value","","",50,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_value","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_value","","",50,null],[11,"clear_data_initial_chunk","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"has_data_initial_chunk","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_data_initial_chunk","","",50,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_data_initial_chunk","","",50,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_data_initial_chunk","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_data_initial_chunk","","",50,null],[11,"clear_data_length","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"has_data_length","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_data_length","","",50,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_data_length","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_chain_id","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"has_chain_id","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_chain_id","","",50,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_chain_id","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",50,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",50,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",50,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",50,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",50,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",50,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",50,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",50,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",50,{"inputs":[],"output":{"name":"ethereumsigntx"}}],[11,"descriptor_static","","",50,{"inputs":[{"generics":["ethereumsigntx"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"ethereumtxrequest"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"ethereumtxrequest"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"ethereumtxrequest"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"ethereumtxrequest"}}],[11,"new","","",51,{"inputs":[],"output":{"name":"ethereumtxrequest"}}],[11,"default_instance","","",51,{"inputs":[],"output":{"name":"ethereumtxrequest"}}],[11,"clear_data_length","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"has_data_length","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_data_length","","",51,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_data_length","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_signature_v","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"has_signature_v","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_signature_v","","",51,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_signature_v","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_signature_r","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"has_signature_r","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_signature_r","","",51,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_signature_r","","",51,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_signature_r","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_signature_r","","",51,null],[11,"clear_signature_s","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"has_signature_s","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_signature_s","","",51,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_signature_s","","",51,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_signature_s","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_signature_s","","",51,null],[11,"is_initialized","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",51,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",51,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",51,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",51,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",51,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",51,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",51,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",51,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",51,{"inputs":[],"output":{"name":"ethereumtxrequest"}}],[11,"descriptor_static","","",51,{"inputs":[{"generics":["ethereumtxrequest"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"ethereumtxack"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"ethereumtxack"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ethereumtxack"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"ethereumtxack"}}],[11,"new","","",52,{"inputs":[],"output":{"name":"ethereumtxack"}}],[11,"default_instance","","",52,{"inputs":[],"output":{"name":"ethereumtxack"}}],[11,"clear_data_chunk","","",52,{"inputs":[{"name":"self"}],"output":null}],[11,"has_data_chunk","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_data_chunk","","",52,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_data_chunk","","",52,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_data_chunk","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_data_chunk","","",52,null],[11,"is_initialized","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",52,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",52,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",52,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",52,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",52,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",52,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",52,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",52,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",52,{"inputs":[],"output":{"name":"ethereumtxack"}}],[11,"descriptor_static","","",52,{"inputs":[{"generics":["ethereumtxack"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",52,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"ethereumsignmessage"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"ethereumsignmessage"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"ethereumsignmessage"}}],[11,"default","","",53,{"inputs":[],"output":{"name":"ethereumsignmessage"}}],[11,"new","","",53,{"inputs":[],"output":{"name":"ethereumsignmessage"}}],[11,"default_instance","","",53,{"inputs":[],"output":{"name":"ethereumsignmessage"}}],[11,"clear_address_n","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"set_address_n","","",53,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"vec"}],"output":null}],[11,"mut_address_n","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_address_n","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"vec"}}],[11,"get_address_n","","",53,null],[11,"clear_message","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message","","",53,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_message","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_message","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_message","","",53,null],[11,"is_initialized","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",53,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",53,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",53,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",53,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",53,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",53,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",53,{"inputs":[],"output":{"name":"ethereumsignmessage"}}],[11,"descriptor_static","","",53,{"inputs":[{"generics":["ethereumsignmessage"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"ethereumverifymessage"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"ethereumverifymessage"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ethereumverifymessage"}}],[11,"default","","",54,{"inputs":[],"output":{"name":"ethereumverifymessage"}}],[11,"new","","",54,{"inputs":[],"output":{"name":"ethereumverifymessage"}}],[11,"default_instance","","",54,{"inputs":[],"output":{"name":"ethereumverifymessage"}}],[11,"clear_address","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"has_address","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_address","","",54,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_address","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_address","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_address","","",54,null],[11,"clear_signature","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"has_signature","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_signature","","",54,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_signature","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_signature","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_signature","","",54,null],[11,"clear_message","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message","","",54,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_message","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_message","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_message","","",54,null],[11,"is_initialized","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",54,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",54,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",54,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",54,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",54,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",54,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",54,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",54,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",54,{"inputs":[],"output":{"name":"ethereumverifymessage"}}],[11,"descriptor_static","","",54,{"inputs":[{"generics":["ethereumverifymessage"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"ethereummessagesignature"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"ethereummessagesignature"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"ethereummessagesignature"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"ethereummessagesignature"}}],[11,"new","","",55,{"inputs":[],"output":{"name":"ethereummessagesignature"}}],[11,"default_instance","","",55,{"inputs":[],"output":{"name":"ethereummessagesignature"}}],[11,"clear_address","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"has_address","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_address","","",55,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_address","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_address","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_address","","",55,null],[11,"clear_signature","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"has_signature","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_signature","","",55,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_signature","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_signature","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_signature","","",55,null],[11,"is_initialized","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",55,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",55,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",55,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",55,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",55,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",55,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",55,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",55,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",55,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",55,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",55,{"inputs":[],"output":{"name":"ethereummessagesignature"}}],[11,"descriptor_static","","",55,{"inputs":[{"generics":["ethereummessagesignature"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",55,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"signidentity"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"signidentity"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"signidentity"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"signidentity"}}],[11,"new","","",56,{"inputs":[],"output":{"name":"signidentity"}}],[11,"default_instance","","",56,{"inputs":[],"output":{"name":"signidentity"}}],[11,"clear_identity","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"has_identity","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_identity","","",56,{"inputs":[{"name":"self"},{"name":"identitytype"}],"output":null}],[11,"mut_identity","","",56,{"inputs":[{"name":"self"}],"output":{"name":"identitytype"}}],[11,"take_identity","","",56,{"inputs":[{"name":"self"}],"output":{"name":"identitytype"}}],[11,"get_identity","","",56,{"inputs":[{"name":"self"}],"output":{"name":"identitytype"}}],[11,"clear_challenge_hidden","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"has_challenge_hidden","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_challenge_hidden","","",56,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_challenge_hidden","","",56,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_challenge_hidden","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_challenge_hidden","","",56,null],[11,"clear_challenge_visual","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"has_challenge_visual","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_challenge_visual","","",56,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_challenge_visual","","",56,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_challenge_visual","","",56,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_challenge_visual","","",56,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_ecdsa_curve_name","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"has_ecdsa_curve_name","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ecdsa_curve_name","","",56,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_ecdsa_curve_name","","",56,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_ecdsa_curve_name","","",56,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_ecdsa_curve_name","","",56,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",56,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",56,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",56,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",56,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",56,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",56,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",56,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",56,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",56,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",56,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",56,{"inputs":[],"output":{"name":"signidentity"}}],[11,"descriptor_static","","",56,{"inputs":[{"generics":["signidentity"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"signedidentity"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"signedidentity"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"signedidentity"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"signedidentity"}}],[11,"new","","",57,{"inputs":[],"output":{"name":"signedidentity"}}],[11,"default_instance","","",57,{"inputs":[],"output":{"name":"signedidentity"}}],[11,"clear_address","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"has_address","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_address","","",57,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_address","","",57,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_address","","",57,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_address","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_public_key","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"has_public_key","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_public_key","","",57,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_public_key","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_public_key","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_public_key","","",57,null],[11,"clear_signature","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"has_signature","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_signature","","",57,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_signature","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_signature","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_signature","","",57,null],[11,"is_initialized","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",57,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",57,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",57,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",57,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",57,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",57,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",57,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",57,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",57,{"inputs":[],"output":{"name":"signedidentity"}}],[11,"descriptor_static","","",57,{"inputs":[{"generics":["signedidentity"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"getecdhsessionkey"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"getecdhsessionkey"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"getecdhsessionkey"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"getecdhsessionkey"}}],[11,"new","","",58,{"inputs":[],"output":{"name":"getecdhsessionkey"}}],[11,"default_instance","","",58,{"inputs":[],"output":{"name":"getecdhsessionkey"}}],[11,"clear_identity","","",58,{"inputs":[{"name":"self"}],"output":null}],[11,"has_identity","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_identity","","",58,{"inputs":[{"name":"self"},{"name":"identitytype"}],"output":null}],[11,"mut_identity","","",58,{"inputs":[{"name":"self"}],"output":{"name":"identitytype"}}],[11,"take_identity","","",58,{"inputs":[{"name":"self"}],"output":{"name":"identitytype"}}],[11,"get_identity","","",58,{"inputs":[{"name":"self"}],"output":{"name":"identitytype"}}],[11,"clear_peer_public_key","","",58,{"inputs":[{"name":"self"}],"output":null}],[11,"has_peer_public_key","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_peer_public_key","","",58,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_peer_public_key","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_peer_public_key","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_peer_public_key","","",58,null],[11,"clear_ecdsa_curve_name","","",58,{"inputs":[{"name":"self"}],"output":null}],[11,"has_ecdsa_curve_name","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ecdsa_curve_name","","",58,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_ecdsa_curve_name","","",58,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_ecdsa_curve_name","","",58,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_ecdsa_curve_name","","",58,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",58,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",58,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",58,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",58,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",58,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",58,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",58,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",58,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",58,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",58,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",58,{"inputs":[],"output":{"name":"getecdhsessionkey"}}],[11,"descriptor_static","","",58,{"inputs":[{"generics":["getecdhsessionkey"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",58,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",58,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"ecdhsessionkey"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"ecdhsessionkey"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ecdhsessionkey"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"ecdhsessionkey"}}],[11,"new","","",59,{"inputs":[],"output":{"name":"ecdhsessionkey"}}],[11,"default_instance","","",59,{"inputs":[],"output":{"name":"ecdhsessionkey"}}],[11,"clear_session_key","","",59,{"inputs":[{"name":"self"}],"output":null}],[11,"has_session_key","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_session_key","","",59,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_session_key","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_session_key","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_session_key","","",59,null],[11,"is_initialized","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",59,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",59,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",59,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",59,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",59,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",59,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",59,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",59,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",59,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",59,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",59,{"inputs":[],"output":{"name":"ecdhsessionkey"}}],[11,"descriptor_static","","",59,{"inputs":[{"generics":["ecdhsessionkey"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",59,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"setu2fcounter"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"setu2fcounter"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"setu2fcounter"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"setu2fcounter"}}],[11,"new","","",60,{"inputs":[],"output":{"name":"setu2fcounter"}}],[11,"default_instance","","",60,{"inputs":[],"output":{"name":"setu2fcounter"}}],[11,"clear_u2f_counter","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"has_u2f_counter","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_u2f_counter","","",60,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_u2f_counter","","",60,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",60,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",60,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",60,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",60,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",60,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",60,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",60,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",60,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",60,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",60,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",60,{"inputs":[],"output":{"name":"setu2fcounter"}}],[11,"descriptor_static","","",60,{"inputs":[{"generics":["setu2fcounter"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"firmwareerase"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"firmwareerase"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"firmwareerase"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"firmwareerase"}}],[11,"new","","",61,{"inputs":[],"output":{"name":"firmwareerase"}}],[11,"default_instance","","",61,{"inputs":[],"output":{"name":"firmwareerase"}}],[11,"clear_length","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"has_length","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_length","","",61,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_length","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",61,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",61,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",61,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",61,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",61,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",61,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",61,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",61,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",61,{"inputs":[],"output":{"name":"firmwareerase"}}],[11,"descriptor_static","","",61,{"inputs":[{"generics":["firmwareerase"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"firmwarerequest"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"firmwarerequest"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"firmwarerequest"}}],[11,"default","","",62,{"inputs":[],"output":{"name":"firmwarerequest"}}],[11,"new","","",62,{"inputs":[],"output":{"name":"firmwarerequest"}}],[11,"default_instance","","",62,{"inputs":[],"output":{"name":"firmwarerequest"}}],[11,"clear_offset","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"has_offset","","",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_offset","","",62,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_offset","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_length","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"has_length","","",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_length","","",62,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_length","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",62,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",62,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",62,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",62,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",62,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",62,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",62,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",62,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",62,{"inputs":[],"output":{"name":"firmwarerequest"}}],[11,"descriptor_static","","",62,{"inputs":[{"generics":["firmwarerequest"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",62,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"firmwareupload"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"firmwareupload"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"firmwareupload"}}],[11,"default","","",63,{"inputs":[],"output":{"name":"firmwareupload"}}],[11,"new","","",63,{"inputs":[],"output":{"name":"firmwareupload"}}],[11,"default_instance","","",63,{"inputs":[],"output":{"name":"firmwareupload"}}],[11,"clear_payload","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"has_payload","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_payload","","",63,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_payload","","",63,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_payload","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_payload","","",63,null],[11,"clear_hash","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"has_hash","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_hash","","",63,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_hash","","",63,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_hash","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_hash","","",63,null],[11,"is_initialized","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",63,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",63,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",63,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",63,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",63,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",63,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",63,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",63,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",63,{"inputs":[],"output":{"name":"firmwareupload"}}],[11,"descriptor_static","","",63,{"inputs":[{"generics":["firmwareupload"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",63,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"selftest"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"selftest"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"selftest"}}],[11,"default","","",64,{"inputs":[],"output":{"name":"selftest"}}],[11,"new","","",64,{"inputs":[],"output":{"name":"selftest"}}],[11,"default_instance","","",64,{"inputs":[],"output":{"name":"selftest"}}],[11,"clear_payload","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"has_payload","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_payload","","",64,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_payload","","",64,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_payload","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_payload","","",64,null],[11,"is_initialized","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",64,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",64,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",64,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",64,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",64,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",64,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",64,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",64,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",64,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",64,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",64,{"inputs":[],"output":{"name":"selftest"}}],[11,"descriptor_static","","",64,{"inputs":[{"generics":["selftest"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",64,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"debuglinkdecision"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"debuglinkdecision"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"debuglinkdecision"}}],[11,"default","","",65,{"inputs":[],"output":{"name":"debuglinkdecision"}}],[11,"new","","",65,{"inputs":[],"output":{"name":"debuglinkdecision"}}],[11,"default_instance","","",65,{"inputs":[],"output":{"name":"debuglinkdecision"}}],[11,"clear_yes_no","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"has_yes_no","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_yes_no","","",65,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_yes_no","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",65,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",65,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",65,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",65,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",65,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",65,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",65,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",65,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",65,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",65,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",65,{"inputs":[],"output":{"name":"debuglinkdecision"}}],[11,"descriptor_static","","",65,{"inputs":[{"generics":["debuglinkdecision"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",65,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"debuglinkgetstate"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"debuglinkgetstate"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"debuglinkgetstate"}}],[11,"default","","",66,{"inputs":[],"output":{"name":"debuglinkgetstate"}}],[11,"new","","",66,{"inputs":[],"output":{"name":"debuglinkgetstate"}}],[11,"default_instance","","",66,{"inputs":[],"output":{"name":"debuglinkgetstate"}}],[11,"is_initialized","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",66,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",66,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",66,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",66,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",66,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",66,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",66,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",66,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",66,{"inputs":[],"output":{"name":"debuglinkgetstate"}}],[11,"descriptor_static","","",66,{"inputs":[{"generics":["debuglinkgetstate"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",66,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",66,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"debuglinkstate"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"debuglinkstate"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"debuglinkstate"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"debuglinkstate"}}],[11,"new","","",67,{"inputs":[],"output":{"name":"debuglinkstate"}}],[11,"default_instance","","",67,{"inputs":[],"output":{"name":"debuglinkstate"}}],[11,"clear_layout","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"has_layout","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_layout","","",67,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_layout","","",67,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_layout","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_layout","","",67,null],[11,"clear_pin","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"has_pin","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_pin","","",67,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_pin","","",67,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_pin","","",67,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_pin","","",67,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_matrix","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"has_matrix","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_matrix","","",67,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_matrix","","",67,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_matrix","","",67,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_matrix","","",67,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_mnemonic","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"has_mnemonic","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_mnemonic","","",67,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_mnemonic","","",67,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_mnemonic","","",67,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_mnemonic","","",67,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_node","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"has_node","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_node","","",67,{"inputs":[{"name":"self"},{"name":"hdnodetype"}],"output":null}],[11,"mut_node","","",67,{"inputs":[{"name":"self"}],"output":{"name":"hdnodetype"}}],[11,"take_node","","",67,{"inputs":[{"name":"self"}],"output":{"name":"hdnodetype"}}],[11,"get_node","","",67,{"inputs":[{"name":"self"}],"output":{"name":"hdnodetype"}}],[11,"clear_passphrase_protection","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"has_passphrase_protection","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_passphrase_protection","","",67,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_passphrase_protection","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_reset_word","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"has_reset_word","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_reset_word","","",67,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_reset_word","","",67,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_reset_word","","",67,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_reset_word","","",67,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_reset_entropy","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"has_reset_entropy","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_reset_entropy","","",67,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_reset_entropy","","",67,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_reset_entropy","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_reset_entropy","","",67,null],[11,"clear_recovery_fake_word","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"has_recovery_fake_word","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_recovery_fake_word","","",67,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_recovery_fake_word","","",67,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_recovery_fake_word","","",67,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_recovery_fake_word","","",67,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_recovery_word_pos","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"has_recovery_word_pos","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_recovery_word_pos","","",67,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_recovery_word_pos","","",67,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",67,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",67,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",67,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",67,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",67,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",67,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",67,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",67,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",67,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",67,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",67,{"inputs":[],"output":{"name":"debuglinkstate"}}],[11,"descriptor_static","","",67,{"inputs":[{"generics":["debuglinkstate"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",67,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"debuglinkstop"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"debuglinkstop"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"debuglinkstop"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"debuglinkstop"}}],[11,"new","","",68,{"inputs":[],"output":{"name":"debuglinkstop"}}],[11,"default_instance","","",68,{"inputs":[],"output":{"name":"debuglinkstop"}}],[11,"is_initialized","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",68,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",68,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",68,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",68,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",68,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",68,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",68,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",68,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",68,{"inputs":[],"output":{"name":"debuglinkstop"}}],[11,"descriptor_static","","",68,{"inputs":[{"generics":["debuglinkstop"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",68,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",68,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"debuglinklog"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"debuglinklog"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"debuglinklog"}}],[11,"default","","",69,{"inputs":[],"output":{"name":"debuglinklog"}}],[11,"new","","",69,{"inputs":[],"output":{"name":"debuglinklog"}}],[11,"default_instance","","",69,{"inputs":[],"output":{"name":"debuglinklog"}}],[11,"clear_level","","",69,{"inputs":[{"name":"self"}],"output":null}],[11,"has_level","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_level","","",69,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_level","","",69,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_bucket","","",69,{"inputs":[{"name":"self"}],"output":null}],[11,"has_bucket","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_bucket","","",69,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_bucket","","",69,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_bucket","","",69,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_bucket","","",69,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_text","","",69,{"inputs":[{"name":"self"}],"output":null}],[11,"has_text","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_text","","",69,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_text","","",69,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_text","","",69,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_text","","",69,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",69,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",69,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",69,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",69,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",69,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",69,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",69,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",69,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",69,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",69,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",69,{"inputs":[],"output":{"name":"debuglinklog"}}],[11,"descriptor_static","","",69,{"inputs":[{"generics":["debuglinklog"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",69,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",69,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"debuglinkmemoryread"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"debuglinkmemoryread"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"debuglinkmemoryread"}}],[11,"default","","",70,{"inputs":[],"output":{"name":"debuglinkmemoryread"}}],[11,"new","","",70,{"inputs":[],"output":{"name":"debuglinkmemoryread"}}],[11,"default_instance","","",70,{"inputs":[],"output":{"name":"debuglinkmemoryread"}}],[11,"clear_address","","",70,{"inputs":[{"name":"self"}],"output":null}],[11,"has_address","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_address","","",70,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_address","","",70,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_length","","",70,{"inputs":[{"name":"self"}],"output":null}],[11,"has_length","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_length","","",70,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_length","","",70,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",70,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",70,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",70,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",70,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",70,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",70,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",70,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",70,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",70,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",70,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",70,{"inputs":[],"output":{"name":"debuglinkmemoryread"}}],[11,"descriptor_static","","",70,{"inputs":[{"generics":["debuglinkmemoryread"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",70,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",70,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"debuglinkmemory"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"debuglinkmemory"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"debuglinkmemory"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"debuglinkmemory"}}],[11,"new","","",71,{"inputs":[],"output":{"name":"debuglinkmemory"}}],[11,"default_instance","","",71,{"inputs":[],"output":{"name":"debuglinkmemory"}}],[11,"clear_memory","","",71,{"inputs":[{"name":"self"}],"output":null}],[11,"has_memory","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_memory","","",71,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_memory","","",71,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_memory","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_memory","","",71,null],[11,"is_initialized","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",71,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",71,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",71,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",71,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",71,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",71,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",71,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",71,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",71,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",71,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",71,{"inputs":[],"output":{"name":"debuglinkmemory"}}],[11,"descriptor_static","","",71,{"inputs":[{"generics":["debuglinkmemory"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",71,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",71,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"debuglinkmemorywrite"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"debuglinkmemorywrite"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"debuglinkmemorywrite"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"debuglinkmemorywrite"}}],[11,"new","","",72,{"inputs":[],"output":{"name":"debuglinkmemorywrite"}}],[11,"default_instance","","",72,{"inputs":[],"output":{"name":"debuglinkmemorywrite"}}],[11,"clear_address","","",72,{"inputs":[{"name":"self"}],"output":null}],[11,"has_address","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_address","","",72,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_address","","",72,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_memory","","",72,{"inputs":[{"name":"self"}],"output":null}],[11,"has_memory","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_memory","","",72,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_memory","","",72,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_memory","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_memory","","",72,null],[11,"clear_flash","","",72,{"inputs":[{"name":"self"}],"output":null}],[11,"has_flash","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_flash","","",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_flash","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",72,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",72,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",72,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",72,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",72,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",72,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",72,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",72,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",72,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",72,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",72,{"inputs":[],"output":{"name":"debuglinkmemorywrite"}}],[11,"descriptor_static","","",72,{"inputs":[{"generics":["debuglinkmemorywrite"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",72,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",72,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"debuglinkflasherase"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"debuglinkflasherase"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"debuglinkflasherase"}}],[11,"default","","",73,{"inputs":[],"output":{"name":"debuglinkflasherase"}}],[11,"new","","",73,{"inputs":[],"output":{"name":"debuglinkflasherase"}}],[11,"default_instance","","",73,{"inputs":[],"output":{"name":"debuglinkflasherase"}}],[11,"clear_sector","","",73,{"inputs":[{"name":"self"}],"output":null}],[11,"has_sector","","",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_sector","","",73,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_sector","","",73,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",73,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",73,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",73,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",73,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",73,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",73,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",73,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",73,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",73,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",73,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",73,{"inputs":[],"output":{"name":"debuglinkflasherase"}}],[11,"descriptor_static","","",73,{"inputs":[{"generics":["debuglinkflasherase"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",73,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",73,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"messagetype"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"messagetype"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"value","","",0,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",0,{"inputs":[{"name":"i32"}],"output":{"generics":["messagetype"],"name":"option"}}],[11,"values","","",0,null],[11,"enum_descriptor_static","","",0,{"inputs":[{"generics":["messagetype"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"types","trezor_sys","",null,null],[3,"HDNodeType","trezor_sys::types","",null,null],[3,"HDNodePathType","","",null,null],[3,"CoinType","","",null,null],[3,"MultisigRedeemScriptType","","",null,null],[3,"TxInputType","","",null,null],[3,"TxOutputType","","",null,null],[3,"TxOutputBinType","","",null,null],[3,"TransactionType","","",null,null],[3,"TxRequestDetailsType","","",null,null],[3,"TxRequestSerializedType","","",null,null],[3,"IdentityType","","",null,null],[4,"FailureType","","",null,null],[13,"Failure_UnexpectedMessage","","",74,null],[13,"Failure_ButtonExpected","","",74,null],[13,"Failure_DataError","","",74,null],[13,"Failure_ActionCancelled","","",74,null],[13,"Failure_PinExpected","","",74,null],[13,"Failure_PinCancelled","","",74,null],[13,"Failure_PinInvalid","","",74,null],[13,"Failure_InvalidSignature","","",74,null],[13,"Failure_ProcessError","","",74,null],[13,"Failure_NotEnoughFunds","","",74,null],[13,"Failure_NotInitialized","","",74,null],[13,"Failure_FirmwareError","","",74,null],[4,"OutputScriptType","","",null,null],[13,"PAYTOADDRESS","","",75,null],[13,"PAYTOSCRIPTHASH","","",75,null],[13,"PAYTOMULTISIG","","",75,null],[13,"PAYTOOPRETURN","","",75,null],[13,"PAYTOWITNESS","","",75,null],[13,"PAYTOP2SHWITNESS","","",75,null],[4,"InputScriptType","","",null,null],[13,"SPENDADDRESS","","",76,null],[13,"SPENDMULTISIG","","",76,null],[13,"EXTERNAL","","",76,null],[13,"SPENDWITNESS","","",76,null],[13,"SPENDP2SHWITNESS","","",76,null],[4,"RequestType","","",null,null],[13,"TXINPUT","","",77,null],[13,"TXOUTPUT","","",77,null],[13,"TXMETA","","",77,null],[13,"TXFINISHED","","",77,null],[13,"TXEXTRADATA","","",77,null],[4,"ButtonRequestType","","",null,null],[13,"ButtonRequest_Other","","",78,null],[13,"ButtonRequest_FeeOverThreshold","","",78,null],[13,"ButtonRequest_ConfirmOutput","","",78,null],[13,"ButtonRequest_ResetDevice","","",78,null],[13,"ButtonRequest_ConfirmWord","","",78,null],[13,"ButtonRequest_WipeDevice","","",78,null],[13,"ButtonRequest_ProtectCall","","",78,null],[13,"ButtonRequest_SignTx","","",78,null],[13,"ButtonRequest_FirmwareCheck","","",78,null],[13,"ButtonRequest_Address","","",78,null],[13,"ButtonRequest_PublicKey","","",78,null],[4,"PinMatrixRequestType","","",null,null],[13,"PinMatrixRequestType_Current","","",79,null],[13,"PinMatrixRequestType_NewFirst","","",79,null],[13,"PinMatrixRequestType_NewSecond","","",79,null],[4,"RecoveryDeviceType","","",null,null],[13,"RecoveryDeviceType_ScrambledWords","","",80,null],[13,"RecoveryDeviceType_Matrix","","",80,null],[4,"WordRequestType","","",null,null],[13,"WordRequestType_Plain","","",81,null],[13,"WordRequestType_Matrix9","","",81,null],[13,"WordRequestType_Matrix6","","",81,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[0,"exts","","",null,null],[17,"wire_in","trezor_sys::types::exts","",null,null],[17,"wire_out","","",null,null],[17,"wire_debug_in","","",null,null],[17,"wire_debug_out","","",null,null],[17,"wire_tiny","","",null,null],[17,"wire_bootloader","","",null,null],[11,"eq","trezor_sys::types","",82,{"inputs":[{"name":"self"},{"name":"hdnodetype"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"hdnodetype"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"hdnodetype"}}],[11,"default","","",82,{"inputs":[],"output":{"name":"hdnodetype"}}],[11,"new","","",82,{"inputs":[],"output":{"name":"hdnodetype"}}],[11,"default_instance","","",82,{"inputs":[],"output":{"name":"hdnodetype"}}],[11,"clear_depth","","",82,{"inputs":[{"name":"self"}],"output":null}],[11,"has_depth","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_depth","","",82,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_depth","","",82,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_fingerprint","","",82,{"inputs":[{"name":"self"}],"output":null}],[11,"has_fingerprint","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_fingerprint","","",82,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_fingerprint","","",82,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_child_num","","",82,{"inputs":[{"name":"self"}],"output":null}],[11,"has_child_num","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_child_num","","",82,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_child_num","","",82,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_chain_code","","",82,{"inputs":[{"name":"self"}],"output":null}],[11,"has_chain_code","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_chain_code","","",82,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_chain_code","","",82,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_chain_code","","",82,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_chain_code","","",82,null],[11,"clear_private_key","","",82,{"inputs":[{"name":"self"}],"output":null}],[11,"has_private_key","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_private_key","","",82,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_private_key","","",82,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_private_key","","",82,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_private_key","","",82,null],[11,"clear_public_key","","",82,{"inputs":[{"name":"self"}],"output":null}],[11,"has_public_key","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_public_key","","",82,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_public_key","","",82,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_public_key","","",82,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_public_key","","",82,null],[11,"is_initialized","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",82,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",82,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",82,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",82,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",82,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",82,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",82,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",82,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",82,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",82,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",82,{"inputs":[],"output":{"name":"hdnodetype"}}],[11,"descriptor_static","","",82,{"inputs":[{"generics":["hdnodetype"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",82,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",82,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"hdnodepathtype"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"hdnodepathtype"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"hdnodepathtype"}}],[11,"default","","",83,{"inputs":[],"output":{"name":"hdnodepathtype"}}],[11,"new","","",83,{"inputs":[],"output":{"name":"hdnodepathtype"}}],[11,"default_instance","","",83,{"inputs":[],"output":{"name":"hdnodepathtype"}}],[11,"clear_node","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"has_node","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_node","","",83,{"inputs":[{"name":"self"},{"name":"hdnodetype"}],"output":null}],[11,"mut_node","","",83,{"inputs":[{"name":"self"}],"output":{"name":"hdnodetype"}}],[11,"take_node","","",83,{"inputs":[{"name":"self"}],"output":{"name":"hdnodetype"}}],[11,"get_node","","",83,{"inputs":[{"name":"self"}],"output":{"name":"hdnodetype"}}],[11,"clear_address_n","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"set_address_n","","",83,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"vec"}],"output":null}],[11,"mut_address_n","","",83,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_address_n","","",83,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"vec"}}],[11,"get_address_n","","",83,null],[11,"is_initialized","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",83,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",83,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",83,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",83,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",83,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",83,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",83,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",83,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",83,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",83,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",83,{"inputs":[],"output":{"name":"hdnodepathtype"}}],[11,"descriptor_static","","",83,{"inputs":[{"generics":["hdnodepathtype"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",83,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"cointype"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"cointype"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"cointype"}}],[11,"default","","",84,{"inputs":[],"output":{"name":"cointype"}}],[11,"new","","",84,{"inputs":[],"output":{"name":"cointype"}}],[11,"default_instance","","",84,{"inputs":[],"output":{"name":"cointype"}}],[11,"clear_coin_name","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"has_coin_name","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_coin_name","","",84,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_coin_name","","",84,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_coin_name","","",84,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_coin_name","","",84,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_coin_shortcut","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"has_coin_shortcut","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_coin_shortcut","","",84,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_coin_shortcut","","",84,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_coin_shortcut","","",84,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_coin_shortcut","","",84,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_address_type","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"has_address_type","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_address_type","","",84,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_address_type","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_maxfee_kb","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"has_maxfee_kb","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_maxfee_kb","","",84,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_maxfee_kb","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_address_type_p2sh","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"has_address_type_p2sh","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_address_type_p2sh","","",84,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_address_type_p2sh","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_signed_message_header","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"has_signed_message_header","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_signed_message_header","","",84,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_signed_message_header","","",84,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_signed_message_header","","",84,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_signed_message_header","","",84,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_xpub_magic","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"has_xpub_magic","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_xpub_magic","","",84,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_xpub_magic","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_xprv_magic","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"has_xprv_magic","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_xprv_magic","","",84,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_xprv_magic","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_segwit","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"has_segwit","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_segwit","","",84,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_segwit","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_forkid","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"has_forkid","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_forkid","","",84,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_forkid","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",84,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",84,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",84,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",84,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",84,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",84,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",84,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",84,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",84,{"inputs":[],"output":{"name":"cointype"}}],[11,"descriptor_static","","",84,{"inputs":[{"generics":["cointype"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",84,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"multisigredeemscripttype"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"multisigredeemscripttype"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"multisigredeemscripttype"}}],[11,"default","","",85,{"inputs":[],"output":{"name":"multisigredeemscripttype"}}],[11,"new","","",85,{"inputs":[],"output":{"name":"multisigredeemscripttype"}}],[11,"default_instance","","",85,{"inputs":[],"output":{"name":"multisigredeemscripttype"}}],[11,"clear_pubkeys","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"set_pubkeys","","",85,{"inputs":[{"name":"self"},{"generics":["hdnodepathtype"],"name":"repeatedfield"}],"output":null}],[11,"mut_pubkeys","","",85,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_pubkeys","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["hdnodepathtype"],"name":"repeatedfield"}}],[11,"get_pubkeys","","",85,null],[11,"clear_signatures","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"set_signatures","","",85,{"inputs":[{"name":"self"},{"generics":["vec"],"name":"repeatedfield"}],"output":null}],[11,"mut_signatures","","",85,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_signatures","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"repeatedfield"}}],[11,"get_signatures","","",85,null],[11,"clear_m","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"has_m","","",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_m","","",85,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_m","","",85,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",85,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",85,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",85,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",85,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",85,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",85,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",85,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",85,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",85,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",85,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",85,{"inputs":[],"output":{"name":"multisigredeemscripttype"}}],[11,"descriptor_static","","",85,{"inputs":[{"generics":["multisigredeemscripttype"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",85,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"txinputtype"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"txinputtype"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"txinputtype"}}],[11,"default","","",86,{"inputs":[],"output":{"name":"txinputtype"}}],[11,"new","","",86,{"inputs":[],"output":{"name":"txinputtype"}}],[11,"default_instance","","",86,{"inputs":[],"output":{"name":"txinputtype"}}],[11,"clear_address_n","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"set_address_n","","",86,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"vec"}],"output":null}],[11,"mut_address_n","","",86,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_address_n","","",86,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"vec"}}],[11,"get_address_n","","",86,null],[11,"clear_prev_hash","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"has_prev_hash","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_prev_hash","","",86,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_prev_hash","","",86,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_prev_hash","","",86,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_prev_hash","","",86,null],[11,"clear_prev_index","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"has_prev_index","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_prev_index","","",86,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_prev_index","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_script_sig","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"has_script_sig","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_script_sig","","",86,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_script_sig","","",86,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_script_sig","","",86,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_script_sig","","",86,null],[11,"clear_sequence","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"has_sequence","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_sequence","","",86,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_sequence","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_script_type","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"has_script_type","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_script_type","","",86,{"inputs":[{"name":"self"},{"name":"inputscripttype"}],"output":null}],[11,"get_script_type","","",86,{"inputs":[{"name":"self"}],"output":{"name":"inputscripttype"}}],[11,"clear_multisig","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"has_multisig","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_multisig","","",86,{"inputs":[{"name":"self"},{"name":"multisigredeemscripttype"}],"output":null}],[11,"mut_multisig","","",86,{"inputs":[{"name":"self"}],"output":{"name":"multisigredeemscripttype"}}],[11,"take_multisig","","",86,{"inputs":[{"name":"self"}],"output":{"name":"multisigredeemscripttype"}}],[11,"get_multisig","","",86,{"inputs":[{"name":"self"}],"output":{"name":"multisigredeemscripttype"}}],[11,"clear_amount","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"has_amount","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_amount","","",86,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_amount","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_initialized","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",86,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",86,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",86,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",86,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",86,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",86,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",86,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",86,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",86,{"inputs":[],"output":{"name":"txinputtype"}}],[11,"descriptor_static","","",86,{"inputs":[{"generics":["txinputtype"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",86,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"txoutputtype"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"txoutputtype"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"txoutputtype"}}],[11,"default","","",87,{"inputs":[],"output":{"name":"txoutputtype"}}],[11,"new","","",87,{"inputs":[],"output":{"name":"txoutputtype"}}],[11,"default_instance","","",87,{"inputs":[],"output":{"name":"txoutputtype"}}],[11,"clear_address","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"has_address","","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_address","","",87,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_address","","",87,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_address","","",87,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_address","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_address_n","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"set_address_n","","",87,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"vec"}],"output":null}],[11,"mut_address_n","","",87,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_address_n","","",87,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"vec"}}],[11,"get_address_n","","",87,null],[11,"clear_amount","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"has_amount","","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_amount","","",87,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_amount","","",87,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_script_type","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"has_script_type","","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_script_type","","",87,{"inputs":[{"name":"self"},{"name":"outputscripttype"}],"output":null}],[11,"get_script_type","","",87,{"inputs":[{"name":"self"}],"output":{"name":"outputscripttype"}}],[11,"clear_multisig","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"has_multisig","","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_multisig","","",87,{"inputs":[{"name":"self"},{"name":"multisigredeemscripttype"}],"output":null}],[11,"mut_multisig","","",87,{"inputs":[{"name":"self"}],"output":{"name":"multisigredeemscripttype"}}],[11,"take_multisig","","",87,{"inputs":[{"name":"self"}],"output":{"name":"multisigredeemscripttype"}}],[11,"get_multisig","","",87,{"inputs":[{"name":"self"}],"output":{"name":"multisigredeemscripttype"}}],[11,"clear_op_return_data","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"has_op_return_data","","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_op_return_data","","",87,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_op_return_data","","",87,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_op_return_data","","",87,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_op_return_data","","",87,null],[11,"is_initialized","","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",87,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",87,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",87,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",87,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",87,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",87,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",87,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",87,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",87,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",87,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",87,{"inputs":[],"output":{"name":"txoutputtype"}}],[11,"descriptor_static","","",87,{"inputs":[{"generics":["txoutputtype"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",87,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"txoutputbintype"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"txoutputbintype"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"txoutputbintype"}}],[11,"default","","",88,{"inputs":[],"output":{"name":"txoutputbintype"}}],[11,"new","","",88,{"inputs":[],"output":{"name":"txoutputbintype"}}],[11,"default_instance","","",88,{"inputs":[],"output":{"name":"txoutputbintype"}}],[11,"clear_amount","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"has_amount","","",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_amount","","",88,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_amount","","",88,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_script_pubkey","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"has_script_pubkey","","",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_script_pubkey","","",88,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_script_pubkey","","",88,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_script_pubkey","","",88,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_script_pubkey","","",88,null],[11,"is_initialized","","",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",88,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",88,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",88,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",88,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",88,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",88,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",88,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",88,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",88,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",88,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",88,{"inputs":[],"output":{"name":"txoutputbintype"}}],[11,"descriptor_static","","",88,{"inputs":[{"generics":["txoutputbintype"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",88,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"transactiontype"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"transactiontype"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"transactiontype"}}],[11,"default","","",89,{"inputs":[],"output":{"name":"transactiontype"}}],[11,"new","","",89,{"inputs":[],"output":{"name":"transactiontype"}}],[11,"default_instance","","",89,{"inputs":[],"output":{"name":"transactiontype"}}],[11,"clear_version","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"has_version","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_version","","",89,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_version","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_inputs","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"set_inputs","","",89,{"inputs":[{"name":"self"},{"generics":["txinputtype"],"name":"repeatedfield"}],"output":null}],[11,"mut_inputs","","",89,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_inputs","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["txinputtype"],"name":"repeatedfield"}}],[11,"get_inputs","","",89,null],[11,"clear_bin_outputs","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"set_bin_outputs","","",89,{"inputs":[{"name":"self"},{"generics":["txoutputbintype"],"name":"repeatedfield"}],"output":null}],[11,"mut_bin_outputs","","",89,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_bin_outputs","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["txoutputbintype"],"name":"repeatedfield"}}],[11,"get_bin_outputs","","",89,null],[11,"clear_outputs","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"set_outputs","","",89,{"inputs":[{"name":"self"},{"generics":["txoutputtype"],"name":"repeatedfield"}],"output":null}],[11,"mut_outputs","","",89,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_outputs","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["txoutputtype"],"name":"repeatedfield"}}],[11,"get_outputs","","",89,null],[11,"clear_lock_time","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"has_lock_time","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_lock_time","","",89,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_lock_time","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_inputs_cnt","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"has_inputs_cnt","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_inputs_cnt","","",89,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_inputs_cnt","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_outputs_cnt","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"has_outputs_cnt","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_outputs_cnt","","",89,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_outputs_cnt","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_extra_data","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"has_extra_data","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_extra_data","","",89,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_extra_data","","",89,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_extra_data","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_extra_data","","",89,null],[11,"clear_extra_data_len","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"has_extra_data_len","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_extra_data_len","","",89,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_extra_data_len","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",89,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",89,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",89,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",89,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",89,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",89,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",89,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",89,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",89,{"inputs":[],"output":{"name":"transactiontype"}}],[11,"descriptor_static","","",89,{"inputs":[{"generics":["transactiontype"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",89,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"txrequestdetailstype"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"txrequestdetailstype"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"txrequestdetailstype"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"txrequestdetailstype"}}],[11,"new","","",90,{"inputs":[],"output":{"name":"txrequestdetailstype"}}],[11,"default_instance","","",90,{"inputs":[],"output":{"name":"txrequestdetailstype"}}],[11,"clear_request_index","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"has_request_index","","",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_request_index","","",90,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_request_index","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_tx_hash","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tx_hash","","",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tx_hash","","",90,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_tx_hash","","",90,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_tx_hash","","",90,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_tx_hash","","",90,null],[11,"clear_extra_data_len","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"has_extra_data_len","","",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_extra_data_len","","",90,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_extra_data_len","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_extra_data_offset","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"has_extra_data_offset","","",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_extra_data_offset","","",90,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_extra_data_offset","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",90,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",90,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",90,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",90,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",90,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",90,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",90,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",90,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",90,{"inputs":[],"output":{"name":"txrequestdetailstype"}}],[11,"descriptor_static","","",90,{"inputs":[{"generics":["txrequestdetailstype"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",90,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"txrequestserializedtype"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"txrequestserializedtype"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"txrequestserializedtype"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"txrequestserializedtype"}}],[11,"new","","",91,{"inputs":[],"output":{"name":"txrequestserializedtype"}}],[11,"default_instance","","",91,{"inputs":[],"output":{"name":"txrequestserializedtype"}}],[11,"clear_signature_index","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"has_signature_index","","",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_signature_index","","",91,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_signature_index","","",91,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_signature","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"has_signature","","",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_signature","","",91,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_signature","","",91,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_signature","","",91,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_signature","","",91,null],[11,"clear_serialized_tx","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"has_serialized_tx","","",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_serialized_tx","","",91,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":null}],[11,"mut_serialized_tx","","",91,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_serialized_tx","","",91,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"get_serialized_tx","","",91,null],[11,"is_initialized","","",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",91,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",91,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",91,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",91,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",91,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",91,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",91,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",91,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",91,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",91,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",91,{"inputs":[],"output":{"name":"txrequestserializedtype"}}],[11,"descriptor_static","","",91,{"inputs":[{"generics":["txrequestserializedtype"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",91,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"identitytype"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"identitytype"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"identitytype"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"identitytype"}}],[11,"new","","",92,{"inputs":[],"output":{"name":"identitytype"}}],[11,"default_instance","","",92,{"inputs":[],"output":{"name":"identitytype"}}],[11,"clear_proto","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"has_proto","","",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_proto","","",92,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_proto","","",92,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_proto","","",92,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_proto","","",92,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_user","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"has_user","","",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_user","","",92,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_user","","",92,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_user","","",92,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_user","","",92,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_host","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"has_host","","",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_host","","",92,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_host","","",92,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_host","","",92,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_host","","",92,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_port","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"has_port","","",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_port","","",92,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_port","","",92,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_port","","",92,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_port","","",92,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_path","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"has_path","","",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_path","","",92,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_path","","",92,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_path","","",92,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_path","","",92,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_index","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"has_index","","",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_index","","",92,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_index","","",92,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",92,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",92,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",92,{"inputs":[{"name":"self"},{"name":"codedoutputstream"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",92,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",92,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",92,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",92,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",92,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",92,{"inputs":[{"name":"box"}],"output":{"generics":["any"],"name":"box"}}],[11,"descriptor","","",92,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",92,{"inputs":[],"output":{"name":"identitytype"}}],[11,"descriptor_static","","",92,{"inputs":[{"generics":["identitytype"],"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",92,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"failuretype"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"failuretype"}],"output":{"name":"bool"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",74,null],[11,"value","","",74,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",74,{"inputs":[{"name":"i32"}],"output":{"generics":["failuretype"],"name":"option"}}],[11,"values","","",74,null],[11,"enum_descriptor_static","","",74,{"inputs":[{"generics":["failuretype"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",74,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"outputscripttype"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"outputscripttype"}],"output":{"name":"bool"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",75,null],[11,"value","","",75,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",75,{"inputs":[{"name":"i32"}],"output":{"generics":["outputscripttype"],"name":"option"}}],[11,"values","","",75,null],[11,"enum_descriptor_static","","",75,{"inputs":[{"generics":["outputscripttype"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",75,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"inputscripttype"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"inputscripttype"}],"output":{"name":"bool"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",76,null],[11,"value","","",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",76,{"inputs":[{"name":"i32"}],"output":{"generics":["inputscripttype"],"name":"option"}}],[11,"values","","",76,null],[11,"enum_descriptor_static","","",76,{"inputs":[{"generics":["inputscripttype"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",76,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"requesttype"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"requesttype"}],"output":{"name":"bool"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",77,null],[11,"value","","",77,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",77,{"inputs":[{"name":"i32"}],"output":{"generics":["requesttype"],"name":"option"}}],[11,"values","","",77,null],[11,"enum_descriptor_static","","",77,{"inputs":[{"generics":["requesttype"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",77,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"buttonrequesttype"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"buttonrequesttype"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",78,null],[11,"value","","",78,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",78,{"inputs":[{"name":"i32"}],"output":{"generics":["buttonrequesttype"],"name":"option"}}],[11,"values","","",78,null],[11,"enum_descriptor_static","","",78,{"inputs":[{"generics":["buttonrequesttype"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",78,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"pinmatrixrequesttype"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"pinmatrixrequesttype"}],"output":{"name":"bool"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",79,null],[11,"value","","",79,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",79,{"inputs":[{"name":"i32"}],"output":{"generics":["pinmatrixrequesttype"],"name":"option"}}],[11,"values","","",79,null],[11,"enum_descriptor_static","","",79,{"inputs":[{"generics":["pinmatrixrequesttype"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",79,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"recoverydevicetype"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"recoverydevicetype"}],"output":{"name":"bool"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",80,null],[11,"value","","",80,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",80,{"inputs":[{"name":"i32"}],"output":{"generics":["recoverydevicetype"],"name":"option"}}],[11,"values","","",80,null],[11,"enum_descriptor_static","","",80,{"inputs":[{"generics":["recoverydevicetype"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",80,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"wordrequesttype"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"wordrequesttype"}],"output":{"name":"bool"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"value","","",81,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",81,{"inputs":[{"name":"i32"}],"output":{"generics":["wordrequesttype"],"name":"option"}}],[11,"values","","",81,null],[11,"enum_descriptor_static","","",81,{"inputs":[{"generics":["wordrequesttype"],"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",81,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}]],"paths":[[4,"MessageType"],[3,"Initialize"],[3,"GetFeatures"],[3,"Features"],[3,"ClearSession"],[3,"ApplySettings"],[3,"ApplyFlags"],[3,"ChangePin"],[3,"Ping"],[3,"Success"],[3,"Failure"],[3,"ButtonRequest"],[3,"ButtonAck"],[3,"PinMatrixRequest"],[3,"PinMatrixAck"],[3,"Cancel"],[3,"PassphraseRequest"],[3,"PassphraseAck"],[3,"GetEntropy"],[3,"Entropy"],[3,"GetPublicKey"],[3,"PublicKey"],[3,"GetAddress"],[3,"EthereumGetAddress"],[3,"Address"],[3,"EthereumAddress"],[3,"WipeDevice"],[3,"LoadDevice"],[3,"ResetDevice"],[3,"BackupDevice"],[3,"EntropyRequest"],[3,"EntropyAck"],[3,"RecoveryDevice"],[3,"WordRequest"],[3,"WordAck"],[3,"SignMessage"],[3,"VerifyMessage"],[3,"MessageSignature"],[3,"EncryptMessage"],[3,"EncryptedMessage"],[3,"DecryptMessage"],[3,"DecryptedMessage"],[3,"CipherKeyValue"],[3,"CipheredKeyValue"],[3,"EstimateTxSize"],[3,"TxSize"],[3,"SignTx"],[3,"SimpleSignTx"],[3,"TxRequest"],[3,"TxAck"],[3,"EthereumSignTx"],[3,"EthereumTxRequest"],[3,"EthereumTxAck"],[3,"EthereumSignMessage"],[3,"EthereumVerifyMessage"],[3,"EthereumMessageSignature"],[3,"SignIdentity"],[3,"SignedIdentity"],[3,"GetECDHSessionKey"],[3,"ECDHSessionKey"],[3,"SetU2FCounter"],[3,"FirmwareErase"],[3,"FirmwareRequest"],[3,"FirmwareUpload"],[3,"SelfTest"],[3,"DebugLinkDecision"],[3,"DebugLinkGetState"],[3,"DebugLinkState"],[3,"DebugLinkStop"],[3,"DebugLinkLog"],[3,"DebugLinkMemoryRead"],[3,"DebugLinkMemory"],[3,"DebugLinkMemoryWrite"],[3,"DebugLinkFlashErase"],[4,"FailureType"],[4,"OutputScriptType"],[4,"InputScriptType"],[4,"RequestType"],[4,"ButtonRequestType"],[4,"PinMatrixRequestType"],[4,"RecoveryDeviceType"],[4,"WordRequestType"],[3,"HDNodeType"],[3,"HDNodePathType"],[3,"CoinType"],[3,"MultisigRedeemScriptType"],[3,"TxInputType"],[3,"TxOutputType"],[3,"TxOutputBinType"],[3,"TransactionType"],[3,"TxRequestDetailsType"],[3,"TxRequestSerializedType"],[3,"IdentityType"]]};
searchIndex["triehash"] = {"doc":"Generetes trie root.","items":[[5,"ordered_trie_root","triehash","Generates a trie root hash for a vector of values",null,null],[5,"trie_root","","Generates a trie root hash for a vector of key-value tuples",null,null],[5,"sec_trie_root","","Generates a key-hashed (secure) trie root hash for a vector of key-value tuples.",null,null]],"paths":[]};
searchIndex["triehash_ethereum"] = {"doc":"Generates Keccak-flavoured trie roots.","items":[[5,"trie_root","triehash_ethereum","Generates a trie root hash for a vector of key-value tuples",null,{"inputs":[{"name":"i"}],"output":{"name":"h256"}}],[5,"sec_trie_root","","Generates a key-hashed (secure) trie root hash for a vector of key-value tuples.",null,{"inputs":[{"name":"i"}],"output":{"name":"h256"}}],[5,"ordered_trie_root","","Generates a trie root hash for a vector of values",null,{"inputs":[{"name":"i"}],"output":{"name":"h256"}}]],"paths":[]};
searchIndex["ucd_util"] = {"doc":"The `ucd-util` crate contains a smattering of utility functions that implement various algorithms specified by Unicode. There is no specific goal for exhaustiveness. Instead, implementations should be added on an as-needed basis.","items":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"hangul_full_canonical_decomposition","","Return the full canonical decomposition of the given precomposed Hangul codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"ideograph_name","","Return the character name of the given ideograph codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"character_name_normalize","","Normalize the given character name in place according to UAX44-LM2.",null,{"inputs":[{"name":"string"}],"output":null}],[5,"symbolic_name_normalize","","Normalize the given symbolic name in place according to UAX44-LM3.",null,{"inputs":[{"name":"string"}],"output":null}],[5,"canonical_property_name","","Find the canonical property name for the given normalized property name.",null,{"inputs":[{"name":"propertytable"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[5,"property_values","","Find the set of possible property values for a given property.",null,{"inputs":[{"name":"propertyvaluetable"},{"name":"str"}],"output":{"generics":["propertyvalues"],"name":"option"}}],[5,"canonical_property_value","","Find the canonical property value for the given normalized property value.",null,{"inputs":[{"name":"propertyvalues"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[6,"PropertyTable","","The type of a property name table.",null,null],[6,"PropertyValueTable","","Type of a property value table.",null,null],[6,"PropertyValues","","A mapping of property values for a specific property.",null,null],[17,"RANGE_HANGUL_SYLLABLE","","A set of ranges that corresponds to the set of all Hangul syllable codepoints.",null,null],[17,"RANGE_IDEOGRAPH","","A set of ranges that corresponds to the set of all ideograph codepoints.",null,null]],"paths":[]};
searchIndex["uint"] = {"doc":"Efficient large, fixed-size big integers and hashes.","items":[[4,"FromDecStrErr","uint","Conversion from decimal string error",null,null],[13,"InvalidCharacter","","Char not from range 0-9",0,null],[13,"InvalidLength","","Value does not fit into type",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"fromdecstrerr"}],"output":{"name":"bool"}}],[14,"construct_uint","","",null,null]],"paths":[[4,"FromDecStrErr"]]};
searchIndex["unexpected"] = {"doc":"Error utils","items":[[3,"Mismatch","unexpected","Error indicating an expected value was not found.",null,null],[12,"expected","","Value expected.",0,null],[12,"found","","Value found.",0,null],[3,"OutOfBounds","","Error indicating value found is outside of a valid range.",null,null],[12,"min","","Minimum allowed value.",1,null],[12,"max","","Maximum allowed value.",1,null],[12,"found","","Value found.",1,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"mismatch"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"mismatch"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mismatch"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"outofbounds"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"outofbounds"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"outofbounds"}}],[11,"map","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"outofbounds"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Mismatch"],[3,"OutOfBounds"]]};
searchIndex["unicode_segmentation"] = {"doc":"Iterators which split strings on Grapheme Cluster or Word boundaries, according to the Unicode Standard Annex #29 rules.","items":[[3,"Graphemes","unicode_segmentation","External iterator for a string's grapheme clusters.",null,null],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets.",null,null],[3,"GraphemeCursor","","Cursor-based segmenter for grapheme clusters.",null,null],[3,"UWordBounds","","External iterator for a string's word boundaries.",null,null],[3,"UWordBoundIndices","","External iterator for word boundaries and byte offsets.",null,null],[3,"UnicodeWords","","An iterator over the substrings of a string which, after splitting the string on word boundaries, contain any characters with the Alphabetic property, or with General_Category=Number.",null,null],[4,"GraphemeIncomplete","","An error return indicating that not enough content was available in the provided chunk to satisfy the query, and that more content must be provided.",null,null],[13,"PreContext","","More pre-context is needed. The caller should call `provide_context` with a chunk ending at the offset given, then retry the query. This will only be returned if the `chunk_start` parameter is nonzero.",0,null],[13,"PrevChunk","","When requesting `prev_boundary`, the cursor is moving past the beginning of the current chunk, so the chunk before that is requested. This will only be returned if the `chunk_start` parameter is nonzero.",0,null],[13,"NextChunk","","When requesting `next_boundary`, the cursor is moving past the end of the current chunk, so the chunk after that is requested. This will only be returned if the chunk ends before the `len` parameter provided on creation of the cursor.",0,null],[13,"InvalidOffset","","An error returned when the chunk given does not contain the cursor position.",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"graphemeindices"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"graphemes"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"size_hint","","",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"graphemecursor"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"graphemeincomplete"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"graphemeincomplete"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new cursor. The string and initial offset are given at creation time, but the contents of the string are not. The `is_extended` parameter controls whether extended grapheme clusters are selected.",3,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"name":"graphemecursor"}}],[11,"set_cursor","","Set the cursor to a new location in the same string.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"cur_cursor","","The current offset of the cursor. Equal to the last value provided to `new()` or `set_cursor()`, or returned from `next_boundary()` or `prev_boundary()`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"provide_context","","Provide additional pre-context when it is needed to decide a boundary. The end of the chunk must coincide with the value given in the `GraphemeIncomplete::PreContext` request.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":null}],[11,"is_boundary","","Determine whether the current cursor location is a grapheme cluster boundary. Only a part of the string need be supplied. If `chunk_start` is nonzero or the length of `chunk` is not equal to `len` on creation, then this method may return `GraphemeIncomplete::PreContext`. The caller should then call `provide_context` with the requested chunk, then retry calling this method.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["bool","graphemeincomplete"],"name":"result"}}],[11,"next_boundary","","Find the next boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::NextChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk following the one given, then retry.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["option","graphemeincomplete"],"name":"result"}}],[11,"prev_boundary","","Find the previous boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::PrevChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk preceding the one given, then retry.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["option","graphemeincomplete"],"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"uwordbounds"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"uwordboundindices"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[17,"UNICODE_VERSION","","The version of Unicode that this version of unicode-segmentation is based on.",null,null],[8,"UnicodeSegmentation","","Methods for segmenting strings according to Unicode Standard Annex #29.",null,null],[10,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"graphemes"}}],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their byte offsets. See `graphemes()` for more information.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"graphemeindices"}}],[10,"unicode_words","","Returns an iterator over the words of `self`, separated on UAX#29 word boundaries.",7,{"inputs":[{"name":"self"}],"output":{"name":"unicodewords"}}],[10,"split_word_bounds","","Returns an iterator over substrings of `self` separated on UAX#29 word boundaries.",7,{"inputs":[{"name":"self"}],"output":{"name":"uwordbounds"}}],[10,"split_word_bound_indices","","Returns an iterator over substrings of `self`, split on UAX#29 word boundaries, and their offsets. See `split_word_bounds()` for more information.",7,{"inputs":[{"name":"self"}],"output":{"name":"uwordboundindices"}}]],"paths":[[4,"GraphemeIncomplete"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"GraphemeCursor"],[3,"UnicodeWords"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[8,"UnicodeSegmentation"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["untrusted"] = {"doc":"untrusted.rs: Safe, fast, zero-panic, zero-crashing, zero-allocation parsing of untrusted inputs in Rust.","items":[[3,"Input","untrusted","A wrapper around `&'a [u8]` that helps in writing panic-free code.",null,null],[3,"Reader","","A read-only, forward-only* cursor into the data in an `Input`.",null,null],[3,"Mark","","An index into the already-parsed input of a `Reader`.",null,null],[3,"EndOfInput","","The error type used to indicate the end of the input was reached before the operation could be completed.",null,null],[5,"read_all_optional","","Calls `read` with the given input as a `Reader`, ensuring that `read` consumed the entire input. When `input` is `None`, `read` will be called with `None`.",null,{"inputs":[{"generics":["input"],"name":"option"},{"name":"e"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"bool"}}],[11,"from","","Construct a new `Input` for the given input `bytes`.",0,null],[11,"is_empty","","Returns `true` if the input is empty and false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the input.",0,null],[11,"len","","Returns the length of the `Input`.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"read_all","","Calls `read` with the given input as a `Reader`, ensuring that `read` consumed the entire input. If `read` does not consume the entire input, `incomplete_read` is returned.",0,{"inputs":[{"name":"self"},{"name":"e"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_all_mut","","Like `read_all`, except taking an `FnMut`.",0,{"inputs":[{"name":"self"},{"name":"e"},{"name":"f"}],"output":{"name":"result"}}],[11,"as_slice_less_safe","","Access the input as a slice so it can be processed by functions that are not written using the Input/Reader framework.",0,null],[11,"eq","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new Reader for the given input. Use `read_all`, `read_all_mut`, or `read_all_optional` instead of `Reader::new` whenever possible.",1,{"inputs":[{"name":"input"}],"output":{"name":"reader"}}],[11,"at_end","","Returns `true` if the reader is at the end of the input, and `false` otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_input_between_marks","","Returns an `Input` for already-parsed input that has had its boundaries marked using `mark`.",1,{"inputs":[{"name":"self"},{"name":"mark"},{"name":"mark"}],"output":{"generics":["input","endofinput"],"name":"result"}}],[11,"mark","","Return the current position of the `Reader` for future use in a call to `get_input_between_marks`.",1,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"peek","","Returns `true` if there is at least one more byte in the input and that byte is equal to `b`, and false otherwise.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"read_byte","","Reads the next input byte.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8","endofinput"],"name":"result"}}],[11,"skip","","Skips `num_bytes` of the input.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["endofinput"],"name":"result"}}],[11,"skip_and_get_input","","Skips `num_bytes` of the input, returning the skipped input as an `Input`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["input","endofinput"],"name":"result"}}],[11,"skip_to_end","","Skips the reader to the end of the input, returning the skipped input as an `Input`.",1,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"endofinput"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"endofinput"}],"output":{"name":"bool"}}]],"paths":[[3,"Input"],[3,"Reader"],[3,"EndOfInput"]]};
searchIndex["using_queue"] = {"doc":"Queue-like datastructure including notion of usage.","items":[[3,"UsingQueue","using_queue","Special queue-like datastructure that includes the notion of usage to avoid items that were queued but never used from making it into the queue.",null,null],[4,"GetAction","","Take an item or just clone it?",null,null],[13,"Take","","Remove the item, faster but you can't get it back.",0,null],[13,"Clone","","Clone the item, slower but you can get it again.",0,null],[11,"new","","Create a new struct with a maximum size of `max_size`.",1,{"inputs":[{"name":"usize"}],"output":{"name":"usingqueue"}}],[11,"peek_last_ref","","Return a reference to the item at the top of the queue (or `None` if the queue is empty); it doesn't constitute noting that the item is used.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"use_last_ref","","Return a reference to the item at the top of the queue (or `None` if the queue is empty); this constitutes using the item and will remain in the queue for at least another `max_size` invocations of `push()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","Place an item on the end of the queue. The previously `push()`ed item will be removed if `use_last_ref()` since it was `push()`ed.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"is_in_use","","Is there anything in the queue currently?",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Clears everything; the queue is entirely reset.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"get_used_if","","Fork-function for `take_used_if` and `clone_used_if`.",1,{"inputs":[{"name":"self"},{"name":"getaction"},{"name":"p"}],"output":{"name":"option"}}],[11,"pop_if","","Returns the most recently pushed block if `f` returns `true` with a reference to it as a parameter, otherwise `None`. Will not destroy a block if a reference to it has previously been returned by `use_last_ref`, but rather clone it.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}]],"paths":[[4,"GetAction"],[3,"UsingQueue"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utf8sequence"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8range"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["vm"] = {"doc":"Virtual machines support library","items":[[3,"ActionParams","vm","Action (call/create) input params. Everything else should be specified in Externalities.",null,null],[12,"code_address","","Address of currently executed code.",0,null],[12,"code_hash","","Hash of currently executed code.",0,null],[12,"address","","Receive address. Usually equal to code_address, except when called using CALLCODE.",0,null],[12,"sender","","Sender of current part of the transaction.",0,null],[12,"origin","","Transaction initiator.",0,null],[12,"gas","","Gas paid up front for transaction execution",0,null],[12,"gas_price","","Gas price.",0,null],[12,"value","","Transaction value.",0,null],[12,"code","","Code being executed.",0,null],[12,"data","","Input data.",0,null],[12,"call_type","","Type of call",0,null],[12,"params_type","","Param types encoding",0,null],[3,"EnvInfo","","Information concerning the execution environment for a message-call/contract-creation.",null,null],[12,"number","","The block number.",1,null],[12,"author","","The block author.",1,null],[12,"timestamp","","The block timestamp.",1,null],[12,"difficulty","","The block difficulty.",1,null],[12,"gas_limit","","The block gas limit.",1,null],[12,"last_hashes","","The last 256 block hashes.",1,null],[12,"gas_used","","The gas used.",1,null],[3,"Schedule","","Definition of the cost schedule and other parameterisations for the EVM.",null,null],[12,"exceptional_failed_code_deposit","","Does it support exceptional failed code deposit",2,null],[12,"have_delegate_call","","Does it have a delegate cal",2,null],[12,"have_create2","","Does it have a CREATE_P2SH instruction",2,null],[12,"have_revert","","Does it have a REVERT instruction",2,null],[12,"stack_limit","","VM stack limit",2,null],[12,"max_depth","","Max number of nested calls/creates",2,null],[12,"tier_step_gas","","Gas prices for instructions in all tiers",2,null],[12,"exp_gas","","Gas price for `EXP` opcode",2,null],[12,"exp_byte_gas","","Additional gas for `EXP` opcode for each byte of exponent",2,null],[12,"sha3_gas","","Gas price for `SHA3` opcode",2,null],[12,"sha3_word_gas","","Additional gas for `SHA3` opcode for each word of hashed memory",2,null],[12,"sload_gas","","Gas price for loading from storage",2,null],[12,"sstore_set_gas","","Gas price for setting new value to storage (`storage==0`, `new!=0`)",2,null],[12,"sstore_reset_gas","","Gas price for altering value in storage",2,null],[12,"sstore_refund_gas","","Gas refund for `SSTORE` clearing (when `storage!=0`, `new==0`)",2,null],[12,"jumpdest_gas","","Gas price for `JUMPDEST` opcode",2,null],[12,"log_gas","","Gas price for `LOG*`",2,null],[12,"log_data_gas","","Additional gas for data in `LOG*`",2,null],[12,"log_topic_gas","","Additional gas for each topic in `LOG*`",2,null],[12,"create_gas","","Gas price for `CREATE` opcode",2,null],[12,"call_gas","","Gas price for `*CALL*` opcodes",2,null],[12,"call_stipend","","Stipend for transfer for `CALL|CALLCODE` opcode when `value>0`",2,null],[12,"call_value_transfer_gas","","Additional gas required for value transfer (`CALL|CALLCODE`)",2,null],[12,"call_new_account_gas","","Additional gas for creating new account (`CALL|CALLCODE`)",2,null],[12,"suicide_refund_gas","","Refund for SUICIDE",2,null],[12,"memory_gas","","Gas for used memory",2,null],[12,"quad_coeff_div","","Coefficient used to convert memory size to gas price for memory",2,null],[12,"create_data_gas","","Cost for contract length when executing `CREATE`",2,null],[12,"create_data_limit","","Maximum code size when creating a contract.",2,null],[12,"tx_gas","","Transaction cost",2,null],[12,"tx_create_gas","","`CREATE` transaction cost",2,null],[12,"tx_data_zero_gas","","Additional cost for empty data transaction",2,null],[12,"tx_data_non_zero_gas","","Aditional cost for non-empty data transaction",2,null],[12,"copy_gas","","Gas price for copying memory",2,null],[12,"extcodesize_gas","","Price of EXTCODESIZE",2,null],[12,"extcodecopy_base_gas","","Base price of EXTCODECOPY",2,null],[12,"balance_gas","","Price of BALANCE",2,null],[12,"suicide_gas","","Price of SUICIDE",2,null],[12,"suicide_to_new_account_cost","","Amount of additional gas to pay when SUICIDE credits a non-existant account",2,null],[12,"sub_gas_cap_divisor","","If Some(x): let limit = GAS * (x - 1) / x; let CALL's gas = min(requested, limit). let CREATE's gas = limit. If None: let CALL's gas = (requested > GAS ? [OOG] : GAS). let CREATE's gas = GAS",2,null],[12,"no_empty","","Don't ever make empty accounts; contracts start with nonce=1. Also, don't charge 25k when sending/suicide zero-value.",2,null],[12,"kill_empty","","Kill empty accounts if touched.",2,null],[12,"blockhash_gas","","Blockhash instruction gas cost.",2,null],[12,"have_static_call","","Static Call opcode enabled.",2,null],[12,"have_return_data","","RETURNDATA and RETURNDATASIZE opcodes enabled.",2,null],[12,"have_bitwise_shifting","","SHL, SHR, SAR opcodes enabled.",2,null],[12,"kill_dust","","Kill basic accounts below this balance if touched.",2,null],[12,"eip86","","Enable EIP-86 rules",2,null],[12,"wasm","","Wasm extra schedule settings, if wasm activated",2,null],[3,"WasmCosts","","Wasm cost table",null,null],[12,"regular","","Default opcode cost",3,null],[12,"div","","Div operations multiplier.",3,null],[12,"mul","","Div operations multiplier.",3,null],[12,"mem","","Memory (load/store) operations multiplier.",3,null],[12,"static_u256","","General static query of U256 value from env-info",3,null],[12,"static_address","","General static query of Address value from env-info",3,null],[12,"initial_mem","","Memory stipend. Amount of free memory (in 64kb pages) each contract can use for stack.",3,null],[12,"grow_mem","","Grow memory cost, per page (64kb)",3,null],[12,"memcpy","","Memory copy cost, per byte",3,null],[12,"max_stack_height","","Max stack height (native WebAssembly stack limiter)",3,null],[12,"opcodes_mul","","Cost of wasm opcode is calculated as TABLE_ENTRY_COST * `opcodes_mul` / `opcodes_div`",3,null],[12,"opcodes_div","","Cost of wasm opcode is calculated as TABLE_ENTRY_COST * `opcodes_mul` / `opcodes_div`",3,null],[3,"ReturnData","","Return data buffer. Holds memory from a previous call and a slice into that memory.",null,null],[4,"ActionValue","","Transaction value",null,null],[13,"Transfer","","Value that should be transfered",4,null],[13,"Apparent","","Apparent value for transaction (not transfered)",4,null],[4,"ParamsType","","Type of the way parameters encoded",null,null],[13,"Embedded","","Parameters are included in code",5,null],[13,"Separate","","Parameters are passed in data section",5,null],[4,"CallType","","The type of the call-like instruction.",null,null],[13,"None","","Not a CALL.",6,null],[13,"Call","","CALL.",6,null],[13,"CallCode","","CALLCODE.",6,null],[13,"DelegateCall","","DELEGATECALL.",6,null],[13,"StaticCall","","STATICCALL",6,null],[4,"CleanDustMode","","Dust accounts cleanup mode.",null,null],[13,"Off","","Dust cleanup is disabled.",7,null],[13,"BasicOnly","","Basic dust accounts will be removed.",7,null],[13,"WithCodeAndStorage","","Basic and contract dust accounts will be removed.",7,null],[4,"MessageCallResult","","Result of externalities call function.",null,null],[13,"Success","","Returned when message call was successfull. Contains gas left and output data.",8,null],[13,"Failed","","Returned when message call failed. VM doesn't have to know the reason.",8,null],[13,"Reverted","","Returned when message call was reverted. Contains gas left and output data.",8,null],[4,"ContractCreateResult","","Result of externalities create function.",null,null],[13,"Created","","Returned when creation was successfull. Contains an address of newly created contract and gas left.",9,null],[13,"Failed","","Returned when contract creation failed. VM doesn't have to know the reason.",9,null],[13,"Reverted","","Reverted with REVERT.",9,null],[4,"CreateContractAddress","","Specifies how an address is calculated for a new contract.",null,null],[13,"FromSenderAndNonce","","Address is calculated from nonce and sender. Pre EIP-86 (Metropolis)",10,null],[13,"FromCodeHash","","Address is calculated from code hash. Default since EIP-86",10,null],[13,"FromSenderAndCodeHash","","Address is calculated from code hash and sender. Used by CREATE_P2SH instruction.",10,null],[4,"GasLeft","","Gas Left: either it is a known value, or it needs to be computed by processing a return instruction.",null,null],[13,"Known","","Known gas left",11,null],[13,"NeedsReturn","","Return or Revert instruction must be processed.",11,null],[12,"gas_left","vm::GasLeft","Amount of gas left.",11,null],[12,"data","","Return data buffer.",11,null],[12,"apply_state","","Apply or revert state changes on revert.",11,null],[4,"Error","vm","VM errors.",null,null],[13,"OutOfGas","","`OutOfGas` is returned when transaction execution runs out of gas. The state should be reverted to the state from before the transaction execution. But it does not mean that transaction was invalid. Balance still should be transfered and nonce should be increased.",12,null],[13,"BadJumpDestination","","`BadJumpDestination` is returned when execution tried to move to position that wasn't marked with JUMPDEST instruction",12,null],[12,"destination","vm::Error","Position the code tried to jump to.",12,null],[13,"BadInstruction","vm","`BadInstructions` is returned when given instruction is not supported",12,null],[12,"instruction","vm::Error","Unrecognized opcode",12,null],[13,"StackUnderflow","vm","`StackUnderflow` when there is not enough stack elements to execute instruction",12,null],[12,"instruction","vm::Error","Invoked instruction",12,null],[12,"wanted","","How many stack elements was requested by instruction",12,null],[12,"on_stack","","How many elements were on stack",12,null],[13,"OutOfStack","vm","When execution would exceed defined Stack Limit",12,null],[12,"instruction","vm::Error","Invoked instruction",12,null],[12,"wanted","","How many stack elements instruction wanted to push",12,null],[12,"limit","","What was the stack limit",12,null],[13,"BuiltIn","vm","Built-in contract failed on given input",12,null],[13,"MutableCallInStaticContext","","When execution tries to modify the state in static context",12,null],[13,"Internal","","Likely to cause consensus issues.",12,null],[13,"Wasm","","Wasm runtime error",12,null],[13,"OutOfBounds","","Out of bounds access in RETURNDATACOPY.",12,null],[13,"Reverted","","Execution has been reverted with REVERT.",12,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"actionvalue"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"paramstype"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"value","","Returns action value as U256.",4,{"inputs":[{"name":"self"}],"output":{"name":"u256"}}],[11,"transfer","","Returns the transfer action value of the U256-convertable raw value",4,{"inputs":[{"name":"t"}],"output":{"name":"actionvalue"}}],[11,"apparent","","Returns the apparent action value of the U256-convertable raw value",4,{"inputs":[{"name":"t"}],"output":{"name":"actionvalue"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"actionparams"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Returns default ActionParams initialized with zeros",0,{"inputs":[],"output":{"name":"actionparams"}}],[11,"from","","",0,{"inputs":[{"name":"transaction"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"calltype"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"calltype"}}],[11,"rlp_append","","",6,{"inputs":[{"name":"self"},{"name":"rlpstream"}],"output":null}],[11,"decode","","",6,{"inputs":[{"name":"rlp"}],"output":{"generics":["decodererror"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"envinfo"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"env"}],"output":{"name":"self"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"cleandustmode"}],"output":{"name":"bool"}}],[11,"new_frontier","","Schedule for the Frontier-era of the Ethereum main net.",2,{"inputs":[],"output":{"name":"schedule"}}],[11,"new_homestead","","Schedule for the Homestead-era of the Ethereum main net.",2,{"inputs":[],"output":{"name":"schedule"}}],[11,"new_post_eip150","","Schedule for the post-EIP-150-era of the Ethereum main net.",2,{"inputs":[{"name":"usize"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"schedule"}}],[11,"new_byzantium","","Schedule for the Byzantium fork of the Ethereum main net.",2,{"inputs":[],"output":{"name":"schedule"}}],[11,"new_constantinople","","Schedule for the Constantinople fork of the Ethereum main net.",2,{"inputs":[],"output":{"name":"schedule"}}],[11,"wasm","","Returns wasm schedule",2,{"inputs":[{"name":"self"}],"output":{"name":"wasmcosts"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"createcontractaddress"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"createcontractaddress"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",13,null],[11,"empty","","Create empty `ReturnData`.",13,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create `ReturnData` from give buffer and slice.",13,{"inputs":[{"generics":["u8"],"name":"vec"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from","","",12,{"inputs":[{"generics":["trieerror"],"name":"box"}],"output":{"name":"self"}}],[11,"from","","",12,{"inputs":[{"name":"trieerror"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"tests","","",null,null],[3,"FakeLogEntry","vm::tests","",null,null],[12,"topics","","",14,null],[12,"data","","",14,null],[3,"FakeCall","","",null,null],[12,"call_type","","",15,null],[12,"gas","","",15,null],[12,"sender_address","","",15,null],[12,"receive_address","","",15,null],[12,"value","","",15,null],[12,"data","","",15,null],[12,"code_address","","",15,null],[3,"FakeExt","","Fake externalities test structure.",null,null],[12,"store","","",16,null],[12,"suicides","","",16,null],[12,"calls","","",16,null],[12,"sstore_clears","","",16,null],[12,"depth","","",16,null],[12,"blockhashes","","",16,null],[12,"codes","","",16,null],[12,"logs","","",16,null],[12,"info","","",16,null],[12,"schedule","","",16,null],[12,"balances","","",16,null],[12,"tracing","","",16,null],[12,"is_static","","",16,null],[4,"FakeCallType","","",null,null],[13,"Call","","",17,null],[13,"Create","","",17,null],[5,"test_finalize","","",null,{"inputs":[{"generics":["gasleft"],"name":"result"}],"output":{"generics":["u256"],"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"fakecalltype"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"fakecall"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"fakecall"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"fakeext"}}],[11,"new","","New fake externalities",16,{"inputs":[],"output":{"name":"self"}}],[11,"new_byzantium","","New fake externalities with byzantium schedule rules",16,{"inputs":[],"output":{"name":"self"}}],[11,"new_constantinople","","New fake externalities with constantinople schedule rules",16,{"inputs":[],"output":{"name":"self"}}],[11,"with_wasm","","Alter fake externalities to allow wasm",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"storage_at","","",16,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["h256"],"name":"result"}}],[11,"set_storage","","",16,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"h256"}],"output":{"name":"result"}}],[11,"exists","","",16,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["bool"],"name":"result"}}],[11,"exists_and_not_null","","",16,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["bool"],"name":"result"}}],[11,"origin_balance","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["u256"],"name":"result"}}],[11,"balance","","",16,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["u256"],"name":"result"}}],[11,"blockhash","","",16,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"h256"}}],[11,"create","","",16,null],[11,"call","","",16,null],[11,"extcode","","",16,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["arc"],"name":"result"}}],[11,"extcodesize","","",16,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["usize"],"name":"result"}}],[11,"log","","",16,null],[11,"ret","","",16,{"inputs":[{"name":"self"},{"name":"u256"},{"name":"returndata"},{"name":"bool"}],"output":{"generics":["u256"],"name":"result"}}],[11,"suicide","","",16,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"result"}}],[11,"schedule","","",16,{"inputs":[{"name":"self"}],"output":{"name":"schedule"}}],[11,"env_info","","",16,{"inputs":[{"name":"self"}],"output":{"name":"envinfo"}}],[11,"depth","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_static","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inc_sstore_clears","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"trace_next_instruction","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"},{"name":"u256"}],"output":{"name":"bool"}}],[6,"LastHashes","vm","Simple vector of hashes, should be at most 256 items large, can be smaller if being used for a block whose number is less than 257.",null,null],[6,"Result","","",null,null],[8,"Ext","","Externalities interface for EVMs",null,null],[10,"storage_at","","Returns a value for given key.",18,{"inputs":[{"name":"self"},{"name":"h256"}],"output":{"generics":["h256"],"name":"result"}}],[10,"set_storage","","Stores a value for given key.",18,{"inputs":[{"name":"self"},{"name":"h256"},{"name":"h256"}],"output":{"name":"result"}}],[10,"exists","","Determine whether an account exists.",18,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["bool"],"name":"result"}}],[10,"exists_and_not_null","","Determine whether an account exists and is not null (zero balance/nonce, no code).",18,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["bool"],"name":"result"}}],[10,"origin_balance","","Balance of the origin account.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u256"],"name":"result"}}],[10,"balance","","Returns address balance.",18,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["u256"],"name":"result"}}],[10,"blockhash","","Returns the hash of one of the 256 most recent complete blocks.",18,{"inputs":[{"name":"self"},{"name":"u256"}],"output":{"name":"h256"}}],[10,"create","","Creates new contract.",18,null],[10,"call","","Message call.",18,null],[10,"extcode","","Returns code at given address",18,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["arc"],"name":"result"}}],[10,"extcodesize","","Returns code size at given address",18,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"generics":["usize"],"name":"result"}}],[10,"log","","Creates log entry with given topics and data",18,null],[10,"ret","","Should be called when transaction calls `RETURN` opcode. Returns gas_left if cost of returning the data is not too high.",18,{"inputs":[{"name":"self"},{"name":"u256"},{"name":"returndata"},{"name":"bool"}],"output":{"generics":["u256"],"name":"result"}}],[10,"suicide","","Should be called when contract commits suicide. Address to which funds should be refunded.",18,{"inputs":[{"name":"self"},{"name":"address"}],"output":{"name":"result"}}],[10,"schedule","","Returns schedule.",18,{"inputs":[{"name":"self"}],"output":{"name":"schedule"}}],[10,"env_info","","Returns environment info.",18,{"inputs":[{"name":"self"}],"output":{"name":"envinfo"}}],[10,"depth","","Returns current depth of execution.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"inc_sstore_clears","","Increments sstore refunds count by 1.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"trace_next_instruction","","Decide if any more operations should be traced. Passthrough for the VM trace.",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"trace_prepare_execute","","Prepare to trace an operation. Passthrough for the VM trace.",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"},{"name":"u256"}],"output":null}],[11,"trace_executed","","Trace the finalised execution of a single instruction.",18,null],[10,"is_static","","Check if running in static context.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Vm","","Virtual Machine interface",null,null],[10,"exec","","This function should be used to execute transaction. It returns either an error, a known amount of gas left, or parameters to be used to compute the final gas left.",19,{"inputs":[{"name":"self"},{"name":"actionparams"},{"name":"ext"}],"output":{"generics":["gasleft"],"name":"result"}}],[11,"trace_next_instruction","","Decide if any more operations should be traced. Passthrough for the VM trace.",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"},{"name":"u256"}],"output":{"name":"bool"}}],[11,"trace_prepare_execute","","Prepare to trace an operation. Passthrough for the VM trace.",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"},{"name":"u256"}],"output":null}],[11,"trace_executed","","Trace the finalised execution of a single instruction.",18,null]],"paths":[[3,"ActionParams"],[3,"EnvInfo"],[3,"Schedule"],[3,"WasmCosts"],[4,"ActionValue"],[4,"ParamsType"],[4,"CallType"],[4,"CleanDustMode"],[4,"MessageCallResult"],[4,"ContractCreateResult"],[4,"CreateContractAddress"],[4,"GasLeft"],[4,"Error"],[3,"ReturnData"],[3,"FakeLogEntry"],[3,"FakeCall"],[3,"FakeExt"],[4,"FakeCallType"],[8,"Ext"],[8,"Vm"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["wait_timeout"] = {"doc":"A crate to wait on a child process with a particular timeout.","items":[[3,"ExitStatus","wait_timeout","Exit status from a child process.",null,null],[8,"ChildExt","","Extension methods for the standard `std::process::Child` type.",null,null],[10,"wait_timeout","","Wait for this child to exit, timing out after `ms` milliseconds have elapsed.",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["option"],"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"exitstatus"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"success","","Returns whether this exit status represents a successful execution.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"code","","Returns the code associated with the child's exit event.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"unix_signal","","Returns the Unix signal which terminated this process.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"ChildExt"],[3,"ExitStatus"]]};
searchIndex["wasm"] = {"doc":"Wasm Interpreter","items":[[3,"WasmInterpreter","wasm","Wasm interpreter instance",null,null],[4,"Error","","Wrapped interpreter error",null,null],[13,"Interpreter","","",0,null],[13,"Trap","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"interpretererror"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"trap"}],"output":{"name":"self"}}],[11,"exec","","",1,{"inputs":[{"name":"self"},{"name":"actionparams"},{"name":"ext"}],"output":{"generics":["gasleft"],"name":"result"}}]],"paths":[[4,"Error"],[3,"WasmInterpreter"]]};
searchIndex["wasmi"] = {"doc":"wasmi","items":[[3,"Trap","wasmi","Error type which can thrown by wasm code or by host environment.",null,null],[3,"MemoryInstance","","Runtime representation of a linear memory (or `memory` for short).",null,null],[3,"MemoryRef","","Reference to a memory (See [`MemoryInstance`] for details).",null,null],[3,"TableInstance","","Runtime representation of a table.",null,null],[3,"TableRef","","Reference to a table (See [`TableInstance`] for details).",null,null],[3,"NopExternals","","Implementation of [`Externals`] that just traps on [`invoke_index`].",null,null],[3,"RuntimeArgs","","Wrapper around slice of [`RuntimeValue`] for using it as an argument list conveniently.",null,null],[3,"ImportsBuilder","","Convenience builder of [`ImportResolver`].",null,null],[3,"ModuleInstance","","A module instance is the runtime representation of a [module][`Module`].",null,null],[3,"ModuleRef","","Reference to a [`ModuleInstance`].",null,null],[3,"NotStartedModuleRef","","Mostly instantiated [`ModuleRef`].",null,null],[3,"GlobalInstance","","Runtime representation of a global variable (or `global` for short).",null,null],[3,"GlobalRef","","Reference to a global variable (See [`GlobalInstance`] for details).",null,null],[3,"FuncInstance","","Runtime representation of a function.",null,null],[3,"FuncRef","","Reference to a function (See [`FuncInstance`] for details).",null,null],[3,"Signature","","Signature of a [function].",null,null],[3,"GlobalDescriptor","","Description of a global variable.",null,null],[3,"TableDescriptor","","Description of a table.",null,null],[3,"MemoryDescriptor","","Description of a linear memory.",null,null],[3,"Module","","Deserialized module prepared for instantiation.",null,null],[4,"TrapKind","","Error type which can thrown by wasm code or by host environment.",null,null],[13,"Unreachable","","Wasm code executed `unreachable` opcode.",0,null],[13,"MemoryAccessOutOfBounds","","Attempt to load or store at the address which lies outside of bounds of the memory.",0,null],[13,"TableAccessOutOfBounds","","Attempt to access table element at index which lies outside of bounds.",0,null],[13,"ElemUninitialized","","Attempt to access table element which is uninitialized (i.e. `None`).",0,null],[13,"DivisionByZero","","Attempt to divide by zero.",0,null],[13,"InvalidConversionToInt","","Attempt to make a conversion to an int failed.",0,null],[13,"StackOverflow","","Stack overflow.",0,null],[13,"UnexpectedSignature","","Attempt to invoke a function with mismatching signature.",0,null],[13,"Host","","Error specified by the host.",0,null],[4,"Error","","Internal interpreter error.",null,null],[13,"Validation","","Module validation error. Might occur only at load time.",1,null],[13,"Instantiation","","Error while instantiating a module. Might occur when provided with incorrect exports (i.e. linkage failure).",1,null],[13,"Function","","Function-level error.",1,null],[13,"Table","","Table-level error.",1,null],[13,"Memory","","Memory-level error.",1,null],[13,"Global","","Global-level error.",1,null],[13,"Value","","Value-level error.",1,null],[13,"Trap","","Trap.",1,null],[13,"Host","","Custom embedder error.",1,null],[4,"RuntimeValue","","Runtime representation of a value.",null,null],[13,"I32","","Value of 32-bit signed or unsigned integer.",2,null],[13,"I64","","Value of 64-bit signed or unsigned integer.",2,null],[13,"F32","","Value of 32-bit IEEE 754-2008 floating point number.",2,null],[13,"F64","","Value of 64-bit IEEE 754-2008 floating point number.",2,null],[4,"ExternVal","","An external value is the runtime representation of an entity that can be imported or exported.",null,null],[13,"Func","","[Function][`FuncInstance`].",3,null],[13,"Table","","[Table][`TableInstance`].",3,null],[13,"Memory","","[Memory][`MemoryInstance`].",3,null],[13,"Global","","[Global][`GlobalInstance`].",3,null],[4,"ValueType","","Type of a value.",null,null],[13,"I32","","32-bit signed or unsigned integer.",4,null],[13,"I64","","64-bit signed or unsigned integer.",4,null],[13,"F32","","32-bit IEEE 754-2008 floating point number.",4,null],[13,"F64","","64-bit IEEE 754-2008 floating point number.",4,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"memoryref"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"memoryinstance"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"alloc","","Allocate a memory instance.",6,{"inputs":[{"name":"pages"},{"generics":["pages"],"name":"option"}],"output":{"generics":["memoryref","error"],"name":"result"}}],[11,"initial","","Returns number of pages this `MemoryInstance` was created with.",6,{"inputs":[{"name":"self"}],"output":{"name":"pages"}}],[11,"maximum","","Returns maximum amount of pages this `MemoryInstance` can grow to.",6,{"inputs":[{"name":"self"}],"output":{"generics":["pages"],"name":"option"}}],[11,"current_size","","Returns current linear memory size.",6,{"inputs":[{"name":"self"}],"output":{"name":"pages"}}],[11,"get","","Copy data from memory at given offset.",6,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"usize"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"get_into","","Copy data from given offset in the memory into `target` slice.",6,null],[11,"set","","Copy data in the memory at given offset.",6,null],[11,"grow","","Increases the size of the linear memory by given number of pages. Returns previous memory size if succeeds.",6,{"inputs":[{"name":"self"},{"name":"pages"}],"output":{"generics":["pages","error"],"name":"result"}}],[11,"copy","","Copy contents of one memory region to another.",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"copy_nonoverlapping","","Copy contents of one memory region to another (non-overlapping version).",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"clear","","Fill the memory region with the specified value.",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"zero","","Fill the specified memory region with zeroes.",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"with_direct_access","","Provides direct access to the underlying memory buffer.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_direct_access_mut","","Provides direct mutable access to the underlying memory buffer.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"moduleref"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"moduleinstance"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_func","","Get underlying function reference if this `ExternVal` contains a function, or `None` if it is some other kind.",3,{"inputs":[{"name":"self"}],"output":{"generics":["funcref"],"name":"option"}}],[11,"as_table","","Get underlying table reference if this `ExternVal` contains a table, or `None` if it is some other kind.",3,{"inputs":[{"name":"self"}],"output":{"generics":["tableref"],"name":"option"}}],[11,"as_memory","","Get underlying memory reference if this `ExternVal` contains a memory, or `None` if it is some other kind.",3,{"inputs":[{"name":"self"}],"output":{"generics":["memoryref"],"name":"option"}}],[11,"as_global","","Get underlying global variable reference if this `ExternVal` contains a global, or `None` if it is some other kind.",3,{"inputs":[{"name":"self"}],"output":{"generics":["globalref"],"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_externvals","","Instantiate a module with given [external values][ExternVal] as imports.",8,{"inputs":[{"name":"module"},{"name":"i"}],"output":{"generics":["notstartedmoduleref","error"],"name":"result"}}],[11,"new","","Instantiate a [module][`Module`].",8,{"inputs":[{"name":"module"},{"name":"i"}],"output":{"generics":["notstartedmoduleref","error"],"name":"result"}}],[11,"invoke_export","","Invoke exported function by a name.",8,null],[11,"export_by_name","","Find export by a name.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["externval"],"name":"option"}}],[11,"not_started_instance","","Returns not fully initialized instance.",9,{"inputs":[{"name":"self"}],"output":{"name":"moduleref"}}],[11,"run_start","","Executes `start` function (if any) and returns fully instantiated module.",9,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"generics":["moduleref","trap"],"name":"result"}}],[11,"assert_no_start","","Returns fully instantiated module without running `start` function.",9,{"inputs":[{"name":"self"}],"output":{"name":"moduleref"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"tableref"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"tableinstance"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"alloc","","Allocate a table instance.",11,{"inputs":[{"name":"u32"},{"generics":["u32"],"name":"option"}],"output":{"generics":["tableref","error"],"name":"result"}}],[11,"initial_size","","Returns size this table was created with.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"maximum_size","","Returns maximum size `TableInstance` can grow to.",11,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"current_size","","Returns current size of the table.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"grow","","Increases the size of the table by given number of elements.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"get","","Get the specific value in the table",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"set","","Set the table element to the specified function.",11,{"inputs":[{"name":"self"},{"name":"u32"},{"generics":["funcref"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"runtimevalue"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"runtimevalue"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"runtimevalue"}],"output":{"name":"bool"}}],[11,"default","","Creates new default value of given type.",2,{"inputs":[{"name":"valuetype"}],"output":{"name":"self"}}],[11,"decode_f32","","Creates new value by interpreting passed u32 as f32.",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"decode_f64","","Creates new value by interpreting passed u64 as f64.",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"value_type","","Get variable type for this value.",2,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"try_into","","Returns `T` if this particular [`RuntimeValue`] contains appropriate type.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,null],[11,"as_ref","","",12,null],[11,"nth_checked","","Extract argument by index `idx`.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["trap"],"name":"result"}}],[11,"nth_value_checked","","Extract argument as a [`RuntimeValue`] by index `idx`.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["runtimevalue","trap"],"name":"result"}}],[11,"nth","","Extract argument by index `idx`.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"len","","Total number of arguments",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"invoke_index","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"runtimeargs"}],"output":{"generics":["option","trap"],"name":"result"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Create an empty `ImportsBuilder`.",14,{"inputs":[],"output":{"name":"importsbuilder"}}],[11,"with_resolver","","Register an resolver by a name.",14,{"inputs":[{"name":"self"},{"name":"n"},{"name":"moduleimportresolver"}],"output":{"name":"self"}}],[11,"push_resolver","","Register an resolver by a name.",14,{"inputs":[{"name":"self"},{"name":"n"},{"name":"moduleimportresolver"}],"output":null}],[11,"resolve_func","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"signature"}],"output":{"generics":["funcref","error"],"name":"result"}}],[11,"resolve_global","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"globaldescriptor"}],"output":{"generics":["globalref","error"],"name":"result"}}],[11,"resolve_memory","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"memorydescriptor"}],"output":{"generics":["memoryref","error"],"name":"result"}}],[11,"resolve_table","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"tabledescriptor"}],"output":{"generics":["tableref","error"],"name":"result"}}],[11,"resolve_func","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"signature"}],"output":{"generics":["funcref","error"],"name":"result"}}],[11,"resolve_global","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"globaldescriptor"}],"output":{"generics":["globalref","error"],"name":"result"}}],[11,"resolve_memory","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"memorydescriptor"}],"output":{"generics":["memoryref","error"],"name":"result"}}],[11,"resolve_table","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"tabledescriptor"}],"output":{"generics":["tableref","error"],"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"globalref"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"globalinstance"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"alloc","","Allocate a global variable instance.",16,{"inputs":[{"name":"runtimevalue"},{"name":"bool"}],"output":{"name":"globalref"}}],[11,"set","","Change the value of this global variable.",16,{"inputs":[{"name":"self"},{"name":"runtimevalue"}],"output":{"generics":["error"],"name":"result"}}],[11,"get","","Get the value of this global variable.",16,{"inputs":[{"name":"self"}],"output":{"name":"runtimevalue"}}],[11,"is_mutable","","Returns if this global variable is mutable.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"value_type","","Returns value type of this global variable.",16,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"funcref"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"funcinstance"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"alloc_host","","Allocate a function instance for a host function.",18,{"inputs":[{"name":"signature"},{"name":"usize"}],"output":{"name":"funcref"}}],[11,"signature","","Returns [signature] of this function instance.",18,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"invoke","","Invoke this function.",18,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"signature"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"bool"}}],[11,"new","","Creates new signature with givens parameter types and optional return type.",19,{"inputs":[{"name":"c"},{"generics":["valuetype"],"name":"option"}],"output":{"name":"signature"}}],[11,"params","","Returns parameter types of this signature.",19,null],[11,"return_type","","Returns return type of this signature.",19,{"inputs":[{"name":"self"}],"output":{"generics":["valuetype"],"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"value_type","","Returns [`ValueType`] of the requested global.",20,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"is_mutable","","Returns whether the requested global mutable.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"initial","","Returns initial size of the requested table.",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"maximum","","Returns maximum size of the requested table.",21,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"initial","","Returns initial size (in pages) of the requested memory.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"maximum","","Returns maximum size (in pages) of the requested memory.",22,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[0,"memory_units","","WebAssembly-specific sizes and units.",null,null],[3,"Bytes","wasmi::memory_units","Memory size specified in bytes.",null,null],[12,"0","","",23,null],[8,"ByteSize","","A trait defining the size, in bytes, of one unit of `Self`.",null,null],[10,"byte_size","","The size, in bytes, of a single unit of `Self`.",24,{"inputs":[],"output":{"name":"bytes"}}],[8,"RoundUpTo","","A trait defining round up conversion between various memory units.",null,null],[10,"round_up_to","","Returns minimum number of `T` to fit amount of space occupied by `self`.",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[5,"size_of","","Returns the size of a type in [`Bytes`].",null,{"inputs":[],"output":{"name":"bytes"}}],[17,"LINEAR_MEMORY_PAGE_SIZE","wasmi","Size of a page of [linear memory][`MemoryInstance`] - 64KiB.",null,null],[8,"FromRuntimeValue","","Trait for creating value from a [`RuntimeValue`].",null,null],[10,"from_runtime_value","","Create a value of type `Self` from a given [`RuntimeValue`].",26,{"inputs":[{"name":"runtimevalue"}],"output":{"name":"option"}}],[8,"Externals","","Trait that allows to implement host functions.",null,null],[10,"invoke_index","","Perform invoke of a host function by specified `index`.",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"runtimeargs"}],"output":{"generics":["option","trap"],"name":"result"}}],[8,"HostError","","Trait that allows the host to return custom error.",null,null],[8,"ModuleImportResolver","","Version of [`ImportResolver`] specialized for a single module.",null,null],[11,"resolve_func","","Resolve a function.",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"signature"}],"output":{"generics":["funcref","error"],"name":"result"}}],[11,"resolve_global","","Resolve a global variable.",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"globaldescriptor"}],"output":{"generics":["globalref","error"],"name":"result"}}],[11,"resolve_memory","","Resolve a memory.",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"memorydescriptor"}],"output":{"generics":["memoryref","error"],"name":"result"}}],[11,"resolve_table","","Resolve a table.",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"tabledescriptor"}],"output":{"generics":["tableref","error"],"name":"result"}}],[8,"ImportResolver","","Resolver of a module's dependencies.",null,null],[10,"resolve_func","","Resolve a function.",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"signature"}],"output":{"generics":["funcref","error"],"name":"result"}}],[10,"resolve_global","","Resolve a global variable.",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"globaldescriptor"}],"output":{"generics":["globalref","error"],"name":"result"}}],[10,"resolve_memory","","Resolve a memory.",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"memorydescriptor"}],"output":{"generics":["memoryref","error"],"name":"result"}}],[10,"resolve_table","","Resolve a table.",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"tabledescriptor"}],"output":{"generics":["tableref","error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create new trap.",30,{"inputs":[{"name":"trapkind"}],"output":{"name":"trap"}}],[11,"kind","","Returns kind of this trap.",30,{"inputs":[{"name":"self"}],"output":{"name":"trapkind"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_host_error","","Returns [`HostError`] if this `Error` represents some host error.",1,{"inputs":[{"name":"self"}],"output":{"generics":["hosterror"],"name":"option"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"u"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"u"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"trap"}],"output":{"name":"error"}}],[11,"from","","",30,{"inputs":[{"name":"trapkind"}],"output":{"name":"trap"}}],[11,"from_parity_wasm_module","","Create `Module` from `parity_wasm::elements::Module`.",31,{"inputs":[{"name":"module"}],"output":{"generics":["module","error"],"name":"result"}}],[11,"deny_floating_point","","Fail if the module contains any floating-point operations",31,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_buffer","","Create `Module` from a given buffer.",31,{"inputs":[{"name":"b"}],"output":{"generics":["module","error"],"name":"result"}}],[11,"eq","wasmi::memory_units","",23,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"add","","",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bytes"}}],[11,"div","","",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bytes"}}],[11,"from","","",23,{"inputs":[{"name":"pages"}],"output":{"name":"bytes"}}],[11,"from","","",23,{"inputs":[{"name":"pages"}],"output":{"name":"bytes"}}],[11,"from","","",23,{"inputs":[{"name":"words"}],"output":{"name":"bytes"}}],[11,"from","","",23,{"inputs":[{"name":"words"}],"output":{"name":"bytes"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",23,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",23,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",23,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",23,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"cmp","","",23,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"mul","","",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bytes"}}],[11,"byte_size","","",23,{"inputs":[],"output":{"name":"bytes"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"sub","","",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bytes"}}],[11,"downcast_ref","wasmi","Attempt to downcast this `HostError` to a concrete type by reference.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Attempt to downcast this `HostError` to a concrete type by mutable reference.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resolve_func","","Resolve a function.",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"signature"}],"output":{"generics":["funcref","error"],"name":"result"}}],[11,"resolve_global","","Resolve a global variable.",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"globaldescriptor"}],"output":{"generics":["globalref","error"],"name":"result"}}],[11,"resolve_memory","","Resolve a memory.",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"memorydescriptor"}],"output":{"generics":["memoryref","error"],"name":"result"}}],[11,"resolve_table","","Resolve a table.",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"tabledescriptor"}],"output":{"generics":["tableref","error"],"name":"result"}}]],"paths":[[4,"TrapKind"],[4,"Error"],[4,"RuntimeValue"],[4,"ExternVal"],[4,"ValueType"],[3,"MemoryRef"],[3,"MemoryInstance"],[3,"ModuleRef"],[3,"ModuleInstance"],[3,"NotStartedModuleRef"],[3,"TableRef"],[3,"TableInstance"],[3,"RuntimeArgs"],[3,"NopExternals"],[3,"ImportsBuilder"],[3,"GlobalRef"],[3,"GlobalInstance"],[3,"FuncRef"],[3,"FuncInstance"],[3,"Signature"],[3,"GlobalDescriptor"],[3,"TableDescriptor"],[3,"MemoryDescriptor"],[3,"Bytes"],[8,"ByteSize"],[8,"RoundUpTo"],[8,"FromRuntimeValue"],[8,"Externals"],[8,"ModuleImportResolver"],[8,"ImportResolver"],[3,"Trap"],[3,"Module"],[8,"HostError"]]};
searchIndex["xdg"] = {"doc":"","items":[[3,"BaseDirectories","xdg","BaseDirectories allows to look up paths to configuration, data, cache and runtime files in well-known locations according to the [X Desktop Group Base Directory specification][xdg-basedir]. [xdg-basedir]: http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html",null,null],[3,"BaseDirectoriesError","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"basedirectories"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Reads the process environment, determines the XDG base directories, and returns a value that can be used for lookup. The following environment variables are examined:",0,{"inputs":[],"output":{"generics":["basedirectories","basedirectorieserror"],"name":"result"}}],[11,"with_prefix","","Same as `new()`, but `prefix` is implicitly prepended to every path that is looked up.",0,{"inputs":[{"name":"p"}],"output":{"generics":["basedirectories","basedirectorieserror"],"name":"result"}}],[11,"with_profile","","Same as `with_prefix()`, with `profile` also implicitly prepended to every path that is looked up, but only for user-specific directories.",0,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"generics":["basedirectories","basedirectorieserror"],"name":"result"}}],[11,"has_runtime_directory","","Returns `true` if `XDG_RUNTIME_DIR` is available, `false` otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"place_config_file","","Given a relative path `path`, returns an absolute path in `XDG_CONFIG_HOME` where a configuration file may be stored. Leading directories in the returned path are pre-created; if that is not possible, an error is returned.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"place_data_file","","Like `place_config_file()`, but for a data file in `XDG_DATA_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"place_cache_file","","Like `place_config_file()`, but for a cache file in `XDG_CACHE_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"place_runtime_file","","Like `place_config_file()`, but for a runtime file in `XDG_RUNTIME_DIR`. If `XDG_RUNTIME_DIR` is not available, returns an error.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"find_config_file","","Given a relative path `path`, returns an absolute path to an existing configuration file, or `None`. Searches `XDG_CONFIG_HOME` and then `XDG_CONFIG_DIRS`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[11,"find_data_file","","Given a relative path `path`, returns an absolute path to an existing configuration file, or `None`. Searches `XDG_DATA_HOME` and then `XDG_DATA_DIRS`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[11,"find_cache_file","","Given a relative path `path`, returns an absolute path to an existing configuration file, or `None`. Searches `XDG_CACHE_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[11,"find_runtime_file","","Given a relative path `path`, returns an absolute path to an existing runtime file, or `None`. Searches `XDG_RUNTIME_DIR`. If `XDG_RUNTIME_DIR` is not available, returns `None`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"option"}}],[11,"create_config_directory","","Given a relative path `path`, returns an absolute path to a configuration directory in `XDG_CONFIG_HOME`. The directory and all directories leading to it are created if they did not exist; if that is not possible, an error is returned.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"create_data_directory","","Like `create_config_directory()`, but for a data directory in `XDG_DATA_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"create_cache_directory","","Like `create_config_directory()`, but for a cache directory in `XDG_CACHE_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"create_runtime_directory","","Like `create_config_directory()`, but for a runtime directory in `XDG_RUNTIME_DIR`. If `XDG_RUNTIME_DIR` is not available, returns an error.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"list_config_files","","Given a relative path `path`, list absolute paths to all files in directories with path `path` in `XDG_CONFIG_HOME` and `XDG_CONFIG_DIRS`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"vec"}}],[11,"list_config_files_once","","Like `list_config_files`, but only the first occurence of every distinct filename is returned.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"vec"}}],[11,"list_data_files","","Given a relative path `path`, lists absolute paths to all files in directories with path `path` in `XDG_DATA_HOME` and `XDG_DATA_DIRS`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"vec"}}],[11,"list_data_files_once","","Like `list_data_files`, but only the first occurence of every distinct filename is returned.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"vec"}}],[11,"list_cache_files","","Given a relative path `path`, lists absolute paths to all files in directories with path `path` in `XDG_CACHE_HOME`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"vec"}}],[11,"list_runtime_files","","Given a relative path `path`, lists absolute paths to all files in directories with path `path` in `XDG_RUNTIME_DIR`. If `XDG_RUNTIME_DIR` is not available, returns an empty `Vec`.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["pathbuf"],"name":"vec"}}],[11,"get_data_home","","Returns the user-specific data directory (set by `XDG_DATA_HOME`).",0,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"get_config_home","","Returns the user-specific configuration directory (set by `XDG_CONFIG_HOME`).",0,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"get_cache_home","","Returns the user-specific directory for non-essential (cached) data (set by `XDG_CACHE_HOME`).",0,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"get_data_dirs","","Returns a preference ordered (preferred to less preferred) list of supplementary data directories, ordered by preference (set by `XDG_DATA_DIRS`).",0,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"vec"}}],[11,"get_config_dirs","","Returns a preference ordered (preferred to less preferred) list of supplementary configuration directories (set by `XDG_CONFIG_DIRS`).",0,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"vec"}}]],"paths":[[3,"BaseDirectories"],[3,"BaseDirectoriesError"]]};
initSearch(searchIndex);
