initSidebarItems({"enum":[["CreateContractAddress","Specifies how an address is calculated for a new contract."]],"macro":[["view",""]],"mod":[["account_provider","Account management."],["block","Base data structure of this module is `Block`."],["client","Blockchain database client."],["db","Database utilities and definitions."],["encoded","Lazily-decoded owning views of RLP-encoded blockchain objects. These views are meant to contain trusted data -- without encoding errors or inconsistencies."],["engines","Consensus engine specification and basic implementations."],["error","General error types for use in ethcore."],["ethereum","Ethereum protocol module."],["executed","Transaction execution format module."],["executive","Transaction Execution environment."],["header","Block header."],["machine","Ethereum-like state machine definition."],["miner","Miner module Keeps track of transactions and currently sealed pending block."],["pod_state","State of all accounts in the system expressed in Plain Old Data."],["snapshot","Snapshot creation, restoration, and network service."],["spec","Blockchain params."],["state","A mutable state representation suitable to execute transactions. Generic over a `Backend`. Deals with `Account`s. Unconfirmed sub-states are managed with `checkpoint`s which may be canonicalized or rolled back."],["state_db","State database abstraction. For more info, see the doc for `StateDB`"],["test_helpers","Set of different helpers for client tests"],["trace","Tracing"],["verification","Block verification utilities."],["views","Block oriented views onto rlp."]],"trait":[["BlockChainDB","Database backing `BlockChain`."],["BlockChainDBHandler","Generic database handler. This trait contains one function `open`. When called, it opens database with a predefined config."]]});