initSidebarItems({"enum":[["BlockStatus","General block status"],["ChainMessageType","Messages to broadcast via chain"],["ChainRouteType","Route type to indicate whether it is enacted or retracted."],["ClientIoMessage","Message type for external and internal events"],["DatabaseCompactionProfile","Client state db compaction profile"],["EachBlockWith","Used for generating test client blocks."],["Error","Client configuration errors."],["EvmTestError","EVM test Error."],["Mode","Operating mode for the client."],["StateOrBlock","State information to be used during client query"],["TransactResult","A result of applying transaction to the state."],["VMType","Type of EVM to use."]],"mod":[["registry",""]],"struct":[["BlockChainCacheSize","Represents blockchain's in-memory cache size in bytes."],["BlockChainConfig","Blockchain configuration."],["BlockChainInfo","Information about the blockchain gathered together."],["BlockQueueInfo","Verification queue status"],["CallAnalytics","Options concerning what analytics we run on the call."],["ChainRoute","A complete chain enacted retracted route."],["Client","Blockchain database client backed by a persistent database. Owns and manages a blockchain and a block queue. Call `import_block()` to import a block asynchronously; `flush_queue()` flushes the queue."],["ClientConfig","Client configuration. Includes configs for all sub-systems."],["ClientReport","Report on the status of a client."],["EnvInfo","Information concerning the execution environment for a message-call/contract-creation."],["EvmTestClient","Simplified, single-block EVM test client."],["PruningInfo","Client pruning info. See module-level docs for more details."],["TestBlockChainClient","Test client."],["TraceFilter","Easy to use trace filter."]],"trait":[["AccountData","Provides methods to access account info"],["Balance","Provides `balance` and `latest_balance` methods"],["BlockChain","Provides various blockchain information, like block header, chain state etc."],["BlockChainClient","Blockchain database client. Owns and manages a blockchain and a block queue."],["BlockInfo","Provides various information on a block by it's ID"],["BlockProducer","Provides methods used for sealing new state"],["BroadcastProposalBlock","Provides `broadcast_proposal_block` method"],["Call","Provides `call` and `call_many` methods"],["CallContract","Provides `call_contract` method"],["ChainInfo","Provides `chain_info` method"],["ChainNotify","Represents what has to be handled by actor listening to chain events"],["EngineClient","Client facilities used by internally sealing Engines."],["EngineInfo","Provides `engine` method"],["ImportBlock","Provides methods to import block into blockchain"],["ImportSealedBlock","Provides `import_sealed_block` method"],["IoClient","IO operations that should off-load heavy work to another thread."],["Nonce","Provides `nonce` and `latest_nonce` methods"],["PrepareOpenBlock","Provides `prepare_open_block` method"],["ProvingBlockChainClient","Extended client interface for providing proofs of the state."],["RegistryInfo","Provides information on a blockchain service and it's registry"],["ReopenBlock","Provides `reopen_block` method"],["ScheduleInfo","Provides `latest_schedule` method"],["SealedBlockImporter","Provides methods to import sealed block and broadcast a block proposal"],["StateClient","Provides methods to access chain state"],["TransactionInfo","Provides various information on a transaction by it's ID"]],"type":[["LastHashes","Simple vector of hashes, should be at most 256 items large, can be smaller if being used for a block whose number is less than 257."]]});